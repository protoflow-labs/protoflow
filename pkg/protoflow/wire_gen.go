// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package protoflow

import (
	"github.com/protoflow-labs/protoflow/gen"
	"github.com/protoflow-labs/protoflow/pkg/api"
	"github.com/protoflow-labs/protoflow/pkg/bucket"
	"github.com/protoflow-labs/protoflow/pkg/config"
	"github.com/protoflow-labs/protoflow/pkg/db"
	"github.com/protoflow-labs/protoflow/pkg/generate"
	"github.com/protoflow-labs/protoflow/pkg/project"
	"github.com/protoflow-labs/protoflow/pkg/store"
	"github.com/protoflow-labs/protoflow/pkg/workflow"
)

// Injectors from wire.go:

// TODO breadchris should not need a bucket config, should be able to pass config in-memory
func Wire(cacheConfig bucket.Config, defaultProject *gen.Project) (*Protoflow, error) {
	localBucket, err := bucket.NewUserCache(cacheConfig)
	if err != nil {
		return nil, err
	}
	provider, err := config.NewProvider(localBucket)
	if err != nil {
		return nil, err
	}
	apiConfig, err := api.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewGormDB(dbConfig, localBucket)
	if err != nil {
		return nil, err
	}
	projectStore, err := store.NewDBStore(gormDB)
	if err != nil {
		return nil, err
	}
	workflowManager := workflow.NewWorkflowManager()
	managerBuilder := workflow.NewManagerBuilder(workflowManager)
	service, err := project.NewService(projectStore, localBucket, defaultProject, managerBuilder, workflowManager)
	if err != nil {
		return nil, err
	}
	generateConfig, err := generate.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	generateService, err := generate.NewService(generateConfig, projectStore)
	if err != nil {
		return nil, err
	}
	httpServer, err := api.NewHTTPServer(apiConfig, service, generateService)
	if err != nil {
		return nil, err
	}
	protoflow := New(httpServer, service, projectStore)
	return protoflow, nil
}
