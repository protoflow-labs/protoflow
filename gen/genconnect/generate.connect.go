// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: generate.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/protoflow-labs/protoflow/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GenerateServiceName is the fully-qualified name of the GenerateService service.
	GenerateServiceName = "generate.GenerateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GenerateServiceGenerateProcedure is the fully-qualified name of the GenerateService's Generate
	// RPC.
	GenerateServiceGenerateProcedure = "/generate.GenerateService/Generate"
	// GenerateServiceGenerateImplementationProcedure is the fully-qualified name of the
	// GenerateService's GenerateImplementation RPC.
	GenerateServiceGenerateImplementationProcedure = "/generate.GenerateService/GenerateImplementation"
	// GenerateServiceInferNodeTypeProcedure is the fully-qualified name of the GenerateService's
	// InferNodeType RPC.
	GenerateServiceInferNodeTypeProcedure = "/generate.GenerateService/InferNodeType"
)

// GenerateServiceClient is a client for the generate.GenerateService service.
type GenerateServiceClient interface {
	Generate(context.Context, *connect_go.Request[gen.GenerateRequest]) (*connect_go.Response[gen.GenerateResponse], error)
	GenerateImplementation(context.Context, *connect_go.Request[gen.GenerateImplementationRequest]) (*connect_go.Response[gen.GenerateImplementationResponse], error)
	InferNodeType(context.Context, *connect_go.Request[gen.InferNodeTypeRequest]) (*connect_go.Response[gen.InfertNodeTypeResponse], error)
}

// NewGenerateServiceClient constructs a client for the generate.GenerateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenerateServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GenerateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &generateServiceClient{
		generate: connect_go.NewClient[gen.GenerateRequest, gen.GenerateResponse](
			httpClient,
			baseURL+GenerateServiceGenerateProcedure,
			opts...,
		),
		generateImplementation: connect_go.NewClient[gen.GenerateImplementationRequest, gen.GenerateImplementationResponse](
			httpClient,
			baseURL+GenerateServiceGenerateImplementationProcedure,
			opts...,
		),
		inferNodeType: connect_go.NewClient[gen.InferNodeTypeRequest, gen.InfertNodeTypeResponse](
			httpClient,
			baseURL+GenerateServiceInferNodeTypeProcedure,
			opts...,
		),
	}
}

// generateServiceClient implements GenerateServiceClient.
type generateServiceClient struct {
	generate               *connect_go.Client[gen.GenerateRequest, gen.GenerateResponse]
	generateImplementation *connect_go.Client[gen.GenerateImplementationRequest, gen.GenerateImplementationResponse]
	inferNodeType          *connect_go.Client[gen.InferNodeTypeRequest, gen.InfertNodeTypeResponse]
}

// Generate calls generate.GenerateService.Generate.
func (c *generateServiceClient) Generate(ctx context.Context, req *connect_go.Request[gen.GenerateRequest]) (*connect_go.Response[gen.GenerateResponse], error) {
	return c.generate.CallUnary(ctx, req)
}

// GenerateImplementation calls generate.GenerateService.GenerateImplementation.
func (c *generateServiceClient) GenerateImplementation(ctx context.Context, req *connect_go.Request[gen.GenerateImplementationRequest]) (*connect_go.Response[gen.GenerateImplementationResponse], error) {
	return c.generateImplementation.CallUnary(ctx, req)
}

// InferNodeType calls generate.GenerateService.InferNodeType.
func (c *generateServiceClient) InferNodeType(ctx context.Context, req *connect_go.Request[gen.InferNodeTypeRequest]) (*connect_go.Response[gen.InfertNodeTypeResponse], error) {
	return c.inferNodeType.CallUnary(ctx, req)
}

// GenerateServiceHandler is an implementation of the generate.GenerateService service.
type GenerateServiceHandler interface {
	Generate(context.Context, *connect_go.Request[gen.GenerateRequest]) (*connect_go.Response[gen.GenerateResponse], error)
	GenerateImplementation(context.Context, *connect_go.Request[gen.GenerateImplementationRequest]) (*connect_go.Response[gen.GenerateImplementationResponse], error)
	InferNodeType(context.Context, *connect_go.Request[gen.InferNodeTypeRequest]) (*connect_go.Response[gen.InfertNodeTypeResponse], error)
}

// NewGenerateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenerateServiceHandler(svc GenerateServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	generateServiceGenerateHandler := connect_go.NewUnaryHandler(
		GenerateServiceGenerateProcedure,
		svc.Generate,
		opts...,
	)
	generateServiceGenerateImplementationHandler := connect_go.NewUnaryHandler(
		GenerateServiceGenerateImplementationProcedure,
		svc.GenerateImplementation,
		opts...,
	)
	generateServiceInferNodeTypeHandler := connect_go.NewUnaryHandler(
		GenerateServiceInferNodeTypeProcedure,
		svc.InferNodeType,
		opts...,
	)
	return "/generate.GenerateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GenerateServiceGenerateProcedure:
			generateServiceGenerateHandler.ServeHTTP(w, r)
		case GenerateServiceGenerateImplementationProcedure:
			generateServiceGenerateImplementationHandler.ServeHTTP(w, r)
		case GenerateServiceInferNodeTypeProcedure:
			generateServiceInferNodeTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGenerateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenerateServiceHandler struct{}

func (UnimplementedGenerateServiceHandler) Generate(context.Context, *connect_go.Request[gen.GenerateRequest]) (*connect_go.Response[gen.GenerateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("generate.GenerateService.Generate is not implemented"))
}

func (UnimplementedGenerateServiceHandler) GenerateImplementation(context.Context, *connect_go.Request[gen.GenerateImplementationRequest]) (*connect_go.Response[gen.GenerateImplementationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("generate.GenerateService.GenerateImplementation is not implemented"))
}

func (UnimplementedGenerateServiceHandler) InferNodeType(context.Context, *connect_go.Request[gen.InferNodeTypeRequest]) (*connect_go.Response[gen.InfertNodeTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("generate.GenerateService.InferNodeType is not implemented"))
}
