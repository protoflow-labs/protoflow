// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: project.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/protoflow-labs/protoflow/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "project.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/project.ProjectService/GetProject"
	// ProjectServiceGetProjectsProcedure is the fully-qualified name of the ProjectService's
	// GetProjects RPC.
	ProjectServiceGetProjectsProcedure = "/project.ProjectService/GetProjects"
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/project.ProjectService/CreateProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/project.ProjectService/DeleteProject"
	// ProjectServiceGetResourcesProcedure is the fully-qualified name of the ProjectService's
	// GetResources RPC.
	ProjectServiceGetResourcesProcedure = "/project.ProjectService/GetResources"
	// ProjectServiceGetBlocksProcedure is the fully-qualified name of the ProjectService's GetBlocks
	// RPC.
	ProjectServiceGetBlocksProcedure = "/project.ProjectService/GetBlocks"
	// ProjectServiceAddBlockProcedure is the fully-qualified name of the ProjectService's AddBlock RPC.
	ProjectServiceAddBlockProcedure = "/project.ProjectService/AddBlock"
	// ProjectServiceRemoveBlockProcedure is the fully-qualified name of the ProjectService's
	// RemoveBlock RPC.
	ProjectServiceRemoveBlockProcedure = "/project.ProjectService/RemoveBlock"
	// ProjectServiceUpdateBlockProcedure is the fully-qualified name of the ProjectService's
	// UpdateBlock RPC.
	ProjectServiceUpdateBlockProcedure = "/project.ProjectService/UpdateBlock"
	// ProjectServiceGetEdgesProcedure is the fully-qualified name of the ProjectService's GetEdges RPC.
	ProjectServiceGetEdgesProcedure = "/project.ProjectService/GetEdges"
	// ProjectServiceAddEdgeProcedure is the fully-qualified name of the ProjectService's AddEdge RPC.
	ProjectServiceAddEdgeProcedure = "/project.ProjectService/AddEdge"
	// ProjectServiceRemoveEdgeProcedure is the fully-qualified name of the ProjectService's RemoveEdge
	// RPC.
	ProjectServiceRemoveEdgeProcedure = "/project.ProjectService/RemoveEdge"
)

// ProjectServiceClient is a client for the project.ProjectService service.
type ProjectServiceClient interface {
	GetProject(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error)
	GetProjects(context.Context, *connect_go.Request[gen.GetProjectsRequest]) (*connect_go.Response[gen.GetProjectsResponse], error)
	CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error)
	GetResources(context.Context, *connect_go.Request[gen.GetResourcesRequest]) (*connect_go.Response[gen.GetResourcesResponse], error)
	GetBlocks(context.Context, *connect_go.Request[gen.GetBlocksRequest]) (*connect_go.Response[gen.GetBlocksResponse], error)
	AddBlock(context.Context, *connect_go.Request[gen.AddBlockRequest]) (*connect_go.Response[gen.AddBlockResponse], error)
	RemoveBlock(context.Context, *connect_go.Request[gen.RemoveBlockRequest]) (*connect_go.Response[gen.RemoveBlockResponse], error)
	UpdateBlock(context.Context, *connect_go.Request[gen.UpdateBlockRequest]) (*connect_go.Response[gen.UpdateBlockResponse], error)
	GetEdges(context.Context, *connect_go.Request[gen.GetEdgesRequest]) (*connect_go.Response[gen.GetEdgesResponse], error)
	AddEdge(context.Context, *connect_go.Request[gen.AddEdgeRequest]) (*connect_go.Response[gen.AddEdgeResponse], error)
	RemoveEdge(context.Context, *connect_go.Request[gen.RemoveEdgeRequest]) (*connect_go.Response[gen.RemoveEdgeResponse], error)
}

// NewProjectServiceClient constructs a client for the project.ProjectService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectServiceClient{
		getProject: connect_go.NewClient[gen.GetProjectRequest, gen.GetProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			opts...,
		),
		getProjects: connect_go.NewClient[gen.GetProjectsRequest, gen.GetProjectsResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectsProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[gen.CreateProjectRequest, gen.CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			opts...,
		),
		deleteProject: connect_go.NewClient[gen.DeleteProjectRequest, gen.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			opts...,
		),
		getResources: connect_go.NewClient[gen.GetResourcesRequest, gen.GetResourcesResponse](
			httpClient,
			baseURL+ProjectServiceGetResourcesProcedure,
			opts...,
		),
		getBlocks: connect_go.NewClient[gen.GetBlocksRequest, gen.GetBlocksResponse](
			httpClient,
			baseURL+ProjectServiceGetBlocksProcedure,
			opts...,
		),
		addBlock: connect_go.NewClient[gen.AddBlockRequest, gen.AddBlockResponse](
			httpClient,
			baseURL+ProjectServiceAddBlockProcedure,
			opts...,
		),
		removeBlock: connect_go.NewClient[gen.RemoveBlockRequest, gen.RemoveBlockResponse](
			httpClient,
			baseURL+ProjectServiceRemoveBlockProcedure,
			opts...,
		),
		updateBlock: connect_go.NewClient[gen.UpdateBlockRequest, gen.UpdateBlockResponse](
			httpClient,
			baseURL+ProjectServiceUpdateBlockProcedure,
			opts...,
		),
		getEdges: connect_go.NewClient[gen.GetEdgesRequest, gen.GetEdgesResponse](
			httpClient,
			baseURL+ProjectServiceGetEdgesProcedure,
			opts...,
		),
		addEdge: connect_go.NewClient[gen.AddEdgeRequest, gen.AddEdgeResponse](
			httpClient,
			baseURL+ProjectServiceAddEdgeProcedure,
			opts...,
		),
		removeEdge: connect_go.NewClient[gen.RemoveEdgeRequest, gen.RemoveEdgeResponse](
			httpClient,
			baseURL+ProjectServiceRemoveEdgeProcedure,
			opts...,
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	getProject    *connect_go.Client[gen.GetProjectRequest, gen.GetProjectResponse]
	getProjects   *connect_go.Client[gen.GetProjectsRequest, gen.GetProjectsResponse]
	createProject *connect_go.Client[gen.CreateProjectRequest, gen.CreateProjectResponse]
	deleteProject *connect_go.Client[gen.DeleteProjectRequest, gen.DeleteProjectResponse]
	getResources  *connect_go.Client[gen.GetResourcesRequest, gen.GetResourcesResponse]
	getBlocks     *connect_go.Client[gen.GetBlocksRequest, gen.GetBlocksResponse]
	addBlock      *connect_go.Client[gen.AddBlockRequest, gen.AddBlockResponse]
	removeBlock   *connect_go.Client[gen.RemoveBlockRequest, gen.RemoveBlockResponse]
	updateBlock   *connect_go.Client[gen.UpdateBlockRequest, gen.UpdateBlockResponse]
	getEdges      *connect_go.Client[gen.GetEdgesRequest, gen.GetEdgesResponse]
	addEdge       *connect_go.Client[gen.AddEdgeRequest, gen.AddEdgeResponse]
	removeEdge    *connect_go.Client[gen.RemoveEdgeRequest, gen.RemoveEdgeResponse]
}

// GetProject calls project.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// GetProjects calls project.ProjectService.GetProjects.
func (c *projectServiceClient) GetProjects(ctx context.Context, req *connect_go.Request[gen.GetProjectsRequest]) (*connect_go.Response[gen.GetProjectsResponse], error) {
	return c.getProjects.CallUnary(ctx, req)
}

// CreateProject calls project.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// DeleteProject calls project.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetResources calls project.ProjectService.GetResources.
func (c *projectServiceClient) GetResources(ctx context.Context, req *connect_go.Request[gen.GetResourcesRequest]) (*connect_go.Response[gen.GetResourcesResponse], error) {
	return c.getResources.CallUnary(ctx, req)
}

// GetBlocks calls project.ProjectService.GetBlocks.
func (c *projectServiceClient) GetBlocks(ctx context.Context, req *connect_go.Request[gen.GetBlocksRequest]) (*connect_go.Response[gen.GetBlocksResponse], error) {
	return c.getBlocks.CallUnary(ctx, req)
}

// AddBlock calls project.ProjectService.AddBlock.
func (c *projectServiceClient) AddBlock(ctx context.Context, req *connect_go.Request[gen.AddBlockRequest]) (*connect_go.Response[gen.AddBlockResponse], error) {
	return c.addBlock.CallUnary(ctx, req)
}

// RemoveBlock calls project.ProjectService.RemoveBlock.
func (c *projectServiceClient) RemoveBlock(ctx context.Context, req *connect_go.Request[gen.RemoveBlockRequest]) (*connect_go.Response[gen.RemoveBlockResponse], error) {
	return c.removeBlock.CallUnary(ctx, req)
}

// UpdateBlock calls project.ProjectService.UpdateBlock.
func (c *projectServiceClient) UpdateBlock(ctx context.Context, req *connect_go.Request[gen.UpdateBlockRequest]) (*connect_go.Response[gen.UpdateBlockResponse], error) {
	return c.updateBlock.CallUnary(ctx, req)
}

// GetEdges calls project.ProjectService.GetEdges.
func (c *projectServiceClient) GetEdges(ctx context.Context, req *connect_go.Request[gen.GetEdgesRequest]) (*connect_go.Response[gen.GetEdgesResponse], error) {
	return c.getEdges.CallUnary(ctx, req)
}

// AddEdge calls project.ProjectService.AddEdge.
func (c *projectServiceClient) AddEdge(ctx context.Context, req *connect_go.Request[gen.AddEdgeRequest]) (*connect_go.Response[gen.AddEdgeResponse], error) {
	return c.addEdge.CallUnary(ctx, req)
}

// RemoveEdge calls project.ProjectService.RemoveEdge.
func (c *projectServiceClient) RemoveEdge(ctx context.Context, req *connect_go.Request[gen.RemoveEdgeRequest]) (*connect_go.Response[gen.RemoveEdgeResponse], error) {
	return c.removeEdge.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the project.ProjectService service.
type ProjectServiceHandler interface {
	GetProject(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error)
	GetProjects(context.Context, *connect_go.Request[gen.GetProjectsRequest]) (*connect_go.Response[gen.GetProjectsResponse], error)
	CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error)
	GetResources(context.Context, *connect_go.Request[gen.GetResourcesRequest]) (*connect_go.Response[gen.GetResourcesResponse], error)
	GetBlocks(context.Context, *connect_go.Request[gen.GetBlocksRequest]) (*connect_go.Response[gen.GetBlocksResponse], error)
	AddBlock(context.Context, *connect_go.Request[gen.AddBlockRequest]) (*connect_go.Response[gen.AddBlockResponse], error)
	RemoveBlock(context.Context, *connect_go.Request[gen.RemoveBlockRequest]) (*connect_go.Response[gen.RemoveBlockResponse], error)
	UpdateBlock(context.Context, *connect_go.Request[gen.UpdateBlockRequest]) (*connect_go.Response[gen.UpdateBlockResponse], error)
	GetEdges(context.Context, *connect_go.Request[gen.GetEdgesRequest]) (*connect_go.Response[gen.GetEdgesResponse], error)
	AddEdge(context.Context, *connect_go.Request[gen.AddEdgeRequest]) (*connect_go.Response[gen.AddEdgeResponse], error)
	RemoveEdge(context.Context, *connect_go.Request[gen.RemoveEdgeRequest]) (*connect_go.Response[gen.RemoveEdgeResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ProjectServiceGetProjectProcedure, connect_go.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		opts...,
	))
	mux.Handle(ProjectServiceGetProjectsProcedure, connect_go.NewUnaryHandler(
		ProjectServiceGetProjectsProcedure,
		svc.GetProjects,
		opts...,
	))
	mux.Handle(ProjectServiceCreateProjectProcedure, connect_go.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	))
	mux.Handle(ProjectServiceDeleteProjectProcedure, connect_go.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	))
	mux.Handle(ProjectServiceGetResourcesProcedure, connect_go.NewUnaryHandler(
		ProjectServiceGetResourcesProcedure,
		svc.GetResources,
		opts...,
	))
	mux.Handle(ProjectServiceGetBlocksProcedure, connect_go.NewUnaryHandler(
		ProjectServiceGetBlocksProcedure,
		svc.GetBlocks,
		opts...,
	))
	mux.Handle(ProjectServiceAddBlockProcedure, connect_go.NewUnaryHandler(
		ProjectServiceAddBlockProcedure,
		svc.AddBlock,
		opts...,
	))
	mux.Handle(ProjectServiceRemoveBlockProcedure, connect_go.NewUnaryHandler(
		ProjectServiceRemoveBlockProcedure,
		svc.RemoveBlock,
		opts...,
	))
	mux.Handle(ProjectServiceUpdateBlockProcedure, connect_go.NewUnaryHandler(
		ProjectServiceUpdateBlockProcedure,
		svc.UpdateBlock,
		opts...,
	))
	mux.Handle(ProjectServiceGetEdgesProcedure, connect_go.NewUnaryHandler(
		ProjectServiceGetEdgesProcedure,
		svc.GetEdges,
		opts...,
	))
	mux.Handle(ProjectServiceAddEdgeProcedure, connect_go.NewUnaryHandler(
		ProjectServiceAddEdgeProcedure,
		svc.AddEdge,
		opts...,
	))
	mux.Handle(ProjectServiceRemoveEdgeProcedure, connect_go.NewUnaryHandler(
		ProjectServiceRemoveEdgeProcedure,
		svc.RemoveEdge,
		opts...,
	))
	return "/project.ProjectService/", mux
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProjects(context.Context, *connect_go.Request[gen.GetProjectsRequest]) (*connect_go.Response[gen.GetProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.GetProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetResources(context.Context, *connect_go.Request[gen.GetResourcesRequest]) (*connect_go.Response[gen.GetResourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.GetResources is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetBlocks(context.Context, *connect_go.Request[gen.GetBlocksRequest]) (*connect_go.Response[gen.GetBlocksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.GetBlocks is not implemented"))
}

func (UnimplementedProjectServiceHandler) AddBlock(context.Context, *connect_go.Request[gen.AddBlockRequest]) (*connect_go.Response[gen.AddBlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.AddBlock is not implemented"))
}

func (UnimplementedProjectServiceHandler) RemoveBlock(context.Context, *connect_go.Request[gen.RemoveBlockRequest]) (*connect_go.Response[gen.RemoveBlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.RemoveBlock is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateBlock(context.Context, *connect_go.Request[gen.UpdateBlockRequest]) (*connect_go.Response[gen.UpdateBlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.UpdateBlock is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetEdges(context.Context, *connect_go.Request[gen.GetEdgesRequest]) (*connect_go.Response[gen.GetEdgesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.GetEdges is not implemented"))
}

func (UnimplementedProjectServiceHandler) AddEdge(context.Context, *connect_go.Request[gen.AddEdgeRequest]) (*connect_go.Response[gen.AddEdgeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.AddEdge is not implemented"))
}

func (UnimplementedProjectServiceHandler) RemoveEdge(context.Context, *connect_go.Request[gen.RemoveEdgeRequest]) (*connect_go.Response[gen.RemoveEdgeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("project.ProjectService.RemoveEdge is not implemented"))
}
