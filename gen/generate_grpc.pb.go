// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: generate.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenerateServiceClient is the client API for GenerateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerateServiceClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	GenerateImplementation(ctx context.Context, in *GenerateImplementationRequest, opts ...grpc.CallOption) (*GenerateImplementationResponse, error)
	InferNodeType(ctx context.Context, in *InferNodeTypeRequest, opts ...grpc.CallOption) (*InfertNodeTypeResponse, error)
}

type generateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerateServiceClient(cc grpc.ClientConnInterface) GenerateServiceClient {
	return &generateServiceClient{cc}
}

func (c *generateServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/generate.GenerateService/GenerateGRPCService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateServiceClient) GenerateImplementation(ctx context.Context, in *GenerateImplementationRequest, opts ...grpc.CallOption) (*GenerateImplementationResponse, error) {
	out := new(GenerateImplementationResponse)
	err := c.cc.Invoke(ctx, "/generate.GenerateService/GenerateImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateServiceClient) InferNodeType(ctx context.Context, in *InferNodeTypeRequest, opts ...grpc.CallOption) (*InfertNodeTypeResponse, error) {
	out := new(InfertNodeTypeResponse)
	err := c.cc.Invoke(ctx, "/generate.GenerateService/InferNodeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerateServiceServer is the server API for GenerateService service.
// All implementations should embed UnimplementedGenerateServiceServer
// for forward compatibility
type GenerateServiceServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	GenerateImplementation(context.Context, *GenerateImplementationRequest) (*GenerateImplementationResponse, error)
	InferNodeType(context.Context, *InferNodeTypeRequest) (*InfertNodeTypeResponse, error)
}

// UnimplementedGenerateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGenerateServiceServer struct {
}

func (UnimplementedGenerateServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateGRPCService not implemented")
}
func (UnimplementedGenerateServiceServer) GenerateImplementation(context.Context, *GenerateImplementationRequest) (*GenerateImplementationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImplementation not implemented")
}
func (UnimplementedGenerateServiceServer) InferNodeType(context.Context, *InferNodeTypeRequest) (*InfertNodeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferNodeType not implemented")
}

// UnsafeGenerateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerateServiceServer will
// result in compilation errors.
type UnsafeGenerateServiceServer interface {
	mustEmbedUnimplementedGenerateServiceServer()
}

func RegisterGenerateServiceServer(s grpc.ServiceRegistrar, srv GenerateServiceServer) {
	s.RegisterService(&GenerateService_ServiceDesc, srv)
}

func _GenerateService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.GenerateService/GenerateGRPCService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateService_GenerateImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImplementationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServiceServer).GenerateImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.GenerateService/GenerateImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServiceServer).GenerateImplementation(ctx, req.(*GenerateImplementationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerateService_InferNodeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferNodeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServiceServer).InferNodeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.GenerateService/InferNodeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServiceServer).InferNodeType(ctx, req.(*InferNodeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerateService_ServiceDesc is the grpc.ServiceDesc for GenerateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generate.GenerateService",
	HandlerType: (*GenerateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateGRPCService",
			Handler:    _GenerateService_Generate_Handler,
		},
		{
			MethodName: "GenerateImplementation",
			Handler:    _GenerateService_GenerateImplementation_Handler,
		},
		{
			MethodName: "InferNodeType",
			Handler:    _GenerateService_InferNodeType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generate.proto",
}
