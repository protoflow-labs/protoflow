// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file resource.proto (package resource, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Block } from "./block_pb.js";

/**
 * @generated from message resource.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from oneof resource.Resource.type
   */
  type: {
    /**
     * @generated from field: resource.GRPCService grpc_service = 3;
     */
    value: GRPCService;
    case: "grpcService";
  } | {
    /**
     * @generated from field: resource.RESTService rest_service = 4;
     */
    value: RESTService;
    case: "restService";
  } | {
    /**
     * @generated from field: resource.Docstore docstore = 5;
     */
    value: Docstore;
    case: "docstore";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated block.Block blocks = 7;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "grpc_service", kind: "message", T: GRPCService, oneof: "type" },
    { no: 4, name: "rest_service", kind: "message", T: RESTService, oneof: "type" },
    { no: 5, name: "docstore", kind: "message", T: Docstore, oneof: "type" },
    { no: 7, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * @generated from message resource.GRPCService
 */
export class GRPCService extends Message<GRPCService> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<GRPCService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.GRPCService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GRPCService {
    return new GRPCService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJsonString(jsonString, options);
  }

  static equals(a: GRPCService | PlainMessage<GRPCService> | undefined, b: GRPCService | PlainMessage<GRPCService> | undefined): boolean {
    return proto3.util.equals(GRPCService, a, b);
  }
}

/**
 * @generated from message resource.RESTService
 */
export class RESTService extends Message<RESTService> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<RESTService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.RESTService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RESTService {
    return new RESTService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RESTService {
    return new RESTService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RESTService {
    return new RESTService().fromJsonString(jsonString, options);
  }

  static equals(a: RESTService | PlainMessage<RESTService> | undefined, b: RESTService | PlainMessage<RESTService> | undefined): boolean {
    return proto3.util.equals(RESTService, a, b);
  }
}

/**
 * @generated from message resource.Docstore
 */
export class Docstore extends Message<Docstore> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<Docstore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.Docstore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Docstore {
    return new Docstore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Docstore {
    return new Docstore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Docstore {
    return new Docstore().fromJsonString(jsonString, options);
  }

  static equals(a: Docstore | PlainMessage<Docstore> | undefined, b: Docstore | PlainMessage<Docstore> | undefined): boolean {
    return proto3.util.equals(Docstore, a, b);
  }
}

