syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "graph.proto";
import "block.proto";
import "resource.proto";

package project;
option go_package = "project";

enum LayerType {
    Execution = 0;
    Resource = 1;
}

message Layer {
    LayerType type = 1;
    graph.Graph graph = 2;
}

message Project {
    string id = 1;
    string name = 2;
    string description = 3;
    string owner = 4;
    string created_at = 5;
    string updated_at = 6;
    graph.Graph graph = 7;
    repeated resource.Resource resources = 8;
}

service ProjectService {
    rpc GetProjectTypes(GetProjectTypesRequest) returns (ProjectTypes) {}
    // TODO breadchris unfortunately this is needed because of the buf fetch transport not supporting streaming
    // the suggestion is to build a custom transport that uses websockets https://github.com/bufbuild/connect-es/issues/366
    rpc SendChat(SendChatRequest) returns (stream SendChatResponse) {}

    rpc ExportProject(ExportProjectRequest) returns (ExportProjectResponse) {}
    rpc LoadProject(LoadProjectRequest) returns (LoadProjectResponse) {}

    rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {}
    rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse) {}
    rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {}
    rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {}

    rpc UpdateResource(UpdateResourceRequest) returns (UpdateResourceResponse) {}
    rpc CreateResource(CreateResourceRequest) returns (CreateResourceResponse) {}
    rpc GetResources(GetResourcesRequest) returns (GetResourcesResponse) {}
    rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {}

    rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse) {}

    rpc SaveProject(SaveProjectRequest) returns (SaveProjectResponse) {}

    rpc RunWorkflow(RunWorkflowRequest) returns (stream NodeExecution) {}
    rpc StopWorkflow(StopWorkflowRequest) returns (StopWorkflowResponse) {}

    rpc GetWorkflowRuns(GetWorkflowRunsRequest) returns (GetWorkflowRunsResponse) {}
}

message ExportProjectRequest {
    string project_id = 1;
    string path = 2;
}

message ExportProjectResponse {}

message LoadProjectRequest {
    string path = 1;
}

message LoadProjectResponse {
    Project project = 1;
}

message GetProjectTypesRequest {}

message ProjectTypes {
    google.protobuf.DescriptorProto node_type = 1;
    google.protobuf.DescriptorProto edge_type = 2;
    map<string, google.protobuf.DescriptorProto> desc_lookup = 3;
    map<string, google.protobuf.EnumDescriptorProto> enum_lookup = 4;
}

message StopWorkflowRequest {
    string project_id = 1;
    string workflow_id = 2;
}

message StopWorkflowResponse {}

message UpdateResourceRequest {
    string project_id = 1;
    resource.Resource resource = 2;
}

message UpdateResourceResponse {}

message Chat {
    string id = 1;
}

message ChatMessage {
    string role = 1;
    string message = 2;
}

message SendChatRequest {
    Chat chat = 1;
    string message = 2;
}

message SendChatResponse {
    string message = 1;
}

message GetWorkflowRunsRequest {
    string project_id = 1;
}

message GetWorkflowRunsResponse {
    repeated WorkflowRun runs = 1;
}

message WorkflowRun {
    string id = 1;
    RunWorkflowRequest request = 2;
    repeated NodeExecution node_execs = 3;
}

message NodeExecution {
    string node_id = 1;
    string input = 2;
    string output = 3;
}

message GetNodeInfoRequest {
    string project_id = 1;
    string node_id = 2;
}

// TODO breadchris a file desc contains all this information it would be simpler to use
message GRPCTypeInfo {
    google.protobuf.DescriptorProto input = 1;
    google.protobuf.DescriptorProto output = 2;
    map<string, google.protobuf.DescriptorProto> desc_lookup = 3;
    map<string, google.protobuf.EnumDescriptorProto> enum_lookup = 4;
    google.protobuf.MethodDescriptorProto method_desc = 5;
    string package_name = 6;
}

message GetNodeInfoResponse {
    // A compiled view of the method
    string method_proto = 1;
    // Type information for the input and output
    GRPCTypeInfo type_info = 2;
}

message DeleteResourceRequest {
    string project_id = 1;
    string resource_id = 2;
}

message DeleteResourceResponse {}

message RuntimeData {
  string name = 1;
  repeated string calls = 2;
  GraphData graph = 3;
}

message GraphData {
  float x = 1;
  float y = 2;
}

message RunWorkflowRequest {
    string project_id = 1;
    string node_id = 2;
    string input = 3;
    bool start_server = 4;
}

message Data {
    string value = 1;
}

message CreateResourceRequest {
    string project_id = 1;
    resource.Resource resource = 2;
}

message CreateResourceResponse {
    string resource_id = 1;
}

message GetProjectRequest {
    string id = 1;
}

message GetProjectResponse {
    Project project = 1;
    ProjectTypes types = 2;
}

message GetProjectsRequest {
    string name = 1;
}

message GetProjectsResponse {
    repeated GetProjectResponse projects = 1;
}

message CreateProjectRequest {
    string name = 1;
}

message CreateProjectResponse {
    Project project = 1;
}

message DeleteProjectRequest {
    string id = 1;
}

message DeleteProjectResponse {
    Project project = 1;
}

message GetResourcesRequest {
    string project_id = 1;
}

message EnumeratedResource {
    resource.Resource resource = 1;
    repeated graph.Node nodes = 2;
    ResourceInfo info = 3;
}

message ResourceInfo {
    ResourceState state = 1;
    string error = 2;
}

enum ResourceState {
    UNKNOWN = 0;
    READY = 1;
    ERROR = 2;
}

message GetResourcesResponse {
    repeated EnumeratedResource resources = 1;
}

message SaveProjectRequest {
    string project_id = 1;
    graph.Graph graph = 2;
    repeated resource.Resource resources = 3;
}

message SaveProjectResponse {
    Project project = 1;
}
