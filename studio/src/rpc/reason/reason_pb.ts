// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file reason/reason.proto (package reason, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message reason.Prompt
 */
export class Prompt extends Message<Prompt> {
  /**
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  /**
   * @generated from field: uint64 min_token_count = 2;
   */
  minTokenCount = protoInt64.zero;

  constructor(data?: PartialMessage<Prompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "reason.Prompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_token_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Prompt {
    return new Prompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Prompt {
    return new Prompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Prompt {
    return new Prompt().fromJsonString(jsonString, options);
  }

  static equals(a: Prompt | PlainMessage<Prompt> | undefined, b: Prompt | PlainMessage<Prompt> | undefined): boolean {
    return proto3.util.equals(Prompt, a, b);
  }
}

/**
 * @generated from message reason.Engine
 */
export class Engine extends Message<Engine> {
  constructor(data?: PartialMessage<Engine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "reason.Engine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Engine {
    return new Engine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Engine {
    return new Engine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Engine {
    return new Engine().fromJsonString(jsonString, options);
  }

  static equals(a: Engine | PlainMessage<Engine> | undefined, b: Engine | PlainMessage<Engine> | undefined): boolean {
    return proto3.util.equals(Engine, a, b);
  }
}

/**
 * @generated from message reason.Reason
 */
export class Reason extends Message<Reason> {
  /**
   * @generated from oneof reason.Reason.type
   */
  type: {
    /**
     * @generated from field: reason.Prompt prompt = 1;
     */
    value: Prompt;
    case: "prompt";
  } | {
    /**
     * @generated from field: reason.Engine engine = 2;
     */
    value: Engine;
    case: "engine";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Reason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "reason.Reason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "message", T: Prompt, oneof: "type" },
    { no: 2, name: "engine", kind: "message", T: Engine, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reason {
    return new Reason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reason {
    return new Reason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reason {
    return new Reason().fromJsonString(jsonString, options);
  }

  static equals(a: Reason | PlainMessage<Reason> | undefined, b: Reason | PlainMessage<Reason> | undefined): boolean {
    return proto3.util.equals(Reason, a, b);
  }
}

