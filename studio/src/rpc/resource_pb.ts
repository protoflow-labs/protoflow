// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file resource.proto (package resource, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum resource.Runtime
 */
export enum Runtime {
  /**
   * @generated from enum value: NODEJS = 0;
   */
  NODEJS = 0,

  /**
   * @generated from enum value: PYTHON = 1;
   */
  PYTHON = 1,

  /**
   * @generated from enum value: GO = 2;
   */
  GO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Runtime)
proto3.util.setEnumType(Runtime, "resource.Runtime", [
  { no: 0, name: "NODEJS" },
  { no: 1, name: "PYTHON" },
  { no: 2, name: "GO" },
]);

/**
 * @generated from message resource.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * dependencies are the ids of other resources
   *
   * @generated from field: repeated string dependencies = 3;
   */
  dependencies: string[] = [];

  /**
   * @generated from oneof resource.Resource.type
   */
  type: {
    /**
     * @generated from field: resource.GRPCService grpc_service = 4;
     */
    value: GRPCService;
    case: "grpcService";
  } | {
    /**
     * @generated from field: resource.RESTService rest_service = 5;
     */
    value: RESTService;
    case: "restService";
  } | {
    /**
     * @generated from field: resource.DocStore doc_store = 6;
     */
    value: DocStore;
    case: "docStore";
  } | {
    /**
     * @generated from field: resource.FileStore file_store = 7;
     */
    value: FileStore;
    case: "fileStore";
  } | {
    /**
     * @generated from field: resource.LanguageService language_service = 8;
     */
    value: LanguageService;
    case: "languageService";
  } | {
    /**
     * @generated from field: resource.ConfigProvider config_provider = 9;
     */
    value: ConfigProvider;
    case: "configProvider";
  } | {
    /**
     * @generated from field: resource.SecretStore secret_store = 10;
     */
    value: SecretStore;
    case: "secretStore";
  } | {
    /**
     * @generated from field: resource.ReasoningEngine reasoning_engine = 11;
     */
    value: ReasoningEngine;
    case: "reasoningEngine";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dependencies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "grpc_service", kind: "message", T: GRPCService, oneof: "type" },
    { no: 5, name: "rest_service", kind: "message", T: RESTService, oneof: "type" },
    { no: 6, name: "doc_store", kind: "message", T: DocStore, oneof: "type" },
    { no: 7, name: "file_store", kind: "message", T: FileStore, oneof: "type" },
    { no: 8, name: "language_service", kind: "message", T: LanguageService, oneof: "type" },
    { no: 9, name: "config_provider", kind: "message", T: ConfigProvider, oneof: "type" },
    { no: 10, name: "secret_store", kind: "message", T: SecretStore, oneof: "type" },
    { no: 11, name: "reasoning_engine", kind: "message", T: ReasoningEngine, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * @generated from message resource.ReasoningEngine
 */
export class ReasoningEngine extends Message<ReasoningEngine> {
  constructor(data?: PartialMessage<ReasoningEngine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.ReasoningEngine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReasoningEngine {
    return new ReasoningEngine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReasoningEngine {
    return new ReasoningEngine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReasoningEngine {
    return new ReasoningEngine().fromJsonString(jsonString, options);
  }

  static equals(a: ReasoningEngine | PlainMessage<ReasoningEngine> | undefined, b: ReasoningEngine | PlainMessage<ReasoningEngine> | undefined): boolean {
    return proto3.util.equals(ReasoningEngine, a, b);
  }
}

/**
 * @generated from message resource.SecretStore
 */
export class SecretStore extends Message<SecretStore> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<SecretStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.SecretStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretStore {
    return new SecretStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretStore {
    return new SecretStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretStore {
    return new SecretStore().fromJsonString(jsonString, options);
  }

  static equals(a: SecretStore | PlainMessage<SecretStore> | undefined, b: SecretStore | PlainMessage<SecretStore> | undefined): boolean {
    return proto3.util.equals(SecretStore, a, b);
  }
}

/**
 * @generated from message resource.ConfigProvider
 */
export class ConfigProvider extends Message<ConfigProvider> {
  constructor(data?: PartialMessage<ConfigProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.ConfigProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigProvider {
    return new ConfigProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigProvider {
    return new ConfigProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigProvider {
    return new ConfigProvider().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigProvider | PlainMessage<ConfigProvider> | undefined, b: ConfigProvider | PlainMessage<ConfigProvider> | undefined): boolean {
    return proto3.util.equals(ConfigProvider, a, b);
  }
}

/**
 * @generated from message resource.CodeConfig
 */
export class CodeConfig extends Message<CodeConfig> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string containerURI = 2;
   */
  containerURI = "";

  constructor(data?: PartialMessage<CodeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.CodeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "containerURI", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeConfig {
    return new CodeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeConfig {
    return new CodeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeConfig {
    return new CodeConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CodeConfig | PlainMessage<CodeConfig> | undefined, b: CodeConfig | PlainMessage<CodeConfig> | undefined): boolean {
    return proto3.util.equals(CodeConfig, a, b);
  }
}

/**
 * @generated from message resource.LanguageService
 */
export class LanguageService extends Message<LanguageService> {
  /**
   * @generated from field: resource.Runtime runtime = 1;
   */
  runtime = Runtime.NODEJS;

  /**
   * @generated from field: resource.GRPCService grpc = 2;
   */
  grpc?: GRPCService;

  /**
   * @generated from field: resource.CodeConfig code_config = 3;
   */
  codeConfig?: CodeConfig;

  constructor(data?: PartialMessage<LanguageService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.LanguageService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime", kind: "enum", T: proto3.getEnumType(Runtime) },
    { no: 2, name: "grpc", kind: "message", T: GRPCService },
    { no: 3, name: "code_config", kind: "message", T: CodeConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LanguageService {
    return new LanguageService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LanguageService {
    return new LanguageService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LanguageService {
    return new LanguageService().fromJsonString(jsonString, options);
  }

  static equals(a: LanguageService | PlainMessage<LanguageService> | undefined, b: LanguageService | PlainMessage<LanguageService> | undefined): boolean {
    return proto3.util.equals(LanguageService, a, b);
  }
}

/**
 * @generated from message resource.GRPCService
 */
export class GRPCService extends Message<GRPCService> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<GRPCService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.GRPCService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GRPCService {
    return new GRPCService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJsonString(jsonString, options);
  }

  static equals(a: GRPCService | PlainMessage<GRPCService> | undefined, b: GRPCService | PlainMessage<GRPCService> | undefined): boolean {
    return proto3.util.equals(GRPCService, a, b);
  }
}

/**
 * @generated from message resource.RESTService
 */
export class RESTService extends Message<RESTService> {
  /**
   * @generated from field: string base_url = 1;
   */
  baseUrl = "";

  constructor(data?: PartialMessage<RESTService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.RESTService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RESTService {
    return new RESTService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RESTService {
    return new RESTService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RESTService {
    return new RESTService().fromJsonString(jsonString, options);
  }

  static equals(a: RESTService | PlainMessage<RESTService> | undefined, b: RESTService | PlainMessage<RESTService> | undefined): boolean {
    return proto3.util.equals(RESTService, a, b);
  }
}

/**
 * @generated from message resource.DocStore
 */
export class DocStore extends Message<DocStore> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<DocStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.DocStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocStore {
    return new DocStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocStore {
    return new DocStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocStore {
    return new DocStore().fromJsonString(jsonString, options);
  }

  static equals(a: DocStore | PlainMessage<DocStore> | undefined, b: DocStore | PlainMessage<DocStore> | undefined): boolean {
    return proto3.util.equals(DocStore, a, b);
  }
}

/**
 * @generated from message resource.FileStore
 */
export class FileStore extends Message<FileStore> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<FileStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "resource.FileStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileStore {
    return new FileStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileStore {
    return new FileStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileStore {
    return new FileStore().fromJsonString(jsonString, options);
  }

  static equals(a: FileStore | PlainMessage<FileStore> | undefined, b: FileStore | PlainMessage<FileStore> | undefined): boolean {
    return proto3.util.equals(FileStore, a, b);
  }
}

