// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file project.proto (package project, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DescriptorProto, EnumDescriptorProto, Message, MethodDescriptorProto, proto3 } from "@bufbuild/protobuf";
import { Graph, Node, NodeDetails } from "./graph_pb.js";

/**
 * @generated from enum project.ProviderState
 */
export enum ProviderState {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: READY = 1;
   */
  READY = 1,

  /**
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ProviderState)
proto3.util.setEnumType(ProviderState, "project.ProviderState", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "READY" },
  { no: 2, name: "ERROR" },
]);

/**
 * @generated from message project.AddMethodRequest
 */
export class AddMethodRequest extends Message<AddMethodRequest> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * @generated from field: string package = 2;
   */
  package = "";

  /**
   * @generated from field: string service = 3;
   */
  service = "";

  /**
   * @generated from field: string method = 4;
   */
  method = "";

  constructor(data?: PartialMessage<AddMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.AddMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMethodRequest {
    return new AddMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMethodRequest {
    return new AddMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMethodRequest {
    return new AddMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddMethodRequest | PlainMessage<AddMethodRequest> | undefined, b: AddMethodRequest | PlainMessage<AddMethodRequest> | undefined): boolean {
    return proto3.util.equals(AddMethodRequest, a, b);
  }
}

/**
 * @generated from message project.AddMethodResponse
 */
export class AddMethodResponse extends Message<AddMethodResponse> {
  constructor(data?: PartialMessage<AddMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.AddMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMethodResponse {
    return new AddMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMethodResponse {
    return new AddMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMethodResponse {
    return new AddMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddMethodResponse | PlainMessage<AddMethodResponse> | undefined, b: AddMethodResponse | PlainMessage<AddMethodResponse> | undefined): boolean {
    return proto3.util.equals(AddMethodResponse, a, b);
  }
}

/**
 * @generated from message project.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message project.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: project.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.CreateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined, b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b);
  }
}

/**
 * @generated from message project.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message project.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.DeleteProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b);
  }
}

/**
 * @generated from message project.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  /**
   * @generated from field: project.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.DeleteProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined, b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b);
  }
}

/**
 * @generated from message project.EnumeratedProvider
 */
export class EnumeratedProvider extends Message<EnumeratedProvider> {
  /**
   * @generated from field: graph.NodeDetails provider = 1;
   */
  provider?: NodeDetails;

  /**
   * @generated from field: repeated graph.Node nodes = 2;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: project.ProviderInfo info = 3;
   */
  info?: ProviderInfo;

  constructor(data?: PartialMessage<EnumeratedProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.EnumeratedProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "message", T: NodeDetails },
    { no: 2, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 3, name: "info", kind: "message", T: ProviderInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnumeratedProvider {
    return new EnumeratedProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnumeratedProvider {
    return new EnumeratedProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnumeratedProvider {
    return new EnumeratedProvider().fromJsonString(jsonString, options);
  }

  static equals(a: EnumeratedProvider | PlainMessage<EnumeratedProvider> | undefined, b: EnumeratedProvider | PlainMessage<EnumeratedProvider> | undefined): boolean {
    return proto3.util.equals(EnumeratedProvider, a, b);
  }
}

/**
 * @generated from message project.ExportProjectRequest
 */
export class ExportProjectRequest extends Message<ExportProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<ExportProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.ExportProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportProjectRequest {
    return new ExportProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportProjectRequest {
    return new ExportProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportProjectRequest {
    return new ExportProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportProjectRequest | PlainMessage<ExportProjectRequest> | undefined, b: ExportProjectRequest | PlainMessage<ExportProjectRequest> | undefined): boolean {
    return proto3.util.equals(ExportProjectRequest, a, b);
  }
}

/**
 * @generated from message project.ExportProjectResponse
 */
export class ExportProjectResponse extends Message<ExportProjectResponse> {
  constructor(data?: PartialMessage<ExportProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.ExportProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportProjectResponse {
    return new ExportProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportProjectResponse {
    return new ExportProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportProjectResponse {
    return new ExportProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportProjectResponse | PlainMessage<ExportProjectResponse> | undefined, b: ExportProjectResponse | PlainMessage<ExportProjectResponse> | undefined): boolean {
    return proto3.util.equals(ExportProjectResponse, a, b);
  }
}

/**
 * @generated from message project.GRPCMethod
 */
export class GRPCMethod extends Message<GRPCMethod> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: project.GRPCTypeInfo type_info = 2;
   */
  typeInfo?: GRPCTypeInfo;

  constructor(data?: PartialMessage<GRPCMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GRPCMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type_info", kind: "message", T: GRPCTypeInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GRPCMethod {
    return new GRPCMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GRPCMethod {
    return new GRPCMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GRPCMethod {
    return new GRPCMethod().fromJsonString(jsonString, options);
  }

  static equals(a: GRPCMethod | PlainMessage<GRPCMethod> | undefined, b: GRPCMethod | PlainMessage<GRPCMethod> | undefined): boolean {
    return proto3.util.equals(GRPCMethod, a, b);
  }
}

/**
 * @generated from message project.GRPCService
 */
export class GRPCService extends Message<GRPCService> {
  /**
   * @generated from field: string package = 1;
   */
  package = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated project.GRPCMethod methods = 3;
   */
  methods: GRPCMethod[] = [];

  /**
   * @generated from field: string file = 4;
   */
  file = "";

  constructor(data?: PartialMessage<GRPCService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GRPCService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "methods", kind: "message", T: GRPCMethod, repeated: true },
    { no: 4, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GRPCService {
    return new GRPCService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GRPCService {
    return new GRPCService().fromJsonString(jsonString, options);
  }

  static equals(a: GRPCService | PlainMessage<GRPCService> | undefined, b: GRPCService | PlainMessage<GRPCService> | undefined): boolean {
    return proto3.util.equals(GRPCService, a, b);
  }
}

/**
 * @generated from message project.GRPCTypeInfo
 */
export class GRPCTypeInfo extends Message<GRPCTypeInfo> {
  /**
   * @generated from field: google.protobuf.DescriptorProto input = 1;
   */
  input?: DescriptorProto;

  /**
   * @generated from field: google.protobuf.DescriptorProto output = 2;
   */
  output?: DescriptorProto;

  /**
   * @generated from field: map<string, google.protobuf.DescriptorProto> desc_lookup = 3;
   */
  descLookup: { [key: string]: DescriptorProto } = {};

  /**
   * @generated from field: map<string, google.protobuf.EnumDescriptorProto> enum_lookup = 4;
   */
  enumLookup: { [key: string]: EnumDescriptorProto } = {};

  /**
   * @generated from field: google.protobuf.MethodDescriptorProto method_desc = 5;
   */
  methodDesc?: MethodDescriptorProto;

  /**
   * @generated from field: string package_name = 6;
   */
  packageName = "";

  constructor(data?: PartialMessage<GRPCTypeInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GRPCTypeInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input", kind: "message", T: DescriptorProto },
    { no: 2, name: "output", kind: "message", T: DescriptorProto },
    { no: 3, name: "desc_lookup", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DescriptorProto} },
    { no: 4, name: "enum_lookup", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EnumDescriptorProto} },
    { no: 5, name: "method_desc", kind: "message", T: MethodDescriptorProto },
    { no: 6, name: "package_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GRPCTypeInfo {
    return new GRPCTypeInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GRPCTypeInfo {
    return new GRPCTypeInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GRPCTypeInfo {
    return new GRPCTypeInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GRPCTypeInfo | PlainMessage<GRPCTypeInfo> | undefined, b: GRPCTypeInfo | PlainMessage<GRPCTypeInfo> | undefined): boolean {
    return proto3.util.equals(GRPCTypeInfo, a, b);
  }
}

/**
 * @generated from message project.GenerateAIStubRequest
 */
export class GenerateAIStubRequest extends Message<GenerateAIStubRequest> {
  /**
   * @generated from field: string language = 1;
   */
  language = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<GenerateAIStubRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GenerateAIStubRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateAIStubRequest {
    return new GenerateAIStubRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateAIStubRequest {
    return new GenerateAIStubRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateAIStubRequest {
    return new GenerateAIStubRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateAIStubRequest | PlainMessage<GenerateAIStubRequest> | undefined, b: GenerateAIStubRequest | PlainMessage<GenerateAIStubRequest> | undefined): boolean {
    return proto3.util.equals(GenerateAIStubRequest, a, b);
  }
}

/**
 * @generated from message project.GetGRPCServerInfoRequest
 */
export class GetGRPCServerInfoRequest extends Message<GetGRPCServerInfoRequest> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<GetGRPCServerInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetGRPCServerInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGRPCServerInfoRequest {
    return new GetGRPCServerInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGRPCServerInfoRequest {
    return new GetGRPCServerInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGRPCServerInfoRequest {
    return new GetGRPCServerInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGRPCServerInfoRequest | PlainMessage<GetGRPCServerInfoRequest> | undefined, b: GetGRPCServerInfoRequest | PlainMessage<GetGRPCServerInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetGRPCServerInfoRequest, a, b);
  }
}

/**
 * @generated from message project.GetGRPCServerInfoResponse
 */
export class GetGRPCServerInfoResponse extends Message<GetGRPCServerInfoResponse> {
  /**
   * @generated from field: repeated project.GRPCService services = 1;
   */
  services: GRPCService[] = [];

  constructor(data?: PartialMessage<GetGRPCServerInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetGRPCServerInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: GRPCService, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGRPCServerInfoResponse {
    return new GetGRPCServerInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGRPCServerInfoResponse {
    return new GetGRPCServerInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGRPCServerInfoResponse {
    return new GetGRPCServerInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGRPCServerInfoResponse | PlainMessage<GetGRPCServerInfoResponse> | undefined, b: GetGRPCServerInfoResponse | PlainMessage<GetGRPCServerInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetGRPCServerInfoResponse, a, b);
  }
}

/**
 * @generated from message project.GetNodeInfoRequest
 */
export class GetNodeInfoRequest extends Message<GetNodeInfoRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  constructor(data?: PartialMessage<GetNodeInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetNodeInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodeInfoRequest {
    return new GetNodeInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodeInfoRequest {
    return new GetNodeInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodeInfoRequest {
    return new GetNodeInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodeInfoRequest | PlainMessage<GetNodeInfoRequest> | undefined, b: GetNodeInfoRequest | PlainMessage<GetNodeInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetNodeInfoRequest, a, b);
  }
}

/**
 * @generated from message project.GetNodeInfoResponse
 */
export class GetNodeInfoResponse extends Message<GetNodeInfoResponse> {
  /**
   * @generated from field: string method_proto = 1;
   */
  methodProto = "";

  /**
   * @generated from field: project.GRPCTypeInfo type_info = 2;
   */
  typeInfo?: GRPCTypeInfo;

  constructor(data?: PartialMessage<GetNodeInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetNodeInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method_proto", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type_info", kind: "message", T: GRPCTypeInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodeInfoResponse {
    return new GetNodeInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodeInfoResponse {
    return new GetNodeInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodeInfoResponse {
    return new GetNodeInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodeInfoResponse | PlainMessage<GetNodeInfoResponse> | undefined, b: GetNodeInfoResponse | PlainMessage<GetNodeInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetNodeInfoResponse, a, b);
  }
}

/**
 * @generated from message project.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectRequest, a, b);
  }
}

/**
 * @generated from message project.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: project.Project project = 1;
   */
  project?: Project;

  /**
   * @generated from field: project.ProjectTypes types = 2;
   */
  types?: ProjectTypes;

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 2, name: "types", kind: "message", T: ProjectTypes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined, b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectResponse, a, b);
  }
}

/**
 * @generated from message project.GetProjectTypesRequest
 */
export class GetProjectTypesRequest extends Message<GetProjectTypesRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetProjectTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProjectTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectTypesRequest {
    return new GetProjectTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectTypesRequest {
    return new GetProjectTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectTypesRequest {
    return new GetProjectTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectTypesRequest | PlainMessage<GetProjectTypesRequest> | undefined, b: GetProjectTypesRequest | PlainMessage<GetProjectTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectTypesRequest, a, b);
  }
}

/**
 * @generated from message project.GetProjectsRequest
 */
export class GetProjectsRequest extends Message<GetProjectsRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetProjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectsRequest {
    return new GetProjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectsRequest {
    return new GetProjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectsRequest {
    return new GetProjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectsRequest | PlainMessage<GetProjectsRequest> | undefined, b: GetProjectsRequest | PlainMessage<GetProjectsRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectsRequest, a, b);
  }
}

/**
 * @generated from message project.GetProjectsResponse
 */
export class GetProjectsResponse extends Message<GetProjectsResponse> {
  /**
   * @generated from field: repeated project.GetProjectResponse projects = 1;
   */
  projects: GetProjectResponse[] = [];

  constructor(data?: PartialMessage<GetProjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: GetProjectResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectsResponse {
    return new GetProjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectsResponse {
    return new GetProjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectsResponse {
    return new GetProjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectsResponse | PlainMessage<GetProjectsResponse> | undefined, b: GetProjectsResponse | PlainMessage<GetProjectsResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectsResponse, a, b);
  }
}

/**
 * @generated from message project.GetProvidersRequest
 */
export class GetProvidersRequest extends Message<GetProvidersRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProvidersRequest {
    return new GetProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProvidersRequest {
    return new GetProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProvidersRequest {
    return new GetProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProvidersRequest | PlainMessage<GetProvidersRequest> | undefined, b: GetProvidersRequest | PlainMessage<GetProvidersRequest> | undefined): boolean {
    return proto3.util.equals(GetProvidersRequest, a, b);
  }
}

/**
 * @generated from message project.GetProvidersResponse
 */
export class GetProvidersResponse extends Message<GetProvidersResponse> {
  /**
   * @generated from field: repeated project.EnumeratedProvider providers = 1;
   */
  providers: EnumeratedProvider[] = [];

  constructor(data?: PartialMessage<GetProvidersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetProvidersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: EnumeratedProvider, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProvidersResponse {
    return new GetProvidersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProvidersResponse {
    return new GetProvidersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProvidersResponse {
    return new GetProvidersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProvidersResponse | PlainMessage<GetProvidersResponse> | undefined, b: GetProvidersResponse | PlainMessage<GetProvidersResponse> | undefined): boolean {
    return proto3.util.equals(GetProvidersResponse, a, b);
  }
}

/**
 * @generated from message project.GetRunningWorkflowResponse
 */
export class GetRunningWorkflowResponse extends Message<GetRunningWorkflowResponse> {
  /**
   * @generated from field: repeated project.WorkflowTrace traces = 1;
   */
  traces: WorkflowTrace[] = [];

  constructor(data?: PartialMessage<GetRunningWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetRunningWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "traces", kind: "message", T: WorkflowTrace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRunningWorkflowResponse {
    return new GetRunningWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRunningWorkflowResponse {
    return new GetRunningWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRunningWorkflowResponse {
    return new GetRunningWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRunningWorkflowResponse | PlainMessage<GetRunningWorkflowResponse> | undefined, b: GetRunningWorkflowResponse | PlainMessage<GetRunningWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(GetRunningWorkflowResponse, a, b);
  }
}

/**
 * @generated from message project.GetRunningWorkflowsRequest
 */
export class GetRunningWorkflowsRequest extends Message<GetRunningWorkflowsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetRunningWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetRunningWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRunningWorkflowsRequest {
    return new GetRunningWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRunningWorkflowsRequest {
    return new GetRunningWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRunningWorkflowsRequest {
    return new GetRunningWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRunningWorkflowsRequest | PlainMessage<GetRunningWorkflowsRequest> | undefined, b: GetRunningWorkflowsRequest | PlainMessage<GetRunningWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(GetRunningWorkflowsRequest, a, b);
  }
}

/**
 * @generated from message project.GetWorkflowRunsRequest
 */
export class GetWorkflowRunsRequest extends Message<GetWorkflowRunsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetWorkflowRunsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetWorkflowRunsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowRunsRequest {
    return new GetWorkflowRunsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowRunsRequest {
    return new GetWorkflowRunsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowRunsRequest {
    return new GetWorkflowRunsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowRunsRequest | PlainMessage<GetWorkflowRunsRequest> | undefined, b: GetWorkflowRunsRequest | PlainMessage<GetWorkflowRunsRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowRunsRequest, a, b);
  }
}

/**
 * @generated from message project.GetWorkflowRunsResponse
 */
export class GetWorkflowRunsResponse extends Message<GetWorkflowRunsResponse> {
  /**
   * @generated from field: repeated project.WorkflowTrace runs = 1;
   */
  runs: WorkflowTrace[] = [];

  constructor(data?: PartialMessage<GetWorkflowRunsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GetWorkflowRunsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runs", kind: "message", T: WorkflowTrace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowRunsResponse {
    return new GetWorkflowRunsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowRunsResponse {
    return new GetWorkflowRunsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowRunsResponse {
    return new GetWorkflowRunsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowRunsResponse | PlainMessage<GetWorkflowRunsResponse> | undefined, b: GetWorkflowRunsResponse | PlainMessage<GetWorkflowRunsResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkflowRunsResponse, a, b);
  }
}

/**
 * @generated from message project.GraphData
 */
export class GraphData extends Message<GraphData> {
  /**
   * @generated from field: float x = 1;
   */
  x = 0;

  /**
   * @generated from field: float y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<GraphData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.GraphData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphData {
    return new GraphData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphData {
    return new GraphData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphData {
    return new GraphData().fromJsonString(jsonString, options);
  }

  static equals(a: GraphData | PlainMessage<GraphData> | undefined, b: GraphData | PlainMessage<GraphData> | undefined): boolean {
    return proto3.util.equals(GraphData, a, b);
  }
}

/**
 * @generated from message project.LoadProjectRequest
 */
export class LoadProjectRequest extends Message<LoadProjectRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<LoadProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.LoadProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadProjectRequest {
    return new LoadProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadProjectRequest {
    return new LoadProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadProjectRequest {
    return new LoadProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoadProjectRequest | PlainMessage<LoadProjectRequest> | undefined, b: LoadProjectRequest | PlainMessage<LoadProjectRequest> | undefined): boolean {
    return proto3.util.equals(LoadProjectRequest, a, b);
  }
}

/**
 * @generated from message project.LoadProjectResponse
 */
export class LoadProjectResponse extends Message<LoadProjectResponse> {
  /**
   * @generated from field: project.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<LoadProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.LoadProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadProjectResponse {
    return new LoadProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadProjectResponse {
    return new LoadProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadProjectResponse {
    return new LoadProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoadProjectResponse | PlainMessage<LoadProjectResponse> | undefined, b: LoadProjectResponse | PlainMessage<LoadProjectResponse> | undefined): boolean {
    return proto3.util.equals(LoadProjectResponse, a, b);
  }
}

/**
 * @generated from message project.NewNodeRequest
 */
export class NewNodeRequest extends Message<NewNodeRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: graph.Node node = 2;
   */
  node?: Node;

  constructor(data?: PartialMessage<NewNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.NewNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node", kind: "message", T: Node },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewNodeRequest {
    return new NewNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewNodeRequest {
    return new NewNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewNodeRequest {
    return new NewNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewNodeRequest | PlainMessage<NewNodeRequest> | undefined, b: NewNodeRequest | PlainMessage<NewNodeRequest> | undefined): boolean {
    return proto3.util.equals(NewNodeRequest, a, b);
  }
}

/**
 * @generated from message project.NewNodeResponse
 */
export class NewNodeResponse extends Message<NewNodeResponse> {
  /**
   * @generated from field: graph.Node node = 1;
   */
  node?: Node;

  constructor(data?: PartialMessage<NewNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.NewNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewNodeResponse {
    return new NewNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewNodeResponse {
    return new NewNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewNodeResponse {
    return new NewNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewNodeResponse | PlainMessage<NewNodeResponse> | undefined, b: NewNodeResponse | PlainMessage<NewNodeResponse> | undefined): boolean {
    return proto3.util.equals(NewNodeResponse, a, b);
  }
}

/**
 * @generated from message project.NodeExecution
 */
export class NodeExecution extends Message<NodeExecution> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: string output = 2;
   */
  output = "";

  constructor(data?: PartialMessage<NodeExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.NodeExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecution {
    return new NodeExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecution {
    return new NodeExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecution {
    return new NodeExecution().fromJsonString(jsonString, options);
  }

  static equals(a: NodeExecution | PlainMessage<NodeExecution> | undefined, b: NodeExecution | PlainMessage<NodeExecution> | undefined): boolean {
    return proto3.util.equals(NodeExecution, a, b);
  }
}

/**
 * @generated from message project.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: graph.Graph graph = 3;
   */
  graph?: Graph;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "graph", kind: "message", T: Graph },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message project.ProjectTypes
 */
export class ProjectTypes extends Message<ProjectTypes> {
  /**
   * @generated from field: google.protobuf.DescriptorProto node_type = 1;
   */
  nodeType?: DescriptorProto;

  /**
   * @generated from field: google.protobuf.DescriptorProto edge_type = 2;
   */
  edgeType?: DescriptorProto;

  /**
   * @generated from field: map<string, google.protobuf.DescriptorProto> desc_lookup = 3;
   */
  descLookup: { [key: string]: DescriptorProto } = {};

  /**
   * @generated from field: map<string, google.protobuf.EnumDescriptorProto> enum_lookup = 4;
   */
  enumLookup: { [key: string]: EnumDescriptorProto } = {};

  constructor(data?: PartialMessage<ProjectTypes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.ProjectTypes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_type", kind: "message", T: DescriptorProto },
    { no: 2, name: "edge_type", kind: "message", T: DescriptorProto },
    { no: 3, name: "desc_lookup", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DescriptorProto} },
    { no: 4, name: "enum_lookup", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EnumDescriptorProto} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectTypes {
    return new ProjectTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectTypes {
    return new ProjectTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectTypes {
    return new ProjectTypes().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectTypes | PlainMessage<ProjectTypes> | undefined, b: ProjectTypes | PlainMessage<ProjectTypes> | undefined): boolean {
    return proto3.util.equals(ProjectTypes, a, b);
  }
}

/**
 * @generated from message project.ProviderInfo
 */
export class ProviderInfo extends Message<ProviderInfo> {
  /**
   * @generated from field: project.ProviderState state = 1;
   */
  state = ProviderState.UNKNOWN;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<ProviderInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.ProviderInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ProviderState) },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderInfo {
    return new ProviderInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderInfo {
    return new ProviderInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderInfo {
    return new ProviderInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderInfo | PlainMessage<ProviderInfo> | undefined, b: ProviderInfo | PlainMessage<ProviderInfo> | undefined): boolean {
    return proto3.util.equals(ProviderInfo, a, b);
  }
}

/**
 * @generated from message project.RunGRPCMethodRequest
 */
export class RunGRPCMethodRequest extends Message<RunGRPCMethodRequest> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: string service = 2;
   */
  service = "";

  /**
   * @generated from field: string method = 3;
   */
  method = "";

  /**
   * @generated from field: string input = 4;
   */
  input = "";

  /**
   * @generated from field: string package = 5;
   */
  package = "";

  constructor(data?: PartialMessage<RunGRPCMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.RunGRPCMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunGRPCMethodRequest {
    return new RunGRPCMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunGRPCMethodRequest {
    return new RunGRPCMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunGRPCMethodRequest {
    return new RunGRPCMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunGRPCMethodRequest | PlainMessage<RunGRPCMethodRequest> | undefined, b: RunGRPCMethodRequest | PlainMessage<RunGRPCMethodRequest> | undefined): boolean {
    return proto3.util.equals(RunGRPCMethodRequest, a, b);
  }
}

/**
 * @generated from message project.RunGRPCMethodResponse
 */
export class RunGRPCMethodResponse extends Message<RunGRPCMethodResponse> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  constructor(data?: PartialMessage<RunGRPCMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.RunGRPCMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunGRPCMethodResponse {
    return new RunGRPCMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunGRPCMethodResponse {
    return new RunGRPCMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunGRPCMethodResponse {
    return new RunGRPCMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunGRPCMethodResponse | PlainMessage<RunGRPCMethodResponse> | undefined, b: RunGRPCMethodResponse | PlainMessage<RunGRPCMethodResponse> | undefined): boolean {
    return proto3.util.equals(RunGRPCMethodResponse, a, b);
  }
}

/**
 * @generated from message project.RunWorkflowRequest
 */
export class RunWorkflowRequest extends Message<RunWorkflowRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  /**
   * @generated from field: string input = 3;
   */
  input = "";

  /**
   * @generated from field: bool start_server = 4;
   */
  startServer = false;

  constructor(data?: PartialMessage<RunWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.RunWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_server", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunWorkflowRequest {
    return new RunWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunWorkflowRequest {
    return new RunWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunWorkflowRequest {
    return new RunWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunWorkflowRequest | PlainMessage<RunWorkflowRequest> | undefined, b: RunWorkflowRequest | PlainMessage<RunWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(RunWorkflowRequest, a, b);
  }
}

/**
 * @generated from message project.RuntimeData
 */
export class RuntimeData extends Message<RuntimeData> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string calls = 2;
   */
  calls: string[] = [];

  /**
   * @generated from field: project.GraphData graph = 3;
   */
  graph?: GraphData;

  constructor(data?: PartialMessage<RuntimeData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.RuntimeData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "calls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "graph", kind: "message", T: GraphData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeData {
    return new RuntimeData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeData {
    return new RuntimeData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeData {
    return new RuntimeData().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeData | PlainMessage<RuntimeData> | undefined, b: RuntimeData | PlainMessage<RuntimeData> | undefined): boolean {
    return proto3.util.equals(RuntimeData, a, b);
  }
}

/**
 * @generated from message project.SaveProjectRequest
 */
export class SaveProjectRequest extends Message<SaveProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: graph.Graph graph = 2;
   */
  graph?: Graph;

  constructor(data?: PartialMessage<SaveProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.SaveProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph", kind: "message", T: Graph },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveProjectRequest {
    return new SaveProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveProjectRequest {
    return new SaveProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveProjectRequest {
    return new SaveProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SaveProjectRequest | PlainMessage<SaveProjectRequest> | undefined, b: SaveProjectRequest | PlainMessage<SaveProjectRequest> | undefined): boolean {
    return proto3.util.equals(SaveProjectRequest, a, b);
  }
}

/**
 * @generated from message project.SaveProjectResponse
 */
export class SaveProjectResponse extends Message<SaveProjectResponse> {
  /**
   * @generated from field: project.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<SaveProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.SaveProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveProjectResponse {
    return new SaveProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveProjectResponse {
    return new SaveProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveProjectResponse {
    return new SaveProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SaveProjectResponse | PlainMessage<SaveProjectResponse> | undefined, b: SaveProjectResponse | PlainMessage<SaveProjectResponse> | undefined): boolean {
    return proto3.util.equals(SaveProjectResponse, a, b);
  }
}

/**
 * @generated from message project.StopWorkflowRequest
 */
export class StopWorkflowRequest extends Message<StopWorkflowRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = "";

  constructor(data?: PartialMessage<StopWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.StopWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkflowRequest {
    return new StopWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkflowRequest | PlainMessage<StopWorkflowRequest> | undefined, b: StopWorkflowRequest | PlainMessage<StopWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(StopWorkflowRequest, a, b);
  }
}

/**
 * @generated from message project.StopWorkflowResponse
 */
export class StopWorkflowResponse extends Message<StopWorkflowResponse> {
  constructor(data?: PartialMessage<StopWorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.StopWorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkflowResponse {
    return new StopWorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkflowResponse | PlainMessage<StopWorkflowResponse> | undefined, b: StopWorkflowResponse | PlainMessage<StopWorkflowResponse> | undefined): boolean {
    return proto3.util.equals(StopWorkflowResponse, a, b);
  }
}

/**
 * @generated from message project.Test3Request
 */
export class Test3Request extends Message<Test3Request> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Test3Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.Test3Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Test3Request {
    return new Test3Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Test3Request {
    return new Test3Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Test3Request {
    return new Test3Request().fromJsonString(jsonString, options);
  }

  static equals(a: Test3Request | PlainMessage<Test3Request> | undefined, b: Test3Request | PlainMessage<Test3Request> | undefined): boolean {
    return proto3.util.equals(Test3Request, a, b);
  }
}

/**
 * @generated from message project.Test3Response
 */
export class Test3Response extends Message<Test3Response> {
  /**
   * @generated from field: string result = 1;
   */
  result = "";

  constructor(data?: PartialMessage<Test3Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.Test3Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Test3Response {
    return new Test3Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Test3Response {
    return new Test3Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Test3Response {
    return new Test3Response().fromJsonString(jsonString, options);
  }

  static equals(a: Test3Response | PlainMessage<Test3Response> | undefined, b: Test3Response | PlainMessage<Test3Response> | undefined): boolean {
    return proto3.util.equals(Test3Response, a, b);
  }
}

/**
 * @generated from message project.WorkflowTrace
 */
export class WorkflowTrace extends Message<WorkflowTrace> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: project.RunWorkflowRequest request = 2;
   */
  request?: RunWorkflowRequest;

  /**
   * @generated from field: repeated project.NodeExecution node_execs = 3;
   */
  nodeExecs: NodeExecution[] = [];

  constructor(data?: PartialMessage<WorkflowTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "project.WorkflowTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: RunWorkflowRequest },
    { no: 3, name: "node_execs", kind: "message", T: NodeExecution, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowTrace {
    return new WorkflowTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowTrace {
    return new WorkflowTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowTrace {
    return new WorkflowTrace().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowTrace | PlainMessage<WorkflowTrace> | undefined, b: WorkflowTrace | PlainMessage<WorkflowTrace> | undefined): boolean {
    return proto3.util.equals(WorkflowTrace, a, b);
  }
}

