"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // <define:process>
  var define_process_default;
  var init_define_process = __esm({
    "<define:process>"() {
      define_process_default = {};
    }
  });

  // <define:process.env>
  var define_process_env_default;
  var init_define_process_env = __esm({
    "<define:process.env>"() {
      define_process_env_default = {};
    }
  });

  // node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component3(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component3.prototype.isReactComponent = {};
          Component3.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component3.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component3.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component3.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component3.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a4) {
            return isArrayImpl(a4);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement32(type, config, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement4(element, config, children2) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement6(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c4) {
                  return c4;
                });
              } else if (mappedChild != null) {
                if (isValidElement6(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children2)) {
              for (var i4 = 0; i4 < children2.length; i4++) {
                child = children2[i4];
                nextName = nextNamePrefix + getElementKey(child, i4);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children2);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func, context) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children2, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children2) {
            var n5 = 0;
            mapChildren(children2, function() {
              n5++;
            });
            return n5;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children2) {
            return mapChildren(children2, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement6(children2)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children2;
          }
          function createContext32(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef23(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo4(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext32(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState26(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer3(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef39(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect34(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useInsertionEffect7(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create2, deps);
          }
          function useLayoutEffect7(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback25(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo24(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle2(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId5() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s4 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s4 >= 1 && c4 >= 0 && sampleLines[s4] !== controlLines[c4]) {
                  c4--;
                }
                for (; s4 >= 1 && c4 >= 0; s4--, c4--) {
                  if (sampleLines[s4] !== controlLines[c4]) {
                    if (s4 !== 1 || c4 !== 1) {
                      do {
                        s4--;
                        c4--;
                        if (c4 < 0 || sampleLines[s4] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s4 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i4 = 0; i4 < node2.length; i4++) {
                var child = node2[i4];
                if (isValidElement6(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement6(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement6(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i4 = 0; i4 < keys.length; i4++) {
                var key = keys[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement32.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i4 = 2; i4 < arguments.length; i4++) {
                validateChildKeys(arguments[i4], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children2) {
            var newElement = cloneElement4.apply(this, arguments);
            for (var i4 = 2; i4 < arguments.length; i4++) {
              validateChildKeys(arguments[i4], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i4 = 0;
                try {
                  for (; i4 < queue.length; i4++) {
                    var callback = queue[i4];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i4 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children5 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children5;
          exports.Component = Component3;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE2;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext32;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef23;
          exports.isValidElement = isValidElement6;
          exports.lazy = lazy;
          exports.memo = memo4;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback25;
          exports.useContext = useContext32;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect34;
          exports.useId = useId5;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect7;
          exports.useLayoutEffect = useLayoutEffect7;
          exports.useMemo = useMemo24;
          exports.useReducer = useReducer3;
          exports.useRef = useRef39;
          exports.useState = useState26;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/.pnpm/react@18.2.0/node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i4) {
            var index = i4;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i4) {
            var index = i4;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a4, b5) {
            var diff = a4.sortIndex - b5.sortIndex;
            return diff !== 0 ? diff : a4.id - b5.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority3 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority3;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer2 = peek2(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop(timerQueue);
              } else if (timer2.startTime <= currentTime) {
                pop(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push(taskQueue, timer2);
              } else {
                return;
              }
              timer2 = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority3:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority3;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority3:
                priorityLevel = NormalPriority3;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority3:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority3;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React122 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React122.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment18 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i4 = 0; i4 < dependencies.length; i4++) {
              allNativeEvents.add(dependencies[i4]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s4 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s4 >= 1 && c4 >= 0 && sampleLines[s4] !== controlLines[c4]) {
                  c4--;
                }
                for (; s4 >= 1 && c4 >= 0; s4--, c4--) {
                  if (sampleLines[s4] !== controlLines[c4]) {
                    if (s4 !== 1 || c4 !== 1) {
                      do {
                        s4--;
                        c4--;
                        if (c4 < 0 || sampleLines[s4] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s4 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment18:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE2) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set5 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set5.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc2) {
            doc2 = doc2 || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc2 === "undefined") {
              return null;
            }
            try {
              return doc2.activeElement || doc2.body;
            } catch (e3) {
              return doc2.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i4 = 0; i4 < group.length; i4++) {
                var otherNode = group[i4];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React122.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a4) {
            return isArrayImpl(a4);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i4 = 0; i4 < valuePropNames.length; i4++) {
                var propName = valuePropNames[i4];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i4 = 0; i4 < selectedValues.length; i4++) {
                selectedValue["$" + selectedValues[i4]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue = props.defaultValue;
              if (children2 != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children2)) {
                    if (children2.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children2 = children2[0];
                  }
                  defaultValue = children2;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode2 = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode2.firstChild) {
                  node2.appendChild(svgNode2.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue2 = styles[styleName];
                if (styleValue2 != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue2, isCustomProperty);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style3 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue2 = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue2);
              } else {
                style3[styleName] = styleValue2;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i4 = 0; i4 < longhands.length; i4++) {
                expanded[longhands[i4]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props6 = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props6);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i4 = 0; i4 < queuedTargets.length; i4++) {
                restoreStateOfTarget(queuedTargets[i4]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a4, b5) {
            if (isInsideEventHandler) {
              return fn(a4, b5);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a4, b5);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a4, b5, c4, d4, e3, f5) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a4, b5, c4, d4, e3, f5) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a4, b5, c4, d4, e3, f5) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a4, b5, c4, d4, e3, f5) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get4(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set4(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a4 = fiber;
            var b5 = alternate;
            while (true) {
              var parentA = a4.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a4 = b5 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a4) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b5) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a4.return !== b5.return) {
                a4 = parentA;
                b5 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a4) {
                    didFindChild = true;
                    a4 = parentA;
                    b5 = parentB;
                    break;
                  }
                  if (_child === b5) {
                    didFindChild = true;
                    b5 = parentA;
                    a4 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a4) {
                      didFindChild = true;
                      a4 = parentB;
                      b5 = parentA;
                      break;
                    }
                    if (_child === b5) {
                      didFindChild = true;
                      b5 = parentB;
                      a4 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a4.alternate !== b5) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a4.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a4.stateNode.current === a4) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority3 = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root4, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children2);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root4, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority3;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority3;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root4) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root4);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root4) {
            return getHighestPriorityLanes(root4.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root4, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root4, lanes) {
            return (lanes & root4.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a4, b5) {
            return (a4 & b5) !== NoLanes;
          }
          function isSubsetOfLanes(set5, subset) {
            return (set5 & subset) === subset;
          }
          function mergeLanes(a4, b5) {
            return a4 | b5;
          }
          function removeLanes(set5, subset) {
            return set5 & ~subset;
          }
          function intersectLanes(a4, b5) {
            return a4 & b5;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a4, b5) {
            return a4 !== NoLane && a4 < b5 ? a4 : b5;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i4 = 0; i4 < TotalLanes; i4++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root4.suspendedLanes = NoLanes;
              root4.pingedLanes = NoLanes;
            }
            var eventTimes = root4.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root4, entangledLanes) {
            var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root4, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root4, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root4, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            var memoizedUpdaters = root4.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root4, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority3(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a4, b5) {
            return a4 !== 0 && a4 < b5 ? a4 : b5;
          }
          function lowerEventPriority(a4, b5) {
            return a4 === 0 || a4 > b5 ? a4 : b5;
          }
          function isHigherEventPriority(a4, b5) {
            return a4 !== 0 && a4 < b5;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root4) {
            var currentState = root4.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i4 = 0;
            for (; i4 < queuedExplicitHydrationTargets.length; i4++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i4].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i4, 0, queuedTarget);
            if (i4 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i4 = 1; i4 < queuedDiscreteEvents.length; i4++) {
                var queuedEvent = queuedDiscreteEvents[i4];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority3:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc2 = nativeEventTarget.ownerDocument;
              if (doc2) {
                win = doc2.defaultView || doc2.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is3(x3, y4) {
            return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
          }
          var objectIs3 = typeof Object.is === "function" ? Object.is : is3;
          function shallowEqual(objA, objB) {
            if (objectIs3(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i4 = 0; i4 < keysA.length; i4++) {
              var currentKey = keysA[i4];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs3(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root4, offset2) {
            var node2 = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection2 = win.getSelection && win.getSelection();
            if (!selection2 || selection2.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end === -1) {
              return null;
            }
            return {
              start: start2,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc2 = node2.ownerDocument || document;
            var win = doc2 && doc2.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection2 = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection2.extend && start2 > end) {
              var temp = end;
              end = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc2.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection2.removeAllRanges();
              if (start2 > end) {
                selection2.addRange(range);
                selection2.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection2.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i4 = 0; i4 < ancestors.length; i4++) {
                var info = ancestors[i4];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection2;
            if ("selectionStart" in input) {
              selection2 = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection2 = getOffsets(input);
            }
            return selection2 || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection2 = win.getSelection();
              return {
                anchorNode: selection2.anchorNode,
                anchorOffset: selection2.anchorOffset,
                focusNode: selection2.focusNode,
                focusOffset: selection2.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc2 = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc2)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM2) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i4 = 0; i4 < simpleEventPluginEvents.length; i4++) {
              var eventName = simpleEventPluginEvents[i4];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i4 = dispatchListeners.length - 1; i4 >= 0; i4--) {
                var _dispatchListeners$i = dispatchListeners[i4], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i4 = 0; i4 < dispatchQueue.length; i4++) {
              var _dispatchQueue$i = dispatchQueue[i4], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent2(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent2(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent2(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent2(nodeA);
              nodeB = getParent2(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop5() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop5;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i4 = 0; i4 < updatePayload.length; i4 += 2) {
              var propKey = updatePayload[i4];
              var propValue = updatePayload[i4 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement32(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement32(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component3, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component3)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component3 = node2.type;
                    if (isContextProvider(Component3)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i4 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i4 < queue.length; i4++) {
                  var callback = queue[i4];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i4 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow2 = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id4 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id4.toString(32) + overflow2;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id4 = restOfNewBits | restOfBaseId;
              var overflow2 = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id4;
              treeContextOverflow = overflow2;
            } else {
              var newBits2 = slot << baseLength;
              var _id = newBits2 | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id4) {
            return 1 << getBitLength(id4) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props6 = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props6,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props22 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set5) {
              var array2 = [];
              set5.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component3, baseProps) {
            if (Component3 && Component3.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps = Component3.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i4 = 0; i4 < concurrentQueues.length; i4++) {
                var queue = concurrentQueues[i4];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root4 = node2.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root4, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i4 = 0; i4 < effects.length; i4++) {
                var effect = effects[i4];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React122.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state2 = instance.state;
              if (_state2 && (typeof _state2 !== "object" || isArray(_state2))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set4(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment18) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i4 = 0; i4 < newChildren.length; i4++) {
                  var child = newChildren[i4];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment18) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c4) {
            if (c4 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c4;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i4 = 0; i4 < workInProgressSources.length; i4++) {
              var mutableSource = workInProgressSources[i4];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i4 = 0; i4 <= hookTypesUpdateIndexDev; i4++) {
                    var oldHookName = hookTypesDev[i4];
                    var newHookName = i4 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i4 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i4 = 0; i4 < prevDeps.length && i4 < nextDeps.length; i4++) {
              if (objectIs3(nextDeps[i4], prevDeps[i4])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component3, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component3(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component3(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init2 !== void 0) {
              initialState2 = init2(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs3(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs3(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs3(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs3(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs3(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs3(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
            }
          }
          function updateEffect(create2, deps) {
            return updateEffectImpl(Passive, Passive$1, create2, deps);
          }
          function mountInsertionEffect(create2, deps) {
            return mountEffectImpl(Update, Insertion, create2, deps);
          }
          function updateInsertionEffect(create2, deps) {
            return updateEffectImpl(Update, Insertion, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs3(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root4 = getWorkInProgressRoot();
            var identifierPrefix = root4.identifierPrefix;
            var id4;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id4 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id4 += "H" + localId.toString(32);
              }
              id4 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id4 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id4;
            return id4;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id4 = hook.memoizedState;
            return id4;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs3(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root4, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    root4.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    if (root4 !== null) {
                      root4.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError2 = showErrorDialog(boundary, errorInfo);
              if (logError2 === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root4, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root4, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component3, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component3.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component3)
                  );
                }
              }
            }
            var render2 = Component3.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component3.type;
              if (isSimpleFunctionComponent(type) && Component3.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component3.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component3.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component3.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component3.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component3.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component3)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component3.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component3)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component3)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component3, nextProps);
              mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component3, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component3, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component3.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component3, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root4 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component3 = init2(payload);
            workInProgress2.type = Component3;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component3);
            var resolvedProps = resolveDefaultProps(Component3, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component3);
                  workInProgress2.type = Component3 = resolveFunctionForHotReloading(Component3);
                }
                child = updateFunctionComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component3 = resolveClassForHotReloading(Component3);
                }
                child = updateClassComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component3 = resolveForwardRefForHotReloading(Component3);
                }
                child = updateForwardRef(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component3.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component3)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component3,
                  resolveDefaultProps(Component3.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component3 !== null && typeof Component3 === "object" && Component3.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component3 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component3, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component3)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component3, nextProps);
            mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component3, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component3.prototype && typeof Component3.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component3) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component3) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component3) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component3)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component3, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component3);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component3) {
            {
              if (Component3) {
                if (Component3.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component3.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component3) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component3.contextType === "object" && Component3.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component3) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root4 = getWorkInProgressRoot();
                if (root4 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (isArray(children2)) {
                  for (var i4 = 0; i4 < children2.length; i4++) {
                    if (!validateSuspenseListNestedChild(children2[i4], i4)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs3(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root4 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component3 = workInProgress2.type;
                if (isContextProvider(Component3)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component3 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component3 ? unresolvedProps : resolveDefaultProps(Component3, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component3, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment18:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment18:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component3 = workInProgress2.type;
                if (isContextProvider(Component3)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component3 = workInProgress2.type;
                if (isContextProvider(Component3)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root4 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root4 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root4, firstChild) {
            focusedInstanceHandle = prepareForCommit(root4.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create2 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create2();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id4 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id4, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root4 = parentFiber.stateNode;
                              root4.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root4, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root4, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root4);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i4 = 0; i4 < deletions.length; i4++) {
                var childToDelete = deletions[i4];
                try {
                  commitDeletionEffects(root4, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root4);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root4.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root4, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root4, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root4,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i4 = 0; i4 < deletions.length; i4++) {
                    var fiberToDelete = deletions[i4];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition4 = ReactCurrentBatchConfig$3.transition;
                if (!transition4._updatedFibers) {
                  transition4._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition4._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root4, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root4, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root4 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root4, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
            var current2 = root4.current;
            current2.lanes = lane;
            markRootUpdated(root4, lane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root4.callbackNode = null;
              root4.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root4.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root4.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority3;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority3;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root4, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root4, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root4, lanes);
                var finishedWork = root4.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root4, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root4, NoLanes);
                    markRootSuspended$1(root4, lanes);
                    ensureRootIsScheduled(root4, now2());
                    throw _fatalError;
                  }
                }
                root4.finishedWork = finishedWork;
                root4.finishedLanes = lanes;
                finishConcurrentRender(root4, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root4, now2());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          function recoverFromConcurrentError(root4, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root4)) {
              var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root4.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root4, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i4 = 0; i4 < checks.length; i4++) {
                      var check = checks[i4];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs3(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          function performSyncWorkOnRoot(root4) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root4, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root4, now2());
              return null;
            }
            var exitStatus = renderRootSync(root4, lanes);
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root4, now2());
            return null;
          }
          function flushRoot(root4, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root4, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root4, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a4) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a4);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a4, b5, c4, d4) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a4, b5, c4, d4);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            var rootWorkInProgress = createWorkInProgress(root4.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root4, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (finishedWork === root4.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority3, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root4, finishedWork, lanes);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root4, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root4.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root4.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root4.onRecoverableError;
              for (var i4 = 0; i4 < recoverableErrors.length; i4++) {
                var recoverableError = recoverableErrors[i4];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root4.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority3, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root4.current);
            commitPassiveMountEffects(root4, root4.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i4 = 0; i4 < profilerEffects.length; i4++) {
                var _fiber = profilerEffects[i4];
                commitPassiveEffectDurations(root4, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root4.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root4 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root4;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root4);
            {
              var stateNode = root4.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root4 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root4 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root4, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root4, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
            {
              if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root4, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root4, element) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root4, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component3) {
            if (typeof Component3 === "function") {
              return shouldConstruct$1(Component3) ? ClassComponent : FunctionComponent;
            } else if (Component3 !== void 0 && Component3 !== null) {
              var $$typeof = Component3.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE2:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment18, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          var ReactVersion = "18.2.0";
          function createPortal3(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component3 = fiber.type;
              if (isContextProvider(Component3)) {
                return processChildContext(fiber, Component3, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get4(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root4 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root4.context = getContextForSubtree(null);
            var current2 = root4.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root4, lane, eventTime);
            return root4;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root4 = enqueueUpdate(current$1, update, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
              entangleTransitions(root4, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root4 = fiber.stateNode;
                if (isRootDehydrated(root4)) {
                  var lanes = getHighestPriorityPendingLanes(root4);
                  flushRoot(root4, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root5 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i4 = 0; i4 < newPath.length - 1; i4++) {
                  if (oldPath[i4] !== newPath[i4]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id4) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id4 > 0) {
                currentHook2 = currentHook2.next;
                id4--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id4, path, value) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id4, path) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id4, oldPath, newPath) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
            var root4 = this._internalRoot;
            if (root4 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root4.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root4, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            if (root4 !== null) {
              this._internalRoot = null;
              var container = root4.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root4, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root4 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root4);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root4 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i4 = 0; i4 < mutableSources.length; i4++) {
                var mutableSource = mutableSources[i4];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root4);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              var root4 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root4;
              markContainerAsRoot(root4.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root4;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root4;
            if (!maybeRoot) {
              root4 = legacyCreateRootFromDOMContainer(container, children2, parentComponent, callback, forceHydrate);
            } else {
              root4 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children2, root4, parentComponent, callback);
            }
            return getPublicRootInstance(root4);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority3);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children2, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children2, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/client.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      var m5 = require_react_dom();
      if (false) {
        exports.createRoot = m5.createRoot;
        exports.hydrateRoot = m5.hydrateRoot;
      } else {
        i4 = m5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c4, o4) {
          i4.usingClientEntryPoint = true;
          try {
            return m5.createRoot(c4, o4);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c4, h5, o4) {
          i4.usingClientEntryPoint = true;
          try {
            return m5.hydrateRoot(c4, h5, o4);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
      }
      var i4;
    }
  });

  // node_modules/.pnpm/scheduler@0.20.0/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development2 = __commonJS({
    "node_modules/.pnpm/scheduler@0.20.0/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (
            // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === "undefined" || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== "function"
          ) {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e3) {
                  setTimeout(_flushCallback, 0);
                  throw e3;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node2, i4) {
            var index = i4;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i4) {
            var index = i4;
            var length2 = heap.length;
            while (index < length2) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node2) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a4, b5) {
            var diff = a4.sortIndex - b5.sortIndex;
            return diff !== 0 ? diff : a4.id - b5.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority3 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = (
            // $FlowFixMe Flow doesn't know about SharedArrayBuffer
            typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : (
              // $FlowFixMe Flow doesn't know about ArrayBuffer
              typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null
            )
          );
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset2 = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset2);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority3;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer2 = peek2(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop(timerQueue);
              } else if (timer2.startTime <= currentTime) {
                pop(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push(taskQueue, timer2);
                {
                  markTaskStart(timer2, currentTime);
                  timer2.isQueued = true;
                }
              } else {
                return;
              }
              timer2 = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority3:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority3;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority3:
                priorityLevel = NormalPriority3;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority3:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority3;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/.pnpm/scheduler@0.20.0/node_modules/scheduler/index.js
  var require_scheduler2 = __commonJS({
    "node_modules/.pnpm/scheduler@0.20.0/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development2();
      }
    }
  });

  // node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          var React122 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React122.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s4 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s4 >= 1 && c4 >= 0 && sampleLines[s4] !== controlLines[c4]) {
                  c4--;
                }
                for (; s4 >= 1 && c4 >= 0; s4--, c4--) {
                  if (sampleLines[s4] !== controlLines[c4]) {
                    if (s4 !== 1 || c4 !== 1) {
                      do {
                        s4--;
                        c4--;
                        if (c4 < 0 || sampleLines[s4] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s4 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a4) {
            return isArrayImpl(a4);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement6(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i4 = 0; i4 < node2.length; i4++) {
                  var child = node2[i4];
                  if (isValidElement6(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement6(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement6(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i4 = 0; i4 < keys.length; i4++) {
                var key = keys[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children2 = props.children;
                if (children2 !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children2)) {
                      for (var i4 = 0; i4 < children2.length; i4++) {
                        validateChildKeys(children2[i4], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children2);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children2, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx30 = jsxWithValidationDynamic;
          var jsxs23 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx30;
          exports.jsxs = jsxs23;
        })();
      }
    }
  });

  // node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React122 = require_react();
          var ReactSharedInternals = React122.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function is3(x3, y4) {
            return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
          }
          var objectIs3 = typeof Object.is === "function" ? Object.is : is3;
          var useState26 = React122.useState, useEffect34 = React122.useEffect, useLayoutEffect7 = React122.useLayoutEffect, useDebugValue2 = React122.useDebugValue;
          var didWarnOld18Alpha = false;
          var didWarnUncachedGetSnapshot = false;
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            {
              if (!didWarnOld18Alpha) {
                if (React122.startTransition !== void 0) {
                  didWarnOld18Alpha = true;
                  error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
                }
              }
            }
            var value = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedValue = getSnapshot();
                if (!objectIs3(value, cachedValue)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var _useState = useState26({
              inst: {
                value,
                getSnapshot
              }
            }), inst = _useState[0].inst, forceUpdate = _useState[1];
            useLayoutEffect7(function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            }, [subscribe, value, getSnapshot]);
            useEffect34(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
              var handleStoreChange = function() {
                if (checkIfSnapshotChanged(inst)) {
                  forceUpdate({
                    inst
                  });
                }
              };
              return subscribe(handleStoreChange);
            }, [subscribe]);
            useDebugValue2(value);
            return value;
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs3(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
            return getSnapshot();
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var isServerEnvironment = !canUseDOM2;
          var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
          var useSyncExternalStore$2 = React122.useSyncExternalStore !== void 0 ? React122.useSyncExternalStore : shim;
          exports.useSyncExternalStore = useSyncExternalStore$2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
  var require_with_selector_development = __commonJS({
    "node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React122 = require_react();
          var shim = require_shim();
          function is3(x3, y4) {
            return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
          }
          var objectIs3 = typeof Object.is === "function" ? Object.is : is3;
          var useSyncExternalStore = shim.useSyncExternalStore;
          var useRef39 = React122.useRef, useEffect34 = React122.useEffect, useMemo24 = React122.useMemo, useDebugValue2 = React122.useDebugValue;
          function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector2, isEqual) {
            var instRef = useRef39(null);
            var inst;
            if (instRef.current === null) {
              inst = {
                hasValue: false,
                value: null
              };
              instRef.current = inst;
            } else {
              inst = instRef.current;
            }
            var _useMemo = useMemo24(function() {
              var hasMemo = false;
              var memoizedSnapshot;
              var memoizedSelection;
              var memoizedSelector = function(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  var _nextSelection = selector2(nextSnapshot);
                  if (isEqual !== void 0) {
                    if (inst.hasValue) {
                      var currentSelection = inst.value;
                      if (isEqual(currentSelection, _nextSelection)) {
                        memoizedSelection = currentSelection;
                        return currentSelection;
                      }
                    }
                  }
                  memoizedSelection = _nextSelection;
                  return _nextSelection;
                }
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs3(prevSnapshot, nextSnapshot)) {
                  return prevSelection;
                }
                var nextSelection = selector2(nextSnapshot);
                if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                  return prevSelection;
                }
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
              };
              var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
              var getSnapshotWithSelector = function() {
                return memoizedSelector(getSnapshot());
              };
              var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              };
              return [getSnapshotWithSelector, getServerSnapshotWithSelector];
            }, [getSnapshot, getServerSnapshot, selector2, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
            var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
            useEffect34(function() {
              inst.hasValue = true;
              inst.value = value;
            }, [value]);
            useDebugValue2(value);
            return value;
          }
          exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
      "use strict";
      init_define_process();
      init_define_process_env();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_with_selector_development();
      }
    }
  });

  // node_modules/.pnpm/@emotion+memoize@0.7.4/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/.pnpm/@emotion+memoize@0.7.4/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize(fn) {
        var cache2 = {};
        return function(arg) {
          if (cache2[arg] === void 0)
            cache2[arg] = fn(arg);
          return cache2[arg];
        };
      }
      exports.default = memoize;
    }
  });

  // node_modules/.pnpm/@emotion+is-prop-valid@0.8.8/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "node_modules/.pnpm/@emotion+is-prop-valid@0.8.8/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      init_define_process();
      init_define_process_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index = memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
      exports.default = index;
    }
  });

  // src/index.tsx
  init_define_process();
  init_define_process_env();
  var import_react74 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // src/App.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-components@9.19.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18._aljl4ntiuaofk36a4vt4b52kca/node_modules/@fluentui/react-components/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/index.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/index.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/border.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderWidth.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/generateStyles.esm.js
  init_define_process();
  init_define_process_env();
  var positionMap = ["Top", "Right", "Bottom", "Left"];
  function generateStyles(property, suffix, ...values) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values;
    const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];
    const styles = {};
    for (let i4 = 0; i4 < valuesWithDefaults.length; i4 += 1) {
      if (valuesWithDefaults[i4] || valuesWithDefaults[i4] === 0) {
        const newKey = property + positionMap[i4] + suffix;
        styles[newKey] = valuesWithDefaults[i4];
      }
    }
    return styles;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderWidth.esm.js
  function borderWidth(...values) {
    return generateStyles("border", "Width", ...values);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderStyle.esm.js
  init_define_process();
  init_define_process_env();
  function borderStyle(...values) {
    return generateStyles("border", "Style", ...values);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderColor.esm.js
  init_define_process();
  init_define_process_env();
  function borderColor(...values) {
    return generateStyles("border", "Color", ...values);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/border.esm.js
  function border(...values) {
    return {
      ...borderWidth(values[0]),
      ...values[1] && borderStyle(values[1]),
      ...values[2] && borderColor(values[2])
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderLeft.esm.js
  init_define_process();
  init_define_process_env();
  function borderLeft(...values) {
    return {
      borderLeftWidth: values[0],
      ...values[1] && {
        borderLeftStyle: values[1]
      },
      ...values[2] && {
        borderLeftColor: values[2]
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderBottom.esm.js
  init_define_process();
  init_define_process_env();
  function borderBottom(...values) {
    return {
      borderBottomWidth: values[0],
      ...values[1] && {
        borderBottomStyle: values[1]
      },
      ...values[2] && {
        borderBottomColor: values[2]
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderRight.esm.js
  init_define_process();
  init_define_process_env();
  function borderRight(...values) {
    return {
      borderRightWidth: values[0],
      ...values[1] && {
        borderRightStyle: values[1]
      },
      ...values[2] && {
        borderRightColor: values[2]
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderTop.esm.js
  init_define_process();
  init_define_process_env();
  function borderTop(...values) {
    return {
      borderTopWidth: values[0],
      ...values[1] && {
        borderTopStyle: values[1]
      },
      ...values[2] && {
        borderTopColor: values[2]
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/borderRadius.esm.js
  init_define_process();
  init_define_process_env();
  function borderRadius(value1, value2 = value1, value3 = value1, value4 = value2) {
    return {
      borderBottomRightRadius: value3,
      borderBottomLeftRadius: value4,
      borderTopRightRadius: value2,
      borderTopLeftRadius: value1
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/flex.esm.js
  init_define_process();
  init_define_process_env();
  var isUnit = (value) => typeof value === "string" && /(\d+(\w+|%))/.test(value);
  var isUnitless = (value) => typeof value === "number" && !Number.isNaN(value);
  var isInitial = (value) => value === "initial";
  var isAuto = (value) => value === "auto";
  var isNone = (value) => value === "none";
  var widthReservedKeys = ["content", "fit-content", "max-content", "min-content"];
  var isWidth = (value) => widthReservedKeys.some((key) => value === key) || isUnit(value);
  function flex(...values) {
    const isOneValueSyntax = values.length === 1;
    const isTwoValueSyntax = values.length === 2;
    const isThreeValueSyntax = values.length === 3;
    if (isOneValueSyntax) {
      const [firstValue] = values;
      if (isInitial(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isAuto(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isNone(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 0,
          flexBasis: "auto"
        };
      }
      if (isUnitless(firstValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: 0
        };
      }
      if (isWidth(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: firstValue
        };
      }
    }
    if (isTwoValueSyntax) {
      const [firstValue, secondValue] = values;
      if (isUnitless(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: 0
        };
      }
      if (isWidth(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: secondValue
        };
      }
    }
    if (isThreeValueSyntax) {
      const [firstValue, secondValue, thirdValue] = values;
      if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: thirdValue
        };
      }
    }
    if (true) {
      console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);
    }
    return {};
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/gap.esm.js
  init_define_process();
  init_define_process_env();
  function gap(columnGap, rowGap = columnGap) {
    return {
      columnGap,
      rowGap
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/gridArea.esm.js
  init_define_process();
  init_define_process_env();
  var cssVarRegEx = /var\(.*\)/gi;
  function isValidGridAreaInput(value) {
    return value === void 0 || typeof value === "number" || typeof value === "string" && !cssVarRegEx.test(value);
  }
  var customIdentRegEx = /^[a-zA-Z0-9\-_\\#;]+$/;
  var nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \d+$|\d.*/;
  function isCustomIdent(value) {
    return value !== void 0 && typeof value === "string" && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value);
  }
  function gridArea(...values) {
    if (values.some((value) => !isValidGridAreaInput(value))) {
      if (true) {
        console.error(`The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`, ["The value passed to shorthands.gridArea() did not match any gridArea property specs. ", "The CSS styles were not generated.\n", "Please, check the `grid-area` documentation:\n", "- https://developer.mozilla.org/docs/Web/CSS/grid-area", "- https://griffel.js.org/react/api/shorthands#shorthandsgridarea"].join(""));
      }
      return {};
    }
    const gridRowStart = values[0] !== void 0 ? values[0] : "auto";
    const gridColumnStart = values[1] !== void 0 ? values[1] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridRowEnd = values[2] !== void 0 ? values[2] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridColumnEnd = values[3] !== void 0 ? values[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : "auto";
    return {
      gridRowStart,
      gridColumnStart,
      gridRowEnd,
      gridColumnEnd
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/margin.esm.js
  init_define_process();
  init_define_process_env();
  function margin(...values) {
    return generateStyles("margin", "", ...values);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/marginBlock.esm.js
  init_define_process();
  init_define_process_env();
  function marginBlock(start2, end = start2) {
    return {
      marginBlockStart: start2,
      marginBlockEnd: end
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/marginInline.esm.js
  init_define_process();
  init_define_process_env();
  function marginInline(start2, end = start2) {
    return {
      marginInlineStart: start2,
      marginInlineEnd: end
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/padding.esm.js
  init_define_process();
  init_define_process_env();
  function padding(...values) {
    return generateStyles("padding", "", ...values);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/paddingBlock.esm.js
  init_define_process();
  init_define_process_env();
  function paddingBlock(start2, end = start2) {
    return {
      paddingBlockStart: start2,
      paddingBlockEnd: end
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/paddingInline.esm.js
  init_define_process();
  init_define_process_env();
  function paddingInline(start2, end = start2) {
    return {
      paddingInlineStart: start2,
      paddingInlineEnd: end
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/overflow.esm.js
  init_define_process();
  init_define_process_env();
  function overflow(overflowX, overflowY = overflowX) {
    return {
      overflowX,
      overflowY
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/inset.esm.js
  init_define_process();
  init_define_process_env();
  function inset(...values) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values;
    return {
      top: firstValue,
      right: secondValue,
      bottom: thirdValue,
      left: fourthValue
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/outline.esm.js
  init_define_process();
  init_define_process_env();
  function outline(outlineWidth, outlineStyle, outlineColor) {
    return {
      outlineWidth,
      ...outlineStyle && {
        outlineStyle
      },
      ...outlineColor && {
        outlineColor
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/shorthands/transition.esm.js
  init_define_process();
  init_define_process_env();
  function transition(...values) {
    if (isTransitionGlobalInputs(values)) {
      return {
        transitionDelay: values[0],
        transitionDuration: values[0],
        transitionProperty: values[0],
        transitionTimingFunction: values[0]
      };
    }
    const transitionInputs = normalizeTransitionInputs(values);
    return transitionInputs.reduce((acc, [property, duration = "0s", delay = "0s", timingFunction = "ease"], index) => {
      if (index === 0) {
        acc.transitionProperty = property;
        acc.transitionDuration = duration;
        acc.transitionDelay = delay;
        acc.transitionTimingFunction = timingFunction;
      } else {
        acc.transitionProperty += `, ${property}`;
        acc.transitionDuration += `, ${duration}`;
        acc.transitionDelay += `, ${delay}`;
        acc.transitionTimingFunction += `, ${timingFunction}`;
      }
      return acc;
    }, {});
  }
  var transitionGlobalInputs = ["-moz-initial", "inherit", "initial", "revert", "unset"];
  function isTransitionGlobalInputs(values) {
    return values.length === 1 && transitionGlobalInputs.includes(values[0]);
  }
  function normalizeTransitionInputs(transitionInputs) {
    if (transitionInputs.length === 1 && Array.isArray(transitionInputs[0])) {
      return transitionInputs[0];
    }
    return [transitionInputs];
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/injectDevTools.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/constants.esm.js
  init_define_process();
  init_define_process_env();
  var __GLOBAL__ = typeof window === "undefined" ? window : window;
  var __NAMESPACE_PREFIX__ = "@griffel/";
  function getGlobalVar(name, defaultValue) {
    if (!__GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)]) {
      __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)] = defaultValue;
    }
    return __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)];
  }
  var DEBUG_RESET_CLASSES = /* @__PURE__ */ getGlobalVar("DEBUG_RESET_CLASSES", {});
  var DEFINITION_LOOKUP_TABLE = /* @__PURE__ */ getGlobalVar("DEFINITION_LOOKUP_TABLE", {});
  var DATA_BUCKET_ATTR = "data-make-styles-bucket";
  var HASH_PREFIX = "f";
  var RESET_HASH_PREFIX = "r";
  var SEQUENCE_HASH_LENGTH = 7;
  var SEQUENCE_PREFIX = "___";
  var DEBUG_SEQUENCE_SEPARATOR = "_";
  var SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
  var LOOKUP_DEFINITIONS_INDEX = 0;
  var LOOKUP_DIR_INDEX = 1;
  var UNSUPPORTED_CSS_PROPERTIES = {
    all: 1,
    animation: 1,
    background: 1,
    backgroundPosition: 1,
    border: 1,
    borderBlock: 1,
    borderBlockEnd: 1,
    borderBlockStart: 1,
    borderBottom: 1,
    borderColor: 1,
    borderImage: 1,
    borderInline: 1,
    borderInlineEnd: 1,
    borderInlineStart: 1,
    borderLeft: 1,
    borderRadius: 1,
    borderRight: 1,
    borderStyle: 1,
    borderTop: 1,
    borderWidth: 1,
    caret: 1,
    columns: 1,
    columnRule: 1,
    containIntrinsicSize: 1,
    container: 1,
    flex: 1,
    flexFlow: 1,
    font: 1,
    gap: 1,
    grid: 1,
    gridArea: 1,
    gridColumn: 1,
    gridRow: 1,
    gridTemplate: 1,
    inset: 1,
    insetBlock: 1,
    insetInline: 1,
    lineClamp: 1,
    listStyle: 1,
    margin: 1,
    marginBlock: 1,
    marginInline: 1,
    mask: 1,
    maskBorder: 1,
    motion: 1,
    offset: 1,
    outline: 1,
    overflow: 1,
    overscrollBehavior: 1,
    padding: 1,
    paddingBlock: 1,
    paddingInline: 1,
    placeItems: 1,
    placeContent: 1,
    placeSelf: 1,
    scrollMargin: 1,
    scrollMarginBlock: 1,
    scrollMarginInline: 1,
    scrollPadding: 1,
    scrollPaddingBlock: 1,
    scrollPaddingInline: 1,
    scrollSnapMargin: 1,
    scrollTimeline: 1,
    textDecoration: 1,
    textEmphasis: 1,
    transition: 1
  };

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/getDebugTree.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/store.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/mergeClasses.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@emotion+hash@0.9.0/node_modules/@emotion/hash/dist/emotion-hash.esm.js
  init_define_process();
  init_define_process_env();
  function murmur2(str) {
    var h5 = 0;
    var k2, i4 = 0, len = str.length;
    for (; len >= 4; ++i4, len -= 4) {
      k2 = str.charCodeAt(i4) & 255 | (str.charCodeAt(++i4) & 255) << 8 | (str.charCodeAt(++i4) & 255) << 16 | (str.charCodeAt(++i4) & 255) << 24;
      k2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= /* k >>> r: */
      k2 >>> 24;
      h5 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h5 & 65535) * 1540483477 + ((h5 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h5 ^= (str.charCodeAt(i4 + 2) & 255) << 16;
      case 2:
        h5 ^= (str.charCodeAt(i4 + 1) & 255) << 8;
      case 1:
        h5 ^= str.charCodeAt(i4) & 255;
        h5 = /* Math.imul(h, m): */
        (h5 & 65535) * 1540483477 + ((h5 >>> 16) * 59797 << 16);
    }
    h5 ^= h5 >>> 13;
    h5 = /* Math.imul(h, m): */
    (h5 & 65535) * 1540483477 + ((h5 >>> 16) * 59797 << 16);
    return ((h5 ^ h5 >>> 15) >>> 0).toString(36);
  }
  var emotion_hash_esm_default = murmur2;

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i4 = hashLength; i4 < SEQUENCE_HASH_LENGTH; i4++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(emotion_hash_esm_default(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(emotion_hash_esm_default(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(emotion_hash_esm_default(sequenceIds.join("")));
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  init_define_process();
  init_define_process_env();
  function reduceToClassName(classMap, dir) {
    let className = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping) {
        const hasRTLClassName = Array.isArray(classNameMapping);
        if (dir === "rtl") {
          className += (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " ";
        } else {
          className += (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
        }
      }
    }
    return className.slice(0, -1);
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const slotClasses = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClasses === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClasses, dir);
      const resultSlotClasses = sequenceHash + " " + slotClasses;
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/mergeClasses.esm.js
  var mergeClassesCachedResults = {};
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    let containsResetClassName = "";
    for (let i4 = 0; i4 < arguments.length; i4++) {
      const className = arguments[i4];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          if (true) {
            className.split(" ").forEach((entry) => {
              if (entry.startsWith(RESET_HASH_PREFIX) && DEBUG_RESET_CLASSES[entry]) {
                if (containsResetClassName) {
                  console.error(`mergeClasses(): a passed string contains multiple classes produced by makeResetStyles (${className} & ${resultClassName}, this will lead to non-deterministic behavior. Learn more:https://griffel.js.org/react/api/make-reset-styles#limitations
Source string: ${className}`);
                } else {
                  containsResetClassName = entry;
                }
              }
            });
          }
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i4] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i4 = 0; i4 < arguments.length; i4++) {
      const sequenceId = sequencesIds[i4];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i4]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i4]}`);
          }
        }
      }
    }
    const resultDefinitions = Object.assign.apply(
      Object,
      // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
      [{}].concat(sequenceMappings)
    );
    let atomicClassNames = reduceToClassName(resultDefinitions, dir);
    const newSequenceHash = hashSequence(atomicClassNames, dir, sequencesIds);
    atomicClassNames = newSequenceHash + " " + atomicClassNames;
    mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
    return resultClassName + atomicClassNames;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails = {};
  var cssRules = /* @__PURE__ */ new Set();
  var debugData = {
    getChildrenSequences: (debugSequenceHash) => {
      const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
      if (key) {
        return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
      }
      return [];
    },
    addCSSRule: (rule) => {
      cssRules.add(rule);
    },
    addSequenceDetails: (classNamesForSlots, sourceURL) => {
      Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
        sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
          slotName,
          sourceURL
        };
      });
    },
    getCSSRules: () => {
      return Array.from(cssRules);
    },
    getSequenceDetails: (sequenceHash) => {
      return sequenceDetails[sequenceHash];
    }
  };

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/utils.esm.js
  init_define_process();
  init_define_process_env();
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes;
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/getDebugTree.esm.js
  function getDebugTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node2 = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node2.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getDebugTree(sequence, node2);
      if (child) {
        node2.children.push(child);
      }
    });
    if (!node2.children.length) {
      node2.rules = {};
      node2.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node2.slot = mapData.slotName;
          node2.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node2.rules[className] = cssRule;
      });
    }
    return node2;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document2) {
    const window2 = document2.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element) => {
        const rootDebugSequenceHash = Array.from(element.classList).find((className) => className.startsWith(SEQUENCE_PREFIX));
        if (rootDebugSequenceHash === void 0) {
          return void 0;
        }
        return getDebugTree(rootDebugSequenceHash);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  init_define_process();
  init_define_process_env();
  var isDevToolsEnabled = /* @__PURE__ */ (() => {
    var _a;
    try {
      return Boolean(typeof window !== "undefined" && ((_a = window.sessionStorage) === null || _a === void 0 ? void 0 : _a.getItem("__GRIFFEL_DEVTOOLS__")));
    } catch (e3) {
      return false;
    }
  })();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  init_define_process();
  init_define_process_env();
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  init_define_process();
  init_define_process_env();
  function createIsomorphicStyleSheet(styleElement, bucketName, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  var styleBucketOrdering = [
    // reset styles
    "r",
    // catch-all
    "d",
    // link
    "l",
    // visited
    "v",
    // focus-within
    "w",
    // focus
    "f",
    // focus-visible
    "i",
    // hover
    "h",
    // active
    "a",
    // keyframes
    "k",
    // at-rules
    "t",
    // @media rules
    "m",
    // @container rules
    "c"
  ];
  var styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j3) => {
    acc[cur] = j3;
    return acc;
  }, {});
  function getStyleSheetForBucket(bucketName, targetDocument, insertionPoint, renderer, metadata = {}) {
    const isMediaBucket = bucketName === "m";
    const stylesheetKey = isMediaBucket ? bucketName + metadata["m"] : bucketName;
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = targetDocument && targetDocument.createElement("style");
      const stylesheet = createIsomorphicStyleSheet(tag, bucketName, {
        ...renderer.styleElementAttributes,
        ...isMediaBucket && {
          media: metadata["m"]
        }
      });
      renderer.stylesheets[stylesheetKey] = stylesheet;
      if (targetDocument && tag) {
        targetDocument.head.insertBefore(tag, findInsertionPoint(targetDocument, insertionPoint, bucketName, renderer, metadata));
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function findInsertionPoint(targetDocument, insertionPoint, targetBucket, renderer, metadata) {
    const targetOrder = styleBucketOrderingMap[targetBucket];
    let comparer = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m" && metadata) {
      const mediaElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer = (el) => renderer.compareMediaQueries(metadata["m"], el.media);
      }
    }
    const length2 = styleElements.length;
    let index = length2 - 1;
    while (index >= 0) {
      const styleElement = styleElements.item(index);
      if (comparer(styleElement) > 0) {
        return styleElement.nextSibling;
      }
      index--;
    }
    if (length2 > 0) {
      return styleElements.item(0);
    }
    return insertionPoint ? insertionPoint.nextSibling : null;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  var lastIndex = 0;
  var defaultCompareMediaQueries = (a4, b5) => a4 < b5 ? -1 : a4 > b5 ? 1 : 0;
  function createDOMRenderer(targetDocument = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      unstable_filterCSSRule,
      insertionPoint,
      styleElementAttributes,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      insertionCache: {},
      stylesheets: {},
      styleElementAttributes: Object.freeze(styleElementAttributes),
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i4 = 0, l5 = cssRulesForBucket.length; i4 < l5; i4++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i4]);
            const sheet = getStyleSheetForBucket(styleBucketName, targetDocument, insertionPoint || null, renderer, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            try {
              if (unstable_filterCSSRule) {
                if (unstable_filterCSSRule(ruleCSS)) {
                  sheet.insertRule(ruleCSS);
                }
              } else {
                sheet.insertRule(ruleCSS);
              }
            } catch (e3) {
              if (!ignoreSuffixesRegex.test(ruleCSS)) {
                console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e3);
              }
            }
          }
        }
      }
    };
    if (targetDocument && true && isDevToolsEnabled) {
      injectDevTools(targetDocument);
    }
    return renderer;
  }
  var ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
  var ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/makeStyles.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  init_define_process();
  init_define_process_env();
  var UNKNOWN_FUNCTION = "<unknown>";
  function parseStackTraceLine(line2) {
    return parseChrome(line2) || parseGecko(line2) || parseJSC(line2);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
  var chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
  var chromeEvalRe = /\((\S*)\)/;
  function parseChrome(line2) {
    const parts = chromeRe.exec(line2) || chromeRe2.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line2) {
    const parts = geckoRe.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
  function parseJSC(line2) {
    const parts = javaScriptCoreRe.exec(line2);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i4 = stacks.length - 1; i4 >= 0; --i4) {
      if (stacks[i4].includes("at getSourceURLfromError")) {
        return stacks[i4 + 3];
      }
    }
    return void 0;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/resolveStyleRulesForSlots.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/resolveStyleRules.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/rtl-css-js@1.16.1/node_modules/rtl-css-js/dist/esm/core.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/rtl-css-js@1.16.1/node_modules/rtl-css-js/dist/esm/convert-9768a965.js
  init_define_process();
  init_define_process_env();
  function arrayToObject(array2) {
    return array2.reduce(function(obj, _ref) {
      var prop1 = _ref[0], prop2 = _ref[1];
      obj[prop1] = prop2;
      obj[prop2] = prop1;
      return obj;
    }, {});
  }
  function isBoolean(val) {
    return typeof val === "boolean";
  }
  function isFunction(val) {
    return typeof val === "function";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isNullOrUndefined(val) {
    return val === null || typeof val === "undefined";
  }
  function isObject(val) {
    return val && typeof val === "object";
  }
  function isString(val) {
    return typeof val === "string";
  }
  function includes(inclusive, inclusee) {
    return inclusive.indexOf(inclusee) !== -1;
  }
  function flipSign(value) {
    if (parseFloat(value) === 0) {
      return value;
    }
    if (value[0] === "-") {
      return value.slice(1);
    }
    return "-" + value;
  }
  function flipTransformSign(match2, prefix2, offset2, suffix) {
    return prefix2 + flipSign(offset2) + suffix;
  }
  function calculateNewBackgroundPosition(value) {
    var idx = value.indexOf(".");
    if (idx === -1) {
      value = 100 - parseFloat(value) + "%";
    } else {
      var len = value.length - idx - 2;
      value = 100 - parseFloat(value);
      value = value.toFixed(len) + "%";
    }
    return value;
  }
  function getValuesAsList(value) {
    return value.replace(/ +/g, " ").split(" ").map(function(i4) {
      return i4.trim();
    }).filter(Boolean).reduce(function(_ref2, item) {
      var list = _ref2.list, state = _ref2.state;
      var openParansCount = (item.match(/\(/g) || []).length;
      var closedParansCount = (item.match(/\)/g) || []).length;
      if (state.parensDepth > 0) {
        list[list.length - 1] = list[list.length - 1] + " " + item;
      } else {
        list.push(item);
      }
      state.parensDepth += openParansCount - closedParansCount;
      return {
        list,
        state
      };
    }, {
      list: [],
      state: {
        parensDepth: 0
      }
    }).list;
  }
  function handleQuartetValues(value) {
    var splitValues = getValuesAsList(value);
    if (splitValues.length <= 3 || splitValues.length > 4) {
      return value;
    }
    var top = splitValues[0], right = splitValues[1], bottom = splitValues[2], left = splitValues[3];
    return [top, left, bottom, right].join(" ");
  }
  function canConvertValue(value) {
    return !isBoolean(value) && !isNullOrUndefined(value);
  }
  function splitShadow(value) {
    var shadows = [];
    var start2 = 0;
    var end = 0;
    var rgba3 = false;
    while (end < value.length) {
      if (!rgba3 && value[end] === ",") {
        shadows.push(value.substring(start2, end).trim());
        end++;
        start2 = end;
      } else if (value[end] === "(") {
        rgba3 = true;
        end++;
      } else if (value[end] === ")") {
        rgba3 = false;
        end++;
      } else {
        end++;
      }
    }
    if (start2 != end) {
      shadows.push(value.substring(start2, end + 1));
    }
    return shadows;
  }
  var propertyValueConverters = {
    padding: function padding2(_ref) {
      var value = _ref.value;
      if (isNumber(value)) {
        return value;
      }
      return handleQuartetValues(value);
    },
    textShadow: function textShadow(_ref2) {
      var value = _ref2.value;
      var flippedShadows = splitShadow(value).map(function(shadow) {
        return shadow.replace(/(^|\s)(-*)([.|\d]+)/, function(match2, whiteSpace, negative, number2) {
          if (number2 === "0") {
            return match2;
          }
          var doubleNegative = negative === "" ? "-" : "";
          return "" + whiteSpace + doubleNegative + number2;
        });
      });
      return flippedShadows.join(",");
    },
    borderColor: function borderColor2(_ref3) {
      var value = _ref3.value;
      return handleQuartetValues(value);
    },
    borderRadius: function borderRadius2(_ref4) {
      var value = _ref4.value;
      if (isNumber(value)) {
        return value;
      }
      if (includes(value, "/")) {
        var _value$split = value.split("/"), radius1 = _value$split[0], radius2 = _value$split[1];
        var convertedRadius1 = propertyValueConverters.borderRadius({
          value: radius1.trim()
        });
        var convertedRadius2 = propertyValueConverters.borderRadius({
          value: radius2.trim()
        });
        return convertedRadius1 + " / " + convertedRadius2;
      }
      var splitValues = getValuesAsList(value);
      switch (splitValues.length) {
        case 2: {
          return splitValues.reverse().join(" ");
        }
        case 4: {
          var topLeft = splitValues[0], topRight = splitValues[1], bottomRight = splitValues[2], bottomLeft = splitValues[3];
          return [topRight, topLeft, bottomLeft, bottomRight].join(" ");
        }
        default: {
          return value;
        }
      }
    },
    background: function background(_ref5) {
      var value = _ref5.value, valuesToConvert2 = _ref5.valuesToConvert, isRtl = _ref5.isRtl, bgImgDirectionRegex2 = _ref5.bgImgDirectionRegex, bgPosDirectionRegex2 = _ref5.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, "").trim();
      value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({
        value: backgroundPositionValue,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      }));
      return propertyValueConverters.backgroundImage({
        value,
        valuesToConvert: valuesToConvert2,
        bgImgDirectionRegex: bgImgDirectionRegex2
      });
    },
    backgroundImage: function backgroundImage(_ref6) {
      var value = _ref6.value, valuesToConvert2 = _ref6.valuesToConvert, bgImgDirectionRegex2 = _ref6.bgImgDirectionRegex;
      if (!includes(value, "url(") && !includes(value, "linear-gradient(")) {
        return value;
      }
      return value.replace(bgImgDirectionRegex2, function(match2, g1, group2) {
        return match2.replace(group2, valuesToConvert2[group2]);
      });
    },
    backgroundPosition: function backgroundPosition(_ref7) {
      var value = _ref7.value, valuesToConvert2 = _ref7.valuesToConvert, isRtl = _ref7.isRtl, bgPosDirectionRegex2 = _ref7.bgPosDirectionRegex;
      return value.replace(isRtl ? /^((-|\d|\.)+%)/ : null, function(match2, group) {
        return calculateNewBackgroundPosition(group);
      }).replace(bgPosDirectionRegex2, function(match2) {
        return valuesToConvert2[match2];
      });
    },
    backgroundPositionX: function backgroundPositionX(_ref8) {
      var value = _ref8.value, valuesToConvert2 = _ref8.valuesToConvert, isRtl = _ref8.isRtl, bgPosDirectionRegex2 = _ref8.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      return propertyValueConverters.backgroundPosition({
        value,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      });
    },
    transition: function transition2(_ref9) {
      var value = _ref9.value, propertiesToConvert2 = _ref9.propertiesToConvert;
      return value.split(/,\s*/g).map(function(transition4) {
        var values = transition4.split(" ");
        values[0] = propertiesToConvert2[values[0]] || values[0];
        return values.join(" ");
      }).join(", ");
    },
    transitionProperty: function transitionProperty(_ref10) {
      var value = _ref10.value, propertiesToConvert2 = _ref10.propertiesToConvert;
      return value.split(/,\s*/g).map(function(prop) {
        return propertiesToConvert2[prop] || prop;
      }).join(", ");
    },
    transform: function transform(_ref11) {
      var value = _ref11.value;
      var nonAsciiPattern = "[^\\u0020-\\u007e]";
      var escapePattern = "(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f])";
      var signedQuantPattern = "((?:-?" + ("(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|" + ("-?" + ("(?:[_a-z]|" + nonAsciiPattern + "|" + escapePattern + ")") + ("(?:[_a-z0-9-]|" + nonAsciiPattern + "|" + escapePattern + ")") + "*") + ")?") + ")|(?:inherit|auto))";
      var translateXRegExp = new RegExp("(translateX\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      var translateRegExp = new RegExp("(translate\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,1}\\s*\\))", "gi");
      var translate3dRegExp = new RegExp("(translate3d\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,2}\\s*\\))", "gi");
      var rotateRegExp = new RegExp("(rotate[ZY]?\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);
    }
  };
  propertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;
  propertyValueConverters.margin = propertyValueConverters.padding;
  propertyValueConverters.borderWidth = propertyValueConverters.padding;
  propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
  propertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.borderStyle = propertyValueConverters.borderColor;
  propertyValueConverters.webkitTransform = propertyValueConverters.transform;
  propertyValueConverters.mozTransform = propertyValueConverters.transform;
  propertyValueConverters.WebkitTransform = propertyValueConverters.transform;
  propertyValueConverters.MozTransform = propertyValueConverters.transform;
  propertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;
  propertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.webkitTransition = propertyValueConverters.transition;
  propertyValueConverters.mozTransition = propertyValueConverters.transition;
  propertyValueConverters.WebkitTransition = propertyValueConverters.transition;
  propertyValueConverters.MozTransition = propertyValueConverters.transition;
  propertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters["text-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-color"] = propertyValueConverters.borderColor;
  propertyValueConverters["border-radius"] = propertyValueConverters.borderRadius;
  propertyValueConverters["background-image"] = propertyValueConverters.backgroundImage;
  propertyValueConverters["background-position"] = propertyValueConverters.backgroundPosition;
  propertyValueConverters["background-position-x"] = propertyValueConverters.backgroundPositionX;
  propertyValueConverters["object-position"] = propertyValueConverters.objectPosition;
  propertyValueConverters["border-width"] = propertyValueConverters.padding;
  propertyValueConverters["box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-webkit-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-moz-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-style"] = propertyValueConverters.borderColor;
  propertyValueConverters["-webkit-transform"] = propertyValueConverters.transform;
  propertyValueConverters["-moz-transform"] = propertyValueConverters.transform;
  propertyValueConverters["transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-moz-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transition"] = propertyValueConverters.transition;
  propertyValueConverters["-moz-transition"] = propertyValueConverters.transition;
  propertyValueConverters["transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-webkit-transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-moz-transition-property"] = propertyValueConverters.transitionProperty;
  var propertiesToConvert = arrayToObject([
    ["paddingLeft", "paddingRight"],
    ["marginLeft", "marginRight"],
    ["left", "right"],
    ["borderLeft", "borderRight"],
    ["borderLeftColor", "borderRightColor"],
    ["borderLeftStyle", "borderRightStyle"],
    ["borderLeftWidth", "borderRightWidth"],
    ["borderTopLeftRadius", "borderTopRightRadius"],
    ["borderBottomLeftRadius", "borderBottomRightRadius"],
    // kebab-case versions
    ["padding-left", "padding-right"],
    ["margin-left", "margin-right"],
    ["border-left", "border-right"],
    ["border-left-color", "border-right-color"],
    ["border-left-style", "border-right-style"],
    ["border-left-width", "border-right-width"],
    ["border-top-left-radius", "border-top-right-radius"],
    ["border-bottom-left-radius", "border-bottom-right-radius"]
  ]);
  var propsToIgnore = ["content"];
  var valuesToConvert = arrayToObject([["ltr", "rtl"], ["left", "right"], ["w-resize", "e-resize"], ["sw-resize", "se-resize"], ["nw-resize", "ne-resize"]]);
  var bgImgDirectionRegex = new RegExp("(^|\\W|_)((ltr)|(rtl)|(left)|(right))(\\W|_|$)", "g");
  var bgPosDirectionRegex = new RegExp("(left)|(right)");
  function convert(object) {
    return Object.keys(object).reduce(function(newObj, originalKey) {
      var originalValue = object[originalKey];
      if (isString(originalValue)) {
        originalValue = originalValue.trim();
      }
      if (includes(propsToIgnore, originalKey)) {
        newObj[originalKey] = originalValue;
        return newObj;
      }
      var _convertProperty = convertProperty(originalKey, originalValue), key = _convertProperty.key, value = _convertProperty.value;
      newObj[key] = value;
      return newObj;
    }, Array.isArray(object) ? [] : {});
  }
  function convertProperty(originalKey, originalValue) {
    var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
    var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
    var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
    return {
      key,
      value
    };
  }
  function getPropertyDoppelganger(property) {
    return propertiesToConvert[property] || property;
  }
  function getValueDoppelganger(key, originalValue) {
    if (!canConvertValue(originalValue)) {
      return originalValue;
    }
    if (isObject(originalValue)) {
      return convert(originalValue);
    }
    var isNum = isNumber(originalValue);
    var isFunc = isFunction(originalValue);
    var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, "");
    var isImportant = !isNum && importantlessValue.length !== originalValue.length;
    var valueConverter = propertyValueConverters[key];
    var newValue;
    if (valueConverter) {
      newValue = valueConverter({
        value: importantlessValue,
        valuesToConvert,
        propertiesToConvert,
        isRtl: true,
        bgImgDirectionRegex,
        bgPosDirectionRegex
      });
    } else {
      newValue = valuesToConvert[importantlessValue] || importantlessValue;
    }
    if (isImportant) {
      return newValue + " !important";
    }
    return newValue;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/compileCSS.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Enum.js
  init_define_process();
  init_define_process_env();
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Utility.js
  init_define_process();
  init_define_process_env();
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array2) {
    return array2.push(value), value;
  }
  function combine(array2, callback) {
    return array2.map(callback).join("");
  }

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Parser.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Tokenizer.js
  init_define_process();
  init_define_process_env();
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root3, parent, type, props, children2, length2) {
    return { value, root: root3, parent, type, props, children: children2, line, column, length: length2, return: "" };
  }
  function copy(root3, props) {
    return assign(node("", null, null, "", null, null, 0), root3, { length: -root3.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function tokenizer(children2) {
    while (next())
      switch (token(character)) {
        case 0:
          append(identifier(position - 1), children2);
          break;
        case 2:
          append(delimit(character), children2);
          break;
        default:
          append(from(character), children2);
      }
    return children2;
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root3, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children2 = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root3, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root3, parent, index, offset2, rules, points, type, props = [], children2 = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root3, reference, reference, props, rulesets, length2, points, children2);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children2), rules, children2, length2, points, rule ? props : children2);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children2, 0, points, children2);
                  }
          }
          index = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root3, parent, index, offset2, rules, points, type, props, children2, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i4 = 0, j3 = 0, k2 = 0; i4 < index; ++i4)
      for (var x3 = 0, y4 = substr(value, post + 1, post = abs(j3 = points[i4])), z2 = value; x3 < size; ++x3)
        if (z2 = trim(j3 > 0 ? rule[x3] + " " + y4 : replace(y4, /&\f/g, rule[x3])))
          props[k2++] = z2;
    return node(value, root3, parent, offset2 === 0 ? RULESET : type, props, children2, length2);
  }
  function comment(value, root3, parent) {
    return node(value, root3, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root3, parent, length2) {
    return node(value, root3, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Prefixer.js
  init_define_process();
  init_define_process_env();
  function prefix(value, length2, children2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 4789:
        return MOZ + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
      case 6828:
      case 4268:
      case 2903:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4200:
        if (!match(value, /flex-|baseline/))
          return MS + "grid-column-align" + substr(value, length2) + value;
        break;
      case 2592:
      case 3360:
        return MS + replace(value, "template-", "") + value;
      case 4384:
      case 3616:
        if (children2 && children2.some(function(element, index) {
          return length2 = index, match(element.props, /grid-\w+-end/);
        })) {
          return ~indexof(value + (children2 = children2[length2].value), "span") ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children2, "span") ? match(children2, /\d+/) : +match(children2, /\d+/) - +match(value, /\d+/)) + ";";
        }
        return MS + replace(value, "-start", "") + value;
      case 4896:
      case 4128:
        return children2 && children2.some(function(element) {
          return match(element.props, /grid-\w+-start/);
        }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2, children2) + value : value;
          }
        break;
      case 5152:
      case 5920:
        return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_2, a4, b5, c4, d4, e3, f5) {
          return MS + a4 + ":" + b5 + f5 + (c4 ? MS + a4 + "-span:" + (d4 ? e3 : +e3 - +b5) + f5 : "") + value;
        });
      case 4949:
        if (charat(value, length2 + 6) === 121)
          return replace(value, ":", ":" + WEBKIT) + value;
        break;
      case 6444:
        switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
          case 120:
            return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
          case 100:
            return replace(value, ":", ":" + MS) + value;
        }
        break;
      case 5719:
      case 2647:
      case 2135:
      case 3927:
      case 2391:
        return replace(value, "scroll-", "scroll-snap-") + value;
    }
    return value;
  }

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Serializer.js
  init_define_process();
  init_define_process_env();
  function serialize(children2, callback) {
    var output = "";
    var length2 = sizeof(children2);
    for (var i4 = 0; i4 < length2; i4++)
      output += callback(children2[i4], i4, children2, callback) || "";
    return output;
  }
  function stringify(element, index, children2, callback) {
    switch (element.type) {
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children2 = serialize(element.children, callback)) ? element.return = element.value + "{" + children2 + "}" : "";
  }

  // node_modules/.pnpm/stylis@4.1.3/node_modules/stylis/src/Middleware.js
  init_define_process();
  init_define_process_env();
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children2, callback) {
      var output = "";
      for (var i4 = 0; i4 < length2; i4++)
        output += collection[i4](element, index, children2, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  function prefixer(element, index, children2, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix(element.value, element.length, children2);
            return;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/stylis/globalPlugin.esm.js
  init_define_process();
  init_define_process_env();
  var globalPlugin = (element) => {
    switch (element.type) {
      case RULESET:
        if (typeof element.props === "string") {
          if (true) {
            throw new Error(`"element.props" has type "string" (${JSON.stringify(element.props, null, 2)}), it's not expected. Please report a bug if it happens.`);
          }
          return;
        }
        element.props = element.props.map((value) => {
          if (value.indexOf(":global(") === -1) {
            return value;
          }
          return tokenize(value).reduce((acc, value2, index, children2) => {
            if (value2 === "") {
              return acc;
            }
            if (value2 === ":" && children2[index + 1] === "global") {
              const selector2 = (
                // An inner part of ":global()"
                children2[index + 2].slice(1, -1) + // A separator between selectors i.e. "body .class"
                " "
              );
              acc.unshift(selector2);
              children2[index + 1] = "";
              children2[index + 2] = "";
              return acc;
            }
            acc.push(value2);
            return acc;
          }, []).join("");
        });
    }
  };

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/hyphenateProperty.esm.js
  init_define_process();
  init_define_process_env();
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache = {};
  function toHyphenLower(match2) {
    return "-" + match2.toLowerCase();
  }
  function hyphenateProperty(name) {
    if (Object.prototype.hasOwnProperty.call(cache, name)) {
      return cache[name];
    }
    if (name.substr(0, 2) === "--") {
      return name;
    }
    const hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/normalizeNestedProperty.esm.js
  init_define_process();
  init_define_process_env();
  function normalizeNestedProperty(nestedProperty) {
    if (nestedProperty.charAt(0) === "&") {
      return nestedProperty.slice(1);
    }
    return nestedProperty;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/compileCSS.esm.js
  var PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;
  function normalizePseudoSelector(pseudoSelector) {
    return "&" + normalizeNestedProperty(
      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.
      // This allows to normalize input, see examples in JSDoc.
      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ",&$1")
    );
  }
  function compileCSSRules(cssRules2) {
    const rules = [];
    serialize(compile(cssRules2), middleware([
      globalPlugin,
      prefixer,
      stringify,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules.push(rule))
    ]));
    return rules;
  }
  function createCSSRule(classNameSelector, cssDeclaration, pseudos) {
    let cssRule = cssDeclaration;
    if (pseudos.length > 0) {
      cssRule = pseudos.reduceRight((acc, selector2) => {
        return `${normalizePseudoSelector(selector2)} { ${acc} }`;
      }, cssDeclaration);
    }
    return `${classNameSelector}{${cssRule}}`;
  }
  function compileCSS(options) {
    const {
      className,
      media,
      layer,
      selectors,
      support,
      property,
      rtlClassName,
      rtlProperty,
      rtlValue,
      value,
      container
    } = options;
    const classNameSelector = `.${className}`;
    const cssDeclaration = Array.isArray(value) ? `${value.map((v5) => `${hyphenateProperty(property)}: ${v5}`).join(";")};` : `${hyphenateProperty(property)}: ${value};`;
    let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);
    if (rtlProperty && rtlClassName) {
      const rtlClassNameSelector = `.${rtlClassName}`;
      const rtlCSSDeclaration = Array.isArray(rtlValue) ? `${rtlValue.map((v5) => `${hyphenateProperty(rtlProperty)}: ${v5}`).join(";")};` : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;
      cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);
    }
    if (media) {
      cssRule = `@media ${media} { ${cssRule} }`;
    }
    if (layer) {
      cssRule = `@layer ${layer} { ${cssRule} }`;
    }
    if (support) {
      cssRule = `@supports ${support} { ${cssRule} }`;
    }
    if (container) {
      cssRule = `@container ${container} { ${cssRule} }`;
    }
    return compileCSSRules(cssRule);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/compileKeyframeCSS.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/cssifyObject.esm.js
  init_define_process();
  init_define_process_env();
  function cssifyObject(style2) {
    let css2 = "";
    for (const property in style2) {
      const value = style2[property];
      if (typeof value !== "string" && typeof value !== "number") {
        continue;
      }
      css2 += hyphenateProperty(property) + ":" + value + ";";
    }
    return css2;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/compileKeyframeCSS.esm.js
  function compileKeyframeRule(keyframeObject) {
    let css2 = "";
    for (const percentage in keyframeObject) {
      css2 += `${percentage}{${cssifyObject(keyframeObject[percentage])}}`;
    }
    return css2;
  }
  function compileKeyframesCSS(keyframeName, keyframeCSS) {
    const cssRule = `@keyframes ${keyframeName} {${keyframeCSS}}`;
    const rules = [];
    serialize(compile(cssRule), middleware([
      prefixer,
      stringify,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules.push(rule))
    ]));
    return rules;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/generateCombinedMediaQuery.esm.js
  init_define_process();
  init_define_process_env();
  function generateCombinedQuery(currentMediaQuery, nestedMediaQuery) {
    if (currentMediaQuery.length === 0) {
      return nestedMediaQuery;
    }
    return `${currentMediaQuery} and ${nestedMediaQuery}`;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isMediaQuerySelector.esm.js
  init_define_process();
  init_define_process_env();
  function isMediaQuerySelector(property) {
    return property.substr(0, 6) === "@media";
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isLayerSelector.esm.js
  init_define_process();
  init_define_process_env();
  function isLayerSelector(property) {
    return property.substr(0, 6) === "@layer";
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isNestedSelector.esm.js
  init_define_process();
  init_define_process_env();
  var regex = /^(:|\[|>|&)/;
  function isNestedSelector(property) {
    return regex.test(property);
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isSupportQuerySelector.esm.js
  init_define_process();
  init_define_process_env();
  function isSupportQuerySelector(property) {
    return property.substr(0, 9) === "@supports";
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isContainerQuerySelector.esm.js
  init_define_process();
  init_define_process_env();
  function isContainerQuerySelector(property) {
    return property.substring(0, 10) === "@container";
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/isObject.esm.js
  init_define_process();
  init_define_process_env();
  function isObject2(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/getStyleBucketName.esm.js
  init_define_process();
  init_define_process_env();
  var pseudosMap = {
    // :focus-within
    "us-w": "w",
    // :focus-visible
    "us-v": "i",
    // :link
    nk: "l",
    // :visited
    si: "v",
    // :focus
    cu: "f",
    // :hover
    ve: "h",
    // :active
    ti: "a"
  };
  function getStyleBucketName(selectors, layer, media, support, container) {
    if (media) {
      return "m";
    }
    if (layer || support) {
      return "t";
    }
    if (container) {
      return "c";
    }
    if (selectors.length > 0) {
      const normalizedPseudo = selectors[0].trim();
      if (normalizedPseudo.charCodeAt(0) === 58) {
        return pseudosMap[normalizedPseudo.slice(4, 8)] || pseudosMap[normalizedPseudo.slice(3, 5)] || "d";
      }
    }
    return "d";
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/hashClassName.esm.js
  init_define_process();
  init_define_process_env();
  function hashClassName({
    media,
    layer,
    property,
    selectors,
    support,
    value
  }) {
    const classNameHash = emotion_hash_esm_default(selectors.join("") + media + layer + support + property + value.trim());
    return HASH_PREFIX + classNameHash;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/utils/hashPropertyKey.esm.js
  init_define_process();
  init_define_process_env();
  function hashPropertyKey(selectors, media, support, property) {
    const computedKey = selectors.join("") + media + support + property;
    const hashedKey = emotion_hash_esm_default(computedKey);
    const firstCharCode = hashedKey.charCodeAt(0);
    const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;
    if (startsWithNumber) {
      return String.fromCharCode(firstCharCode + 17) + hashedKey.substr(1);
    }
    return hashedKey;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/warnings/warnAboutUnresolvedRule.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/warnings/logError.esm.js
  init_define_process();
  init_define_process_env();
  function logError(...args) {
    if (typeof document !== "undefined") {
      console.error(...args);
    }
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/warnings/warnAboutUnresolvedRule.esm.js
  function warnAboutUnresolvedRule(property, value) {
    const ruleText = JSON.stringify(value, null, 2);
    const message = ["@griffel/react: A rule was not resolved to CSS properly. Please check your `makeStyles` or `makeResetStyles` calls for following:", " ".repeat(2) + "makeStyles({", " ".repeat(4) + `[slot]: {`, " ".repeat(6) + `"${property}": ${ruleText.split("\n").map((l5, n5) => " ".repeat(n5 === 0 ? 0 : 6) + l5).join("\n")}`, " ".repeat(4) + "}", " ".repeat(2) + `})`, ""];
    if (property.indexOf("&") === -1) {
      message.push(`It looks that you're are using a nested selector, but it is missing an ampersand placeholder where the generated class name should be injected.`);
      message.push(`Try to update a property to include it i.e "${property}" => "&${property}".`);
    } else {
      message.push("");
      message.push("If it's not obvious what triggers a problem, please report an issue at https://github.com/microsoft/griffel/issues");
    }
    logError(message.join("\n"));
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/warnings/warnAboutUnsupportedProperties.esm.js
  init_define_process();
  init_define_process_env();
  function warnAboutUnsupportedProperties(property, value) {
    logError([`@griffel/react: You are using unsupported shorthand CSS property "${property}". Please check your "makeStyles" calls, there *should not* be following:`, " ".repeat(2) + `makeStyles({`, " ".repeat(4) + `[slot]: { ${property}: "${value}" }`, " ".repeat(2) + `})`, "", "Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands"].join("\n"));
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/runtime/resolveStyleRules.esm.js
  function pushToClassesMap(classesMap, propertyKey, ltrClassname, rtlClassname) {
    classesMap[propertyKey] = rtlClassname ? [ltrClassname, rtlClassname] : ltrClassname;
  }
  function createBucketEntry(cssRule, metadata) {
    if (metadata) {
      return [cssRule, metadata];
    }
    return cssRule;
  }
  function pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media) {
    var _a;
    let metadata;
    if (styleBucketName === "m" && media) {
      metadata = {
        m: media
      };
    }
    (_a = cssRulesByBucket[styleBucketName]) !== null && _a !== void 0 ? _a : cssRulesByBucket[styleBucketName] = [];
    if (ltrCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(ltrCSS, metadata));
    }
    if (rtlCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(rtlCSS, metadata));
    }
  }
  function resolveStyleRules(styles, selectors = [], media = "", layer = "", support = "", container = "", cssClassesMap = {}, cssRulesByBucket = {}, rtlValue) {
    for (const property in styles) {
      if (UNSUPPORTED_CSS_PROPERTIES.hasOwnProperty(property)) {
        warnAboutUnsupportedProperties(property, styles[property]);
        continue;
      }
      const value = styles[property];
      if (value == null) {
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        const key = hashPropertyKey(selectors, media, support, property);
        const className = hashClassName({
          media,
          layer,
          value: value.toString(),
          support,
          selectors,
          property
        });
        const rtlDefinition = rtlValue && {
          key: property,
          value: rtlValue
        } || convertProperty(property, value);
        const flippedInRtl = rtlDefinition.key !== property || rtlDefinition.value !== value;
        const rtlClassName = flippedInRtl ? hashClassName({
          value: rtlDefinition.value.toString(),
          property: rtlDefinition.key,
          selectors,
          media,
          layer,
          support
        }) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinition.key,
          rtlValue: rtlDefinition.value
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, layer, media, support, container);
        const [ltrCSS, rtlCSS] = compileCSS({
          className,
          media,
          layer,
          selectors,
          property,
          support,
          container,
          value,
          ...rtlCompileOptions
        });
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);
      } else if (property === "animationName") {
        const animationNameValue = Array.isArray(value) ? value : [value];
        const animationNames = [];
        const rtlAnimationNames = [];
        for (const keyframeObject of animationNameValue) {
          const keyframeCSS = compileKeyframeRule(keyframeObject);
          const rtlKeyframeCSS = compileKeyframeRule(convert(keyframeObject));
          const animationName = HASH_PREFIX + emotion_hash_esm_default(keyframeCSS);
          let rtlAnimationName;
          const keyframeRules = compileKeyframesCSS(animationName, keyframeCSS);
          let rtlKeyframeRules = [];
          if (keyframeCSS === rtlKeyframeCSS) {
            rtlAnimationName = animationName;
          } else {
            rtlAnimationName = HASH_PREFIX + emotion_hash_esm_default(rtlKeyframeCSS);
            rtlKeyframeRules = compileKeyframesCSS(rtlAnimationName, rtlKeyframeCSS);
          }
          for (let i4 = 0; i4 < keyframeRules.length; i4++) {
            pushToCSSRules(
              cssRulesByBucket,
              // keyframes styles should be inserted into own bucket
              "k",
              keyframeRules[i4],
              rtlKeyframeRules[i4],
              media
            );
          }
          animationNames.push(animationName);
          rtlAnimationNames.push(rtlAnimationName);
        }
        resolveStyleRules({
          animationName: animationNames.join(", ")
        }, selectors, media, layer, support, container, cssClassesMap, cssRulesByBucket, rtlAnimationNames.join(", "));
      } else if (Array.isArray(value)) {
        if (value.length === 0) {
          if (true) {
            console.warn(`makeStyles(): An empty array was passed as input to "${property}", the property will be omitted in the styles.`);
          }
          continue;
        }
        const key = hashPropertyKey(selectors, media, support, property);
        const className = hashClassName({
          media,
          layer,
          value: value.map((v5) => (v5 !== null && v5 !== void 0 ? v5 : "").toString()).join(";"),
          support,
          selectors,
          property
        });
        const rtlDefinitions = value.map((v5) => convertProperty(property, v5));
        const rtlPropertyConsistent = !rtlDefinitions.some((v5) => v5.key !== rtlDefinitions[0].key);
        if (!rtlPropertyConsistent) {
          if (true) {
            console.error("makeStyles(): mixing CSS fallback values which result in multiple CSS properties in RTL is not supported.");
          }
          continue;
        }
        const flippedInRtl = rtlDefinitions[0].key !== property || rtlDefinitions.some((v5, i4) => v5.value !== value[i4]);
        const rtlClassName = flippedInRtl ? hashClassName({
          value: rtlDefinitions.map((v5) => {
            var _a;
            return ((_a = v5 === null || v5 === void 0 ? void 0 : v5.value) !== null && _a !== void 0 ? _a : "").toString();
          }).join(";"),
          property: rtlDefinitions[0].key,
          selectors,
          layer,
          media,
          support
        }) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinitions[0].key,
          rtlValue: rtlDefinitions.map((d4) => d4.value)
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, layer, media, support, container);
        const [ltrCSS, rtlCSS] = compileCSS({
          className,
          media,
          layer,
          selectors,
          property,
          support,
          container,
          value,
          ...rtlCompileOptions
        });
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);
      } else if (isObject2(value)) {
        if (isNestedSelector(property)) {
          resolveStyleRules(value, selectors.concat(normalizeNestedProperty(property)), media, layer, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isMediaQuerySelector(property)) {
          const combinedMediaQuery = generateCombinedQuery(media, property.slice(6).trim());
          resolveStyleRules(value, selectors, combinedMediaQuery, layer, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isLayerSelector(property)) {
          const combinedLayerQuery = (layer ? `${layer}.` : "") + property.slice(6).trim();
          resolveStyleRules(value, selectors, media, combinedLayerQuery, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isSupportQuerySelector(property)) {
          const combinedSupportQuery = generateCombinedQuery(support, property.slice(9).trim());
          resolveStyleRules(value, selectors, media, layer, combinedSupportQuery, container, cssClassesMap, cssRulesByBucket);
        } else if (isContainerQuerySelector(property)) {
          const containerQuery = property.slice(10).trim();
          resolveStyleRules(value, selectors, media, layer, support, containerQuery, cssClassesMap, cssRulesByBucket);
        } else {
          warnAboutUnresolvedRule(property, value);
        }
      }
    }
    return [cssClassesMap, cssRulesByBucket];
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/resolveStyleRulesForSlots.esm.js
  function resolveStyleRulesForSlots(stylesBySlots) {
    const classesMapBySlot = {};
    const cssRules2 = {};
    for (const slotName in stylesBySlots) {
      const slotStyles = stylesBySlots[slotName];
      const [cssClassMap, cssRulesByBucket] = resolveStyleRules(slotStyles);
      classesMapBySlot[slotName] = cssClassMap;
      Object.keys(cssRulesByBucket).forEach((styleBucketName) => {
        cssRules2[styleBucketName] = (cssRules2[styleBucketName] || []).concat(cssRulesByBucket[styleBucketName]);
      });
    }
    return [classesMapBySlot, cssRules2];
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/makeStyles.esm.js
  function makeStyles(stylesBySlots) {
    const insertionCache = {};
    let classesMapBySlot = null;
    let cssRules2 = null;
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      if (classesMapBySlot === null) {
        [classesMapBySlot, cssRules2] = resolveStyleRulesForSlots(stylesBySlots);
      }
      const isLTR = dir === "ltr";
      const rendererId = isLTR ? renderer.id : renderer.id + "r";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      if (insertionCache[rendererId] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[rendererId] = true;
      }
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/__styles.esm.js
  init_define_process();
  init_define_process_env();
  function __styles(classesMapBySlot, cssRules2) {
    const insertionCache = {};
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      const rendererId = isLTR ? renderer.id : renderer.id + "r";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      if (insertionCache[rendererId] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[rendererId] = true;
      }
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/__resetStyles.esm.js
  init_define_process();
  init_define_process_env();
  function __resetStyles(ltrClassName, rtlClassName, cssRules2) {
    const insertionCache = {};
    function computeClassName(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      const rendererId = isLTR ? renderer.id : renderer.id + "r";
      if (insertionCache[rendererId] === void 0) {
        renderer.insertCSSRules({
          r: cssRules2
        });
        insertionCache[rendererId] = true;
      }
      const className = isLTR ? ltrClassName : rtlClassName || ltrClassName;
      if (true) {
        DEBUG_RESET_CLASSES[className] = 1;
      }
      return className;
    }
    return computeClassName;
  }

  // node_modules/.pnpm/@griffel+core@1.11.0/node_modules/@griffel/core/index.esm.js
  var shorthands = {
    border,
    borderLeft,
    borderBottom,
    borderRight,
    borderTop,
    borderColor,
    borderStyle,
    borderRadius,
    borderWidth,
    flex,
    gap,
    gridArea,
    margin,
    marginBlock,
    marginInline,
    padding,
    paddingBlock,
    paddingInline,
    overflow,
    inset,
    outline,
    transition
  };

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/makeStyles.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/utils/isInsideComponent.esm.js
  init_define_process();
  init_define_process_env();
  var React2 = __toESM(require_react());
  function isInsideComponent() {
    try {
      const dispatcher = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher.current;
      if (dispatcher === null || dispatcher === void 0) {
        return false;
      }
      dispatcher.useContext({});
      return true;
    } catch (e3) {
      return false;
    }
  }

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/RendererContext.esm.js
  init_define_process();
  init_define_process_env();
  var React3 = __toESM(require_react());
  var RendererContext = /* @__PURE__ */ React3.createContext(/* @__PURE__ */ createDOMRenderer());
  function useRenderer() {
    return React3.useContext(RendererContext);
  }

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/TextDirectionContext.esm.js
  init_define_process();
  init_define_process_env();
  var React4 = __toESM(require_react());
  var TextDirectionContext = /* @__PURE__ */ React4.createContext("ltr");
  var TextDirectionProvider = ({
    children: children2,
    dir
  }) => {
    return /* @__PURE__ */ React4.createElement(TextDirectionContext.Provider, {
      value: dir
    }, children2);
  };
  function useTextDirection() {
    return React4.useContext(TextDirectionContext);
  }

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/makeStyles.esm.js
  function makeStyles2(stylesBySlots) {
    const getStyles = makeStyles(stylesBySlots);
    if (true) {
      if (isInsideComponent()) {
        throw new Error(["makeStyles(): this function cannot be called in component's scope.", "All makeStyles() calls should be top level i.e. in a root scope of a file."].join(" "));
      }
    }
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/__styles.esm.js
  init_define_process();
  init_define_process_env();
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles = __styles(classesMapBySlot, cssRules2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }

  // node_modules/.pnpm/@griffel+react@1.5.7_react@18.2.0/node_modules/@griffel/react/__resetStyles.esm.js
  init_define_process();
  init_define_process_env();
  function __resetStyles2(ltrClassName, rtlClassName, cssRules2) {
    const getStyles = __resetStyles(ltrClassName, rtlClassName, cssRules2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  init_define_process();
  init_define_process_env();
  var React34 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-jsx-runtime@9.0.0-alpha.2_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-jsx-runtime/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-jsx-runtime@9.0.0-alpha.2_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-jsx-runtime/lib/createElement.js
  init_define_process();
  init_define_process_env();
  var React20 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/compose/constants.js
  init_define_process();
  init_define_process_env();
  var SLOT_RENDER_FUNCTION_SYMBOL = /* @__PURE__ */ Symbol("fui.slotRenderFunction");

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/compose/resolveShorthand.js
  init_define_process();
  init_define_process_env();
  var import_react = __toESM(require_react());
  var resolveShorthand = (value, options) => {
    const {
      required = false,
      defaultProps
    } = options || {};
    if (value === null || value === void 0 && !required) {
      return void 0;
    }
    let resolvedShorthand = {};
    if (typeof value === "string" || typeof value === "number" || Array.isArray(value) || /* @__PURE__ */ (0, import_react.isValidElement)(value)) {
      resolvedShorthand.children = value;
    } else if (typeof value === "object") {
      resolvedShorthand = value;
    }
    resolvedShorthand = {
      ...defaultProps,
      ...resolvedShorthand
    };
    if (typeof resolvedShorthand.children === "function") {
      resolvedShorthand[SLOT_RENDER_FUNCTION_SYMBOL] = resolvedShorthand.children;
      resolvedShorthand.children = defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.children;
    }
    return resolvedShorthand;
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/compose/getSlotsNext.js
  init_define_process();
  init_define_process_env();
  var React5 = __toESM(require_react());
  function getSlotsNext(state) {
    const slots = {};
    const slotProps = {};
    const slotNames = Object.keys(state.components);
    for (const slotName of slotNames) {
      const [slot, props] = getSlotNext(state, slotName);
      slots[slotName] = slot;
      slotProps[slotName] = props;
    }
    return {
      slots,
      slotProps
    };
  }
  function getSlotNext(state, slotName) {
    var _state_components, _state_components1;
    const props = state[slotName];
    if (props === void 0) {
      return [null, void 0];
    }
    const {
      as: asProp,
      ...propsWithoutAs
    } = props;
    const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === void 0 || typeof state.components[slotName] === "string" ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || "div" : state.components[slotName];
    const shouldOmitAsProp = typeof slot === "string" && asProp;
    const slotProps = shouldOmitAsProp ? propsWithoutAs : props;
    return [slot, slotProps];
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useControllableState.js
  init_define_process();
  init_define_process_env();
  var React6 = __toESM(require_react());
  function isFactoryDispatch(newState) {
    return typeof newState === "function";
  }
  var useControllableState = (options) => {
    const isControlled = useIsControlled(options.state);
    const initialState2 = typeof options.defaultState === "undefined" ? options.initialState : options.defaultState;
    const [internalState, setInternalState] = React6.useState(initialState2);
    const state = isControlled ? options.state : internalState;
    const stateRef = React6.useRef(state);
    React6.useEffect(() => {
      stateRef.current = state;
    }, [state]);
    const setState = React6.useCallback((newState) => {
      if (isFactoryDispatch(newState)) {
        stateRef.current = newState(stateRef.current);
      } else {
        stateRef.current = newState;
      }
      setInternalState(stateRef.current);
    }, []);
    return [state, setState];
  };
  var useIsControlled = (controlledValue) => {
    const [isControlled] = React6.useState(() => controlledValue !== void 0);
    if (true) {
      React6.useEffect(() => {
        if (isControlled !== (controlledValue !== void 0)) {
          const error = new Error();
          const controlWarning = isControlled ? "a controlled value to be uncontrolled" : "an uncontrolled value to be controlled";
          const undefinedWarning = isControlled ? "defined to an undefined" : "undefined to a defined";
          console.error([
            // Default react error
            "A component is changing " + controlWarning + ". This is likely caused by the value",
            "changing from " + undefinedWarning + " value, which should not happen.",
            "Decide between using a controlled or uncontrolled input element for the lifetime of the component.",
            "More info: https://reactjs.org/link/controlled-components",
            error.stack
          ].join(" "));
        }
      }, [isControlled, controlledValue]);
    }
    return isControlled;
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  init_define_process();
  init_define_process_env();
  var React9 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  init_define_process();
  init_define_process_env();
  var React8 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js
  init_define_process();
  init_define_process_env();
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js
  init_define_process();
  init_define_process_env();
  var React7 = __toESM(require_react());
  var defaultSSRContextValue = {
    current: 0
  };
  var SSRContext = /* @__PURE__ */ React7.createContext(void 0);
  function useSSRContext() {
    var _React_useContext4;
    return (_React_useContext4 = React7.useContext(SSRContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : defaultSSRContextValue;
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var useIsomorphicLayoutEffect = /* @__PURE__ */ canUseDOM() ? React8.useLayoutEffect : React8.useEffect;

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var useEventCallback = (fn) => {
    const callbackRef = React9.useRef(() => {
      throw new Error("Cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect(() => {
      callbackRef.current = fn;
    }, [fn]);
    return React9.useCallback((...args) => {
      const callback = callbackRef.current;
      return callback(...args);
    }, [callbackRef]);
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useFirstMount.js
  init_define_process();
  init_define_process_env();
  var React10 = __toESM(require_react());
  function useFirstMount() {
    const isFirst = React10.useRef(true);
    if (isFirst.current) {
      isFirst.current = false;
      return true;
    }
    return isFirst.current;
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useId.js
  init_define_process();
  init_define_process_env();
  var React11 = __toESM(require_react());
  var IdPrefixContext = /* @__PURE__ */ React11.createContext(void 0);
  var IdPrefixProvider = IdPrefixContext.Provider;
  function useIdPrefix() {
    return React11.useContext(IdPrefixContext) || "";
  }
  function useId2(prefix2 = "fui-", providedId) {
    const contextValue = useSSRContext();
    const idPrefix = useIdPrefix();
    const _useId = React11["useId"];
    if (_useId) {
      const generatedId = _useId();
      const escapedId = React11.useMemo(() => generatedId.replace(/:/g, ""), [generatedId]);
      return providedId || `${idPrefix}${prefix2}${escapedId}`;
    }
    return React11.useMemo(() => {
      if (providedId) {
        return providedId;
      }
      return `${idPrefix}${prefix2}${++contextValue.current}`;
    }, [idPrefix, prefix2, providedId, contextValue]);
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js
  init_define_process();
  init_define_process_env();
  var React12 = __toESM(require_react());
  function useMergedRefs(...refs) {
    const mergedCallback = React12.useCallback(
      (value) => {
        mergedCallback.current = value;
        for (const ref of refs) {
          if (typeof ref === "function") {
            ref(value);
          } else if (ref) {
            ref.current = value;
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive
      [...refs]
    );
    return mergedCallback;
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useOnClickOutside.js
  init_define_process();
  init_define_process_env();
  var React13 = __toESM(require_react());
  var useOnClickOutside = (options) => {
    const {
      refs,
      callback,
      element,
      disabled,
      contains: containsProp
    } = options;
    const timeoutId = React13.useRef(void 0);
    useIFrameFocus(options);
    const listener = useEventCallback((ev) => {
      const contains = containsProp || ((parent, child) => {
        return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child));
      });
      const isOutside = refs.every((ref) => !contains(ref.current || null, ev.target));
      if (isOutside && !disabled) {
        callback(ev);
      }
    });
    React13.useEffect(() => {
      if (disabled) {
        return;
      }
      let currentEvent = getWindowEvent(window);
      const conditionalHandler = (event) => {
        if (event === currentEvent) {
          currentEvent = void 0;
          return;
        }
        listener(event);
      };
      element === null || element === void 0 ? void 0 : element.addEventListener("click", conditionalHandler, true);
      element === null || element === void 0 ? void 0 : element.addEventListener("touchstart", conditionalHandler, true);
      element === null || element === void 0 ? void 0 : element.addEventListener("contextmenu", conditionalHandler, true);
      timeoutId.current = window.setTimeout(() => {
        currentEvent = void 0;
      }, 1);
      return () => {
        element === null || element === void 0 ? void 0 : element.removeEventListener("click", conditionalHandler, true);
        element === null || element === void 0 ? void 0 : element.removeEventListener("touchstart", conditionalHandler, true);
        element === null || element === void 0 ? void 0 : element.removeEventListener("contextmenu", conditionalHandler, true);
        clearTimeout(timeoutId.current);
        currentEvent = void 0;
      };
    }, [listener, element, disabled]);
  };
  var getWindowEvent = (target) => {
    if (target) {
      var _target_ownerDocument, _target_ownerDocument_defaultView;
      if (typeof target.window === "object" && target.window === target) {
        return target.event;
      }
      var _target_ownerDocument_defaultView_event;
      return (_target_ownerDocument_defaultView_event = (_target_ownerDocument = target.ownerDocument) === null || _target_ownerDocument === void 0 ? void 0 : (_target_ownerDocument_defaultView = _target_ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.event) !== null && _target_ownerDocument_defaultView_event !== void 0 ? _target_ownerDocument_defaultView_event : void 0;
    }
    return void 0;
  };
  var FUI_FRAME_EVENT = "fuiframefocus";
  var useIFrameFocus = (options) => {
    const {
      disabled,
      element: targetDocument,
      callback,
      contains: containsProp = (parent, child) => {
        return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child));
      },
      pollDuration = 1e3,
      refs
    } = options;
    const timeoutRef = React13.useRef();
    const listener = useEventCallback((e3) => {
      const contains = containsProp || ((parent, child) => {
        return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child));
      });
      const isOutside = refs.every((ref) => !contains(ref.current || null, e3.target));
      if (isOutside && !disabled) {
        callback(e3);
      }
    });
    React13.useEffect(() => {
      if (disabled) {
        return;
      }
      targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener(FUI_FRAME_EVENT, listener, true);
      return () => {
        targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener(FUI_FRAME_EVENT, listener, true);
      };
    }, [targetDocument, disabled, listener]);
    React13.useEffect(() => {
      var _targetDocument_defaultView;
      if (disabled) {
        return;
      }
      timeoutRef.current = targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.setInterval(() => {
        const activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;
        if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "IFRAME" || (activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "WEBVIEW") {
          const event = new CustomEvent(FUI_FRAME_EVENT, {
            bubbles: true
          });
          activeElement.dispatchEvent(event);
        }
      }, pollDuration);
      return () => {
        var _targetDocument_defaultView2;
        targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView2 = targetDocument.defaultView) === null || _targetDocument_defaultView2 === void 0 ? void 0 : _targetDocument_defaultView2.clearTimeout(timeoutRef.current);
      };
    }, [targetDocument, disabled, pollDuration]);
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useOnScrollOutside.js
  init_define_process();
  init_define_process_env();
  var React14 = __toESM(require_react());
  var useOnScrollOutside = (options) => {
    const {
      refs,
      callback,
      element,
      disabled,
      contains: containsProp
    } = options;
    const listener = useEventCallback((ev) => {
      const contains = containsProp || ((parent, child) => {
        return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child));
      });
      const isOutside = refs.every((ref) => !contains(ref.current || null, ev.target));
      if (isOutside && !disabled) {
        callback(ev);
      }
    });
    React14.useEffect(() => {
      if (disabled) {
        return;
      }
      element === null || element === void 0 ? void 0 : element.addEventListener("wheel", listener);
      element === null || element === void 0 ? void 0 : element.addEventListener("touchmove", listener);
      return () => {
        element === null || element === void 0 ? void 0 : element.removeEventListener("wheel", listener);
        element === null || element === void 0 ? void 0 : element.removeEventListener("touchmove", listener);
      };
    }, [listener, element, disabled]);
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/hooks/useTimeout.js
  init_define_process();
  init_define_process_env();
  var React15 = __toESM(require_react());
  function useTimeout() {
    const [timeout2] = React15.useState(() => ({
      id: void 0,
      set: (fn, delay) => {
        timeout2.clear();
        timeout2.id = setTimeout(fn, delay);
      },
      clear: () => {
        if (timeout2.id !== void 0) {
          clearTimeout(timeout2.id);
          timeout2.id = void 0;
        }
      }
    }));
    React15.useEffect(() => timeout2.clear, [timeout2]);
    return [timeout2.set, timeout2.clear];
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  init_define_process();
  init_define_process_env();
  var React16 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/utils/properties.js
  init_define_process();
  init_define_process_env();
  var toObjectMap = (...items) => {
    const result = {};
    for (const item of items) {
      const keys = Array.isArray(item) ? item : Object.keys(item);
      for (const key of keys) {
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents = /* @__PURE__ */ toObjectMap(["onAuxClick", "onCopy", "onCut", "onPaste", "onCompositionEnd", "onCompositionStart", "onCompositionUpdate", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onInput", "onSubmit", "onLoad", "onError", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyUp", "onAbort", "onCanPlay", "onCanPlayThrough", "onDurationChange", "onEmptied", "onEncrypted", "onEnded", "onLoadedData", "onLoadedMetadata", "onLoadStart", "onPause", "onPlay", "onPlaying", "onProgress", "onRateChange", "onSeeked", "onSeeking", "onStalled", "onSuspend", "onTimeUpdate", "onVolumeChange", "onWaiting", "onClick", "onClickCapture", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onMouseUpCapture", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel", "onPointerCancel", "onPointerDown", "onPointerEnter", "onPointerLeave", "onPointerMove", "onPointerOut", "onPointerOver", "onPointerUp", "onGotPointerCapture", "onLostPointerCapture"]);
  var baseElementProperties = /* @__PURE__ */ toObjectMap(["accessKey", "children", "className", "contentEditable", "dir", "draggable", "hidden", "htmlFor", "id", "lang", "ref", "role", "style", "tabIndex", "title", "translate", "spellCheck", "name"]);
  var microdataProperties = /* @__PURE__ */ toObjectMap(["itemID", "itemProp", "itemRef", "itemScope", "itemType"]);
  var htmlElementProperties = /* @__PURE__ */ toObjectMap(baseElementProperties, baseElementEvents, microdataProperties);
  var labelProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["form"]);
  var audioProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["height", "loop", "muted", "preload", "src", "width"]);
  var videoProperties = /* @__PURE__ */ toObjectMap(audioProperties, ["poster"]);
  var olProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["start"]);
  var liProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["value"]);
  var anchorProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["download", "href", "hrefLang", "media", "rel", "target", "type"]);
  var timeProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["dateTime"]);
  var buttonProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["autoFocus", "disabled", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "type", "value"]);
  var inputProperties = /* @__PURE__ */ toObjectMap(buttonProperties, ["accept", "alt", "autoCapitalize", "autoComplete", "checked", "dirname", "form", "height", "inputMode", "list", "max", "maxLength", "min", "multiple", "pattern", "placeholder", "readOnly", "required", "src", "step", "size", "type", "value", "width"]);
  var textAreaProperties = /* @__PURE__ */ toObjectMap(buttonProperties, ["autoCapitalize", "cols", "dirname", "form", "maxLength", "placeholder", "readOnly", "required", "rows", "wrap"]);
  var selectProperties = /* @__PURE__ */ toObjectMap(buttonProperties, ["form", "multiple", "required"]);
  var optionProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["selected", "value"]);
  var tableProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["cellPadding", "cellSpacing"]);
  var trProperties = htmlElementProperties;
  var thProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["colSpan", "rowSpan", "scope"]);
  var tdProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["colSpan", "headers", "rowSpan", "scope"]);
  var colGroupProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["span"]);
  var colProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["span"]);
  var fieldsetProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["disabled", "form"]);
  var formProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["acceptCharset", "action", "encType", "encType", "method", "noValidate", "target"]);
  var iframeProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["allow", "allowFullScreen", "allowPaymentRequest", "allowTransparency", "csp", "height", "importance", "referrerPolicy", "sandbox", "src", "srcDoc", "width"]);
  var imgProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["alt", "crossOrigin", "height", "src", "srcSet", "useMap", "width"]);
  var dialogProperties = /* @__PURE__ */ toObjectMap(htmlElementProperties, ["open", "onCancel", "onClose"]);
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    const isArray = Array.isArray(allowedPropNames);
    const result = {};
    const keys = Object.keys(props);
    for (const key of keys) {
      const isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var nativeElementMap = {
    label: labelProperties,
    audio: audioProperties,
    video: videoProperties,
    ol: olProperties,
    li: liProperties,
    a: anchorProperties,
    button: buttonProperties,
    input: inputProperties,
    textarea: textAreaProperties,
    select: selectProperties,
    option: optionProperties,
    table: tableProperties,
    tr: trProperties,
    th: thProperties,
    td: tdProperties,
    colGroup: colGroupProperties,
    col: colProperties,
    fieldset: fieldsetProperties,
    form: formProperties,
    iframe: iframeProperties,
    img: imgProperties,
    time: timeProperties,
    dialog: dialogProperties
  };
  function getNativeElementProps(tagName, props, excludedPropNames) {
    const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;
    allowedPropNames.as = 1;
    return getNativeProps(props, allowedPropNames, excludedPropNames);
  }
  var getPartitionedNativeProps = ({
    primarySlotTagName,
    props,
    excludedPropNames
  }) => {
    return {
      root: {
        style: props.style,
        className: props.className
      },
      primary: getNativeElementProps(primarySlotTagName, props, [...excludedPropNames || [], "style", "className"])
    };
  };

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/utils/mergeCallbacks.js
  init_define_process();
  init_define_process_env();
  function mergeCallbacks(callback1, callback2) {
    return (...args) => {
      callback1 === null || callback1 === void 0 ? void 0 : callback1(...args);
      callback2 === null || callback2 === void 0 ? void 0 : callback2(...args);
    };
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/utils/isHTMLElement.js
  init_define_process();
  init_define_process_env();
  function isHTMLElement(element, options) {
    var _typedElement_ownerDocument;
    const typedElement = element;
    var _options_constructorName;
    return Boolean((typedElement === null || typedElement === void 0 ? void 0 : (_typedElement_ownerDocument = typedElement.ownerDocument) === null || _typedElement_ownerDocument === void 0 ? void 0 : _typedElement_ownerDocument.defaultView) && typedElement instanceof typedElement.ownerDocument.defaultView[(_options_constructorName = options === null || options === void 0 ? void 0 : options.constructorName) !== null && _options_constructorName !== void 0 ? _options_constructorName : "HTMLElement"]);
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  init_define_process();
  init_define_process_env();
  var React18 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/trigger/isFluentTrigger.js
  init_define_process();
  init_define_process_env();
  var React17 = __toESM(require_react());
  function isFluentTrigger(element) {
    return Boolean(element.type.isFluentTriggerComponent);
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  function applyTriggerPropsToChildren(children2, triggerChildProps) {
    if (typeof children2 === "function") {
      return children2(triggerChildProps);
    } else if (children2) {
      return cloneTriggerTree(children2, triggerChildProps);
    }
    return children2 || null;
  }
  function cloneTriggerTree(child, triggerProps) {
    if (!/* @__PURE__ */ React18.isValidElement(child) || child.type === React18.Fragment) {
      throw new Error("A trigger element must be a single element for this component. Please ensure that you're not using React Fragments.");
    }
    if (isFluentTrigger(child)) {
      const grandchild = cloneTriggerTree(child.props.children, triggerProps);
      return /* @__PURE__ */ React18.cloneElement(child, void 0, grandchild);
    } else {
      return /* @__PURE__ */ React18.cloneElement(child, triggerProps);
    }
  }

  // node_modules/.pnpm/@fluentui+react-utilities@9.8.0_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-utilities/lib/trigger/getTriggerChild.js
  init_define_process();
  init_define_process_env();
  var React19 = __toESM(require_react());
  function getTriggerChild(children2) {
    if (!/* @__PURE__ */ React19.isValidElement(children2)) {
      return null;
    }
    return isFluentTrigger(children2) ? getTriggerChild(
      // FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,
      // but for some reason it's failing on build
      children2.props.children
    ) : children2;
  }

  // node_modules/.pnpm/@fluentui+react-jsx-runtime@9.0.0-alpha.2_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-jsx-runtime/lib/createElement.js
  function createElement5(type, props, ...children2) {
    return hasRenderFunction(props) ? createElementFromRenderFunction(type, props, children2) : /* @__PURE__ */ React20.createElement(type, props, ...children2);
  }
  function createElementFromRenderFunction(type, props, overrideChildren) {
    const {
      [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction,
      ...renderProps
    } = props;
    if (overrideChildren.length > 0) {
      renderProps.children = /* @__PURE__ */ React20.createElement(React20.Fragment, {}, ...overrideChildren);
    }
    return /* @__PURE__ */ React20.createElement(React20.Fragment, {}, renderFunction(type, renderProps));
  }
  function hasRenderFunction(props) {
    return Boolean(props === null || props === void 0 ? void 0 : props.hasOwnProperty(SLOT_RENDER_FUNCTION_SYMBOL));
  }

  // node_modules/.pnpm/@fluentui+react-jsx-runtime@9.0.0-alpha.2_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-jsx-runtime/lib/index.js
  var import_react2 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/ThemeContext.js
  init_define_process();
  init_define_process_env();
  var React21 = __toESM(require_react());
  var ThemeContext = /* @__PURE__ */ React21.createContext(void 0);
  var ThemeProvider = ThemeContext.Provider;

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/ThemeClassNameContext.js
  init_define_process();
  init_define_process_env();
  var React22 = __toESM(require_react());
  var ThemeClassNameContext = /* @__PURE__ */ React22.createContext(void 0);
  var themeClassNameContextDefaultVaue = "";
  var ThemeClassNameProvider = ThemeClassNameContext.Provider;
  function useThemeClassName() {
    var _React_useContext4;
    return (_React_useContext4 = React22.useContext(ThemeClassNameContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : themeClassNameContextDefaultVaue;
  }

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/TooltipContext.js
  init_define_process();
  init_define_process_env();
  var React23 = __toESM(require_react());
  var TooltipVisibilityContext = /* @__PURE__ */ React23.createContext(void 0);
  var TooltipVisibilityProvider = TooltipVisibilityContext.Provider;

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/ProviderContext.js
  init_define_process();
  init_define_process_env();
  var React24 = __toESM(require_react());
  var ProviderContext = /* @__PURE__ */ React24.createContext(void 0);
  var providerContextDefaultValue = {
    targetDocument: typeof document === "object" ? document : void 0,
    dir: "ltr"
  };
  var Provider = ProviderContext.Provider;
  function useFluent() {
    var _React_useContext4;
    return (_React_useContext4 = React24.useContext(ProviderContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : providerContextDefaultValue;
  }

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/OverridesContext.js
  init_define_process();
  init_define_process_env();
  var React25 = __toESM(require_react());
  var OverridesContext = /* @__PURE__ */ React25.createContext(void 0);
  var OverridesProvider = OverridesContext.Provider;
  function useOverrides() {
    var _React_useContext4;
    return (_React_useContext4 = React25.useContext(OverridesContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : {};
  }

  // node_modules/.pnpm/@fluentui+react-shared-contexts@9.3.3_@types+react@18.0.38_react@18.2.0/node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js
  init_define_process();
  init_define_process_env();
  var React26 = __toESM(require_react());
  var CustomStyleHooksContext = /* @__PURE__ */ React26.createContext(void 0);
  var noop = () => {
  };
  var customStyleHooksContextDefaultValue = {
    useAccordionHeaderStyles_unstable: noop,
    useAccordionItemStyles_unstable: noop,
    useAccordionPanelStyles_unstable: noop,
    useAccordionStyles_unstable: noop,
    useAvatarStyles_unstable: noop,
    useAvatarGroupStyles_unstable: noop,
    useAvatarGroupItemStyles_unstable: noop,
    useAvatarGroupPopoverStyles_unstable: noop,
    useBadgeStyles_unstable: noop,
    useCounterBadgeStyles_unstable: noop,
    useCardHeaderStyles_unstable: noop,
    useCardStyles_unstable: noop,
    useCardFooterStyles_unstable: noop,
    useCardPreviewStyles_unstable: noop,
    usePresenceBadgeStyles_unstable: noop,
    useButtonStyles_unstable: noop,
    useCompoundButtonStyles_unstable: noop,
    useMenuButtonStyles_unstable: noop,
    useSplitButtonStyles_unstable: noop,
    useToggleButtonStyles_unstable: noop,
    useCheckboxStyles_unstable: noop,
    useComboboxStyles_unstable: noop,
    useDropdownStyles_unstable: noop,
    useListboxStyles_unstable: noop,
    useOptionStyles_unstable: noop,
    useOptionGroupStyles_unstable: noop,
    useDividerStyles_unstable: noop,
    useInputStyles_unstable: noop,
    useImageStyles_unstable: noop,
    useLabelStyles_unstable: noop,
    useLinkStyles_unstable: noop,
    useMenuDividerStyles_unstable: noop,
    useMenuGroupHeaderStyles_unstable: noop,
    useMenuGroupStyles_unstable: noop,
    useMenuItemCheckboxStyles_unstable: noop,
    useMenuItemRadioStyles_unstable: noop,
    useMenuItemStyles_unstable: noop,
    useMenuListStyles_unstable: noop,
    useMenuPopoverStyles_unstable: noop,
    useMenuSplitGroupStyles_unstable: noop,
    usePersonaStyles_unstable: noop,
    usePopoverSurfaceStyles_unstable: noop,
    useRadioGroupStyles_unstable: noop,
    useRadioStyles_unstable: noop,
    useSelectStyles_unstable: noop,
    useSliderStyles_unstable: noop,
    useSpinButtonStyles_unstable: noop,
    useSpinnerStyles_unstable: noop,
    useSwitchStyles_unstable: noop,
    useTabStyles_unstable: noop,
    useTabListStyles_unstable: noop,
    useTextStyles_unstable: noop,
    useTextareaStyles_unstable: noop,
    useTooltipStyles_unstable: noop,
    useDialogTitleStyles_unstable: noop,
    useDialogBodyStyles_unstable: noop,
    useDialogActionsStyles_unstable: noop,
    useDialogSurfaceStyles_unstable: noop,
    useDialogContentStyles_unstable: noop,
    useProgressBarStyles_unstable: noop,
    useToolbarButtonStyles_unstable: noop,
    useToolbarRadioButtonStyles_unstable: noop,
    useToolbarGroupStyles_unstable: noop,
    useToolbarToggleButtonStyles_unstable: noop,
    useToolbarDividerStyles_unstable: noop,
    useToolbarStyles_unstable: noop,
    useTableCellStyles_unstable: noop,
    useTableRowStyles_unstable: noop,
    useTableBodyStyles_unstable: noop,
    useTableStyles_unstable: noop,
    useTableHeaderStyles_unstable: noop,
    useTableHeaderCellStyles_unstable: noop,
    useTableResizeHandleStyles_unstable: noop,
    useTableSelectionCellStyles_unstable: noop,
    useTableCellActionsStyles_unstable: noop,
    useTableCellLayoutStyles_unstable: noop,
    useDataGridCellStyles_unstable: noop,
    useDataGridRowStyles_unstable: noop,
    useDataGridBodyStyles_unstable: noop,
    useDataGridStyles_unstable: noop,
    useDataGridHeaderStyles_unstable: noop,
    useDataGridHeaderCellStyles_unstable: noop,
    useDataGridSelectionCellStyles_unstable: noop
  };
  var CustomStyleHooksProvider = CustomStyleHooksContext.Provider;
  function useCustomStyleHooks() {
    var _React_useContext4;
    return (_React_useContext4 = React26.useContext(CustomStyleHooksContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : customStyleHooksContextDefaultValue;
  }

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js
  var renderFluentProvider_unstable = (state, contextValues) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(Provider, {
      value: contextValues.provider
    }, /* @__PURE__ */ createElement5(ThemeProvider, {
      value: contextValues.theme
    }, /* @__PURE__ */ createElement5(ThemeClassNameProvider, {
      value: contextValues.themeClassName
    }, /* @__PURE__ */ createElement5(CustomStyleHooksProvider, {
      value: contextValues.customStyleHooks_unstable
    }, /* @__PURE__ */ createElement5(TooltipVisibilityProvider, {
      value: contextValues.tooltip
    }, /* @__PURE__ */ createElement5(TextDirectionProvider, {
      dir: contextValues.textDirection
    }, /* @__PURE__ */ createElement5(OverridesProvider, {
      value: contextValues.overrides_unstable
    }, /* @__PURE__ */ createElement5(slots.root, slotProps.root, canUseDOM() ? null : /* @__PURE__ */ createElement5("style", {
      // Using dangerous HTML because react can escape characters
      // which can lead to invalid CSS.
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: {
        __html: state.serverStyleProps.cssRule
      },
      ...state.serverStyleProps.attributes
    }), slotProps.root.children))))))));
  };

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/tabster@4.4.0/node_modules/tabster/dist/tabster.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/keyborg@2.0.0/node_modules/keyborg/dist/keyborg.esm.js
  init_define_process();
  init_define_process_env();
  var _canUseWeakRef = typeof WeakRef !== "undefined";
  var WeakRefInstance = class {
    constructor(instance) {
      if (_canUseWeakRef && typeof instance === "object") {
        this._weakRef = new WeakRef(instance);
      } else {
        this._instance = instance;
      }
    }
    /**
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref}
     */
    deref() {
      var _a, _b, _c;
      let instance;
      if (this._weakRef) {
        instance = (_a = this._weakRef) === null || _a === void 0 ? void 0 : _a.deref();
        if (!instance) {
          delete this._weakRef;
        }
      } else {
        instance = this._instance;
        if ((_c = (_b = instance) === null || _b === void 0 ? void 0 : _b.isDisposed) === null || _c === void 0 ? void 0 : _c.call(_b)) {
          delete this._instance;
        }
      }
      return instance;
    }
  };
  var KEYBORG_FOCUSIN = "keyborg:focusin";
  function canOverrideNativeFocus(win) {
    const HTMLElement2 = win.HTMLElement;
    const origFocus = HTMLElement2.prototype.focus;
    let isCustomFocusCalled = false;
    HTMLElement2.prototype.focus = function focus() {
      isCustomFocusCalled = true;
    };
    const btn = win.document.createElement("button");
    btn.focus();
    HTMLElement2.prototype.focus = origFocus;
    return isCustomFocusCalled;
  }
  var _canOverrideNativeFocus = false;
  function nativeFocus(element) {
    const focus = element.focus;
    if (focus.__keyborgNativeFocus) {
      focus.__keyborgNativeFocus.call(element);
    } else {
      element.focus();
    }
  }
  function setupFocusEvent(win) {
    const kwin = win;
    if (!_canOverrideNativeFocus) {
      _canOverrideNativeFocus = canOverrideNativeFocus(kwin);
    }
    const origFocus = kwin.HTMLElement.prototype.focus;
    if (origFocus.__keyborgNativeFocus) {
      return;
    }
    kwin.HTMLElement.prototype.focus = focus;
    const data = kwin.__keyborgData = {
      focusInHandler: (e3) => {
        var _a;
        const target = e3.target;
        if (!target) {
          return;
        }
        const event = document.createEvent("HTMLEvents");
        event.initEvent(KEYBORG_FOCUSIN, true, true);
        const details = {
          relatedTarget: e3.relatedTarget || void 0
        };
        if (_canOverrideNativeFocus || data.lastFocusedProgrammatically) {
          details.isFocusedProgrammatically = target === ((_a = data.lastFocusedProgrammatically) === null || _a === void 0 ? void 0 : _a.deref());
          data.lastFocusedProgrammatically = void 0;
        }
        event.details = details;
        target.dispatchEvent(event);
      }
    };
    kwin.document.addEventListener("focusin", kwin.__keyborgData.focusInHandler, true);
    function focus() {
      const keyborgNativeFocusEvent = kwin.__keyborgData;
      if (keyborgNativeFocusEvent) {
        keyborgNativeFocusEvent.lastFocusedProgrammatically = new WeakRefInstance(this);
      }
      return origFocus.apply(this, arguments);
    }
    focus.__keyborgNativeFocus = origFocus;
  }
  function disposeFocusEvent(win) {
    const kwin = win;
    const proto = kwin.HTMLElement.prototype;
    const origFocus = proto.focus.__keyborgNativeFocus;
    const keyborgNativeFocusEvent = kwin.__keyborgData;
    if (keyborgNativeFocusEvent) {
      kwin.document.removeEventListener("focusin", keyborgNativeFocusEvent.focusInHandler, true);
      delete kwin.__keyborgData;
    }
    if (origFocus) {
      proto.focus = origFocus;
    }
  }
  var _dismissTimeout = 500;
  var _lastId = 0;
  var KeyborgState = class {
    constructor() {
      this.__keyborgCoreRefs = {};
      this._isNavigatingWithKeyboard = false;
    }
    add(keyborg) {
      const id4 = keyborg.id;
      if (!(id4 in this.__keyborgCoreRefs)) {
        this.__keyborgCoreRefs[id4] = new WeakRefInstance(keyborg);
      }
    }
    remove(id4) {
      delete this.__keyborgCoreRefs[id4];
      if (Object.keys(this.__keyborgCoreRefs).length === 0) {
        this._isNavigatingWithKeyboard = false;
      }
    }
    setVal(isNavigatingWithKeyboard) {
      if (this._isNavigatingWithKeyboard === isNavigatingWithKeyboard) {
        return;
      }
      this._isNavigatingWithKeyboard = isNavigatingWithKeyboard;
      for (const id4 of Object.keys(this.__keyborgCoreRefs)) {
        const ref = this.__keyborgCoreRefs[id4];
        const keyborg = ref.deref();
        if (keyborg) {
          keyborg.update(isNavigatingWithKeyboard);
        } else {
          this.remove(id4);
        }
      }
    }
    getVal() {
      return this._isNavigatingWithKeyboard;
    }
  };
  var _state = /* @__PURE__ */ new KeyborgState();
  var KeyborgCore = class {
    constructor(win, props) {
      this._isMouseUsed = false;
      this._onFocusIn = (e3) => {
        if (this._isMouseUsed) {
          this._isMouseUsed = false;
          return;
        }
        if (_state.getVal()) {
          return;
        }
        const details = e3.details;
        if (!details.relatedTarget) {
          return;
        }
        if (details.isFocusedProgrammatically || details.isFocusedProgrammatically === void 0) {
          return;
        }
        _state.setVal(true);
      };
      this._onMouseDown = (e3) => {
        if (e3.buttons === 0 || e3.clientX === 0 && e3.clientY === 0 && e3.screenX === 0 && e3.screenY === 0) {
          return;
        }
        this._isMouseUsed = true;
        _state.setVal(false);
      };
      this._onKeyDown = (e3) => {
        var _a;
        const isNavigatingWithKeyboard = _state.getVal();
        const keyCode = e3.keyCode;
        const triggerKeys = this._triggerKeys;
        if (!isNavigatingWithKeyboard && (!triggerKeys || triggerKeys.has(keyCode))) {
          _state.setVal(true);
        } else if (isNavigatingWithKeyboard && ((_a = this._dismissKeys) === null || _a === void 0 ? void 0 : _a.has(keyCode))) {
          this._scheduleDismiss();
        }
      };
      this.id = "c" + ++_lastId;
      this._win = win;
      const doc2 = win.document;
      if (props) {
        const triggerKeys = props.triggerKeys;
        const dismissKeys = props.dismissKeys;
        if (triggerKeys === null || triggerKeys === void 0 ? void 0 : triggerKeys.length) {
          this._triggerKeys = new Set(triggerKeys);
        }
        if (dismissKeys === null || dismissKeys === void 0 ? void 0 : dismissKeys.length) {
          this._dismissKeys = new Set(dismissKeys);
        }
      }
      doc2.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      doc2.addEventListener("mousedown", this._onMouseDown, true);
      win.addEventListener("keydown", this._onKeyDown, true);
      setupFocusEvent(win);
      _state.add(this);
    }
    dispose() {
      const win = this._win;
      if (win) {
        if (this._dismissTimer) {
          win.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        disposeFocusEvent(win);
        const doc2 = win.document;
        doc2.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc2.removeEventListener("mousedown", this._onMouseDown, true);
        win.removeEventListener("keydown", this._onKeyDown, true);
        delete this._win;
        _state.remove(this.id);
      }
    }
    isDisposed() {
      return !!this._win;
    }
    /**
     * Updates all keyborg instances with the keyboard navigation state
     */
    update(isNavigatingWithKeyboard) {
      var _a, _b;
      const keyborgs = (_b = (_a = this._win) === null || _a === void 0 ? void 0 : _a.__keyborg) === null || _b === void 0 ? void 0 : _b.refs;
      if (keyborgs) {
        for (const id4 of Object.keys(keyborgs)) {
          Keyborg.update(keyborgs[id4], isNavigatingWithKeyboard);
        }
      }
    }
    _scheduleDismiss() {
      const win = this._win;
      if (win) {
        if (this._dismissTimer) {
          win.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        const was = win.document.activeElement;
        this._dismissTimer = win.setTimeout(() => {
          this._dismissTimer = void 0;
          const cur = win.document.activeElement;
          if (was && cur && was === cur) {
            _state.setVal(false);
          }
        }, _dismissTimeout);
      }
    }
  };
  var Keyborg = class {
    constructor(win, props) {
      this._cb = [];
      this._id = "k" + ++_lastId;
      this._win = win;
      const current = win.__keyborg;
      if (current) {
        this._core = current.core;
        current.refs[this._id] = this;
      } else {
        this._core = new KeyborgCore(win, props);
        win.__keyborg = {
          core: this._core,
          refs: {
            [this._id]: this
          }
        };
      }
    }
    static create(win, props) {
      return new Keyborg(win, props);
    }
    static dispose(instance) {
      instance.dispose();
    }
    /**
     * Updates all subscribed callbacks with the keyboard navigation state
     */
    static update(instance, isNavigatingWithKeyboard) {
      instance._cb.forEach((callback) => callback(isNavigatingWithKeyboard));
    }
    dispose() {
      var _a;
      const current = (_a = this._win) === null || _a === void 0 ? void 0 : _a.__keyborg;
      if (current === null || current === void 0 ? void 0 : current.refs[this._id]) {
        delete current.refs[this._id];
        if (Object.keys(current.refs).length === 0) {
          current.core.dispose();
          delete this._win.__keyborg;
        }
      } else if (true) {
        console.error("Keyborg instance " + this._id + " is being disposed incorrectly.");
      }
      this._cb = [];
      delete this._core;
      delete this._win;
    }
    /**
     * @returns Whether the user is navigating with keyboard
     */
    isNavigatingWithKeyboard() {
      return _state.getVal();
    }
    /**
     * @param callback - Called when the keyboard navigation state changes
     */
    subscribe(callback) {
      this._cb.push(callback);
    }
    /**
     * @param callback - Registered with subscribe
     */
    unsubscribe(callback) {
      const index = this._cb.indexOf(callback);
      if (index >= 0) {
        this._cb.splice(index, 1);
      }
    }
    /**
     * Manually set the keyboard navigtion state
     */
    setVal(isNavigatingWithKeyboard) {
      _state.setVal(isNavigatingWithKeyboard);
    }
  };
  function createKeyborg(win, props) {
    return Keyborg.create(win, props);
  }
  function disposeKeyborg(instance) {
    Keyborg.dispose(instance);
  }

  // node_modules/.pnpm/tabster@4.4.0/node_modules/tabster/dist/tabster.esm.js
  var TabsterAttributeName = "data-tabster";
  var TabsterDummyInputAttributeName = "data-tabster-dummy";
  var DeloserEventName = "tabster:deloser";
  var ModalizerActiveEventName = "tabster:modalizer:active";
  var ModalizerInactiveEventName = "tabster:modalizer:inactive";
  var ModalizerFocusInEventName = "tabster:modalizer:focusin";
  var ModalizerFocusOutEventName = "tabster:modalizer:focusout";
  var ModalizerBeforeFocusOutEventName = "tabster:modalizer:beforefocusout";
  var MoverEventName = "tabster:mover";
  var FocusInEventName = "tabster:focusin";
  var FocusOutEventName = "tabster:focusout";
  var ObservedElementAccesibilities = {
    Any: 0,
    Accessible: 1,
    Focusable: 2
  };
  var RestoreFocusOrders = {
    History: 0,
    DeloserDefault: 1,
    RootDefault: 2,
    DeloserFirst: 3,
    RootFirst: 4
  };
  var Visibilities = {
    Invisible: 0,
    PartiallyVisible: 1,
    Visible: 2
  };
  var MoverDirections = {
    Both: 0,
    Vertical: 1,
    Horizontal: 2,
    Grid: 3
  };
  var GroupperTabbabilities = {
    Unlimited: 0,
    Limited: 1,
    LimitedTrapFocus: 2
  };
  var SysDummyInputsPositions = {
    Auto: 0,
    Inside: 1,
    Outside: 2
  };
  var Types = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    TabsterAttributeName,
    TabsterDummyInputAttributeName,
    DeloserEventName,
    ModalizerActiveEventName,
    ModalizerInactiveEventName,
    ModalizerFocusInEventName,
    ModalizerFocusOutEventName,
    ModalizerBeforeFocusOutEventName,
    MoverEventName,
    FocusInEventName,
    FocusOutEventName,
    ObservedElementAccesibilities,
    RestoreFocusOrders,
    Visibilities,
    MoverDirections,
    GroupperTabbabilities,
    SysDummyInputsPositions
  });
  function getTabsterOnElement(tabster, element) {
    var _a;
    return (_a = tabster.storageEntry(element)) === null || _a === void 0 ? void 0 : _a.tabster;
  }
  function updateTabsterByAttribute(tabster, element, dispose) {
    var _a, _b;
    const newAttrValue = dispose || tabster._noop ? void 0 : element.getAttribute(TabsterAttributeName);
    let entry = tabster.storageEntry(element);
    let newAttr;
    if (newAttrValue) {
      if (newAttrValue !== ((_a = entry === null || entry === void 0 ? void 0 : entry.attr) === null || _a === void 0 ? void 0 : _a.string)) {
        try {
          const newValue = JSON.parse(newAttrValue);
          if (typeof newValue !== "object") {
            throw new Error(`Value is not a JSON object, got '${newAttrValue}'.`);
          }
          newAttr = {
            string: newAttrValue,
            object: newValue
          };
        } catch (e3) {
          if (true) {
            console.error(`data-tabster attribute error: ${e3}`, element);
          }
        }
      } else {
        return;
      }
    } else if (!entry) {
      return;
    }
    if (!entry) {
      entry = tabster.storageEntry(element, true);
    }
    if (!entry.tabster) {
      entry.tabster = {};
    }
    const tabsterOnElement = entry.tabster || {};
    const oldTabsterProps = ((_b = entry.attr) === null || _b === void 0 ? void 0 : _b.object) || {};
    const newTabsterProps = (newAttr === null || newAttr === void 0 ? void 0 : newAttr.object) || {};
    for (const key of Object.keys(oldTabsterProps)) {
      if (!newTabsterProps[key]) {
        if (key === "root") {
          const root3 = tabsterOnElement[key];
          if (root3) {
            tabster.root.onRoot(root3, true);
          }
        }
        switch (key) {
          case "deloser":
          case "root":
          case "groupper":
          case "modalizer":
          case "mover":
            const part = tabsterOnElement[key];
            if (part) {
              part.dispose();
              delete tabsterOnElement[key];
            }
            break;
          case "observed":
            delete tabsterOnElement[key];
            if (tabster.observedElement) {
              tabster.observedElement.onObservedElementUpdate(element);
            }
            break;
          case "focusable":
          case "outline":
          case "uncontrolled":
          case "sys":
            delete tabsterOnElement[key];
            break;
        }
      }
    }
    for (const key of Object.keys(newTabsterProps)) {
      const sys = newTabsterProps.sys;
      switch (key) {
        case "deloser":
          if (tabsterOnElement.deloser) {
            tabsterOnElement.deloser.setProps(newTabsterProps.deloser);
          } else {
            if (tabster.deloser) {
              tabsterOnElement.deloser = tabster.deloser.createDeloser(element, newTabsterProps.deloser);
            } else if (true) {
              console.error("Deloser API used before initialization, please call `getDeloser()`");
            }
          }
          break;
        case "root":
          if (tabsterOnElement.root) {
            tabsterOnElement.root.setProps(newTabsterProps.root);
          } else {
            tabsterOnElement.root = tabster.root.createRoot(element, newTabsterProps.root, sys);
          }
          tabster.root.onRoot(tabsterOnElement.root);
          break;
        case "modalizer":
          if (tabsterOnElement.modalizer) {
            tabsterOnElement.modalizer.setProps(newTabsterProps.modalizer);
          } else {
            if (tabster.modalizer) {
              tabsterOnElement.modalizer = tabster.modalizer.createModalizer(element, newTabsterProps.modalizer, sys);
            } else if (true) {
              console.error("Modalizer API used before initialization, please call `getModalizer()`");
            }
          }
          break;
        case "focusable":
          tabsterOnElement.focusable = newTabsterProps.focusable;
          break;
        case "groupper":
          if (tabsterOnElement.groupper) {
            tabsterOnElement.groupper.setProps(newTabsterProps.groupper);
          } else {
            if (tabster.groupper) {
              tabsterOnElement.groupper = tabster.groupper.createGroupper(element, newTabsterProps.groupper, sys);
            } else if (true) {
              console.error("Groupper API used before initialization, please call `getGroupper()`");
            }
          }
          break;
        case "mover":
          if (tabsterOnElement.mover) {
            tabsterOnElement.mover.setProps(newTabsterProps.mover);
          } else {
            if (tabster.mover) {
              tabsterOnElement.mover = tabster.mover.createMover(element, newTabsterProps.mover, sys);
            } else if (true) {
              console.error("Mover API used before initialization, please call `getMover()`");
            }
          }
          break;
        case "observed":
          if (tabster.observedElement) {
            tabsterOnElement.observed = newTabsterProps.observed;
            tabster.observedElement.onObservedElementUpdate(element);
          } else if (true) {
            console.error("ObservedElement API used before initialization, please call `getObservedElement()`");
          }
          break;
        case "uncontrolled":
          tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;
          break;
        case "outline":
          if (tabster.outline) {
            tabsterOnElement.outline = newTabsterProps.outline;
          } else if (true) {
            console.error("Outline API used before initialization, please call `getOutline()`");
          }
          break;
        case "sys":
          tabsterOnElement.sys = newTabsterProps.sys;
          break;
        default:
          console.error(`Unknown key '${key}' in data-tabster attribute value.`);
      }
    }
    if (newAttr) {
      entry.attr = newAttr;
    } else {
      if (Object.keys(tabsterOnElement).length === 0) {
        delete entry.tabster;
        delete entry.attr;
      }
      tabster.storageEntry(element, false);
    }
  }
  function createEventTarget(getWindow) {
    const global2 = getWindow();
    try {
      if (global2.EventTarget) {
        return new global2.EventTarget();
      }
    } catch (error) {
      if (!(error instanceof TypeError)) {
        throw error;
      }
    }
    return global2.document.createElement("div");
  }
  var _isBrokenIE11;
  var _DOMRect = typeof DOMRect !== "undefined" ? DOMRect : class {
    constructor(x3, y4, width, height) {
      this.left = x3 || 0;
      this.top = y4 || 0;
      this.right = (x3 || 0) + (width || 0);
      this.bottom = (y4 || 0) + (height || 0);
    }
  };
  var _uidCounter = 0;
  try {
    document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);
    _isBrokenIE11 = false;
  } catch (e3) {
    _isBrokenIE11 = true;
  }
  var _updateDummyInputsTimeout = 100;
  function getInstanceContext(getWindow) {
    const win = getWindow();
    let ctx = win.__tabsterInstanceContext;
    if (!ctx) {
      ctx = {
        elementByUId: {},
        basics: {
          Promise: win.Promise || void 0,
          WeakRef: win.WeakRef || void 0
        },
        containerBoundingRectCache: {},
        lastContainerBoundingRectCacheId: 0,
        fakeWeakRefs: [],
        fakeWeakRefsStarted: false
      };
      win.__tabsterInstanceContext = ctx;
    }
    return ctx;
  }
  function disposeInstanceContext(win) {
    const ctx = win.__tabsterInstanceContext;
    if (ctx) {
      ctx.elementByUId = {};
      delete ctx.WeakRef;
      ctx.containerBoundingRectCache = {};
      if (ctx.containerBoundingRectCacheTimer) {
        win.clearTimeout(ctx.containerBoundingRectCacheTimer);
      }
      if (ctx.fakeWeakRefsTimer) {
        win.clearTimeout(ctx.fakeWeakRefsTimer);
      }
      ctx.fakeWeakRefs = [];
      delete win.__tabsterInstanceContext;
    }
  }
  function createWeakMap(win) {
    const ctx = win.__tabsterInstanceContext;
    return new ((ctx === null || ctx === void 0 ? void 0 : ctx.basics.WeakMap) || WeakMap)();
  }
  var FakeWeakRef = class {
    constructor(target) {
      this._target = target;
    }
    deref() {
      return this._target;
    }
    static cleanup(fwr, forceRemove) {
      if (!fwr._target) {
        return true;
      }
      if (forceRemove || !documentContains(fwr._target.ownerDocument, fwr._target)) {
        delete fwr._target;
        return true;
      }
      return false;
    }
  };
  var WeakHTMLElement = class {
    constructor(getWindow, element, data) {
      const context = getInstanceContext(getWindow);
      let ref;
      if (context.WeakRef) {
        ref = new context.WeakRef(element);
      } else {
        ref = new FakeWeakRef(element);
        context.fakeWeakRefs.push(ref);
      }
      this._ref = ref;
      this._data = data;
    }
    get() {
      const ref = this._ref;
      let element;
      if (ref) {
        element = ref.deref();
        if (!element) {
          delete this._ref;
        }
      }
      return element;
    }
    getData() {
      return this._data;
    }
  };
  function cleanupFakeWeakRefs(getWindow, forceRemove) {
    const context = getInstanceContext(getWindow);
    context.fakeWeakRefs = context.fakeWeakRefs.filter((e3) => !FakeWeakRef.cleanup(e3, forceRemove));
  }
  function startFakeWeakRefsCleanup(getWindow) {
    const context = getInstanceContext(getWindow);
    if (!context.fakeWeakRefsStarted) {
      context.fakeWeakRefsStarted = true;
      context.WeakRef = getWeakRef(context);
    }
    if (!context.fakeWeakRefsTimer) {
      context.fakeWeakRefsTimer = getWindow().setTimeout(() => {
        context.fakeWeakRefsTimer = void 0;
        cleanupFakeWeakRefs(getWindow);
        startFakeWeakRefsCleanup(getWindow);
      }, 2 * 60 * 1e3);
    }
  }
  function stopFakeWeakRefsCleanupAndClearStorage(getWindow) {
    const context = getInstanceContext(getWindow);
    context.fakeWeakRefsStarted = false;
    if (context.fakeWeakRefsTimer) {
      getWindow().clearTimeout(context.fakeWeakRefsTimer);
      context.fakeWeakRefsTimer = void 0;
      context.fakeWeakRefs = [];
    }
  }
  function createElementTreeWalker(doc2, root3, acceptNode) {
    if (root3.nodeType !== Node.ELEMENT_NODE) {
      return void 0;
    }
    const filter3 = _isBrokenIE11 ? acceptNode : {
      acceptNode
    };
    return doc2.createTreeWalker(
      root3,
      NodeFilter.SHOW_ELEMENT,
      filter3,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.
      false
      /* Last argument is not optional for IE11! */
    );
  }
  function getBoundingRect(getWindow, element) {
    let cacheId = element.__tabsterCacheId;
    const context = getInstanceContext(getWindow);
    const cached = cacheId ? context.containerBoundingRectCache[cacheId] : void 0;
    if (cached) {
      return cached.rect;
    }
    const scrollingElement = element.ownerDocument && element.ownerDocument.documentElement;
    if (!scrollingElement) {
      return new _DOMRect();
    }
    let left = 0;
    let top = 0;
    let right = scrollingElement.clientWidth;
    let bottom = scrollingElement.clientHeight;
    if (element !== scrollingElement) {
      const r3 = element.getBoundingClientRect();
      left = Math.max(left, r3.left);
      top = Math.max(top, r3.top);
      right = Math.min(right, r3.right);
      bottom = Math.min(bottom, r3.bottom);
    }
    const rect = new _DOMRect(left < right ? left : -1, top < bottom ? top : -1, left < right ? right - left : 0, top < bottom ? bottom - top : 0);
    if (!cacheId) {
      cacheId = "r-" + ++context.lastContainerBoundingRectCacheId;
      element.__tabsterCacheId = cacheId;
    }
    context.containerBoundingRectCache[cacheId] = {
      rect,
      element
    };
    if (!context.containerBoundingRectCacheTimer) {
      context.containerBoundingRectCacheTimer = window.setTimeout(() => {
        context.containerBoundingRectCacheTimer = void 0;
        for (const cId of Object.keys(context.containerBoundingRectCache)) {
          delete context.containerBoundingRectCache[cId].element.__tabsterCacheId;
        }
        context.containerBoundingRectCache = {};
      }, 50);
    }
    return rect;
  }
  function isElementVerticallyVisibleInContainer(getWindow, element, tolerance) {
    const container = getScrollableContainer(element);
    if (!container) {
      return false;
    }
    const containerRect = getBoundingRect(getWindow, container);
    const elementRect = element.getBoundingClientRect();
    const intersectionTolerance = elementRect.height * (1 - tolerance);
    const topIntersection = Math.max(0, containerRect.top - elementRect.top);
    const bottomIntersection = Math.max(0, elementRect.bottom - containerRect.bottom);
    const totalIntersection = topIntersection + bottomIntersection;
    return totalIntersection === 0 || totalIntersection <= intersectionTolerance;
  }
  function scrollIntoView(getWindow, element, alignToTop) {
    const container = getScrollableContainer(element);
    if (container) {
      const containerRect = getBoundingRect(getWindow, container);
      const elementRect = element.getBoundingClientRect();
      if (alignToTop) {
        container.scrollTop += elementRect.top - containerRect.top;
      } else {
        container.scrollTop += elementRect.bottom - containerRect.bottom;
      }
    }
  }
  function getScrollableContainer(element) {
    const doc2 = element.ownerDocument;
    if (doc2) {
      for (let el = element.parentElement; el; el = el.parentElement) {
        if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {
          return el;
        }
      }
      return doc2.documentElement;
    }
    return null;
  }
  function makeFocusIgnored(element) {
    element.__shouldIgnoreFocus = true;
  }
  function shouldIgnoreFocus(element) {
    return !!element.__shouldIgnoreFocus;
  }
  function getUId(wnd) {
    const rnd = new Uint32Array(4);
    if (wnd.crypto && wnd.crypto.getRandomValues) {
      wnd.crypto.getRandomValues(rnd);
    } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {
      wnd.msCrypto.getRandomValues(rnd);
    } else {
      for (let i4 = 0; i4 < rnd.length; i4++) {
        rnd[i4] = 4294967295 * Math.random();
      }
    }
    const srnd = [];
    for (let i4 = 0; i4 < rnd.length; i4++) {
      srnd.push(rnd[i4].toString(36));
    }
    srnd.push("|");
    srnd.push((++_uidCounter).toString(36));
    srnd.push("|");
    srnd.push(Date.now().toString(36));
    return srnd.join("");
  }
  function getElementUId(getWindow, element) {
    const context = getInstanceContext(getWindow);
    let uid = element.__tabsterElementUID;
    if (!uid) {
      uid = element.__tabsterElementUID = getUId(getWindow());
    }
    if (!context.elementByUId[uid] && documentContains(element.ownerDocument, element)) {
      context.elementByUId[uid] = new WeakHTMLElement(getWindow, element);
    }
    return uid;
  }
  function clearElementCache(getWindow, parent) {
    const context = getInstanceContext(getWindow);
    for (const key of Object.keys(context.elementByUId)) {
      const wel = context.elementByUId[key];
      const el = wel && wel.get();
      if (el && parent) {
        if (!parent.contains(el)) {
          continue;
        }
      }
      delete context.elementByUId[key];
    }
  }
  function documentContains(doc2, element) {
    var _a;
    return !!((_a = doc2 === null || doc2 === void 0 ? void 0 : doc2.body) === null || _a === void 0 ? void 0 : _a.contains(element));
  }
  function matchesSelector(element, selector2) {
    const matches = element.matches || element.matchesSelector || element.msMatchesSelector || element.webkitMatchesSelector;
    return matches && matches.call(element, selector2);
  }
  function getPromise(getWindow) {
    const context = getInstanceContext(getWindow);
    if (context.basics.Promise) {
      return context.basics.Promise;
    }
    throw new Error("No Promise defined.");
  }
  function getWeakRef(context) {
    return context.basics.WeakRef;
  }
  var _lastTabsterPartId = 0;
  var TabsterPart = class {
    constructor(tabster, element, props) {
      const getWindow = tabster.getWindow;
      this._tabster = tabster;
      this._element = new WeakHTMLElement(getWindow, element);
      this._props = {
        ...props
      };
      this.id = "i" + ++_lastTabsterPartId;
    }
    getElement() {
      return this._element.get();
    }
    getProps() {
      return this._props;
    }
    setProps(props) {
      this._props = {
        ...props
      };
    }
  };
  var DummyInput = class {
    constructor(getWindow, isOutside, props, element) {
      var _a;
      this._focusIn = (e3) => {
        const input2 = this.input;
        if (this.onFocusIn && input2) {
          const relatedTarget = DummyInputManager.getLastPhantomFrom() || e3.relatedTarget;
          this.onFocusIn(this, this._isBackward(true, input2, relatedTarget), relatedTarget);
        }
      };
      this._focusOut = (e3) => {
        this.useDefaultAction = false;
        const input2 = this.input;
        if (this.onFocusOut && input2) {
          const relatedTarget = e3.relatedTarget;
          this.onFocusOut(this, this._isBackward(false, input2, relatedTarget), relatedTarget);
        }
      };
      const win = getWindow();
      const input = win.document.createElement("i");
      input.tabIndex = 0;
      input.setAttribute("role", "none");
      input.setAttribute(TabsterDummyInputAttributeName, "");
      input.setAttribute("aria-hidden", "true");
      const style2 = input.style;
      style2.position = "fixed";
      style2.width = style2.height = "1px";
      style2.opacity = "0.001";
      style2.zIndex = "-1";
      style2.setProperty("content-visibility", "hidden");
      makeFocusIgnored(input);
      this.input = input;
      this.isFirst = props.isFirst;
      this.isOutside = isOutside;
      this._isPhantom = (_a = props.isPhantom) !== null && _a !== void 0 ? _a : false;
      input.addEventListener("focusin", this._focusIn);
      input.addEventListener("focusout", this._focusOut);
      input.__tabsterDummyContainer = element;
      if (this._isPhantom) {
        this._disposeTimer = win.setTimeout(() => {
          delete this._disposeTimer;
          this.dispose();
        }, 0);
        this._clearDisposeTimeout = () => {
          if (this._disposeTimer) {
            win.clearTimeout(this._disposeTimer);
            delete this._disposeTimer;
          }
          delete this._clearDisposeTimeout;
        };
      }
    }
    dispose() {
      var _a;
      if (this._clearDisposeTimeout) {
        this._clearDisposeTimeout();
      }
      const input = this.input;
      if (!input) {
        return;
      }
      delete this.onFocusIn;
      delete this.onFocusOut;
      delete this.input;
      input.removeEventListener("focusin", this._focusIn);
      input.removeEventListener("focusout", this._focusOut);
      delete input.__tabsterDummyContainer;
      (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(input);
    }
    setTopLeft(top, left) {
      var _a;
      const style2 = (_a = this.input) === null || _a === void 0 ? void 0 : _a.style;
      if (style2) {
        style2.top = `${top}px`;
        style2.left = `${left}px`;
      }
    }
    _isBackward(isIn, current, previous) {
      return isIn && !previous ? !this.isFirst : !!(previous && current.compareDocumentPosition(previous) & Node.DOCUMENT_POSITION_FOLLOWING);
    }
  };
  var DummyInputManagerPriorities = {
    Root: 1,
    Modalizer: 2,
    Mover: 3,
    Groupper: 4
  };
  var DummyInputManager = class {
    constructor(tabster, element, priority, sys, outsideByDefault, callForDefaultAction) {
      this._element = element;
      this._instance = new DummyInputManagerCore(tabster, element, this, priority, sys, outsideByDefault, callForDefaultAction);
      this.moveOut = (backwards) => {
        var _a;
        (_a = this._instance) === null || _a === void 0 ? void 0 : _a.moveOut(backwards);
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a;
        (_a = this._instance) === null || _a === void 0 ? void 0 : _a.moveOutWithDefaultAction(backwards);
      };
    }
    _setHandlers(onFocusIn, onFocusOut) {
      this._onFocusIn = onFocusIn;
      this._onFocusOut = onFocusOut;
    }
    getHandler(isIn) {
      return isIn ? this._onFocusIn : this._onFocusOut;
    }
    setTabbable(tabbable) {
      var _a;
      (_a = this._instance) === null || _a === void 0 ? void 0 : _a.setTabbable(this, tabbable);
    }
    dispose() {
      if (this._instance) {
        this._instance.dispose(this);
        delete this._instance;
      }
      delete this._onFocusIn;
      delete this._onFocusOut;
    }
    static getLastPhantomFrom() {
      const ret = DummyInputManager._lastPhantomFrom;
      delete DummyInputManager._lastPhantomFrom;
      return ret;
    }
    static moveWithPhantomDummy(tabster, element, moveOutside, isBackward) {
      const dummy = new DummyInput(tabster.getWindow, true, {
        isPhantom: true,
        isFirst: true
      });
      const input = dummy.input;
      if (input) {
        const parent = element.parentElement;
        if (parent) {
          let insertBefore = moveOutside && !isBackward || !moveOutside && isBackward ? element.nextElementSibling : element;
          if (insertBefore) {
            if (isBackward) {
              const beforeBefore = insertBefore.previousElementSibling;
              if (beforeBefore && beforeBefore.__tabsterDummyContainer) {
                insertBefore = beforeBefore;
              }
            } else if (insertBefore.__tabsterDummyContainer) {
              insertBefore = insertBefore.nextElementSibling;
            }
          }
          parent.insertBefore(input, insertBefore);
          DummyInputManager._lastPhantomFrom = element;
          tabster.getWindow().setTimeout(() => {
            delete DummyInputManager._lastPhantomFrom;
          }, 0);
          nativeFocus(input);
        }
      }
    }
  };
  function setDummyInputDebugValue(dummy, wrappers) {
    var _a;
    const what = {
      1: "Root",
      2: "Modalizer",
      3: "Mover",
      4: "Groupper"
    };
    (_a = dummy.input) === null || _a === void 0 ? void 0 : _a.setAttribute(TabsterDummyInputAttributeName, [`isFirst=${dummy.isFirst}`, `isOutside=${dummy.isOutside}`, ...wrappers.map((w4) => `(${what[w4.priority]}, tabbable=${w4.tabbable})`)].join(", "));
  }
  var DummyInputObserver = class {
    constructor(win) {
      this._updateQueue = /* @__PURE__ */ new Set();
      this._lastUpdateQueueTime = 0;
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies = /* @__PURE__ */ new Map();
      this._domChanged = (parent) => {
        var _a;
        if (this._changedParents.has(parent)) {
          return;
        }
        this._changedParents.add(parent);
        if (this._updateDummyInputsTimer) {
          return;
        }
        this._updateDummyInputsTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this).setTimeout(() => {
          delete this._updateDummyInputsTimer;
          for (const [dummy, callback] of this._dummies) {
            const dummyParent = dummy.parentElement;
            if (!dummyParent || this._changedParents.has(dummyParent)) {
              callback();
            }
          }
          this._changedParents = /* @__PURE__ */ new WeakSet();
        }, _updateDummyInputsTimeout);
      };
      this._win = win;
    }
    add(dummy, callback) {
      this._dummies.set(dummy, callback);
      this.domChanged = this._domChanged;
    }
    remove(dummy) {
      const dummyInputElements = this._dummies;
      dummyInputElements.delete(dummy);
      if (dummyInputElements.size === 0) {
        delete this.domChanged;
      }
    }
    dispose() {
      var _a;
      const win = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this);
      if (this._updateTimer) {
        win === null || win === void 0 ? void 0 : win.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      if (this._updateDummyInputsTimer) {
        win === null || win === void 0 ? void 0 : win.clearTimeout(this._updateDummyInputsTimer);
        delete this._updateDummyInputsTimer;
      }
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies.clear();
      delete this._win;
    }
    updatePositions(compute) {
      if (!this._win) {
        return;
      }
      this._updateQueue.add(compute);
      this._lastUpdateQueueTime = Date.now();
      this._scheduledUpdatePositions();
    }
    _scheduledUpdatePositions() {
      var _a;
      if (this._updateTimer) {
        return;
      }
      this._updateTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this).setTimeout(() => {
        delete this._updateTimer;
        if (this._lastUpdateQueueTime + _updateDummyInputsTimeout <= Date.now()) {
          const scrollTopLeftCache = /* @__PURE__ */ new Map();
          const setTopLeftCallbacks = [];
          for (const compute of this._updateQueue) {
            setTopLeftCallbacks.push(compute(scrollTopLeftCache));
          }
          this._updateQueue.clear();
          for (const setTopLeft of setTopLeftCallbacks) {
            setTopLeft();
          }
          scrollTopLeftCache.clear();
        } else {
          this._scheduledUpdatePositions();
        }
      }, _updateDummyInputsTimeout);
    }
  };
  var DummyInputManagerCore = class {
    constructor(tabster, element, manager, priority, sys, outsideByDefault, callForDefaultAction) {
      this._wrappers = [];
      this._isOutside = false;
      this._transformElements = /* @__PURE__ */ new Set();
      this._onFocusIn = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(true, dummyInput, isBackward, relatedTarget);
      };
      this._onFocusOut = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(false, dummyInput, isBackward, relatedTarget);
      };
      this.moveOut = (backwards) => {
        var _a;
        const first = this._firstDummy;
        const last = this._lastDummy;
        if (first && last) {
          const firstInput = first.input;
          const lastInput = last.input;
          const element2 = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
          if (firstInput && lastInput && element2) {
            let toFocus;
            if (backwards) {
              firstInput.tabIndex = 0;
              toFocus = firstInput;
            } else {
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a;
        const first = this._firstDummy;
        const last = this._lastDummy;
        if (first && last) {
          const firstInput = first.input;
          const lastInput = last.input;
          const element2 = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
          if (firstInput && lastInput && element2) {
            let toFocus;
            if (backwards) {
              if (!first.isOutside && this._tabster.focusable.isFocusable(element2, true, true, true)) {
                toFocus = element2;
              } else {
                first.useDefaultAction = true;
                firstInput.tabIndex = 0;
                toFocus = firstInput;
              }
            } else {
              last.useDefaultAction = true;
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.setTabbable = (manager2, tabbable) => {
        var _a, _b;
        for (const w4 of this._wrappers) {
          if (w4.manager === manager2) {
            w4.tabbable = tabbable;
            break;
          }
        }
        const wrapper = this._getCurrent();
        if (wrapper) {
          const tabIndex = wrapper.tabbable ? 0 : -1;
          let input = (_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input;
          if (input) {
            input.tabIndex = tabIndex;
          }
          input = (_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input;
          if (input) {
            input.tabIndex = tabIndex;
          }
        }
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
        }
      };
      this._addDummyInputs = () => {
        if (this._addTimer) {
          return;
        }
        this._addTimer = this._getWindow().setTimeout(() => {
          var _a, _b, _c;
          delete this._addTimer;
          const element2 = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
          const dif = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
          const dil = (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.input;
          if (!element2 || !dif || !dil) {
            return;
          }
          if (this._isOutside) {
            const elementParent = element2.parentElement;
            if (elementParent) {
              const nextSibling = element2.nextElementSibling;
              if (nextSibling !== dil) {
                elementParent.insertBefore(dil, nextSibling);
              }
              if (element2.previousElementSibling !== dif) {
                elementParent.insertBefore(dif, element2);
              }
            }
          } else {
            if (element2.lastElementChild !== dil) {
              element2.appendChild(dil);
            }
            const firstElementChild = element2.firstElementChild;
            if (firstElementChild && firstElementChild !== dif) {
              element2.insertBefore(dif, firstElementChild);
            }
          }
          if (true) {
            this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
            this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
          }
          this._addTransformOffsets();
        }, 0);
      };
      this._addTransformOffsets = () => {
        this._tabster._dummyObserver.updatePositions(this._computeTransformOffsets);
      };
      this._computeTransformOffsets = (scrollTopLeftCache) => {
        var _a, _b;
        const from2 = ((_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input) || ((_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input);
        const transformElements = this._transformElements;
        const newTransformElements = /* @__PURE__ */ new Set();
        let scrollTop = 0;
        let scrollLeft = 0;
        const win = this._getWindow();
        for (let element2 = from2; element2; element2 = element2.parentElement) {
          let scrollTopLeft = scrollTopLeftCache.get(element2);
          if (scrollTopLeft === void 0) {
            const transform3 = win.getComputedStyle(element2).transform;
            if (transform3 && transform3 !== "none") {
              scrollTopLeft = {
                scrollTop: element2.scrollTop,
                scrollLeft: element2.scrollLeft
              };
            }
            scrollTopLeftCache.set(element2, scrollTopLeft || null);
          }
          if (scrollTopLeft) {
            newTransformElements.add(element2);
            if (!transformElements.has(element2)) {
              element2.addEventListener("scroll", this._addTransformOffsets);
            }
            scrollTop += scrollTopLeft.scrollTop;
            scrollLeft += scrollTopLeft.scrollLeft;
          }
        }
        for (const el2 of transformElements) {
          if (!newTransformElements.has(el2)) {
            el2.removeEventListener("scroll", this._addTransformOffsets);
          }
        }
        this._transformElements = newTransformElements;
        return () => {
          var _a2, _b2;
          (_a2 = this._firstDummy) === null || _a2 === void 0 ? void 0 : _a2.setTopLeft(scrollTop, scrollLeft);
          (_b2 = this._lastDummy) === null || _b2 === void 0 ? void 0 : _b2.setTopLeft(scrollTop, scrollLeft);
        };
      };
      const el = element.get();
      if (!el) {
        throw new Error("No element");
      }
      this._tabster = tabster;
      this._getWindow = tabster.getWindow;
      this._callForDefaultAction = callForDefaultAction;
      const instance = el.__tabsterDummy;
      (instance || this)._wrappers.push({
        manager,
        priority,
        tabbable: true
      });
      if (instance) {
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, instance._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, instance._wrappers);
        }
        return instance;
      }
      el.__tabsterDummy = this;
      const forcedDummyPosition = sys === null || sys === void 0 ? void 0 : sys.dummyInputsPosition;
      const tagName = el.tagName;
      this._isOutside = !forcedDummyPosition ? (outsideByDefault || tagName === "UL" || tagName === "OL" || tagName === "TABLE") && !(tagName === "LI" || tagName === "TD" || tagName === "TH") : forcedDummyPosition === SysDummyInputsPositions.Outside;
      this._firstDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: true
      }, element);
      this._lastDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: false
      }, element);
      const dummyElement = this._firstDummy.input;
      dummyElement && tabster._dummyObserver.add(dummyElement, this._addDummyInputs);
      this._firstDummy.onFocusIn = this._onFocusIn;
      this._firstDummy.onFocusOut = this._onFocusOut;
      this._lastDummy.onFocusIn = this._onFocusIn;
      this._lastDummy.onFocusOut = this._onFocusOut;
      this._element = element;
      this._addDummyInputs();
    }
    dispose(manager, force) {
      var _a, _b, _c, _d;
      const wrappers = this._wrappers = this._wrappers.filter((w4) => w4.manager !== manager && !force);
      if (true) {
        this._firstDummy && setDummyInputDebugValue(this._firstDummy, wrappers);
        this._lastDummy && setDummyInputDebugValue(this._lastDummy, wrappers);
      }
      if (wrappers.length === 0) {
        delete ((_a = this._element) === null || _a === void 0 ? void 0 : _a.get()).__tabsterDummy;
        for (const el of this._transformElements) {
          el.removeEventListener("scroll", this._addTransformOffsets);
        }
        this._transformElements.clear();
        const win = this._getWindow();
        if (this._addTimer) {
          win.clearTimeout(this._addTimer);
          delete this._addTimer;
        }
        const dummyElement = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
        dummyElement && this._tabster._dummyObserver.remove(dummyElement);
        (_c = this._firstDummy) === null || _c === void 0 ? void 0 : _c.dispose();
        (_d = this._lastDummy) === null || _d === void 0 ? void 0 : _d.dispose();
      }
    }
    _onFocus(isIn, dummyInput, isBackward, relatedTarget) {
      var _a;
      const wrapper = this._getCurrent();
      if (wrapper && (!dummyInput.useDefaultAction || this._callForDefaultAction)) {
        (_a = wrapper.manager.getHandler(isIn)) === null || _a === void 0 ? void 0 : _a(dummyInput, isBackward, relatedTarget);
      }
    }
    _getCurrent() {
      this._wrappers.sort((a4, b5) => {
        if (a4.tabbable !== b5.tabbable) {
          return a4.tabbable ? -1 : 1;
        }
        return a4.priority - b5.priority;
      });
      return this._wrappers[0];
    }
  };
  function getLastChild(container) {
    let lastChild = null;
    for (let i4 = container.lastElementChild; i4; i4 = i4.lastElementChild) {
      lastChild = i4;
    }
    return lastChild || void 0;
  }
  function getAdjacentElement(from2, prev2) {
    let cur = from2;
    let adjacent = null;
    while (cur && !adjacent) {
      adjacent = prev2 ? cur.previousElementSibling : cur.nextElementSibling;
      cur = cur.parentElement;
    }
    return adjacent || void 0;
  }
  function triggerEvent(target, name, details) {
    const event = document.createEvent("HTMLEvents");
    event.initEvent(name, true, true);
    event.details = details;
    target.dispatchEvent(event);
    return !event.defaultPrevented;
  }
  function getTabsterAttribute(props, plain) {
    const attr = JSON.stringify(props);
    if (plain === true) {
      return attr;
    }
    return {
      [TabsterAttributeName]: attr
    };
  }
  function mergeTabsterProps(props, newProps) {
    for (const key of Object.keys(newProps)) {
      const value = newProps[key];
      if (value) {
        props[key] = value;
      } else {
        delete props[key];
      }
    }
  }
  function setTabsterAttribute(element, newProps, update) {
    let props;
    if (update) {
      const attr = element.getAttribute(TabsterAttributeName);
      if (attr) {
        try {
          props = JSON.parse(attr);
        } catch (e3) {
          if (true) {
            console.error(`data-tabster attribute error: ${e3}`, element);
          }
        }
      }
    }
    if (!props) {
      props = {};
    }
    mergeTabsterProps(props, newProps);
    if (Object.keys(props).length > 0) {
      element.setAttribute(TabsterAttributeName, getTabsterAttribute(props, true));
    } else {
      element.removeAttribute(TabsterAttributeName);
    }
  }
  function _setInformativeStyle$3(weakElement, remove2, id4) {
    if (true) {
      const element = weakElement.get();
      if (element) {
        if (remove2) {
          element.style.removeProperty("--tabster-root");
        } else {
          element.style.setProperty("--tabster-root", id4 + ",");
        }
      }
    }
  }
  var RootDummyManager = class extends DummyInputManager {
    constructor(tabster, element, setFocused, sys) {
      super(tabster, element, DummyInputManagerPriorities.Root, sys, void 0, true);
      this._onDummyInputFocus = (dummyInput) => {
        var _a;
        if (dummyInput.useDefaultAction) {
          this._setFocused(false, true);
        } else {
          this._tabster.keyboardNavigation.setNavigatingWithKeyboard(true);
          const element2 = this._element.get();
          if (element2) {
            this._setFocused(true, true);
            const toFocus = this._tabster.focusedElement.getFirstOrLastTabbable(dummyInput.isFirst, {
              container: element2,
              ignoreAccessibility: true
            });
            if (toFocus) {
              nativeFocus(toFocus);
              return;
            }
          }
          (_a = dummyInput.input) === null || _a === void 0 ? void 0 : _a.blur();
        }
      };
      this._setHandlers(this._onDummyInputFocus);
      this._tabster = tabster;
      this._setFocused = setFocused;
    }
  };
  var Root = class extends TabsterPart {
    constructor(tabster, element, onDispose, props, sys) {
      super(tabster, element, props);
      this._isFocused = false;
      this._setFocused = (hasFocused, fromAdjacent) => {
        if (this._setFocusedTimer) {
          this._tabster.getWindow().clearTimeout(this._setFocusedTimer);
          delete this._setFocusedTimer;
        }
        if (this._isFocused === hasFocused) {
          return;
        }
        const element2 = this._element.get();
        if (element2) {
          if (hasFocused) {
            this._isFocused = true;
            triggerEvent(this._tabster.root.eventTarget, "focus", {
              element: element2,
              fromAdjacent
            });
          } else {
            this._setFocusedTimer = this._tabster.getWindow().setTimeout(() => {
              delete this._setFocusedTimer;
              this._isFocused = false;
              triggerEvent(this._tabster.root.eventTarget, "blur", {
                element: element2,
                fromAdjacent
              });
            }, 0);
          }
        }
      };
      this._onFocus = (e3) => {
        var _a;
        const win2 = this._tabster.getWindow();
        if (this._setTabbableTimer) {
          win2.clearTimeout(this._setTabbableTimer);
          delete this._setTabbableTimer;
        }
        if (e3) {
          const ctx = RootAPI.getTabsterContext(this._tabster, e3);
          if (ctx) {
            this._setFocused(ctx.root.getElement() === this._element.get());
          }
          if (!ctx || ctx.uncontrolled || this._tabster.rootDummyInputs) {
            (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.setTabbable(false);
            return;
          }
        } else {
          this._setFocused(false);
        }
        this._setTabbableTimer = win2.setTimeout(() => {
          var _a2;
          delete this._setTabbableTimer;
          (_a2 = this._dummyManager) === null || _a2 === void 0 ? void 0 : _a2.setTabbable(true);
        }, 0);
      };
      this._onDispose = onDispose;
      const win = tabster.getWindow;
      this.uid = getElementUId(win, element);
      this._sys = sys;
      if (tabster.controlTab || tabster.rootDummyInputs) {
        this.addDummyInputs();
      }
      tabster.focusedElement.subscribe(this._onFocus);
      this._add();
    }
    addDummyInputs() {
      if (!this._dummyManager) {
        this._dummyManager = new RootDummyManager(this._tabster, this._element, this._setFocused, this._sys);
      }
    }
    dispose() {
      var _a;
      this._onDispose(this);
      const win = this._tabster.getWindow();
      if (this._setFocusedTimer) {
        win.clearTimeout(this._setFocusedTimer);
        delete this._setFocusedTimer;
      }
      if (this._setTabbableTimer) {
        win.clearTimeout(this._setTabbableTimer);
        delete this._setTabbableTimer;
      }
      (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();
      this._remove();
    }
    moveOutWithDefaultAction(isBackward) {
      const dummyManager = this._dummyManager;
      if (dummyManager) {
        dummyManager.moveOutWithDefaultAction(isBackward);
      } else {
        const el = this.getElement();
        if (el) {
          RootDummyManager.moveWithPhantomDummy(this._tabster, el, true, isBackward);
        }
      }
    }
    _add() {
      if (true) {
        _setInformativeStyle$3(this._element, false, this.uid);
      }
    }
    _remove() {
      if (true) {
        _setInformativeStyle$3(this._element, true);
      }
    }
  };
  var RootAPI = class {
    constructor(tabster, autoRoot) {
      this._autoRootWaiting = false;
      this._roots = {};
      this._forceDummy = false;
      this.rootById = {};
      this._autoRootCreate = () => {
        var _a;
        const doc2 = this._win().document;
        const body = doc2.body;
        if (body) {
          this._autoRootUnwait(doc2);
          const props = this._autoRoot;
          if (props) {
            setTabsterAttribute(body, {
              root: props
            }, true);
            updateTabsterByAttribute(this._tabster, body);
            return (_a = getTabsterOnElement(this._tabster, body)) === null || _a === void 0 ? void 0 : _a.root;
          }
        } else if (!this._autoRootWaiting) {
          this._autoRootWaiting = true;
          doc2.addEventListener("readystatechange", this._autoRootCreate);
        }
        return void 0;
      };
      this._onRootDispose = (root3) => {
        delete this._roots[root3.id];
      };
      this._tabster = tabster;
      this._win = tabster.getWindow;
      this._autoRoot = autoRoot;
      this.eventTarget = createEventTarget(this._win);
      tabster.queueInit(() => {
        if (this._autoRoot) {
          this._autoRootCreate();
        }
      });
    }
    _autoRootUnwait(doc2) {
      doc2.removeEventListener("readystatechange", this._autoRootCreate);
      this._autoRootWaiting = false;
    }
    dispose() {
      const win = this._win();
      this._autoRootUnwait(win.document);
      delete this._autoRoot;
      Object.keys(this._roots).forEach((rootId) => {
        if (this._roots[rootId]) {
          this._roots[rootId].dispose();
          delete this._roots[rootId];
        }
      });
      this.rootById = {};
    }
    createRoot(element, props, sys) {
      if (true)
        ;
      const newRoot = new Root(this._tabster, element, this._onRootDispose, props, sys);
      this._roots[newRoot.id] = newRoot;
      if (this._forceDummy) {
        newRoot.addDummyInputs();
      }
      return newRoot;
    }
    addDummyInputs() {
      this._forceDummy = true;
      const roots = this._roots;
      for (const id4 of Object.keys(roots)) {
        roots[id4].addDummyInputs();
      }
    }
    static getRootByUId(getWindow, id4) {
      const tabster = getWindow().__tabsterInstance;
      return tabster && tabster.root.rootById[id4];
    }
    /**
     * Fetches the tabster context for an element walking up its ancestors
     *
     * @param tabster Tabster instance
     * @param element The element the tabster context should represent
     * @param options Additional options
     * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations
     */
    static getTabsterContext(tabster, element, options) {
      if (options === void 0) {
        options = {};
      }
      var _a, _b, _c, _d;
      if (!element.ownerDocument) {
        return void 0;
      }
      tabster.drainInitQueue();
      const checkRtl = options.checkRtl;
      let root3;
      let modalizer;
      let groupper;
      let mover;
      let isExcludedFromMover = false;
      let isGroupperFirst;
      let modalizerInGroupper;
      let isRtl;
      let uncontrolled;
      let curElement = element;
      const ignoreKeydown = {};
      while (curElement && (!root3 || checkRtl)) {
        const tabsterOnElement = getTabsterOnElement(tabster, curElement);
        if (checkRtl && isRtl === void 0) {
          const dir = curElement.dir;
          if (dir) {
            isRtl = dir.toLowerCase() === "rtl";
          }
        }
        if (!tabsterOnElement) {
          curElement = curElement.parentElement;
          continue;
        }
        const tagName = curElement.tagName;
        if (tabsterOnElement.uncontrolled || tagName === "IFRAME" || tagName === "WEBVIEW") {
          uncontrolled = curElement;
        }
        if (!mover && ((_a = tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.excludeFromMover) && !groupper) {
          isExcludedFromMover = true;
        }
        const curModalizer = tabsterOnElement.modalizer;
        const curGroupper = tabsterOnElement.groupper;
        const curMover = tabsterOnElement.mover;
        if (!modalizer && curModalizer) {
          modalizer = curModalizer;
        }
        if (!groupper && curGroupper && (!modalizer || curModalizer)) {
          if (modalizer) {
            if (!curGroupper.isActive() && curGroupper.getProps().tabbability && modalizer.userId !== ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
              modalizer = void 0;
              groupper = curGroupper;
            }
            modalizerInGroupper = curGroupper;
          } else {
            groupper = curGroupper;
          }
        }
        if (!mover && curMover && (!modalizer || curModalizer) && (!curGroupper || curElement !== element)) {
          mover = curMover;
          isGroupperFirst = !!groupper && groupper !== curGroupper;
        }
        if (tabsterOnElement.root) {
          root3 = tabsterOnElement.root;
        }
        if ((_c = tabsterOnElement.focusable) === null || _c === void 0 ? void 0 : _c.ignoreKeydown) {
          Object.assign(ignoreKeydown, tabsterOnElement.focusable.ignoreKeydown);
        }
        curElement = curElement.parentElement;
      }
      if (!root3) {
        const rootAPI = tabster.root;
        const autoRoot = rootAPI._autoRoot;
        if (autoRoot) {
          if ((_d = element.ownerDocument) === null || _d === void 0 ? void 0 : _d.body) {
            root3 = rootAPI._autoRootCreate();
          }
        }
      }
      if (groupper && !mover) {
        isGroupperFirst = true;
      }
      if (!root3) {
        if (modalizer || groupper || mover) {
          console.error("Tabster Root is required for Mover, Groupper and Modalizer to work.");
        }
      }
      const shouldIgnoreKeydown = (event) => !!ignoreKeydown[event.key];
      return root3 ? {
        root: root3,
        modalizer,
        groupper,
        mover,
        isGroupperFirst,
        modalizerInGroupper,
        isRtl: checkRtl ? !!isRtl : void 0,
        uncontrolled,
        isExcludedFromMover,
        ignoreKeydown: shouldIgnoreKeydown
      } : void 0;
    }
    static getRoot(tabster, element) {
      var _a;
      for (let el = element; el; el = el.parentElement) {
        const root3 = (_a = getTabsterOnElement(tabster, el)) === null || _a === void 0 ? void 0 : _a.root;
        if (root3) {
          return root3;
        }
      }
      return void 0;
    }
    onRoot(root3, removed) {
      if (removed) {
        delete this.rootById[root3.uid];
      } else {
        this.rootById[root3.uid] = root3;
      }
    }
  };
  var Subscribable = class {
    constructor() {
      this._callbacks = [];
    }
    dispose() {
      this._callbacks = [];
      delete this._val;
    }
    subscribe(callback) {
      const callbacks = this._callbacks;
      const index = callbacks.indexOf(callback);
      if (index < 0) {
        callbacks.push(callback);
      }
    }
    subscribeFirst(callback) {
      const callbacks = this._callbacks;
      const index = callbacks.indexOf(callback);
      if (index >= 0) {
        callbacks.splice(index, 1);
      }
      callbacks.unshift(callback);
    }
    unsubscribe(callback) {
      const index = this._callbacks.indexOf(callback);
      if (index >= 0) {
        this._callbacks.splice(index, 1);
      }
    }
    setVal(val, details) {
      if (this._val === val) {
        return;
      }
      this._val = val;
      this._callCallbacks(val, details);
    }
    getVal() {
      return this._val;
    }
    trigger(val, details) {
      this._callCallbacks(val, details);
    }
    _callCallbacks(val, details) {
      this._callbacks.forEach((callback) => callback(val, details));
    }
  };
  var _focusableSelector = /* @__PURE__ */ ["a[href]", "button:not([disabled])", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]", "*[contenteditable]"].join(", ");
  var FocusableAPI = class {
    constructor(tabster) {
      this._tabster = tabster;
    }
    dispose() {
    }
    getProps(element) {
      const tabsterOnElement = getTabsterOnElement(this._tabster, element);
      return tabsterOnElement && tabsterOnElement.focusable || {};
    }
    isFocusable(el, includeProgrammaticallyFocusable, noVisibleCheck, noAccessibleCheck) {
      if (matchesSelector(el, _focusableSelector) && (includeProgrammaticallyFocusable || el.tabIndex !== -1)) {
        return (noVisibleCheck || this.isVisible(el)) && (noAccessibleCheck || this.isAccessible(el));
      }
      return false;
    }
    isVisible(el) {
      if (!el.ownerDocument) {
        return false;
      }
      if (el.offsetParent === null && el.ownerDocument.body !== el) {
        return false;
      }
      const win = el.ownerDocument.defaultView;
      if (!win) {
        return false;
      }
      const rect = el.ownerDocument.body.getBoundingClientRect();
      if (rect.width === 0 && rect.height === 0) {
        return false;
      }
      const computedStyle = win.getComputedStyle(el);
      if (computedStyle.visibility === "hidden") {
        return false;
      }
      return true;
    }
    isAccessible(el) {
      var _a;
      for (let e3 = el; e3; e3 = e3.parentElement) {
        const tabsterOnElement = getTabsterOnElement(this._tabster, e3);
        if (this._isHidden(e3)) {
          return false;
        }
        const ignoreDisabled = (_a = tabsterOnElement === null || tabsterOnElement === void 0 ? void 0 : tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.ignoreAriaDisabled;
        if (!ignoreDisabled && this._isDisabled(e3)) {
          return false;
        }
      }
      return true;
    }
    _isDisabled(el) {
      return el.hasAttribute("disabled");
    }
    _isHidden(el) {
      var _a;
      const attrVal = el.getAttribute("aria-hidden");
      if (attrVal && attrVal.toLowerCase() === "true") {
        if (!((_a = this._tabster.modalizer) === null || _a === void 0 ? void 0 : _a.isAugmented(el))) {
          return true;
        }
      }
      return false;
    }
    findFirst(options) {
      return this.findElement({
        ...options
      });
    }
    findLast(options) {
      return this.findElement({
        isBackward: true,
        ...options
      });
    }
    findNext(options) {
      return this.findElement({
        ...options
      });
    }
    findPrev(options) {
      return this.findElement({
        isBackward: true,
        ...options
      });
    }
    findDefault(options) {
      return this.findElement({
        ...options,
        acceptCondition: (el) => this._tabster.focusable.isFocusable(el, options.includeProgrammaticallyFocusable) && !!this.getProps(el).isDefault
      }) || null;
    }
    findAll(options) {
      return this._findElements(true, options) || [];
    }
    findElement(options) {
      const found = this._findElements(false, options);
      return found ? found[0] : found;
    }
    _findElements(findAll, options) {
      var _a, _b, _c;
      const {
        container,
        currentElement = null,
        includeProgrammaticallyFocusable,
        useActiveModalizer,
        ignoreUncontrolled,
        ignoreAccessibility,
        modalizerId,
        isBackward,
        onUncontrolled,
        onElement
      } = options;
      const elements = [];
      let {
        acceptCondition
      } = options;
      if (!container) {
        return null;
      }
      if (!acceptCondition) {
        acceptCondition = (el) => this._tabster.focusable.isFocusable(el, includeProgrammaticallyFocusable, false, ignoreAccessibility);
      }
      const acceptElementState = {
        container,
        modalizerUserId: modalizerId === void 0 && useActiveModalizer ? (_a = this._tabster.modalizer) === null || _a === void 0 ? void 0 : _a.activeId : modalizerId || ((_c = (_b = RootAPI.getTabsterContext(this._tabster, container)) === null || _b === void 0 ? void 0 : _b.modalizer) === null || _c === void 0 ? void 0 : _c.userId),
        from: currentElement || container,
        isBackward,
        acceptCondition,
        includeProgrammaticallyFocusable,
        ignoreUncontrolled,
        ignoreAccessibility,
        cachedGrouppers: {}
      };
      const walker = createElementTreeWalker(container.ownerDocument, container, (node2) => this._acceptElement(node2, acceptElementState));
      if (!walker) {
        return null;
      }
      const prepareForNextElement = (shouldContinueIfNotFound) => {
        const foundElement2 = acceptElementState.foundElement;
        if (foundElement2) {
          elements.push(foundElement2);
        }
        if (findAll) {
          if (foundElement2) {
            acceptElementState.found = false;
            delete acceptElementState.foundElement;
            delete acceptElementState.fromCtx;
            acceptElementState.from = foundElement2;
            if (onElement && !onElement(foundElement2)) {
              return false;
            }
          }
          return !!(foundElement2 || shouldContinueIfNotFound);
        } else {
          return !!(shouldContinueIfNotFound && !foundElement2);
        }
      };
      if (currentElement) {
        walker.currentNode = currentElement;
      } else if (isBackward) {
        const lastChild = getLastChild(container);
        if (!lastChild) {
          return null;
        }
        if (this._acceptElement(lastChild, acceptElementState) === NodeFilter.FILTER_ACCEPT && !prepareForNextElement(true)) {
          return elements;
        }
        walker.currentNode = lastChild;
      }
      let foundElement;
      do {
        foundElement = (isBackward ? walker.previousNode() : walker.nextNode()) || void 0;
      } while (prepareForNextElement());
      if (!findAll) {
        const nextUncontrolled = acceptElementState.nextUncontrolled;
        if (nextUncontrolled) {
          if (onUncontrolled) {
            onUncontrolled(nextUncontrolled);
          }
          if (foundElement) {
            return void 0;
          } else {
            return null;
          }
        }
      }
      return elements.length ? elements : null;
    }
    _acceptElement(element, state) {
      var _a, _b, _c, _d, _e;
      if (state.found) {
        return NodeFilter.FILTER_ACCEPT;
      }
      const container = state.container;
      if (element === container) {
        return NodeFilter.FILTER_SKIP;
      }
      if (!container.contains(element)) {
        return NodeFilter.FILTER_REJECT;
      }
      if (element.__tabsterDummyContainer) {
        return NodeFilter.FILTER_REJECT;
      }
      let lastToIgnore = state.lastToIgnore;
      if (lastToIgnore) {
        if (lastToIgnore.contains(element)) {
          return NodeFilter.FILTER_REJECT;
        } else {
          lastToIgnore = state.lastToIgnore = void 0;
        }
      }
      const ctx = state.currentCtx = RootAPI.getTabsterContext(this._tabster, element);
      if (!ctx) {
        return NodeFilter.FILTER_SKIP;
      }
      if (state.ignoreUncontrolled) {
        if (shouldIgnoreFocus(element)) {
          return NodeFilter.FILTER_SKIP;
        }
      } else if (ctx.uncontrolled && !state.nextUncontrolled && this._tabster.focusable.isFocusable(element, void 0, true, true)) {
        if (!ctx.groupper && !ctx.mover) {
          if (((_a = ctx.modalizer) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = this._tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
            if (this.isVisible(ctx.uncontrolled)) {
              state.nextUncontrolled = ctx.uncontrolled;
            }
            return NodeFilter.FILTER_REJECT;
          }
        }
      }
      if (element.tagName === "IFRAME" || element.tagName === "WEBVIEW") {
        if (((_c = ctx.modalizer) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = this._tabster.modalizer) === null || _d === void 0 ? void 0 : _d.activeId)) {
          state.found = true;
          state.lastToIgnore = state.foundElement = element;
          return NodeFilter.FILTER_ACCEPT;
        } else {
          return NodeFilter.FILTER_REJECT;
        }
      }
      if (!state.ignoreAccessibility && !this.isAccessible(element)) {
        return NodeFilter.FILTER_REJECT;
      }
      let result;
      let fromCtx = state.fromCtx;
      if (!fromCtx) {
        fromCtx = state.fromCtx = RootAPI.getTabsterContext(this._tabster, state.from);
      }
      const fromMover = fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.mover;
      let groupper = ctx.groupper;
      let mover = ctx.mover;
      result = (_e = this._tabster.modalizer) === null || _e === void 0 ? void 0 : _e.acceptElement(element, state);
      if (result === void 0 && (groupper || mover || fromMover)) {
        const groupperElement = groupper === null || groupper === void 0 ? void 0 : groupper.getElement();
        const fromMoverElement = fromMover === null || fromMover === void 0 ? void 0 : fromMover.getElement();
        let moverElement = mover === null || mover === void 0 ? void 0 : mover.getElement();
        if (moverElement && fromMoverElement && container.contains(fromMoverElement) && (!groupperElement || !mover || fromMoverElement.contains(groupperElement))) {
          mover = fromMover;
          moverElement = fromMoverElement;
        }
        if (groupperElement && (groupperElement === container || !container.contains(groupperElement))) {
          groupper = void 0;
        }
        if (moverElement && !container.contains(moverElement)) {
          mover = void 0;
        }
        if (groupper && mover) {
          if (moverElement && groupperElement && !groupperElement.contains(moverElement)) {
            mover = void 0;
          } else {
            groupper = void 0;
          }
        }
        if (groupper) {
          result = groupper.acceptElement(element, state);
        }
        if (mover) {
          result = mover.acceptElement(element, state);
        }
      }
      if (result === void 0) {
        result = state.acceptCondition(element) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
      if (result === NodeFilter.FILTER_ACCEPT && !state.found) {
        state.found = true;
        state.foundElement = element;
      }
      return result;
    }
  };
  var Keys = {
    Tab: 9,
    Enter: 13,
    Esc: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40
  };
  var FocusedElementState = class extends Subscribable {
    constructor(tabster, getWindow) {
      super();
      this._init = () => {
        const win = this._win();
        const doc2 = win.document;
        doc2.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc2.addEventListener("focusout", this._onFocusOut, true);
        win.addEventListener("keydown", this._onKeyDown, true);
        const activeElement = doc2.activeElement;
        if (activeElement && activeElement !== doc2.body) {
          this._setFocusedElement(activeElement);
        }
        this.subscribe(this._onChanged);
      };
      this._onFocusIn = (e3) => {
        this._setFocusedElement(e3.target, e3.details.relatedTarget, e3.details.isFocusedProgrammatically);
      };
      this._onFocusOut = (e3) => {
        this._setFocusedElement(void 0, e3.relatedTarget);
      };
      this._validateFocusedElement = (element) => {
      };
      this._onKeyDown = (e3) => {
        var _a, _b, _c, _d, _e, _f;
        if (e3.keyCode !== Keys.Tab || e3.ctrlKey) {
          return;
        }
        const currentElement = this.getVal();
        if (!currentElement || !currentElement.ownerDocument || currentElement.contentEditable === "true") {
          return;
        }
        const tabster2 = this._tabster;
        const controlTab = tabster2.controlTab;
        const ctx = RootAPI.getTabsterContext(tabster2, currentElement);
        if (!ctx || ctx.ignoreKeydown(e3)) {
          return;
        }
        const isBackward = e3.shiftKey;
        const next2 = FocusedElementState.findNextTabbable(tabster2, ctx, void 0, currentElement, isBackward, void 0, true);
        let nextElement;
        if (next2) {
          let uncontrolled = next2.uncontrolled;
          if (uncontrolled) {
            const isGroupperFirst = ctx.isGroupperFirst;
            let moveOutside = false;
            if (isGroupperFirst !== void 0) {
              const groupper = (_a = ctx.groupper) === null || _a === void 0 ? void 0 : _a.getElement();
              const mover = (_b = ctx.mover) === null || _b === void 0 ? void 0 : _b.getElement();
              let moveFrom;
              if (isGroupperFirst && groupper && uncontrolled.contains(groupper)) {
                moveFrom = groupper;
              } else if (!isGroupperFirst && mover && uncontrolled.contains(mover)) {
                moveFrom = mover;
              }
              if (moveFrom) {
                uncontrolled = moveFrom;
                moveOutside = true;
              }
            }
            if (uncontrolled && ctx.uncontrolled !== uncontrolled) {
              DummyInputManager.moveWithPhantomDummy(this._tabster, uncontrolled, moveOutside, isBackward);
            }
            return;
          }
          nextElement = next2.element;
        }
        if (nextElement) {
          const preventDefault = () => {
            e3.preventDefault();
            e3.stopImmediatePropagation();
          };
          if (!controlTab) {
            const lastMoverOrGroupper = next2 === null || next2 === void 0 ? void 0 : next2.lastMoverOrGroupper;
            let outOfDOMOrder = next2 === null || next2 === void 0 ? void 0 : next2.outOfDOMOrder;
            if (!outOfDOMOrder && currentElement.compareDocumentPosition(nextElement) & (isBackward ? document.DOCUMENT_POSITION_FOLLOWING : document.DOCUMENT_POSITION_PRECEDING)) {
              outOfDOMOrder = true;
            }
            if (outOfDOMOrder) {
              preventDefault();
              nativeFocus(nextElement);
            } else if (lastMoverOrGroupper) {
              (_c = lastMoverOrGroupper.dummyManager) === null || _c === void 0 ? void 0 : _c.moveOutWithDefaultAction(isBackward);
            } else if (ctx.modalizer) {
              const nextElementCtx = RootAPI.getTabsterContext(tabster2, nextElement);
              if ((!nextElementCtx || ctx.root.uid !== nextElementCtx.root.uid || !((_d = nextElementCtx.modalizer) === null || _d === void 0 ? void 0 : _d.isActive())) && ctx.modalizer.triggerFocusEvent(ModalizerBeforeFocusOutEventName, true)) {
                preventDefault();
              } else if (!((_e = ctx.modalizer.getElement()) === null || _e === void 0 ? void 0 : _e.contains(nextElement))) {
                preventDefault();
                (_f = ctx.modalizer.dummyManager) === null || _f === void 0 ? void 0 : _f.moveOut(isBackward);
              }
            }
          } else if (nextElement.tagName !== "IFRAME") {
            preventDefault();
            nativeFocus(nextElement);
          }
        } else {
          ctx.root.moveOutWithDefaultAction(isBackward);
        }
      };
      this._onChanged = (element, details) => {
        var _a, _b;
        if (element) {
          triggerEvent(element, FocusInEventName, details);
        } else {
          const last = (_a = this._lastVal) === null || _a === void 0 ? void 0 : _a.get();
          if (last) {
            const d4 = {
              ...details
            };
            const lastCtx = RootAPI.getTabsterContext(this._tabster, last);
            const modalizerId = (_b = lastCtx === null || lastCtx === void 0 ? void 0 : lastCtx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
            if (modalizerId) {
              d4.modalizerId = modalizerId;
            }
            triggerEvent(last, FocusOutEventName, d4);
          }
        }
      };
      this._tabster = tabster;
      this._win = getWindow;
      tabster.queueInit(this._init);
    }
    dispose() {
      super.dispose();
      const win = this._win();
      win.document.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      win.document.removeEventListener("focusout", this._onFocusOut, true);
      win.removeEventListener("keydown", this._onKeyDown, true);
      this.unsubscribe(this._onChanged);
      delete FocusedElementState._lastResetElement;
      delete this._nextVal;
      delete this._lastVal;
    }
    static forgetMemorized(instance, parent) {
      var _a, _b;
      let wel = FocusedElementState._lastResetElement;
      let el = wel && wel.get();
      if (el && parent.contains(el)) {
        delete FocusedElementState._lastResetElement;
      }
      el = (_b = (_a = instance._nextVal) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.get();
      if (el && parent.contains(el)) {
        delete instance._nextVal;
      }
      wel = instance._lastVal;
      el = wel && wel.get();
      if (el && parent.contains(el)) {
        delete instance._lastVal;
      }
    }
    getFocusedElement() {
      return this.getVal();
    }
    getLastFocusedElement() {
      var _a;
      let el = (_a = this._lastVal) === null || _a === void 0 ? void 0 : _a.get();
      if (!el || el && !documentContains(el.ownerDocument, el)) {
        this._lastVal = el = void 0;
      }
      return el;
    }
    focus(element, noFocusedProgrammaticallyFlag, noAccessibleCheck) {
      if (!this._tabster.focusable.isFocusable(element, noFocusedProgrammaticallyFlag, false, noAccessibleCheck)) {
        return false;
      }
      element.focus();
      return true;
    }
    focusDefault(container) {
      const el = this._tabster.focusable.findDefault({
        container
      });
      if (el) {
        this._tabster.focusedElement.focus(el);
        return true;
      }
      return false;
    }
    getFirstOrLastTabbable(isFirst, props) {
      const tabsterFocusable = this._tabster.focusable;
      const {
        container,
        ignoreAccessibility
      } = props;
      let uncontrolled;
      let toFocus;
      if (container) {
        const ctx = RootAPI.getTabsterContext(this._tabster, container);
        if (ctx) {
          let next2 = FocusedElementState.findNextTabbable(this._tabster, ctx, container, void 0, !isFirst, void 0, ignoreAccessibility);
          if (next2) {
            toFocus = next2.element;
            uncontrolled = next2.uncontrolled;
            while (!toFocus && uncontrolled) {
              if (tabsterFocusable.isFocusable(uncontrolled, false, true, true)) {
                toFocus = uncontrolled;
              } else {
                toFocus = tabsterFocusable[isFirst ? "findFirst" : "findLast"]({
                  container: uncontrolled,
                  ignoreUncontrolled: true,
                  ignoreAccessibility,
                  useActiveModalizer: true
                });
              }
              if (!toFocus) {
                next2 = FocusedElementState.findNextTabbable(this._tabster, ctx, uncontrolled, void 0, !isFirst, void 0, ignoreAccessibility);
                if (next2) {
                  toFocus = next2.element;
                  uncontrolled = next2.uncontrolled;
                }
              }
            }
          }
        }
      }
      if (toFocus && !(container === null || container === void 0 ? void 0 : container.contains(toFocus))) {
        toFocus = void 0;
      }
      return toFocus || void 0;
    }
    _focusFirstOrLast(isFirst, props) {
      const toFocus = this.getFirstOrLastTabbable(isFirst, props);
      if (toFocus) {
        this.focus(toFocus, false, true);
        return true;
      }
      return false;
    }
    focusFirst(props) {
      return this._focusFirstOrLast(true, props);
    }
    focusLast(props) {
      return this._focusFirstOrLast(false, props);
    }
    resetFocus(container) {
      if (!this._tabster.focusable.isVisible(container)) {
        return false;
      }
      if (!this._tabster.focusable.isFocusable(container, true, true, true)) {
        const prevTabIndex = container.getAttribute("tabindex");
        const prevAriaHidden = container.getAttribute("aria-hidden");
        container.tabIndex = -1;
        container.setAttribute("aria-hidden", "true");
        FocusedElementState._lastResetElement = new WeakHTMLElement(this._win, container);
        this.focus(container, true, true);
        this._setOrRemoveAttribute(container, "tabindex", prevTabIndex);
        this._setOrRemoveAttribute(container, "aria-hidden", prevAriaHidden);
      } else {
        this.focus(container);
      }
      return true;
    }
    _setOrRemoveAttribute(element, name, value) {
      if (value === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value);
      }
    }
    _setFocusedElement(element, relatedTarget, isFocusedProgrammatically) {
      var _a, _b;
      if (this._tabster._noop) {
        return;
      }
      const details = {
        relatedTarget
      };
      if (element) {
        const lastResetElement = (_a = FocusedElementState._lastResetElement) === null || _a === void 0 ? void 0 : _a.get();
        FocusedElementState._lastResetElement = void 0;
        if (lastResetElement === element || shouldIgnoreFocus(element)) {
          return;
        }
        details.isFocusedProgrammatically = isFocusedProgrammatically;
        const ctx = RootAPI.getTabsterContext(this._tabster, element);
        const modalizerId = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
        if (modalizerId) {
          details.modalizerId = modalizerId;
        }
      }
      const nextVal = this._nextVal = {
        element: element ? new WeakHTMLElement(this._win, element) : void 0,
        details
      };
      if (element && element !== this._val) {
        this._validateFocusedElement(element);
      }
      if (this._nextVal === nextVal) {
        this.setVal(element, details);
      }
      this._nextVal = void 0;
    }
    setVal(val, details) {
      super.setVal(val, details);
      if (val) {
        this._lastVal = new WeakHTMLElement(this._win, val);
      }
    }
    static findNextTabbable(tabster, ctx, container, currentElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      const actualContainer = container || ctx.root.getElement();
      if (!actualContainer) {
        return null;
      }
      let next2 = null;
      const isTabbingTimer = FocusedElementState._isTabbingTimer;
      const win = tabster.getWindow();
      if (isTabbingTimer) {
        win.clearTimeout(isTabbingTimer);
      }
      FocusedElementState.isTabbing = true;
      FocusedElementState._isTabbingTimer = win.setTimeout(() => {
        delete FocusedElementState._isTabbingTimer;
        FocusedElementState.isTabbing = false;
      }, 0);
      const callFindNext = (what, cur) => {
        next2 = what.findNextTabbable(cur || currentElement, isBackward, ignoreUncontrolled, ignoreAccessibility);
        const lastMoverOrGroupper2 = next2 === null || next2 === void 0 ? void 0 : next2.lastMoverOrGroupper;
        if (lastMoverOrGroupper2 && !(next2 === null || next2 === void 0 ? void 0 : next2.element) && !(next2 === null || next2 === void 0 ? void 0 : next2.uncontrolled)) {
          const lastMoverOrGroupperElement2 = lastMoverOrGroupper2.getElement();
          const parentElement = lastMoverOrGroupperElement2 === null || lastMoverOrGroupperElement2 === void 0 ? void 0 : lastMoverOrGroupperElement2.parentElement;
          const parentCtx = parentElement && RootAPI.getTabsterContext(tabster, parentElement);
          if (parentCtx) {
            const isGroupperFirst = parentCtx.isGroupperFirst;
            const parentMoverOrGroupper = isGroupperFirst ? parentCtx.groupper : parentCtx.mover;
            if (parentMoverOrGroupper) {
              const newCurrent = isBackward ? lastMoverOrGroupperElement2 : getLastChild(lastMoverOrGroupperElement2);
              callFindNext(parentMoverOrGroupper, newCurrent);
              if (next2) {
                next2.outOfDOMOrder = true;
              }
            }
          }
        }
      };
      const modalizer = ctx.modalizer;
      const groupper = ctx.groupper;
      const mover = ctx.mover;
      if (groupper && mover) {
        callFindNext(ctx.isGroupperFirst ? groupper : mover);
      } else if (groupper) {
        callFindNext(groupper);
      } else if (mover) {
        callFindNext(mover);
      } else if (modalizer) {
        callFindNext(modalizer);
      } else {
        let uncontrolled;
        const onUncontrolled = (el) => {
          uncontrolled = el;
        };
        const nextElement = isBackward ? tabster.focusable.findPrev({
          container: actualContainer,
          currentElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        }) : tabster.focusable.findNext({
          container: actualContainer,
          currentElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        });
        next2 = {
          element: uncontrolled ? void 0 : nextElement,
          uncontrolled
        };
      }
      const lastMoverOrGroupper = next2 === null || next2 === void 0 ? void 0 : next2.lastMoverOrGroupper;
      const lastMoverOrGroupperElement = lastMoverOrGroupper === null || lastMoverOrGroupper === void 0 ? void 0 : lastMoverOrGroupper.getElement();
      if (lastMoverOrGroupperElement) {
        next2 = null;
        const adjacentElement = getAdjacentElement(lastMoverOrGroupperElement, isBackward);
        if (adjacentElement) {
          const adjacentCtx = RootAPI.getTabsterContext(tabster, adjacentElement, {
            checkRtl: true
          });
          if (adjacentCtx) {
            let adjacentFrom = getAdjacentElement(adjacentElement, !isBackward);
            if (adjacentFrom) {
              if (!isBackward) {
                adjacentFrom = getLastChild(adjacentFrom) || adjacentFrom;
              }
              next2 = FocusedElementState.findNextTabbable(tabster, adjacentCtx, actualContainer, adjacentFrom, isBackward, ignoreUncontrolled, ignoreAccessibility);
              if (next2 && !next2.lastMoverOrGroupper) {
                next2.lastMoverOrGroupper = lastMoverOrGroupper;
              }
            }
          }
        }
      }
      return next2;
    }
  };
  FocusedElementState.isTabbing = false;
  var GroupperDummyManager = class extends DummyInputManager {
    constructor(element, groupper, tabster, sys) {
      super(tabster, element, DummyInputManagerPriorities.Groupper, sys, true);
      this._setHandlers((dummyInput, isBackward, relatedTarget) => {
        var _a, _b;
        const container = element.get();
        const input = dummyInput.input;
        if (container && input) {
          const ctx = RootAPI.getTabsterContext(tabster, input);
          if (ctx) {
            let next2;
            next2 = (_a = groupper.findNextTabbable(relatedTarget || void 0, isBackward, true, true)) === null || _a === void 0 ? void 0 : _a.element;
            if (!next2) {
              next2 = (_b = FocusedElementState.findNextTabbable(tabster, ctx, void 0, dummyInput.isOutside ? input : getAdjacentElement(container, !isBackward), isBackward, true, true)) === null || _b === void 0 ? void 0 : _b.element;
            }
            if (next2) {
              nativeFocus(next2);
            }
          }
        }
      });
    }
  };
  var Groupper = class extends TabsterPart {
    constructor(tabster, element, onDispose, props, sys) {
      super(tabster, element, props);
      this._shouldTabInside = false;
      this.makeTabbable(false);
      this._onDispose = onDispose;
      if (!tabster.controlTab) {
        this.dummyManager = new GroupperDummyManager(this._element, this, tabster, sys);
      }
    }
    dispose() {
      var _a;
      this._onDispose(this);
      const element = this._element.get();
      (_a = this.dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();
      if (element) {
        if (true) {
          _setInformativeStyle$1(this._element, true);
        }
      }
      delete this._first;
    }
    findNextTabbable(currentElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a;
      const groupperElement = this.getElement();
      if (!groupperElement) {
        return null;
      }
      const currentIsDummy = ((_a = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a === void 0 ? void 0 : _a.get()) === groupperElement;
      if (!this._shouldTabInside && currentElement && groupperElement.contains(currentElement) && !currentIsDummy) {
        return {
          element: void 0,
          lastMoverOrGroupper: this
        };
      }
      const groupperFirstFocusable = this.getFirst(true);
      if (!currentElement || !groupperElement.contains(currentElement) || currentIsDummy) {
        return {
          element: groupperFirstFocusable,
          lastMoverOrGroupper: groupperFirstFocusable ? void 0 : this
        };
      }
      const tabster = this._tabster;
      let next2 = null;
      let uncontrolled;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._shouldTabInside && groupperFirstFocusable) {
        next2 = isBackward ? tabster.focusable.findPrev({
          container: groupperElement,
          currentElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        }) : tabster.focusable.findNext({
          container: groupperElement,
          currentElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        });
        if (!uncontrolled && !next2 && this._props.tabbability === GroupperTabbabilities.LimitedTrapFocus) {
          next2 = isBackward ? tabster.focusable.findLast({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          }) : tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          });
        }
      }
      return {
        element: next2,
        uncontrolled,
        lastMoverOrGroupper: next2 || uncontrolled ? void 0 : this
      };
    }
    makeTabbable(isTabbable) {
      this._shouldTabInside = isTabbable || !this._props.tabbability;
      if (true) {
        _setInformativeStyle$1(this._element, !this._shouldTabInside);
      }
    }
    isActive(noIfFirstIsFocused) {
      var _a;
      const element = this.getElement() || null;
      let isParentActive = true;
      for (let e3 = element === null || element === void 0 ? void 0 : element.parentElement; e3; e3 = e3.parentElement) {
        const g4 = (_a = getTabsterOnElement(this._tabster, e3)) === null || _a === void 0 ? void 0 : _a.groupper;
        if (g4) {
          if (!g4._shouldTabInside) {
            isParentActive = false;
          }
        }
      }
      let ret = isParentActive ? this._props.tabbability ? this._shouldTabInside : false : void 0;
      if (ret && noIfFirstIsFocused) {
        const focused = this._tabster.focusedElement.getFocusedElement();
        if (focused) {
          ret = focused !== this.getFirst(true);
        }
      }
      return ret;
    }
    getFirst(orContainer) {
      var _a;
      const groupperElement = this.getElement();
      let first;
      if (groupperElement) {
        if (orContainer && this._tabster.focusable.isFocusable(groupperElement)) {
          return groupperElement;
        }
        first = (_a = this._first) === null || _a === void 0 ? void 0 : _a.get();
        if (!first) {
          first = this._tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          }) || void 0;
          if (first) {
            this.setFirst(first);
          }
        }
      }
      return first;
    }
    setFirst(element) {
      if (element) {
        this._first = new WeakHTMLElement(this._tabster.getWindow, element);
      } else {
        delete this._first;
      }
    }
    acceptElement(element, state) {
      var _a;
      const cachedGrouppers = state.cachedGrouppers;
      const parentElement = (_a = this.getElement()) === null || _a === void 0 ? void 0 : _a.parentElement;
      const parentCtx = parentElement && RootAPI.getTabsterContext(this._tabster, parentElement);
      const parentCtxGroupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
      const parentGroupper = (parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.isGroupperFirst) ? parentCtxGroupper : void 0;
      let parentGroupperElement;
      const getIsActive = (groupper) => {
        let cached = cachedGrouppers[groupper.id];
        let isActive2;
        if (cached) {
          isActive2 = cached.isActive;
        } else {
          isActive2 = this.isActive(true);
          cached = cachedGrouppers[groupper.id] = {
            isActive: isActive2
          };
        }
        return isActive2;
      };
      if (parentGroupper) {
        parentGroupperElement = parentGroupper.getElement();
        if (!getIsActive(parentGroupper) && parentGroupperElement && state.container !== parentGroupperElement && state.container.contains(parentGroupperElement)) {
          return NodeFilter.FILTER_REJECT;
        }
      }
      const isActive = getIsActive(this);
      const groupperElement = this.getElement();
      if (groupperElement) {
        if (isActive !== true) {
          if (groupperElement === element && parentCtxGroupper) {
            if (!parentGroupperElement) {
              parentGroupperElement = parentCtxGroupper.getElement();
            }
            if (parentGroupperElement && !getIsActive(parentCtxGroupper) && state.container.contains(parentGroupperElement) && parentGroupperElement !== state.container) {
              return NodeFilter.FILTER_REJECT;
            }
          }
          if (groupperElement !== element && groupperElement.contains(element)) {
            return NodeFilter.FILTER_REJECT;
          }
          const cached = cachedGrouppers[this.id];
          let first;
          if ("first" in cached) {
            first = cached.first;
          } else {
            first = cached.first = this.getFirst(true);
          }
          if (first && state.acceptCondition(first)) {
            state.lastToIgnore = groupperElement;
            if (first !== state.from) {
              state.found = true;
              state.foundElement = first;
              return NodeFilter.FILTER_ACCEPT;
            } else {
              return NodeFilter.FILTER_REJECT;
            }
          }
        }
      }
      return void 0;
    }
  };
  var GroupperAPI = class {
    constructor(tabster, getWindow) {
      this._current = {};
      this._grouppers = {};
      this._init = () => {
        const win = this._win();
        this._tabster.focusedElement.subscribeFirst(this._onFocus);
        win.document.addEventListener("mousedown", this._onMouseDown, true);
        win.addEventListener("keydown", this._onKeyDown, true);
      };
      this._onGroupperDispose = (groupper) => {
        delete this._grouppers[groupper.id];
      };
      this._onFocus = (element) => {
        if (element) {
          this._updateCurrent(element, true, true);
        }
      };
      this._onMouseDown = (e3) => {
        if (e3.target) {
          this._updateCurrent(e3.target, true);
        }
      };
      this._onKeyDown = (event) => {
        if (event.keyCode !== Keys.Enter && event.keyCode !== Keys.Esc) {
          return;
        }
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        const element = this._tabster.focusedElement.getFocusedElement();
        if (element) {
          this.handleKeyPress(element, event);
        }
      };
      this._tabster = tabster;
      this._win = getWindow;
      tabster.queueInit(this._init);
    }
    dispose() {
      const win = this._win();
      this._current = {};
      if (this._updateTimer) {
        win.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      win.document.removeEventListener("mousedown", this._onMouseDown, true);
      win.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._grouppers).forEach((groupperId) => {
        if (this._grouppers[groupperId]) {
          this._grouppers[groupperId].dispose();
          delete this._grouppers[groupperId];
        }
      });
    }
    createGroupper(element, props, sys) {
      if (true)
        ;
      const newGroupper = new Groupper(this._tabster, element, this._onGroupperDispose, props, sys);
      this._grouppers[newGroupper.id] = newGroupper;
      const focusedElement = this._tabster.focusedElement.getFocusedElement();
      if (focusedElement && element.contains(focusedElement) && !this._updateTimer) {
        this._updateTimer = this._win().setTimeout(() => {
          delete this._updateTimer;
          if (focusedElement === this._tabster.focusedElement.getFocusedElement()) {
            this._updateCurrent(focusedElement, true, true);
          }
        }, 0);
      }
      return newGroupper;
    }
    forgetCurrentGrouppers() {
      this._current = {};
    }
    _updateCurrent(element, includeTarget, checkTarget) {
      var _a;
      if (this._updateTimer) {
        this._win().clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      const newIds = {};
      let isTarget = true;
      for (let el = element; el; el = el.parentElement) {
        const groupper = (_a = getTabsterOnElement(this._tabster, el)) === null || _a === void 0 ? void 0 : _a.groupper;
        if (groupper) {
          newIds[groupper.id] = true;
          if (isTarget && checkTarget && el !== element) {
            isTarget = false;
          }
          if (includeTarget || !isTarget) {
            this._current[groupper.id] = groupper;
            const isTabbable = groupper.isActive() || element !== el && (!groupper.getProps().delegated || groupper.getFirst(false) !== element);
            groupper.makeTabbable(isTabbable);
          }
          isTarget = false;
        }
      }
      for (const id4 of Object.keys(this._current)) {
        const groupper = this._current[id4];
        if (!(groupper.id in newIds)) {
          groupper.makeTabbable(false);
          groupper.setFirst(void 0);
          delete this._current[id4];
        }
      }
    }
    handleKeyPress(element, event, noGoUp) {
      var _a;
      const tabster = this._tabster;
      const ctx = RootAPI.getTabsterContext(tabster, element);
      const modalizerInGroupper = ctx === null || ctx === void 0 ? void 0 : ctx.modalizerInGroupper;
      let groupper = (ctx === null || ctx === void 0 ? void 0 : ctx.groupper) || modalizerInGroupper;
      if (ctx && groupper) {
        if (ctx.ignoreKeydown(event)) {
          return;
        }
        let next2;
        const groupperElement = groupper.getElement();
        if (event.keyCode === Keys.Enter) {
          if (groupperElement && (element === groupperElement || groupper.getProps().delegated && element === groupper.getFirst(false))) {
            next2 = tabster.focusable.findNext({
              container: groupperElement,
              currentElement: element,
              useActiveModalizer: true
            });
          }
        } else if (event.keyCode === Keys.Esc) {
          if (groupperElement && groupperElement.contains(element)) {
            if (element !== groupperElement || noGoUp) {
              next2 = groupper.getFirst(true);
            } else {
              const parentElement = groupperElement.parentElement;
              const parentCtx = parentElement ? RootAPI.getTabsterContext(tabster, parentElement) : void 0;
              groupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
              next2 = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
            }
          }
          if (groupper) {
            groupper.makeTabbable(false);
            if (modalizerInGroupper) {
              (_a = tabster.modalizer) === null || _a === void 0 ? void 0 : _a.setActive(void 0);
            }
          }
        }
        if (next2) {
          event.preventDefault();
          event.stopImmediatePropagation();
          next2.focus();
        }
      }
    }
  };
  function _setInformativeStyle$1(weakElement, remove2) {
    if (true) {
      const element = weakElement.get();
      if (element) {
        if (remove2) {
          element.style.removeProperty("--tabster-groupper");
        } else {
          element.style.setProperty("--tabster-groupper", "unlimited");
        }
      }
    }
  }
  var KeyboardNavigationState = class extends Subscribable {
    constructor(getWindow) {
      super();
      this._onChange = (isNavigatingWithKeyboard) => {
        this.setVal(isNavigatingWithKeyboard, void 0);
      };
      this._keyborg = createKeyborg(getWindow());
      this._keyborg.subscribe(this._onChange);
    }
    dispose() {
      super.dispose();
      if (this._keyborg) {
        this._keyborg.unsubscribe(this._onChange);
        disposeKeyborg(this._keyborg);
        delete this._keyborg;
      }
    }
    setNavigatingWithKeyboard(isNavigatingWithKeyboard) {
      var _a;
      (_a = this._keyborg) === null || _a === void 0 ? void 0 : _a.setVal(isNavigatingWithKeyboard);
    }
    isNavigatingWithKeyboard() {
      var _a;
      return !!((_a = this._keyborg) === null || _a === void 0 ? void 0 : _a.isNavigatingWithKeyboard());
    }
  };
  var _inputSelector = /* @__PURE__ */ ["input", "textarea", "*[contenteditable]"].join(", ");
  var MoverDummyManager = class extends DummyInputManager {
    constructor(element, tabster, getMemorized, sys) {
      super(tabster, element, DummyInputManagerPriorities.Mover, sys);
      this._onFocusDummyInput = (dummyInput) => {
        var _a, _b;
        const container = this._element.get();
        const input = dummyInput.input;
        if (container && input) {
          const ctx = RootAPI.getTabsterContext(this._tabster, container);
          let toFocus;
          if (ctx) {
            toFocus = (_a = FocusedElementState.findNextTabbable(this._tabster, ctx, void 0, input, !dummyInput.isFirst, true)) === null || _a === void 0 ? void 0 : _a.element;
          }
          const memorized = (_b = this._getMemorized()) === null || _b === void 0 ? void 0 : _b.get();
          if (memorized) {
            toFocus = memorized;
          }
          if (toFocus) {
            nativeFocus(toFocus);
          }
        }
      };
      this._tabster = tabster;
      this._getMemorized = getMemorized;
      this._setHandlers(this._onFocusDummyInput);
    }
  };
  var _moverUpdateAdd = 1;
  var _moverUpdateAttr = 2;
  var _moverUpdateRemove = 3;
  var Mover = class extends TabsterPart {
    constructor(tabster, element, onDispose, props, sys) {
      var _a;
      super(tabster, element, props);
      this._visible = {};
      this._onIntersection = (entries) => {
        for (const entry of entries) {
          const el = entry.target;
          const id4 = getElementUId(this._win, el);
          let newVisibility;
          let fullyVisible = this._fullyVisible;
          if (entry.intersectionRatio >= 0.25) {
            newVisibility = entry.intersectionRatio >= 0.75 ? Visibilities.Visible : Visibilities.PartiallyVisible;
            if (newVisibility === Visibilities.Visible) {
              fullyVisible = id4;
            }
          } else {
            newVisibility = Visibilities.Invisible;
          }
          if (this._visible[id4] !== newVisibility) {
            if (newVisibility === void 0) {
              delete this._visible[id4];
              if (fullyVisible === id4) {
                delete this._fullyVisible;
              }
            } else {
              this._visible[id4] = newVisibility;
              this._fullyVisible = fullyVisible;
            }
            const state = this.getState(el);
            if (state) {
              triggerEvent(el, MoverEventName, state);
            }
          }
        }
      };
      this._win = tabster.getWindow;
      this.visibilityTolerance = (_a = props.visibilityTolerance) !== null && _a !== void 0 ? _a : 0.8;
      if (this._props.trackState || this._props.visibilityAware) {
        this._intersectionObserver = new IntersectionObserver(this._onIntersection, {
          threshold: [0, 0.25, 0.5, 0.75, 1]
        });
        this._observeState();
      }
      this._onDispose = onDispose;
      const getMemorized = () => props.memorizeCurrent ? this._current : void 0;
      if (!tabster.controlTab) {
        this.dummyManager = new MoverDummyManager(this._element, tabster, getMemorized, sys);
      }
    }
    dispose() {
      var _a;
      this._onDispose(this);
      if (this._intersectionObserver) {
        this._intersectionObserver.disconnect();
        delete this._intersectionObserver;
      }
      delete this._current;
      delete this._fullyVisible;
      delete this._allElements;
      delete this._updateQueue;
      if (this._unobserve) {
        this._unobserve();
        delete this._unobserve;
      }
      const win = this._win();
      if (this._setCurrentTimer) {
        win.clearTimeout(this._setCurrentTimer);
        delete this._setCurrentTimer;
      }
      if (this._updateTimer) {
        win.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      (_a = this.dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();
    }
    setCurrent(element) {
      if (element) {
        this._current = new WeakHTMLElement(this._win, element);
      } else {
        this._current = void 0;
      }
      if ((this._props.trackState || this._props.visibilityAware) && !this._setCurrentTimer) {
        this._setCurrentTimer = this._win().setTimeout(() => {
          var _a;
          delete this._setCurrentTimer;
          const changed = [];
          if (this._current !== this._prevCurrent) {
            changed.push(this._current);
            changed.push(this._prevCurrent);
            this._prevCurrent = this._current;
          }
          for (const weak of changed) {
            const el = weak === null || weak === void 0 ? void 0 : weak.get();
            if (el && ((_a = this._allElements) === null || _a === void 0 ? void 0 : _a.get(el)) === this) {
              const props = this._props;
              if (el && (props.visibilityAware !== void 0 || props.trackState)) {
                const state = this.getState(el);
                if (state) {
                  triggerEvent(el, MoverEventName, state);
                }
              }
            }
          }
        });
      }
    }
    getCurrent() {
      var _a;
      return ((_a = this._current) === null || _a === void 0 ? void 0 : _a.get()) || null;
    }
    findNextTabbable(currentElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a;
      const container = this.getElement();
      const currentIsDummy = container && ((_a = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a === void 0 ? void 0 : _a.get()) === container;
      if (!container) {
        return null;
      }
      const tabster = this._tabster;
      const focusable = tabster.focusable;
      let next2 = null;
      let uncontrolled;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._props.tabbable || currentIsDummy || currentElement && !container.contains(currentElement)) {
        next2 = isBackward ? focusable.findPrev({
          currentElement,
          container,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        }) : focusable.findNext({
          currentElement,
          container,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        });
      }
      return {
        element: next2,
        uncontrolled,
        lastMoverOrGroupper: next2 || uncontrolled ? void 0 : this
      };
    }
    acceptElement(element, state) {
      var _a, _b, _c;
      if (!FocusedElementState.isTabbing) {
        return ((_a = state.currentCtx) === null || _a === void 0 ? void 0 : _a.isExcludedFromMover) ? NodeFilter.FILTER_REJECT : void 0;
      }
      const {
        memorizeCurrent,
        visibilityAware,
        hasDefault = true
      } = this._props;
      const moverElement = this.getElement();
      if (moverElement && (memorizeCurrent || visibilityAware || hasDefault) && (!moverElement.contains(state.from) || ((_b = state.from.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get()) === moverElement)) {
        let found;
        if (memorizeCurrent) {
          const current = (_c = this._current) === null || _c === void 0 ? void 0 : _c.get();
          if (current && state.acceptCondition(current)) {
            found = current;
          }
        }
        if (!found && hasDefault) {
          found = this._tabster.focusable.findDefault({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          });
        }
        if (!found && visibilityAware) {
          found = this._tabster.focusable.findElement({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true,
            isBackward: state.isBackward,
            acceptCondition: (el) => {
              var _a2;
              const id4 = getElementUId(this._win, el);
              const visibility = this._visible[id4];
              return moverElement !== el && !!((_a2 = this._allElements) === null || _a2 === void 0 ? void 0 : _a2.get(el)) && state.acceptCondition(el) && (visibility === Visibilities.Visible || visibility === Visibilities.PartiallyVisible && (visibilityAware === Visibilities.PartiallyVisible || !this._fullyVisible));
            }
          });
        }
        if (found) {
          state.found = true;
          state.foundElement = found;
          state.lastToIgnore = moverElement;
          return NodeFilter.FILTER_ACCEPT;
        }
      }
      return void 0;
    }
    _observeState() {
      const element = this.getElement();
      if (this._unobserve || !element || typeof MutationObserver === "undefined") {
        return;
      }
      const win = this._win();
      const allElements = this._allElements = /* @__PURE__ */ new WeakMap();
      const tabsterFocusable = this._tabster.focusable;
      let updateQueue = this._updateQueue = [];
      const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          const target = mutation.target;
          const removed = mutation.removedNodes;
          const added = mutation.addedNodes;
          if (mutation.type === "attributes") {
            if (mutation.attributeName === "tabindex") {
              updateQueue.push({
                element: target,
                type: _moverUpdateAttr
              });
            }
          } else {
            for (let i4 = 0; i4 < removed.length; i4++) {
              updateQueue.push({
                element: removed[i4],
                type: _moverUpdateRemove
              });
            }
            for (let i4 = 0; i4 < added.length; i4++) {
              updateQueue.push({
                element: added[i4],
                type: _moverUpdateAdd
              });
            }
          }
        }
        requestUpdate();
      });
      const setElement = (element2, remove2) => {
        var _a, _b;
        const current = allElements.get(element2);
        if (current && remove2) {
          (_a = this._intersectionObserver) === null || _a === void 0 ? void 0 : _a.unobserve(element2);
          allElements.delete(element2);
        }
        if (!current && !remove2) {
          allElements.set(element2, this);
          (_b = this._intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(element2);
        }
      };
      const updateElement = (element2) => {
        const isFocusable = tabsterFocusable.isFocusable(element2);
        const current = allElements.get(element2);
        if (current) {
          if (!isFocusable) {
            setElement(element2, true);
          }
        } else {
          if (isFocusable) {
            setElement(element2);
          }
        }
      };
      const addNewElements = (element2) => {
        const {
          mover
        } = getMoverGroupper(element2);
        if (mover && mover !== this) {
          if (mover.getElement() === element2 && tabsterFocusable.isFocusable(element2)) {
            setElement(element2);
          } else {
            return;
          }
        }
        const walker = createElementTreeWalker(win.document, element2, (node2) => {
          const {
            mover: mover2,
            groupper
          } = getMoverGroupper(node2);
          if (mover2 && mover2 !== this) {
            return NodeFilter.FILTER_REJECT;
          }
          const groupperFirstFocusable = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
          if (groupper && groupper.getElement() !== node2 && groupperFirstFocusable && groupperFirstFocusable !== node2) {
            return NodeFilter.FILTER_REJECT;
          }
          if (tabsterFocusable.isFocusable(node2)) {
            setElement(node2);
          }
          return NodeFilter.FILTER_SKIP;
        });
        if (walker) {
          walker.currentNode = element2;
          while (walker.nextNode()) {
          }
        }
      };
      const removeWalk = (element2) => {
        const current = allElements.get(element2);
        if (current) {
          setElement(element2, true);
        }
        for (let el = element2.firstElementChild; el; el = el.nextElementSibling) {
          removeWalk(el);
        }
      };
      const requestUpdate = () => {
        if (!this._updateTimer && updateQueue.length) {
          this._updateTimer = win.setTimeout(() => {
            delete this._updateTimer;
            for (const {
              element: element2,
              type
            } of updateQueue) {
              switch (type) {
                case _moverUpdateAttr:
                  updateElement(element2);
                  break;
                case _moverUpdateAdd:
                  addNewElements(element2);
                  break;
                case _moverUpdateRemove:
                  removeWalk(element2);
                  break;
              }
            }
            updateQueue = this._updateQueue = [];
          }, 0);
        }
      };
      const getMoverGroupper = (element2) => {
        const ret = {};
        for (let el = element2; el; el = el.parentElement) {
          const toe = getTabsterOnElement(this._tabster, el);
          if (toe) {
            if (toe.groupper && !ret.groupper) {
              ret.groupper = toe.groupper;
            }
            if (toe.mover) {
              ret.mover = toe.mover;
              break;
            }
          }
        }
        return ret;
      };
      updateQueue.push({
        element,
        type: _moverUpdateAdd
      });
      requestUpdate();
      observer.observe(element, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["tabindex"]
      });
      this._unobserve = () => {
        observer.disconnect();
      };
    }
    getState(element) {
      const id4 = getElementUId(this._win, element);
      if (id4 in this._visible) {
        const visibility = this._visible[id4] || Visibilities.Invisible;
        const isCurrent = this._current ? this._current.get() === element : void 0;
        return {
          isCurrent,
          visibility
        };
      }
      return void 0;
    }
  };
  function getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
    const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;
    const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;
    return xDistance === 0 ? yDistance : yDistance === 0 ? xDistance : Math.sqrt(xDistance * xDistance + yDistance * yDistance);
  }
  var MoverAPI = class {
    constructor(tabster, getWindow) {
      this._init = () => {
        const win = this._win();
        win.addEventListener("keydown", this._onKeyDown, true);
        this._tabster.focusedElement.subscribe(this._onFocus);
      };
      this._onMoverDispose = (mover) => {
        delete this._movers[mover.id];
      };
      this._onFocus = (e3) => {
        var _a;
        for (let el = e3; el; el = el.parentElement) {
          const mover = (_a = getTabsterOnElement(this._tabster, el)) === null || _a === void 0 ? void 0 : _a.mover;
          if (mover) {
            mover.setCurrent(e3);
            break;
          }
        }
      };
      this._onKeyDown = async (event) => {
        var _a, _b, _c, _d;
        if (this._ignoredInputTimer) {
          this._win().clearTimeout(this._ignoredInputTimer);
          delete this._ignoredInputTimer;
        }
        (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);
        let keyCode = event.keyCode;
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        switch (keyCode) {
          case Keys.Down:
          case Keys.Right:
          case Keys.Up:
          case Keys.Left:
          case Keys.PageDown:
          case Keys.PageUp:
          case Keys.Home:
          case Keys.End:
            break;
          default:
            return;
        }
        const tabster2 = this._tabster;
        const focused = tabster2.focusedElement.getFocusedElement();
        if (!focused || await this._isIgnoredInput(focused, keyCode)) {
          return;
        }
        const ctx = RootAPI.getTabsterContext(tabster2, focused, {
          checkRtl: true
        });
        if (!ctx || !ctx.mover || ctx.isExcludedFromMover || ctx.ignoreKeydown(event)) {
          return;
        }
        const mover = ctx.mover;
        const container = mover.getElement();
        if (ctx.isGroupperFirst) {
          const groupper = ctx.groupper;
          if (groupper && !groupper.isActive(true)) {
            for (let el = (_b = groupper.getElement()) === null || _b === void 0 ? void 0 : _b.parentElement; el && el !== container; el = el.parentElement) {
              if ((_d = (_c = getTabsterOnElement(tabster2, el)) === null || _c === void 0 ? void 0 : _c.groupper) === null || _d === void 0 ? void 0 : _d.isActive(true)) {
                return;
              }
            }
          } else {
            return;
          }
        }
        if (!container) {
          return;
        }
        const focusable = tabster2.focusable;
        const moverProps = mover.getProps();
        const direction = moverProps.direction || MoverDirections.Both;
        const isBoth = direction === MoverDirections.Both;
        const isVertical = isBoth || direction === MoverDirections.Vertical;
        const isHorizontal = isBoth || direction === MoverDirections.Horizontal;
        const isGrid = direction === MoverDirections.Grid;
        const isCyclic = moverProps.cyclic;
        let next2;
        let focusedElementRect;
        let focusedElementX1 = 0;
        let focusedElementX2 = 0;
        if (isGrid) {
          focusedElementRect = focused.getBoundingClientRect();
          focusedElementX1 = Math.ceil(focusedElementRect.left);
          focusedElementX2 = Math.floor(focusedElementRect.right);
        }
        if (ctx.isRtl) {
          if (keyCode === Keys.Right) {
            keyCode = Keys.Left;
          } else if (keyCode === Keys.Left) {
            keyCode = Keys.Right;
          }
        }
        if (keyCode === Keys.Down && isVertical || keyCode === Keys.Right && (isHorizontal || isGrid)) {
          next2 = focusable.findNext({
            currentElement: focused,
            container,
            useActiveModalizer: true
          });
          if (next2 && isGrid) {
            const nextElementX1 = Math.ceil(next2.getBoundingClientRect().left);
            if (focusedElementX2 > nextElementX1) {
              next2 = void 0;
            }
          } else if (!next2 && isCyclic) {
            next2 = focusable.findFirst({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Up && isVertical || keyCode === Keys.Left && (isHorizontal || isGrid)) {
          next2 = focusable.findPrev({
            currentElement: focused,
            container,
            useActiveModalizer: true
          });
          if (next2 && isGrid) {
            const nextElementX2 = Math.floor(next2.getBoundingClientRect().right);
            if (nextElementX2 > focusedElementX1) {
              next2 = void 0;
            }
          } else if (!next2 && isCyclic) {
            next2 = focusable.findLast({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Home) {
          if (isGrid) {
            focusable.findElement({
              container,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                var _a2;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a2 = el.getBoundingClientRect().left) !== null && _a2 !== void 0 ? _a2 : 0);
                if (el !== focused && focusedElementX1 <= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          } else {
            next2 = focusable.findFirst({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.End) {
          if (isGrid) {
            focusable.findElement({
              container,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                var _a2;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a2 = el.getBoundingClientRect().left) !== null && _a2 !== void 0 ? _a2 : 0);
                if (el !== focused && focusedElementX1 >= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          } else {
            next2 = focusable.findLast({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.PageUp) {
          focusable.findElement({
            currentElement: focused,
            container,
            useActiveModalizer: true,
            isBackward: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next2 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next2) {
            const firstColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next2,
              container,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 < nextElementX1 || firstColumnX1 >= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          }
          if (next2) {
            scrollIntoView(this._win, next2, false);
          }
        } else if (keyCode === Keys.PageDown) {
          focusable.findElement({
            currentElement: focused,
            container,
            useActiveModalizer: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next2 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next2) {
            const lastColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next2,
              container,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 > nextElementX1 || lastColumnX1 <= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          }
          if (next2) {
            scrollIntoView(this._win, next2, true);
          }
        } else if (isGrid) {
          const isBackward = keyCode === Keys.Up;
          const ax1 = focusedElementX1;
          const ay1 = Math.ceil(focusedElementRect.top);
          const ax2 = focusedElementX2;
          const ay2 = Math.floor(focusedElementRect.bottom);
          let targetElement;
          let lastDistance;
          let lastIntersection = 0;
          focusable.findAll({
            container,
            currentElement: focused,
            isBackward,
            onElement: (el) => {
              const rect = el.getBoundingClientRect();
              const bx1 = Math.ceil(rect.left);
              const by1 = Math.ceil(rect.top);
              const bx2 = Math.floor(rect.right);
              const by2 = Math.floor(rect.bottom);
              if (isBackward && ay1 < by2 || !isBackward && ay2 > by1) {
                return true;
              }
              const xIntersectionWidth = Math.ceil(Math.min(ax2, bx2)) - Math.floor(Math.max(ax1, bx1));
              const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));
              if (xIntersectionWidth > 0 && minWidth >= xIntersectionWidth) {
                const intersection = xIntersectionWidth / minWidth;
                if (intersection > lastIntersection) {
                  targetElement = el;
                  lastIntersection = intersection;
                }
              } else if (lastIntersection === 0) {
                const distance2 = getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
                if (lastDistance === void 0 || distance2 < lastDistance) {
                  lastDistance = distance2;
                  targetElement = el;
                }
              } else if (lastIntersection > 0) {
                return false;
              }
              return true;
            }
          });
          next2 = targetElement;
        }
        if (next2) {
          event.preventDefault();
          event.stopImmediatePropagation();
          nativeFocus(next2);
        }
      };
      this._tabster = tabster;
      this._win = getWindow;
      this._movers = {};
      tabster.queueInit(this._init);
    }
    dispose() {
      var _a;
      const win = this._win();
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);
      if (this._ignoredInputTimer) {
        win.clearTimeout(this._ignoredInputTimer);
        delete this._ignoredInputTimer;
      }
      win.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._movers).forEach((moverId) => {
        if (this._movers[moverId]) {
          this._movers[moverId].dispose();
          delete this._movers[moverId];
        }
      });
    }
    createMover(element, props, sys) {
      if (true)
        ;
      const newMover = new Mover(this._tabster, element, this._onMoverDispose, props, sys);
      this._movers[newMover.id] = newMover;
      return newMover;
    }
    async _isIgnoredInput(element, keyCode) {
      var _a;
      if (element.getAttribute("aria-expanded") === "true") {
        return true;
      }
      if (matchesSelector(element, _inputSelector)) {
        let selectionStart = 0;
        let selectionEnd = 0;
        let textLength = 0;
        let asyncRet;
        if (element.tagName === "INPUT" || element.tagName === "TEXTAREA") {
          const type = element.type;
          const value = element.value;
          textLength = (value || "").length;
          if (type === "email" || type === "number") {
            if (textLength) {
              const selection2 = (_a = element.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.getSelection();
              if (selection2) {
                const initialLength = selection2.toString().length;
                const isBackward = keyCode === Keys.Left || keyCode === Keys.Up;
                selection2.modify("extend", isBackward ? "backward" : "forward", "character");
                if (initialLength !== selection2.toString().length) {
                  selection2.modify("extend", isBackward ? "forward" : "backward", "character");
                  return true;
                } else {
                  textLength = 0;
                }
              }
            }
          } else {
            const selStart = element.selectionStart;
            if (selStart === null) {
              return type === "hidden";
            }
            selectionStart = selStart || 0;
            selectionEnd = element.selectionEnd || 0;
          }
        } else if (element.contentEditable === "true") {
          asyncRet = new (getPromise(this._win))((resolve) => {
            this._ignoredInputResolve = (value) => {
              delete this._ignoredInputResolve;
              resolve(value);
            };
            const win = this._win();
            if (this._ignoredInputTimer) {
              win.clearTimeout(this._ignoredInputTimer);
            }
            const {
              anchorNode: prevAnchorNode,
              focusNode: prevFocusNode,
              anchorOffset: prevAnchorOffset,
              focusOffset: prevFocusOffset
            } = win.getSelection() || {};
            this._ignoredInputTimer = win.setTimeout(() => {
              var _a2, _b, _c;
              delete this._ignoredInputTimer;
              const {
                anchorNode,
                focusNode,
                anchorOffset,
                focusOffset
              } = win.getSelection() || {};
              if (anchorNode !== prevAnchorNode || focusNode !== prevFocusNode || anchorOffset !== prevAnchorOffset || focusOffset !== prevFocusOffset) {
                (_a2 = this._ignoredInputResolve) === null || _a2 === void 0 ? void 0 : _a2.call(this, false);
                return;
              }
              selectionStart = anchorOffset || 0;
              selectionEnd = focusOffset || 0;
              textLength = ((_b = element.textContent) === null || _b === void 0 ? void 0 : _b.length) || 0;
              if (anchorNode && focusNode) {
                if (element.contains(anchorNode) && element.contains(focusNode)) {
                  if (anchorNode !== element) {
                    let anchorFound = false;
                    const addOffsets = (node2) => {
                      if (node2 === anchorNode) {
                        anchorFound = true;
                      } else if (node2 === focusNode) {
                        return true;
                      }
                      const nodeText = node2.textContent;
                      if (nodeText && !node2.firstChild) {
                        const len = nodeText.length;
                        if (anchorFound) {
                          if (focusNode !== anchorNode) {
                            selectionEnd += len;
                          }
                        } else {
                          selectionStart += len;
                          selectionEnd += len;
                        }
                      }
                      let stop = false;
                      for (let e3 = node2.firstChild; e3 && !stop; e3 = e3.nextSibling) {
                        stop = addOffsets(e3);
                      }
                      return stop;
                    };
                    addOffsets(element);
                  }
                }
              }
              (_c = this._ignoredInputResolve) === null || _c === void 0 ? void 0 : _c.call(this, true);
            }, 0);
          });
        }
        if (asyncRet && !await asyncRet) {
          return true;
        }
        if (selectionStart !== selectionEnd) {
          return true;
        }
        if (selectionStart > 0 && (keyCode === Keys.Left || keyCode === Keys.Up || keyCode === Keys.Home)) {
          return true;
        }
        if (selectionStart < textLength && (keyCode === Keys.Right || keyCode === Keys.Down || keyCode === Keys.End)) {
          return true;
        }
      }
      return false;
    }
  };
  function observeMutations(doc2, tabster, updateTabsterByAttribute2, syncState) {
    if (typeof MutationObserver === "undefined") {
      return () => {
      };
    }
    const getWindow = tabster.getWindow;
    let elementByUId;
    const onMutation = (mutations) => {
      var _a, _b, _c, _d, _e;
      for (const mutation of mutations) {
        const target = mutation.target;
        const removed = mutation.removedNodes;
        const added = mutation.addedNodes;
        if (mutation.type === "attributes") {
          if (mutation.attributeName === TabsterAttributeName) {
            updateTabsterByAttribute2(tabster, target);
          }
        } else {
          for (let i4 = 0; i4 < removed.length; i4++) {
            updateTabsterElements(removed[i4], true);
            (_b = (_a = tabster._dummyObserver).domChanged) === null || _b === void 0 ? void 0 : _b.call(_a, target);
          }
          for (let i4 = 0; i4 < added.length; i4++) {
            updateTabsterElements(added[i4]);
            (_d = (_c = tabster._dummyObserver).domChanged) === null || _d === void 0 ? void 0 : _d.call(_c, target);
          }
        }
      }
      (_e = tabster.modalizer) === null || _e === void 0 ? void 0 : _e.hiddenUpdate();
    };
    function updateTabsterElements(node2, removed) {
      if (!elementByUId) {
        elementByUId = getInstanceContext(getWindow).elementByUId;
      }
      processNode(node2, removed);
      const walker = createElementTreeWalker(doc2, node2, (element) => {
        return processNode(element, removed);
      });
      if (walker) {
        while (walker.nextNode()) {
        }
      }
    }
    function processNode(element, removed) {
      var _a;
      if (!element.getAttribute) {
        return NodeFilter.FILTER_SKIP;
      }
      const uid = element.__tabsterElementUID;
      if (uid && elementByUId) {
        if (removed) {
          delete elementByUId[uid];
        } else {
          (_a = elementByUId[uid]) !== null && _a !== void 0 ? _a : elementByUId[uid] = new WeakHTMLElement(getWindow, element);
        }
      }
      if (getTabsterOnElement(tabster, element) || element.hasAttribute(TabsterAttributeName)) {
        updateTabsterByAttribute2(tabster, element, removed);
      }
      return NodeFilter.FILTER_SKIP;
    }
    const observer = new MutationObserver(onMutation);
    if (syncState) {
      updateTabsterElements(getWindow().document.body);
    }
    observer.observe(doc2, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: [TabsterAttributeName]
    });
    return () => {
      observer.disconnect();
    };
  }
  var UncontrolledAPI = class {
    constructor() {
    }
  };
  var Tabster = class {
    constructor(tabster) {
      this.keyboardNavigation = tabster.keyboardNavigation;
      this.focusedElement = tabster.focusedElement;
      this.focusable = tabster.focusable;
      this.root = tabster.root;
      this.uncontrolled = tabster.uncontrolled;
      this.core = tabster;
    }
  };
  var TabsterCore = class {
    constructor(win, props) {
      var _a;
      this._forgetMemorizedElements = [];
      this._wrappers = /* @__PURE__ */ new Set();
      this._initQueue = [];
      this._version = "4.4.0";
      this._noop = false;
      this.getWindow = () => {
        if (!this._win) {
          throw new Error("Using disposed Tabster.");
        }
        return this._win;
      };
      this._storage = createWeakMap(win);
      this._win = win;
      const getWindow = this.getWindow;
      this.keyboardNavigation = new KeyboardNavigationState(getWindow);
      this.focusedElement = new FocusedElementState(this, getWindow);
      this.focusable = new FocusableAPI(this);
      this.root = new RootAPI(this, props === null || props === void 0 ? void 0 : props.autoRoot);
      this.uncontrolled = new UncontrolledAPI();
      this.controlTab = (_a = props === null || props === void 0 ? void 0 : props.controlTab) !== null && _a !== void 0 ? _a : true;
      this.rootDummyInputs = !!(props === null || props === void 0 ? void 0 : props.rootDummyInputs);
      this._dummyObserver = new DummyInputObserver(getWindow);
      this.internal = {
        stopObserver: () => {
          if (this._unobserve) {
            this._unobserve();
            delete this._unobserve;
          }
        },
        resumeObserver: (syncState) => {
          if (!this._unobserve) {
            const doc2 = getWindow().document;
            this._unobserve = observeMutations(doc2, this, updateTabsterByAttribute, syncState);
          }
        }
      };
      startFakeWeakRefsCleanup(getWindow);
      this.queueInit(() => {
        this.internal.resumeObserver(true);
      });
    }
    createTabster(noRefCount) {
      const wrapper = new Tabster(this);
      if (!noRefCount) {
        this._wrappers.add(wrapper);
      }
      return wrapper;
    }
    disposeTabster(wrapper, allInstances) {
      if (allInstances) {
        this._wrappers.clear();
      } else {
        this._wrappers.delete(wrapper);
      }
      if (this._wrappers.size === 0) {
        this.dispose();
      }
    }
    dispose() {
      var _a, _b, _c, _d, _e, _f, _g;
      this.internal.stopObserver();
      const win = this._win;
      win === null || win === void 0 ? void 0 : win.clearTimeout(this._initTimer);
      delete this._initTimer;
      this._initQueue = [];
      this._forgetMemorizedElements = [];
      if (win && this._forgetMemorizedTimer) {
        win.clearTimeout(this._forgetMemorizedTimer);
        delete this._forgetMemorizedTimer;
      }
      (_a = this.outline) === null || _a === void 0 ? void 0 : _a.dispose();
      (_b = this.crossOrigin) === null || _b === void 0 ? void 0 : _b.dispose();
      (_c = this.deloser) === null || _c === void 0 ? void 0 : _c.dispose();
      (_d = this.groupper) === null || _d === void 0 ? void 0 : _d.dispose();
      (_e = this.mover) === null || _e === void 0 ? void 0 : _e.dispose();
      (_f = this.modalizer) === null || _f === void 0 ? void 0 : _f.dispose();
      (_g = this.observedElement) === null || _g === void 0 ? void 0 : _g.dispose();
      this.keyboardNavigation.dispose();
      this.focusable.dispose();
      this.focusedElement.dispose();
      this.root.dispose();
      this._dummyObserver.dispose();
      stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);
      clearElementCache(this.getWindow);
      this._storage = /* @__PURE__ */ new WeakMap();
      this._wrappers.clear();
      if (win) {
        disposeInstanceContext(win);
        delete win.__tabsterInstance;
        delete this._win;
      }
    }
    storageEntry(element, addremove) {
      const storage = this._storage;
      let entry = storage.get(element);
      if (entry) {
        if (addremove === false && Object.keys(entry).length === 0) {
          storage.delete(element);
        }
      } else if (addremove === true) {
        entry = {};
        storage.set(element, entry);
      }
      return entry;
    }
    forceCleanup() {
      if (!this._win) {
        return;
      }
      this._forgetMemorizedElements.push(this._win.document.body);
      if (this._forgetMemorizedTimer) {
        return;
      }
      this._forgetMemorizedTimer = this._win.setTimeout(() => {
        delete this._forgetMemorizedTimer;
        for (let el = this._forgetMemorizedElements.shift(); el; el = this._forgetMemorizedElements.shift()) {
          clearElementCache(this.getWindow, el);
          FocusedElementState.forgetMemorized(this.focusedElement, el);
        }
      }, 0);
      cleanupFakeWeakRefs(this.getWindow, true);
    }
    queueInit(callback) {
      var _a;
      if (!this._win) {
        return;
      }
      this._initQueue.push(callback);
      if (!this._initTimer) {
        this._initTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.setTimeout(() => {
          delete this._initTimer;
          this.drainInitQueue();
        }, 0);
      }
    }
    drainInitQueue() {
      if (!this._win) {
        return;
      }
      const queue = this._initQueue;
      this._initQueue = [];
      queue.forEach((callback) => callback());
    }
  };
  function createTabster(win, props) {
    let tabster = getCurrentTabster(win);
    if (tabster) {
      return tabster.createTabster();
    }
    tabster = new TabsterCore(win, props);
    win.__tabsterInstance = tabster;
    return tabster.createTabster();
  }
  function getGroupper(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.groupper) {
      tabsterCore.groupper = new GroupperAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.groupper;
  }
  function getMover(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.mover) {
      tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.mover;
  }
  function disposeTabster(tabster, allInstances) {
    tabster.core.disposeTabster(tabster, allInstances);
  }
  function getCurrentTabster(win) {
    return win.__tabsterInstance;
  }

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useTabster.js
  init_define_process();
  init_define_process_env();
  var React27 = __toESM(require_react());
  var useTabster = () => {
    const {
      targetDocument
    } = useFluent();
    const defaultView = (targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) || void 0;
    const tabster = React27.useMemo(() => {
      if (!defaultView) {
        return null;
      }
      return createTabster(defaultView, {
        autoRoot: {},
        controlTab: false
      });
    }, [defaultView]);
    useIsomorphicLayoutEffect(() => {
      return () => {
        if (tabster) {
          disposeTabster(tabster);
        }
      };
    }, [tabster]);
    return tabster;
  };

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js
  var useTabsterAttributes = (props) => {
    useTabster();
    return getTabsterAttribute(props);
  };

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js
  var useArrowNavigationGroup = (options = {}) => {
    const {
      circular,
      axis,
      memorizeCurrent,
      tabbable,
      ignoreDefaultKeydown,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_hasDefault
    } = options;
    const tabster = useTabster();
    if (tabster) {
      getMover(tabster);
    }
    return useTabsterAttributes({
      mover: {
        cyclic: !!circular,
        direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : "vertical"),
        memorizeCurrent,
        tabbable,
        hasDefault: unstable_hasDefault
      },
      ...ignoreDefaultKeydown && {
        focusable: {
          ignoreKeydown: ignoreDefaultKeydown
        }
      }
    });
  };
  function axisToMoverDirection(axis) {
    switch (axis) {
      case "horizontal":
        return Types.MoverDirections.Horizontal;
      case "grid":
        return Types.MoverDirections.Grid;
      case "both":
        return Types.MoverDirections.Both;
      case "vertical":
      default:
        return Types.MoverDirections.Vertical;
    }
  }

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusableGroup.js
  init_define_process();
  init_define_process_env();
  var useFocusableGroup = (options) => {
    const tabster = useTabster();
    if (tabster) {
      getGroupper(tabster);
    }
    return useTabsterAttributes({
      groupper: {
        tabbability: getTabbability(options === null || options === void 0 ? void 0 : options.tabBehavior)
      }
    });
  };
  var getTabbability = (tabBehavior) => {
    switch (tabBehavior) {
      case "unlimited":
        return Types.GroupperTabbabilities.Unlimited;
      case "limited":
        return Types.GroupperTabbabilities.Limited;
      case "limited-trap-focus":
        return Types.GroupperTabbabilities.LimitedTrapFocus;
      default:
        return void 0;
    }
  };

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusFinders.js
  init_define_process();
  init_define_process_env();
  var React28 = __toESM(require_react());
  var useFocusFinders = () => {
    const tabster = useTabster();
    const {
      targetDocument
    } = useFluent();
    const findAllFocusable = React28.useCallback((container, acceptCondition) => {
      return (tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findAll({
        container,
        acceptCondition
      })) || [];
    }, [tabster]);
    const findFirstFocusable = React28.useCallback((container) => {
      return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findFirst({
        container
      });
    }, [tabster]);
    const findLastFocusable = React28.useCallback((container) => {
      return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findLast({
        container
      });
    }, [tabster]);
    const findNextFocusable = React28.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const {
        container = targetDocument.body
      } = options;
      return tabster.focusable.findNext({
        currentElement,
        container
      });
    }, [tabster, targetDocument]);
    const findPrevFocusable = React28.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const {
        container = targetDocument.body
      } = options;
      return tabster.focusable.findPrev({
        currentElement,
        container
      });
    }, [tabster, targetDocument]);
    return {
      findAllFocusable,
      findFirstFocusable,
      findLastFocusable,
      findNextFocusable,
      findPrevFocusable
    };
  };

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  init_define_process();
  init_define_process_env();
  var React29 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/focus/constants.js
  init_define_process();
  init_define_process_env();
  var KEYBOARD_NAV_ATTRIBUTE = "data-keyboard-nav";
  var KEYBOARD_NAV_SELECTOR = `:global([${KEYBOARD_NAV_ATTRIBUTE}])`;
  var FOCUS_VISIBLE_ATTR = "data-fui-focus-visible";
  var FOCUS_WITHIN_ATTR = "data-fui-focus-within";

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js
  function applyFocusVisiblePolyfill(scope, targetWindow) {
    if (alreadyInScope(scope)) {
      return () => void 0;
    }
    const state = {
      current: void 0
    };
    const keyborg = createKeyborg(targetWindow);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard && state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
    });
    const keyborgListener = (e3) => {
      if (state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e3.target) && e3.target) {
        state.current = e3.target;
        applyFocusVisibleClass(state.current);
      }
    };
    const blurListener = (e3) => {
      if (!e3.relatedTarget || isHTMLElement(e3.relatedTarget) && !scope.contains(e3.relatedTarget)) {
        if (state.current) {
          removeFocusVisibleClass(state.current);
          state.current = void 0;
        }
      }
    };
    scope.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    scope.addEventListener("focusout", blurListener);
    scope.focusVisible = true;
    return () => {
      scope.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      scope.removeEventListener("focusout", blurListener);
      delete scope.focusVisible;
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusVisibleClass(el) {
    el.setAttribute(FOCUS_VISIBLE_ATTR, "");
  }
  function removeFocusVisibleClass(el) {
    el.removeAttribute(FOCUS_VISIBLE_ATTR);
  }
  function alreadyInScope(el) {
    if (!el) {
      return false;
    }
    if (el.focusVisible) {
      return true;
    }
    return alreadyInScope(el === null || el === void 0 ? void 0 : el.parentElement);
  }

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  function useFocusVisible(options = {}) {
    const contentValue = useFluent();
    const scopeRef = React29.useRef(null);
    var _options_targetDocument;
    const targetDocument = (_options_targetDocument = options.targetDocument) !== null && _options_targetDocument !== void 0 ? _options_targetDocument : contentValue.targetDocument;
    React29.useEffect(() => {
      if ((targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) && scopeRef.current) {
        return applyFocusVisiblePolyfill(scopeRef.current, targetDocument.defaultView);
      }
    }, [scopeRef, targetDocument]);
    return scopeRef;
  }

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  init_define_process();
  init_define_process_env();
  var React30 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/focus/focusWithinPolyfill.js
  init_define_process();
  init_define_process_env();
  function applyFocusWithinPolyfill(element, win) {
    const keyborg = createKeyborg(win);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard) {
        removeFocusWithinClass(element);
      }
    });
    const keyborgListener = (e3) => {
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement2(e3.target)) {
        applyFocusWithinClass(element);
      }
    };
    const blurListener = (e3) => {
      if (!e3.relatedTarget || isHTMLElement2(e3.relatedTarget) && !element.contains(e3.relatedTarget)) {
        removeFocusWithinClass(element);
      }
    };
    element.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    element.addEventListener("focusout", blurListener);
    return () => {
      element.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      element.removeEventListener("focusout", blurListener);
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusWithinClass(el) {
    el.setAttribute(FOCUS_WITHIN_ATTR, "");
  }
  function removeFocusWithinClass(el) {
    el.removeAttribute(FOCUS_WITHIN_ATTR);
  }
  function isHTMLElement2(target) {
    if (!target) {
      return false;
    }
    return Boolean(target && typeof target === "object" && "classList" in target && "contains" in target);
  }

  // node_modules/.pnpm/@fluentui+react-tabster@9.6.5_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  function useFocusWithin() {
    const {
      targetDocument
    } = useFluent();
    const elementRef = React30.useRef(null);
    React30.useEffect(() => {
      if ((targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) && elementRef.current) {
        return applyFocusWithinPolyfill(elementRef.current, targetDocument.defaultView);
      }
    }, [elementRef, targetDocument]);
    return elementRef;
  }

  // node_modules/.pnpm/@fluentui+react-theme@9.1.7/node_modules/@fluentui/react-theme/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/colorPalette.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/colors.js
  init_define_process();
  init_define_process_env();
  var grey = {
    "2": "#050505",
    "4": "#0a0a0a",
    "6": "#0f0f0f",
    "8": "#141414",
    "10": "#1a1a1a",
    "12": "#1f1f1f",
    "14": "#242424",
    "16": "#292929",
    "18": "#2e2e2e",
    "20": "#333333",
    "22": "#383838",
    "24": "#3d3d3d",
    "26": "#424242",
    "28": "#474747",
    "30": "#4d4d4d",
    "32": "#525252",
    "34": "#575757",
    "36": "#5c5c5c",
    "38": "#616161",
    "40": "#666666",
    "42": "#6b6b6b",
    "44": "#707070",
    "46": "#757575",
    "48": "#7a7a7a",
    "50": "#808080",
    "52": "#858585",
    "54": "#8a8a8a",
    "56": "#8f8f8f",
    "58": "#949494",
    "60": "#999999",
    "62": "#9e9e9e",
    "64": "#a3a3a3",
    "66": "#a8a8a8",
    "68": "#adadad",
    "70": "#b3b3b3",
    "72": "#b8b8b8",
    "74": "#bdbdbd",
    "76": "#c2c2c2",
    "78": "#c7c7c7",
    "80": "#cccccc",
    "82": "#d1d1d1",
    "84": "#d6d6d6",
    "86": "#dbdbdb",
    "88": "#e0e0e0",
    "90": "#e6e6e6",
    "92": "#ebebeb",
    "94": "#f0f0f0",
    "96": "#f5f5f5",
    "98": "#fafafa"
  };
  var whiteAlpha = {
    "5": "rgba(255, 255, 255, 0.05)",
    "10": "rgba(255, 255, 255, 0.1)",
    "20": "rgba(255, 255, 255, 0.2)",
    "30": "rgba(255, 255, 255, 0.3)",
    "40": "rgba(255, 255, 255, 0.4)",
    "50": "rgba(255, 255, 255, 0.5)",
    "60": "rgba(255, 255, 255, 0.6)",
    "70": "rgba(255, 255, 255, 0.7)",
    "80": "rgba(255, 255, 255, 0.8)",
    "90": "rgba(255, 255, 255, 0.9)"
  };
  var blackAlpha = {
    "5": "rgba(0, 0, 0, 0.05)",
    "10": "rgba(0, 0, 0, 0.1)",
    "20": "rgba(0, 0, 0, 0.2)",
    "30": "rgba(0, 0, 0, 0.3)",
    "40": "rgba(0, 0, 0, 0.4)",
    "50": "rgba(0, 0, 0, 0.5)",
    "60": "rgba(0, 0, 0, 0.6)",
    "70": "rgba(0, 0, 0, 0.7)",
    "80": "rgba(0, 0, 0, 0.8)",
    "90": "rgba(0, 0, 0, 0.9)"
  };
  var grey10Alpha = {
    "5": "rgba(26, 26, 26, 0.05)",
    "10": "rgba(26, 26, 26, 0.1)",
    "20": "rgba(26, 26, 26, 0.2)",
    "30": "rgba(26, 26, 26, 0.3)",
    "40": "rgba(26, 26, 26, 0.4)",
    "50": "rgba(26, 26, 26, 0.5)",
    "60": "rgba(26, 26, 26, 0.6)",
    "70": "rgba(26, 26, 26, 0.7)",
    "80": "rgba(26, 26, 26, 0.8)",
    "90": "rgba(26, 26, 26, 0.9)"
  };
  var grey12Alpha = {
    "5": "rgba(31, 31, 31, 0.05)",
    "10": "rgba(31, 31, 31, 0.1)",
    "20": "rgba(31, 31, 31, 0.2)",
    "30": "rgba(31, 31, 31, 0.3)",
    "40": "rgba(31, 31, 31, 0.4)",
    "50": "rgba(31, 31, 31, 0.5)",
    "60": "rgba(31, 31, 31, 0.6)",
    "70": "rgba(31, 31, 31, 0.7)",
    "80": "rgba(31, 31, 31, 0.8)",
    "90": "rgba(31, 31, 31, 0.9)"
  };
  var grey14Alpha = {
    "5": "rgba(36, 36, 36, 0.05)",
    "10": "rgba(36, 36, 36, 0.1)",
    "20": "rgba(36, 36, 36, 0.2)",
    "30": "rgba(36, 36, 36, 0.3)",
    "40": "rgba(36, 36, 36, 0.4)",
    "50": "rgba(36, 36, 36, 0.5)",
    "60": "rgba(36, 36, 36, 0.6)",
    "70": "rgba(36, 36, 36, 0.7)",
    "80": "rgba(36, 36, 36, 0.8)",
    "90": "rgba(36, 36, 36, 0.9)"
  };
  var white = "#ffffff";
  var black = "#000000";
  var darkRed = {
    shade50: "#130204",
    shade40: "#230308",
    shade30: "#420610",
    shade20: "#590815",
    shade10: "#690a19",
    primary: "#750b1c",
    tint10: "#861b2c",
    tint20: "#962f3f",
    tint30: "#ac4f5e",
    tint40: "#d69ca5",
    tint50: "#e9c7cd",
    tint60: "#f9f0f2"
  };
  var cranberry = {
    shade50: "#200205",
    shade40: "#3b0509",
    shade30: "#6e0811",
    shade20: "#960b18",
    shade10: "#b10e1c",
    primary: "#c50f1f",
    tint10: "#cc2635",
    tint20: "#d33f4c",
    tint30: "#dc626d",
    tint40: "#eeacb2",
    tint50: "#f6d1d5",
    tint60: "#fdf3f4"
  };
  var red = {
    shade50: "#210809",
    shade40: "#3f1011",
    shade30: "#751d1f",
    shade20: "#9f282b",
    shade10: "#bc2f32",
    primary: "#d13438",
    tint10: "#d7494c",
    tint20: "#dc5e62",
    tint30: "#e37d80",
    tint40: "#f1bbbc",
    tint50: "#f8dadb",
    tint60: "#fdf6f6"
  };
  var darkOrange = {
    shade50: "#230900",
    shade40: "#411200",
    shade30: "#7a2101",
    shade20: "#a62d01",
    shade10: "#c43501",
    primary: "#da3b01",
    tint10: "#de501c",
    tint20: "#e36537",
    tint30: "#e9835e",
    tint40: "#f4bfab",
    tint50: "#f9dcd1",
    tint60: "#fdf6f3"
  };
  var pumpkin = {
    shade50: "#200d03",
    shade40: "#3d1805",
    shade30: "#712d09",
    shade20: "#9a3d0c",
    shade10: "#b6480e",
    primary: "#ca5010",
    tint10: "#d06228",
    tint20: "#d77440",
    tint30: "#df8e64",
    tint40: "#efc4ad",
    tint50: "#f7dfd2",
    tint60: "#fdf7f4"
  };
  var peach = {
    shade50: "#291600",
    shade40: "#4d2a00",
    shade30: "#8f4e00",
    shade20: "#c26a00",
    shade10: "#e67e00",
    primary: "#ff8c00",
    tint10: "#ff9a1f",
    tint20: "#ffa83d",
    tint30: "#ffba66",
    tint40: "#ffddb3",
    tint50: "#ffedd6",
    tint60: "#fffaf5"
  };
  var marigold = {
    shade50: "#251a00",
    shade40: "#463100",
    shade30: "#835b00",
    shade20: "#b27c00",
    shade10: "#d39300",
    primary: "#eaa300",
    tint10: "#edad1c",
    tint20: "#efb839",
    tint30: "#f2c661",
    tint40: "#f9e2ae",
    tint50: "#fcefd3",
    tint60: "#fefbf4"
  };
  var yellow = {
    primary: "#fde300",
    shade10: "#e4cc00",
    shade20: "#c0ad00",
    shade30: "#817400",
    shade40: "#4c4400",
    shade50: "#282400",
    tint10: "#fde61e",
    tint20: "#fdea3d",
    tint30: "#feee66",
    tint40: "#fef7b2",
    tint50: "#fffad6",
    tint60: "#fffef5"
  };
  var gold = {
    shade50: "#1f1900",
    shade40: "#3a2f00",
    shade30: "#6c5700",
    shade20: "#937700",
    shade10: "#ae8c00",
    primary: "#c19c00",
    tint10: "#c8a718",
    tint20: "#d0b232",
    tint30: "#dac157",
    tint40: "#ecdfa5",
    tint50: "#f5eece",
    tint60: "#fdfbf2"
  };
  var brass = {
    shade50: "#181202",
    shade40: "#2e2103",
    shade30: "#553e06",
    shade20: "#745408",
    shade10: "#89640a",
    primary: "#986f0b",
    tint10: "#a47d1e",
    tint20: "#b18c34",
    tint30: "#c1a256",
    tint40: "#e0cea2",
    tint50: "#efe4cb",
    tint60: "#fbf8f2"
  };
  var brown = {
    shade50: "#170e07",
    shade40: "#2b1a0e",
    shade30: "#50301a",
    shade20: "#6c4123",
    shade10: "#804d29",
    primary: "#8e562e",
    tint10: "#9c663f",
    tint20: "#a97652",
    tint30: "#bb8f6f",
    tint40: "#ddc3b0",
    tint50: "#edded3",
    tint60: "#faf7f4"
  };
  var forest = {
    shade50: "#0c1501",
    shade40: "#162702",
    shade30: "#294903",
    shade20: "#376304",
    shade10: "#427505",
    primary: "#498205",
    tint10: "#599116",
    tint20: "#6ba02b",
    tint30: "#85b44c",
    tint40: "#bdd99b",
    tint50: "#dbebc7",
    tint60: "#f6faf0"
  };
  var seafoam = {
    shade50: "#002111",
    shade40: "#003d20",
    shade30: "#00723b",
    shade20: "#009b51",
    shade10: "#00b85f",
    primary: "#00cc6a",
    tint10: "#19d279",
    tint20: "#34d889",
    tint30: "#5ae0a0",
    tint40: "#a8f0cd",
    tint50: "#cff7e4",
    tint60: "#f3fdf8"
  };
  var lightGreen = {
    shade50: "#031a02",
    shade40: "#063004",
    shade30: "#0b5a08",
    shade20: "#0e7a0b",
    shade10: "#11910d",
    primary: "#13a10e",
    tint10: "#27ac22",
    tint20: "#3db838",
    tint30: "#5ec75a",
    tint40: "#a7e3a5",
    tint50: "#cef0cd",
    tint60: "#f2fbf2"
  };
  var green = {
    shade50: "#031403",
    shade40: "#052505",
    shade30: "#094509",
    shade20: "#0c5e0c",
    shade10: "#0e700e",
    primary: "#107c10",
    tint10: "#218c21",
    tint20: "#359b35",
    tint30: "#54b054",
    tint40: "#9fd89f",
    tint50: "#c9eac9",
    tint60: "#f1faf1"
  };
  var darkGreen = {
    shade50: "#021102",
    shade40: "#032003",
    shade30: "#063b06",
    shade20: "#085108",
    shade10: "#0a5f0a",
    primary: "#0b6a0b",
    tint10: "#1a7c1a",
    tint20: "#2d8e2d",
    tint30: "#4da64d",
    tint40: "#9ad29a",
    tint50: "#c6e7c6",
    tint60: "#f0f9f0"
  };
  var lightTeal = {
    shade50: "#001d1f",
    shade40: "#00373a",
    shade30: "#00666d",
    shade20: "#008b94",
    shade10: "#00a5af",
    primary: "#00b7c3",
    tint10: "#18bfca",
    tint20: "#32c8d1",
    tint30: "#58d3db",
    tint40: "#a6e9ed",
    tint50: "#cef3f5",
    tint60: "#f2fcfd"
  };
  var teal = {
    shade50: "#001516",
    shade40: "#012728",
    shade30: "#02494c",
    shade20: "#026467",
    shade10: "#037679",
    primary: "#038387",
    tint10: "#159195",
    tint20: "#2aa0a4",
    tint30: "#4cb4b7",
    tint40: "#9bd9db",
    tint50: "#c7ebec",
    tint60: "#f0fafa"
  };
  var steel = {
    shade50: "#000f12",
    shade40: "#001b22",
    shade30: "#00333f",
    shade20: "#004555",
    shade10: "#005265",
    primary: "#005b70",
    tint10: "#0f6c81",
    tint20: "#237d92",
    tint30: "#4496a9",
    tint40: "#94c8d4",
    tint50: "#c3e1e8",
    tint60: "#eff7f9"
  };
  var blue = {
    shade50: "#001322",
    shade40: "#002440",
    shade30: "#004377",
    shade20: "#005ba1",
    shade10: "#006cbf",
    primary: "#0078d4",
    tint10: "#1a86d9",
    tint20: "#3595de",
    tint30: "#5caae5",
    tint40: "#a9d3f2",
    tint50: "#d0e7f8",
    tint60: "#f3f9fd"
  };
  var royalBlue = {
    shade50: "#000c16",
    shade40: "#00172a",
    shade30: "#002c4e",
    shade20: "#003b6a",
    shade10: "#00467e",
    primary: "#004e8c",
    tint10: "#125e9a",
    tint20: "#286fa8",
    tint30: "#4a89ba",
    tint40: "#9abfdc",
    tint50: "#c7dced",
    tint60: "#f0f6fa"
  };
  var cornflower = {
    shade50: "#0d1126",
    shade40: "#182047",
    shade30: "#2c3c85",
    shade20: "#3c51b4",
    shade10: "#4760d5",
    primary: "#4f6bed",
    tint10: "#637cef",
    tint20: "#778df1",
    tint30: "#93a4f4",
    tint40: "#c8d1fa",
    tint50: "#e1e6fc",
    tint60: "#f7f9fe"
  };
  var navy = {
    shade50: "#00061d",
    shade40: "#000c36",
    shade30: "#001665",
    shade20: "#001e89",
    shade10: "#0023a2",
    primary: "#0027b4",
    tint10: "#173bbd",
    tint20: "#3050c6",
    tint30: "#546fd2",
    tint40: "#a3b2e8",
    tint50: "#ccd5f3",
    tint60: "#f2f4fc"
  };
  var lavender = {
    shade50: "#120f25",
    shade40: "#221d46",
    shade30: "#3f3682",
    shade20: "#5649b0",
    shade10: "#6656d1",
    primary: "#7160e8",
    tint10: "#8172eb",
    tint20: "#9184ee",
    tint30: "#a79cf1",
    tint40: "#d2ccf8",
    tint50: "#e7e4fb",
    tint60: "#f9f8fe"
  };
  var purple = {
    shade50: "#0f0717",
    shade40: "#1c0e2b",
    shade30: "#341a51",
    shade20: "#46236e",
    shade10: "#532982",
    primary: "#5c2e91",
    tint10: "#6b3f9e",
    tint20: "#7c52ab",
    tint30: "#9470bd",
    tint40: "#c6b1de",
    tint50: "#e0d3ed",
    tint60: "#f7f4fb"
  };
  var grape = {
    shade50: "#160418",
    shade40: "#29072e",
    shade30: "#4c0d55",
    shade20: "#671174",
    shade10: "#7a1589",
    primary: "#881798",
    tint10: "#952aa4",
    tint20: "#a33fb1",
    tint30: "#b55fc1",
    tint40: "#d9a7e0",
    tint50: "#eaceef",
    tint60: "#faf2fb"
  };
  var berry = {
    shade50: "#1f091d",
    shade40: "#3a1136",
    shade30: "#6d2064",
    shade20: "#932b88",
    shade10: "#af33a1",
    primary: "#c239b3",
    tint10: "#c94cbc",
    tint20: "#d161c4",
    tint30: "#da7ed0",
    tint40: "#edbbe7",
    tint50: "#f5daf2",
    tint60: "#fdf5fc"
  };
  var lilac = {
    shade50: "#1c0b1f",
    shade40: "#35153a",
    shade30: "#63276d",
    shade20: "#863593",
    shade10: "#9f3faf",
    primary: "#b146c2",
    tint10: "#ba58c9",
    tint20: "#c36bd1",
    tint30: "#cf87da",
    tint40: "#e6bfed",
    tint50: "#f2dcf5",
    tint60: "#fcf6fd"
  };
  var pink = {
    shade50: "#24091b",
    shade40: "#441232",
    shade30: "#80215d",
    shade20: "#ad2d7e",
    shade10: "#cd3595",
    primary: "#e43ba6",
    tint10: "#e750b0",
    tint20: "#ea66ba",
    tint30: "#ef85c8",
    tint40: "#f7c0e3",
    tint50: "#fbddf0",
    tint60: "#fef6fb"
  };
  var magenta = {
    shade50: "#1f0013",
    shade40: "#390024",
    shade30: "#6b0043",
    shade20: "#91005a",
    shade10: "#ac006b",
    primary: "#bf0077",
    tint10: "#c71885",
    tint20: "#ce3293",
    tint30: "#d957a8",
    tint40: "#eca5d1",
    tint50: "#f5cee6",
    tint60: "#fcf2f9"
  };
  var plum = {
    shade50: "#13000c",
    shade40: "#240017",
    shade30: "#43002b",
    shade20: "#5a003b",
    shade10: "#6b0045",
    primary: "#77004d",
    tint10: "#87105d",
    tint20: "#98246f",
    tint30: "#ad4589",
    tint40: "#d696c0",
    tint50: "#e9c4dc",
    tint60: "#faf0f6"
  };
  var beige = {
    shade50: "#141313",
    shade40: "#252323",
    shade30: "#444241",
    shade20: "#5d5958",
    shade10: "#6e6968",
    primary: "#7a7574",
    tint10: "#8a8584",
    tint20: "#9a9594",
    tint30: "#afabaa",
    tint40: "#d7d4d4",
    tint50: "#eae8e8",
    tint60: "#faf9f9"
  };
  var mink = {
    shade50: "#0f0e0e",
    shade40: "#1c1b1a",
    shade30: "#343231",
    shade20: "#474443",
    shade10: "#54514f",
    primary: "#5d5a58",
    tint10: "#706d6b",
    tint20: "#84817e",
    tint30: "#9e9b99",
    tint40: "#cecccb",
    tint50: "#e5e4e3",
    tint60: "#f8f8f8"
  };
  var platinum = {
    shade50: "#111314",
    shade40: "#1f2426",
    shade30: "#3b4447",
    shade20: "#505c60",
    shade10: "#5f6d71",
    primary: "#69797e",
    tint10: "#79898d",
    tint20: "#89989d",
    tint30: "#a0adb2",
    tint40: "#cdd6d8",
    tint50: "#e4e9ea",
    tint60: "#f8f9fa"
  };
  var anchor = {
    shade50: "#090a0b",
    shade40: "#111315",
    shade30: "#202427",
    shade20: "#2b3135",
    shade10: "#333a3f",
    primary: "#394146",
    tint10: "#4d565c",
    tint20: "#626c72",
    tint30: "#808a90",
    tint40: "#bcc3c7",
    tint50: "#dbdfe1",
    tint60: "#f6f7f8"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/colorPalette.js
  var statusSharedColors = {
    red,
    green,
    darkOrange,
    yellow,
    berry,
    lightGreen,
    marigold
  };
  var personaSharedColors = {
    darkRed,
    cranberry,
    pumpkin,
    peach,
    gold,
    brass,
    brown,
    forest,
    seafoam,
    darkGreen,
    lightTeal,
    teal,
    steel,
    blue,
    royalBlue,
    cornflower,
    navy,
    lavender,
    purple,
    grape,
    lilac,
    pink,
    magenta,
    plum,
    beige,
    mink,
    platinum,
    anchor
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/sharedColorNames.js
  init_define_process();
  init_define_process_env();
  var statusSharedColorNames = ["red", "green", "darkOrange", "yellow", "berry", "lightGreen", "marigold"];
  var personaSharedColorNames = ["darkRed", "cranberry", "pumpkin", "peach", "gold", "brass", "brown", "forest", "seafoam", "darkGreen", "lightTeal", "teal", "steel", "blue", "royalBlue", "cornflower", "navy", "lavender", "purple", "grape", "lilac", "pink", "magenta", "plum", "beige", "mink", "platinum", "anchor"];

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/borderRadius.js
  init_define_process();
  init_define_process_env();
  var borderRadius3 = {
    borderRadiusNone: "0",
    borderRadiusSmall: "2px",
    borderRadiusMedium: "4px",
    borderRadiusLarge: "6px",
    borderRadiusXLarge: "8px",
    borderRadiusCircular: "10000px"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/curves.js
  init_define_process();
  init_define_process_env();
  var curves = {
    curveAccelerateMax: "cubic-bezier(1,0,1,1)",
    curveAccelerateMid: "cubic-bezier(0.7,0,1,0.5)",
    curveAccelerateMin: "cubic-bezier(0.8,0,1,1)",
    curveDecelerateMax: "cubic-bezier(0,0,0,1)",
    curveDecelerateMid: "cubic-bezier(0.1,0.9,0.2,1)",
    curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)",
    curveEasyEaseMax: "cubic-bezier(0.8,0,0.1,1)",
    curveEasyEase: "cubic-bezier(0.33,0,0.67,1)",
    curveLinear: "cubic-bezier(0,0,1,1)"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/durations.js
  init_define_process();
  init_define_process_env();
  var durations = {
    durationUltraFast: "50ms",
    durationFaster: "100ms",
    durationFast: "150ms",
    durationNormal: "200ms",
    durationSlow: "300ms",
    durationSlower: "400ms",
    durationUltraSlow: "500ms"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/fonts.js
  init_define_process();
  init_define_process_env();
  var fontSizes = {
    fontSizeBase100: "10px",
    fontSizeBase200: "12px",
    fontSizeBase300: "14px",
    fontSizeBase400: "16px",
    fontSizeBase500: "20px",
    fontSizeBase600: "24px",
    fontSizeHero700: "28px",
    fontSizeHero800: "32px",
    fontSizeHero900: "40px",
    fontSizeHero1000: "68px"
  };
  var lineHeights = {
    lineHeightBase100: "14px",
    lineHeightBase200: "16px",
    lineHeightBase300: "20px",
    lineHeightBase400: "22px",
    lineHeightBase500: "28px",
    lineHeightBase600: "32px",
    lineHeightHero700: "36px",
    lineHeightHero800: "40px",
    lineHeightHero900: "52px",
    lineHeightHero1000: "92px"
  };
  var fontWeights = {
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightSemibold: 600,
    fontWeightBold: 700
  };
  var fontFamilies = {
    fontFamilyBase: (
      // eslint-disable-next-line @fluentui/max-len
      "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    ),
    fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
    fontFamilyNumeric: (
      // eslint-disable-next-line @fluentui/max-len
      "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    )
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/spacings.js
  init_define_process();
  init_define_process_env();
  var spacings = {
    none: "0",
    xxs: "2px",
    xs: "4px",
    sNudge: "6px",
    s: "8px",
    mNudge: "10px",
    m: "12px",
    l: "16px",
    xl: "20px",
    xxl: "24px",
    xxxl: "32px"
  };
  var horizontalSpacings = {
    spacingHorizontalNone: spacings.none,
    spacingHorizontalXXS: spacings.xxs,
    spacingHorizontalXS: spacings.xs,
    spacingHorizontalSNudge: spacings.sNudge,
    spacingHorizontalS: spacings.s,
    spacingHorizontalMNudge: spacings.mNudge,
    spacingHorizontalM: spacings.m,
    spacingHorizontalL: spacings.l,
    spacingHorizontalXL: spacings.xl,
    spacingHorizontalXXL: spacings.xxl,
    spacingHorizontalXXXL: spacings.xxxl
  };
  var verticalSpacings = {
    spacingVerticalNone: spacings.none,
    spacingVerticalXXS: spacings.xxs,
    spacingVerticalXS: spacings.xs,
    spacingVerticalSNudge: spacings.sNudge,
    spacingVerticalS: spacings.s,
    spacingVerticalMNudge: spacings.mNudge,
    spacingVerticalM: spacings.m,
    spacingVerticalL: spacings.l,
    spacingVerticalXL: spacings.xl,
    spacingVerticalXXL: spacings.xxl,
    spacingVerticalXXXL: spacings.xxxl
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/strokeWidths.js
  init_define_process();
  init_define_process_env();
  var strokeWidths = {
    strokeWidthThin: "1px",
    strokeWidthThick: "2px",
    strokeWidthThicker: "3px",
    strokeWidthThickest: "4px"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/tokens.js
  init_define_process();
  init_define_process_env();
  var tokens = {
    // Color tokens
    colorNeutralForeground1: "var(--colorNeutralForeground1)",
    colorNeutralForeground1Hover: "var(--colorNeutralForeground1Hover)",
    colorNeutralForeground1Pressed: "var(--colorNeutralForeground1Pressed)",
    colorNeutralForeground1Selected: "var(--colorNeutralForeground1Selected)",
    colorNeutralForeground2: "var(--colorNeutralForeground2)",
    colorNeutralForeground2Hover: "var(--colorNeutralForeground2Hover)",
    colorNeutralForeground2Pressed: "var(--colorNeutralForeground2Pressed)",
    colorNeutralForeground2Selected: "var(--colorNeutralForeground2Selected)",
    colorNeutralForeground2BrandHover: "var(--colorNeutralForeground2BrandHover)",
    colorNeutralForeground2BrandPressed: "var(--colorNeutralForeground2BrandPressed)",
    colorNeutralForeground2BrandSelected: "var(--colorNeutralForeground2BrandSelected)",
    colorNeutralForeground3: "var(--colorNeutralForeground3)",
    colorNeutralForeground3Hover: "var(--colorNeutralForeground3Hover)",
    colorNeutralForeground3Pressed: "var(--colorNeutralForeground3Pressed)",
    colorNeutralForeground3Selected: "var(--colorNeutralForeground3Selected)",
    colorNeutralForeground3BrandHover: "var(--colorNeutralForeground3BrandHover)",
    colorNeutralForeground3BrandPressed: "var(--colorNeutralForeground3BrandPressed)",
    colorNeutralForeground3BrandSelected: "var(--colorNeutralForeground3BrandSelected)",
    colorNeutralForeground4: "var(--colorNeutralForeground4)",
    colorNeutralForegroundDisabled: "var(--colorNeutralForegroundDisabled)",
    colorBrandForegroundLink: "var(--colorBrandForegroundLink)",
    colorBrandForegroundLinkHover: "var(--colorBrandForegroundLinkHover)",
    colorBrandForegroundLinkPressed: "var(--colorBrandForegroundLinkPressed)",
    colorBrandForegroundLinkSelected: "var(--colorBrandForegroundLinkSelected)",
    colorNeutralForeground2Link: "var(--colorNeutralForeground2Link)",
    colorNeutralForeground2LinkHover: "var(--colorNeutralForeground2LinkHover)",
    colorNeutralForeground2LinkPressed: "var(--colorNeutralForeground2LinkPressed)",
    colorNeutralForeground2LinkSelected: "var(--colorNeutralForeground2LinkSelected)",
    colorCompoundBrandForeground1: "var(--colorCompoundBrandForeground1)",
    colorCompoundBrandForeground1Hover: "var(--colorCompoundBrandForeground1Hover)",
    colorCompoundBrandForeground1Pressed: "var(--colorCompoundBrandForeground1Pressed)",
    colorNeutralForegroundOnBrand: "var(--colorNeutralForegroundOnBrand)",
    colorNeutralForegroundInverted: "var(--colorNeutralForegroundInverted)",
    colorNeutralForegroundInvertedHover: "var(--colorNeutralForegroundInvertedHover)",
    colorNeutralForegroundInvertedPressed: "var(--colorNeutralForegroundInvertedPressed)",
    colorNeutralForegroundInvertedSelected: "var(--colorNeutralForegroundInvertedSelected)",
    colorNeutralForegroundInverted2: "var(--colorNeutralForegroundInverted2)",
    colorNeutralForegroundStaticInverted: "var(--colorNeutralForegroundStaticInverted)",
    colorNeutralForegroundInvertedLink: "var(--colorNeutralForegroundInvertedLink)",
    colorNeutralForegroundInvertedLinkHover: "var(--colorNeutralForegroundInvertedLinkHover)",
    colorNeutralForegroundInvertedLinkPressed: "var(--colorNeutralForegroundInvertedLinkPressed)",
    colorNeutralForegroundInvertedLinkSelected: "var(--colorNeutralForegroundInvertedLinkSelected)",
    colorNeutralForegroundInvertedDisabled: "var(--colorNeutralForegroundInvertedDisabled)",
    colorBrandForeground1: "var(--colorBrandForeground1)",
    colorBrandForeground2: "var(--colorBrandForeground2)",
    colorNeutralForeground1Static: "var(--colorNeutralForeground1Static)",
    colorBrandForegroundInverted: "var(--colorBrandForegroundInverted)",
    colorBrandForegroundInvertedHover: "var(--colorBrandForegroundInvertedHover)",
    colorBrandForegroundInvertedPressed: "var(--colorBrandForegroundInvertedPressed)",
    colorBrandForegroundOnLight: "var(--colorBrandForegroundOnLight)",
    colorBrandForegroundOnLightHover: "var(--colorBrandForegroundOnLightHover)",
    colorBrandForegroundOnLightPressed: "var(--colorBrandForegroundOnLightPressed)",
    colorBrandForegroundOnLightSelected: "var(--colorBrandForegroundOnLightSelected)",
    colorNeutralBackground1: "var(--colorNeutralBackground1)",
    colorNeutralBackground1Hover: "var(--colorNeutralBackground1Hover)",
    colorNeutralBackground1Pressed: "var(--colorNeutralBackground1Pressed)",
    colorNeutralBackground1Selected: "var(--colorNeutralBackground1Selected)",
    colorNeutralBackground2: "var(--colorNeutralBackground2)",
    colorNeutralBackground2Hover: "var(--colorNeutralBackground2Hover)",
    colorNeutralBackground2Pressed: "var(--colorNeutralBackground2Pressed)",
    colorNeutralBackground2Selected: "var(--colorNeutralBackground2Selected)",
    colorNeutralBackground3: "var(--colorNeutralBackground3)",
    colorNeutralBackground3Hover: "var(--colorNeutralBackground3Hover)",
    colorNeutralBackground3Pressed: "var(--colorNeutralBackground3Pressed)",
    colorNeutralBackground3Selected: "var(--colorNeutralBackground3Selected)",
    colorNeutralBackground4: "var(--colorNeutralBackground4)",
    colorNeutralBackground4Hover: "var(--colorNeutralBackground4Hover)",
    colorNeutralBackground4Pressed: "var(--colorNeutralBackground4Pressed)",
    colorNeutralBackground4Selected: "var(--colorNeutralBackground4Selected)",
    colorNeutralBackground5: "var(--colorNeutralBackground5)",
    colorNeutralBackground5Hover: "var(--colorNeutralBackground5Hover)",
    colorNeutralBackground5Pressed: "var(--colorNeutralBackground5Pressed)",
    colorNeutralBackground5Selected: "var(--colorNeutralBackground5Selected)",
    colorNeutralBackground6: "var(--colorNeutralBackground6)",
    colorNeutralBackgroundInverted: "var(--colorNeutralBackgroundInverted)",
    colorNeutralBackgroundStatic: "var(--colorNeutralBackgroundStatic)",
    colorNeutralBackgroundAlpha: "var(--colorNeutralBackgroundAlpha)",
    colorNeutralBackgroundAlpha2: "var(--colorNeutralBackgroundAlpha2)",
    colorSubtleBackground: "var(--colorSubtleBackground)",
    colorSubtleBackgroundHover: "var(--colorSubtleBackgroundHover)",
    colorSubtleBackgroundPressed: "var(--colorSubtleBackgroundPressed)",
    colorSubtleBackgroundSelected: "var(--colorSubtleBackgroundSelected)",
    colorSubtleBackgroundLightAlphaHover: "var(--colorSubtleBackgroundLightAlphaHover)",
    colorSubtleBackgroundLightAlphaPressed: "var(--colorSubtleBackgroundLightAlphaPressed)",
    colorSubtleBackgroundLightAlphaSelected: "var(--colorSubtleBackgroundLightAlphaSelected)",
    colorSubtleBackgroundInverted: "var(--colorSubtleBackgroundInverted)",
    colorSubtleBackgroundInvertedHover: "var(--colorSubtleBackgroundInvertedHover)",
    colorSubtleBackgroundInvertedPressed: "var(--colorSubtleBackgroundInvertedPressed)",
    colorSubtleBackgroundInvertedSelected: "var(--colorSubtleBackgroundInvertedSelected)",
    colorTransparentBackground: "var(--colorTransparentBackground)",
    colorTransparentBackgroundHover: "var(--colorTransparentBackgroundHover)",
    colorTransparentBackgroundPressed: "var(--colorTransparentBackgroundPressed)",
    colorTransparentBackgroundSelected: "var(--colorTransparentBackgroundSelected)",
    colorNeutralBackgroundDisabled: "var(--colorNeutralBackgroundDisabled)",
    colorNeutralBackgroundInvertedDisabled: "var(--colorNeutralBackgroundInvertedDisabled)",
    colorNeutralStencil1: "var(--colorNeutralStencil1)",
    colorNeutralStencil2: "var(--colorNeutralStencil2)",
    colorNeutralStencil1Alpha: "var(--colorNeutralStencil1Alpha)",
    colorNeutralStencil2Alpha: "var(--colorNeutralStencil2Alpha)",
    colorBackgroundOverlay: "var(--colorBackgroundOverlay)",
    colorScrollbarOverlay: "var(--colorScrollbarOverlay)",
    colorBrandBackground: "var(--colorBrandBackground)",
    colorBrandBackgroundHover: "var(--colorBrandBackgroundHover)",
    colorBrandBackgroundPressed: "var(--colorBrandBackgroundPressed)",
    colorBrandBackgroundSelected: "var(--colorBrandBackgroundSelected)",
    colorCompoundBrandBackground: "var(--colorCompoundBrandBackground)",
    colorCompoundBrandBackgroundHover: "var(--colorCompoundBrandBackgroundHover)",
    colorCompoundBrandBackgroundPressed: "var(--colorCompoundBrandBackgroundPressed)",
    colorBrandBackgroundStatic: "var(--colorBrandBackgroundStatic)",
    colorBrandBackground2: "var(--colorBrandBackground2)",
    colorBrandBackgroundInverted: "var(--colorBrandBackgroundInverted)",
    colorBrandBackgroundInvertedHover: "var(--colorBrandBackgroundInvertedHover)",
    colorBrandBackgroundInvertedPressed: "var(--colorBrandBackgroundInvertedPressed)",
    colorBrandBackgroundInvertedSelected: "var(--colorBrandBackgroundInvertedSelected)",
    colorNeutralStrokeAccessible: "var(--colorNeutralStrokeAccessible)",
    colorNeutralStrokeAccessibleHover: "var(--colorNeutralStrokeAccessibleHover)",
    colorNeutralStrokeAccessiblePressed: "var(--colorNeutralStrokeAccessiblePressed)",
    colorNeutralStrokeAccessibleSelected: "var(--colorNeutralStrokeAccessibleSelected)",
    colorNeutralStroke1: "var(--colorNeutralStroke1)",
    colorNeutralStroke1Hover: "var(--colorNeutralStroke1Hover)",
    colorNeutralStroke1Pressed: "var(--colorNeutralStroke1Pressed)",
    colorNeutralStroke1Selected: "var(--colorNeutralStroke1Selected)",
    colorNeutralStroke2: "var(--colorNeutralStroke2)",
    colorNeutralStroke3: "var(--colorNeutralStroke3)",
    colorNeutralStrokeOnBrand: "var(--colorNeutralStrokeOnBrand)",
    colorNeutralStrokeOnBrand2: "var(--colorNeutralStrokeOnBrand2)",
    colorNeutralStrokeOnBrand2Hover: "var(--colorNeutralStrokeOnBrand2Hover)",
    colorNeutralStrokeOnBrand2Pressed: "var(--colorNeutralStrokeOnBrand2Pressed)",
    colorNeutralStrokeOnBrand2Selected: "var(--colorNeutralStrokeOnBrand2Selected)",
    colorBrandStroke1: "var(--colorBrandStroke1)",
    colorBrandStroke2: "var(--colorBrandStroke2)",
    colorCompoundBrandStroke: "var(--colorCompoundBrandStroke)",
    colorCompoundBrandStrokeHover: "var(--colorCompoundBrandStrokeHover)",
    colorCompoundBrandStrokePressed: "var(--colorCompoundBrandStrokePressed)",
    colorNeutralStrokeDisabled: "var(--colorNeutralStrokeDisabled)",
    colorNeutralStrokeInvertedDisabled: "var(--colorNeutralStrokeInvertedDisabled)",
    colorTransparentStroke: "var(--colorTransparentStroke)",
    colorTransparentStrokeInteractive: "var(--colorTransparentStrokeInteractive)",
    colorTransparentStrokeDisabled: "var(--colorTransparentStrokeDisabled)",
    colorNeutralStrokeAlpha: "var(--colorNeutralStrokeAlpha)",
    colorStrokeFocus1: "var(--colorStrokeFocus1)",
    colorStrokeFocus2: "var(--colorStrokeFocus2)",
    colorNeutralShadowAmbient: "var(--colorNeutralShadowAmbient)",
    colorNeutralShadowKey: "var(--colorNeutralShadowKey)",
    colorNeutralShadowAmbientLighter: "var(--colorNeutralShadowAmbientLighter)",
    colorNeutralShadowKeyLighter: "var(--colorNeutralShadowKeyLighter)",
    colorNeutralShadowAmbientDarker: "var(--colorNeutralShadowAmbientDarker)",
    colorNeutralShadowKeyDarker: "var(--colorNeutralShadowKeyDarker)",
    colorBrandShadowAmbient: "var(--colorBrandShadowAmbient)",
    colorBrandShadowKey: "var(--colorBrandShadowKey)",
    // Color palette tokens
    // Color palette red tokens
    colorPaletteRedBackground1: "var(--colorPaletteRedBackground1)",
    colorPaletteRedBackground2: "var(--colorPaletteRedBackground2)",
    colorPaletteRedBackground3: "var(--colorPaletteRedBackground3)",
    colorPaletteRedBorderActive: "var(--colorPaletteRedBorderActive)",
    colorPaletteRedBorder1: "var(--colorPaletteRedBorder1)",
    colorPaletteRedBorder2: "var(--colorPaletteRedBorder2)",
    colorPaletteRedForeground1: "var(--colorPaletteRedForeground1)",
    colorPaletteRedForeground2: "var(--colorPaletteRedForeground2)",
    colorPaletteRedForeground3: "var(--colorPaletteRedForeground3)",
    colorPaletteRedForegroundInverted: "var(--colorPaletteRedForegroundInverted)",
    // Color palette green tokens
    colorPaletteGreenBackground1: "var(--colorPaletteGreenBackground1)",
    colorPaletteGreenBackground2: "var(--colorPaletteGreenBackground2)",
    colorPaletteGreenBackground3: "var(--colorPaletteGreenBackground3)",
    colorPaletteGreenBorderActive: "var(--colorPaletteGreenBorderActive)",
    colorPaletteGreenBorder1: "var(--colorPaletteGreenBorder1)",
    colorPaletteGreenBorder2: "var(--colorPaletteGreenBorder2)",
    colorPaletteGreenForeground1: "var(--colorPaletteGreenForeground1)",
    colorPaletteGreenForeground2: "var(--colorPaletteGreenForeground2)",
    colorPaletteGreenForeground3: "var(--colorPaletteGreenForeground3)",
    colorPaletteGreenForegroundInverted: "var(--colorPaletteGreenForegroundInverted)",
    // Color palette dark orange tokens
    colorPaletteDarkOrangeBackground1: "var(--colorPaletteDarkOrangeBackground1)",
    colorPaletteDarkOrangeBackground2: "var(--colorPaletteDarkOrangeBackground2)",
    colorPaletteDarkOrangeBackground3: "var(--colorPaletteDarkOrangeBackground3)",
    colorPaletteDarkOrangeBorderActive: "var(--colorPaletteDarkOrangeBorderActive)",
    colorPaletteDarkOrangeBorder1: "var(--colorPaletteDarkOrangeBorder1)",
    colorPaletteDarkOrangeBorder2: "var(--colorPaletteDarkOrangeBorder2)",
    colorPaletteDarkOrangeForeground1: "var(--colorPaletteDarkOrangeForeground1)",
    colorPaletteDarkOrangeForeground2: "var(--colorPaletteDarkOrangeForeground2)",
    colorPaletteDarkOrangeForeground3: "var(--colorPaletteDarkOrangeForeground3)",
    // Color palette yellow tokens
    colorPaletteYellowBackground1: "var(--colorPaletteYellowBackground1)",
    colorPaletteYellowBackground2: "var(--colorPaletteYellowBackground2)",
    colorPaletteYellowBackground3: "var(--colorPaletteYellowBackground3)",
    colorPaletteYellowBorderActive: "var(--colorPaletteYellowBorderActive)",
    colorPaletteYellowBorder1: "var(--colorPaletteYellowBorder1)",
    colorPaletteYellowBorder2: "var(--colorPaletteYellowBorder2)",
    colorPaletteYellowForeground1: "var(--colorPaletteYellowForeground1)",
    colorPaletteYellowForeground2: "var(--colorPaletteYellowForeground2)",
    colorPaletteYellowForeground3: "var(--colorPaletteYellowForeground3)",
    colorPaletteYellowForegroundInverted: "var(--colorPaletteYellowForegroundInverted)",
    // Color palette berry tokens
    colorPaletteBerryBackground1: "var(--colorPaletteBerryBackground1)",
    colorPaletteBerryBackground2: "var(--colorPaletteBerryBackground2)",
    colorPaletteBerryBackground3: "var(--colorPaletteBerryBackground3)",
    colorPaletteBerryBorderActive: "var(--colorPaletteBerryBorderActive)",
    colorPaletteBerryBorder1: "var(--colorPaletteBerryBorder1)",
    colorPaletteBerryBorder2: "var(--colorPaletteBerryBorder2)",
    colorPaletteBerryForeground1: "var(--colorPaletteBerryForeground1)",
    colorPaletteBerryForeground2: "var(--colorPaletteBerryForeground2)",
    colorPaletteBerryForeground3: "var(--colorPaletteBerryForeground3)",
    // Color palette marigold tokens
    colorPaletteMarigoldBackground1: "var(--colorPaletteMarigoldBackground1)",
    colorPaletteMarigoldBackground2: "var(--colorPaletteMarigoldBackground2)",
    colorPaletteMarigoldBackground3: "var(--colorPaletteMarigoldBackground3)",
    colorPaletteMarigoldBorderActive: "var(--colorPaletteMarigoldBorderActive)",
    colorPaletteMarigoldBorder1: "var(--colorPaletteMarigoldBorder1)",
    colorPaletteMarigoldBorder2: "var(--colorPaletteMarigoldBorder2)",
    colorPaletteMarigoldForeground1: "var(--colorPaletteMarigoldForeground1)",
    colorPaletteMarigoldForeground2: "var(--colorPaletteMarigoldForeground2)",
    colorPaletteMarigoldForeground3: "var(--colorPaletteMarigoldForeground3)",
    // Color palette light green tokens
    colorPaletteLightGreenBackground1: "var(--colorPaletteLightGreenBackground1)",
    colorPaletteLightGreenBackground2: "var(--colorPaletteLightGreenBackground2)",
    colorPaletteLightGreenBackground3: "var(--colorPaletteLightGreenBackground3)",
    colorPaletteLightGreenBorderActive: "var(--colorPaletteLightGreenBorderActive)",
    colorPaletteLightGreenBorder1: "var(--colorPaletteLightGreenBorder1)",
    colorPaletteLightGreenBorder2: "var(--colorPaletteLightGreenBorder2)",
    colorPaletteLightGreenForeground1: "var(--colorPaletteLightGreenForeground1)",
    colorPaletteLightGreenForeground2: "var(--colorPaletteLightGreenForeground2)",
    colorPaletteLightGreenForeground3: "var(--colorPaletteLightGreenForeground3)",
    // Color palette anchor tokens
    colorPaletteAnchorBackground2: "var(--colorPaletteAnchorBackground2)",
    colorPaletteAnchorBorderActive: "var(--colorPaletteAnchorBorderActive)",
    colorPaletteAnchorForeground2: "var(--colorPaletteAnchorForeground2)",
    // Color palette beige tokens
    colorPaletteBeigeBackground2: "var(--colorPaletteBeigeBackground2)",
    colorPaletteBeigeBorderActive: "var(--colorPaletteBeigeBorderActive)",
    colorPaletteBeigeForeground2: "var(--colorPaletteBeigeForeground2)",
    // Color palette blue tokens
    colorPaletteBlueBackground2: "var(--colorPaletteBlueBackground2)",
    colorPaletteBlueBorderActive: "var(--colorPaletteBlueBorderActive)",
    colorPaletteBlueForeground2: "var(--colorPaletteBlueForeground2)",
    // Color palette brass tokens
    colorPaletteBrassBackground2: "var(--colorPaletteBrassBackground2)",
    colorPaletteBrassBorderActive: "var(--colorPaletteBrassBorderActive)",
    colorPaletteBrassForeground2: "var(--colorPaletteBrassForeground2)",
    // Color palette brown tokens
    colorPaletteBrownBackground2: "var(--colorPaletteBrownBackground2)",
    colorPaletteBrownBorderActive: "var(--colorPaletteBrownBorderActive)",
    colorPaletteBrownForeground2: "var(--colorPaletteBrownForeground2)",
    // Color palette cornflower tokens
    colorPaletteCornflowerBackground2: "var(--colorPaletteCornflowerBackground2)",
    colorPaletteCornflowerBorderActive: "var(--colorPaletteCornflowerBorderActive)",
    colorPaletteCornflowerForeground2: "var(--colorPaletteCornflowerForeground2)",
    // Color palette cranberry tokens
    colorPaletteCranberryBackground2: "var(--colorPaletteCranberryBackground2)",
    colorPaletteCranberryBorderActive: "var(--colorPaletteCranberryBorderActive)",
    colorPaletteCranberryForeground2: "var(--colorPaletteCranberryForeground2)",
    // Color palette dark green tokens
    colorPaletteDarkGreenBackground2: "var(--colorPaletteDarkGreenBackground2)",
    colorPaletteDarkGreenBorderActive: "var(--colorPaletteDarkGreenBorderActive)",
    colorPaletteDarkGreenForeground2: "var(--colorPaletteDarkGreenForeground2)",
    // Color palette dark red tokens
    colorPaletteDarkRedBackground2: "var(--colorPaletteDarkRedBackground2)",
    colorPaletteDarkRedBorderActive: "var(--colorPaletteDarkRedBorderActive)",
    colorPaletteDarkRedForeground2: "var(--colorPaletteDarkRedForeground2)",
    // Color palette forest tokens
    colorPaletteForestBackground2: "var(--colorPaletteForestBackground2)",
    colorPaletteForestBorderActive: "var(--colorPaletteForestBorderActive)",
    colorPaletteForestForeground2: "var(--colorPaletteForestForeground2)",
    // Color palette gold tokens
    colorPaletteGoldBackground2: "var(--colorPaletteGoldBackground2)",
    colorPaletteGoldBorderActive: "var(--colorPaletteGoldBorderActive)",
    colorPaletteGoldForeground2: "var(--colorPaletteGoldForeground2)",
    // Color palette grape tokens
    colorPaletteGrapeBackground2: "var(--colorPaletteGrapeBackground2)",
    colorPaletteGrapeBorderActive: "var(--colorPaletteGrapeBorderActive)",
    colorPaletteGrapeForeground2: "var(--colorPaletteGrapeForeground2)",
    // Color palette lavender tokens
    colorPaletteLavenderBackground2: "var(--colorPaletteLavenderBackground2)",
    colorPaletteLavenderBorderActive: "var(--colorPaletteLavenderBorderActive)",
    colorPaletteLavenderForeground2: "var(--colorPaletteLavenderForeground2)",
    // Color palette light teal tokens
    colorPaletteLightTealBackground2: "var(--colorPaletteLightTealBackground2)",
    colorPaletteLightTealBorderActive: "var(--colorPaletteLightTealBorderActive)",
    colorPaletteLightTealForeground2: "var(--colorPaletteLightTealForeground2)",
    // Color palette lilac tokens
    colorPaletteLilacBackground2: "var(--colorPaletteLilacBackground2)",
    colorPaletteLilacBorderActive: "var(--colorPaletteLilacBorderActive)",
    colorPaletteLilacForeground2: "var(--colorPaletteLilacForeground2)",
    // Color palette magenta tokens
    colorPaletteMagentaBackground2: "var(--colorPaletteMagentaBackground2)",
    colorPaletteMagentaBorderActive: "var(--colorPaletteMagentaBorderActive)",
    colorPaletteMagentaForeground2: "var(--colorPaletteMagentaForeground2)",
    // Color palette mink tokens
    colorPaletteMinkBackground2: "var(--colorPaletteMinkBackground2)",
    colorPaletteMinkBorderActive: "var(--colorPaletteMinkBorderActive)",
    colorPaletteMinkForeground2: "var(--colorPaletteMinkForeground2)",
    // Color palette navy tokens
    colorPaletteNavyBackground2: "var(--colorPaletteNavyBackground2)",
    colorPaletteNavyBorderActive: "var(--colorPaletteNavyBorderActive)",
    colorPaletteNavyForeground2: "var(--colorPaletteNavyForeground2)",
    // Color palette peach tokens
    colorPalettePeachBackground2: "var(--colorPalettePeachBackground2)",
    colorPalettePeachBorderActive: "var(--colorPalettePeachBorderActive)",
    colorPalettePeachForeground2: "var(--colorPalettePeachForeground2)",
    // Color palette pink tokens
    colorPalettePinkBackground2: "var(--colorPalettePinkBackground2)",
    colorPalettePinkBorderActive: "var(--colorPalettePinkBorderActive)",
    colorPalettePinkForeground2: "var(--colorPalettePinkForeground2)",
    // Color palette platinum tokens
    colorPalettePlatinumBackground2: "var(--colorPalettePlatinumBackground2)",
    colorPalettePlatinumBorderActive: "var(--colorPalettePlatinumBorderActive)",
    colorPalettePlatinumForeground2: "var(--colorPalettePlatinumForeground2)",
    // Color palette plum tokens
    colorPalettePlumBackground2: "var(--colorPalettePlumBackground2)",
    colorPalettePlumBorderActive: "var(--colorPalettePlumBorderActive)",
    colorPalettePlumForeground2: "var(--colorPalettePlumForeground2)",
    // Color palette pumpkin tokens
    colorPalettePumpkinBackground2: "var(--colorPalettePumpkinBackground2)",
    colorPalettePumpkinBorderActive: "var(--colorPalettePumpkinBorderActive)",
    colorPalettePumpkinForeground2: "var(--colorPalettePumpkinForeground2)",
    // Color palette purple tokens
    colorPalettePurpleBackground2: "var(--colorPalettePurpleBackground2)",
    colorPalettePurpleBorderActive: "var(--colorPalettePurpleBorderActive)",
    colorPalettePurpleForeground2: "var(--colorPalettePurpleForeground2)",
    // Color palette royal blue tokens
    colorPaletteRoyalBlueBackground2: "var(--colorPaletteRoyalBlueBackground2)",
    colorPaletteRoyalBlueBorderActive: "var(--colorPaletteRoyalBlueBorderActive)",
    colorPaletteRoyalBlueForeground2: "var(--colorPaletteRoyalBlueForeground2)",
    // Color palette seafoam tokens
    colorPaletteSeafoamBackground2: "var(--colorPaletteSeafoamBackground2)",
    colorPaletteSeafoamBorderActive: "var(--colorPaletteSeafoamBorderActive)",
    colorPaletteSeafoamForeground2: "var(--colorPaletteSeafoamForeground2)",
    // Color palette steel tokens
    colorPaletteSteelBackground2: "var(--colorPaletteSteelBackground2)",
    colorPaletteSteelBorderActive: "var(--colorPaletteSteelBorderActive)",
    colorPaletteSteelForeground2: "var(--colorPaletteSteelForeground2)",
    // Color palette teal tokens
    colorPaletteTealBackground2: "var(--colorPaletteTealBackground2)",
    colorPaletteTealBorderActive: "var(--colorPaletteTealBorderActive)",
    colorPaletteTealForeground2: "var(--colorPaletteTealForeground2)",
    // Border radius tokens
    borderRadiusNone: "var(--borderRadiusNone)",
    borderRadiusSmall: "var(--borderRadiusSmall)",
    borderRadiusMedium: "var(--borderRadiusMedium)",
    borderRadiusLarge: "var(--borderRadiusLarge)",
    borderRadiusXLarge: "var(--borderRadiusXLarge)",
    borderRadiusCircular: "var(--borderRadiusCircular)",
    // Font family tokens
    fontFamilyBase: "var(--fontFamilyBase)",
    fontFamilyMonospace: "var(--fontFamilyMonospace)",
    fontFamilyNumeric: "var(--fontFamilyNumeric)",
    // Font size tokens
    fontSizeBase100: "var(--fontSizeBase100)",
    fontSizeBase200: "var(--fontSizeBase200)",
    fontSizeBase300: "var(--fontSizeBase300)",
    fontSizeBase400: "var(--fontSizeBase400)",
    fontSizeBase500: "var(--fontSizeBase500)",
    fontSizeBase600: "var(--fontSizeBase600)",
    fontSizeHero700: "var(--fontSizeHero700)",
    fontSizeHero800: "var(--fontSizeHero800)",
    fontSizeHero900: "var(--fontSizeHero900)",
    fontSizeHero1000: "var(--fontSizeHero1000)",
    // Font weight tokens
    fontWeightRegular: "var(--fontWeightRegular)",
    fontWeightMedium: "var(--fontWeightMedium)",
    fontWeightSemibold: "var(--fontWeightSemibold)",
    fontWeightBold: "var(--fontWeightBold)",
    // Line height tokens
    lineHeightBase100: "var(--lineHeightBase100)",
    lineHeightBase200: "var(--lineHeightBase200)",
    lineHeightBase300: "var(--lineHeightBase300)",
    lineHeightBase400: "var(--lineHeightBase400)",
    lineHeightBase500: "var(--lineHeightBase500)",
    lineHeightBase600: "var(--lineHeightBase600)",
    lineHeightHero700: "var(--lineHeightHero700)",
    lineHeightHero800: "var(--lineHeightHero800)",
    lineHeightHero900: "var(--lineHeightHero900)",
    lineHeightHero1000: "var(--lineHeightHero1000)",
    // Shadow tokens
    shadow2: "var(--shadow2)",
    shadow4: "var(--shadow4)",
    shadow8: "var(--shadow8)",
    shadow16: "var(--shadow16)",
    shadow28: "var(--shadow28)",
    shadow64: "var(--shadow64)",
    // Shadow brand tokens
    shadow2Brand: "var(--shadow2Brand)",
    shadow4Brand: "var(--shadow4Brand)",
    shadow8Brand: "var(--shadow8Brand)",
    shadow16Brand: "var(--shadow16Brand)",
    shadow28Brand: "var(--shadow28Brand)",
    shadow64Brand: "var(--shadow64Brand)",
    // Stroke width tokens
    strokeWidthThin: "var(--strokeWidthThin)",
    strokeWidthThick: "var(--strokeWidthThick)",
    strokeWidthThicker: "var(--strokeWidthThicker)",
    strokeWidthThickest: "var(--strokeWidthThickest)",
    // Spacings
    spacingHorizontalNone: "var(--spacingHorizontalNone)",
    spacingHorizontalXXS: "var(--spacingHorizontalXXS)",
    spacingHorizontalXS: "var(--spacingHorizontalXS)",
    spacingHorizontalSNudge: "var(--spacingHorizontalSNudge)",
    spacingHorizontalS: "var(--spacingHorizontalS)",
    spacingHorizontalMNudge: "var(--spacingHorizontalMNudge)",
    spacingHorizontalM: "var(--spacingHorizontalM)",
    spacingHorizontalL: "var(--spacingHorizontalL)",
    spacingHorizontalXL: "var(--spacingHorizontalXL)",
    spacingHorizontalXXL: "var(--spacingHorizontalXXL)",
    spacingHorizontalXXXL: "var(--spacingHorizontalXXXL)",
    spacingVerticalNone: "var(--spacingVerticalNone)",
    spacingVerticalXXS: "var(--spacingVerticalXXS)",
    spacingVerticalXS: "var(--spacingVerticalXS)",
    spacingVerticalSNudge: "var(--spacingVerticalSNudge)",
    spacingVerticalS: "var(--spacingVerticalS)",
    spacingVerticalMNudge: "var(--spacingVerticalMNudge)",
    spacingVerticalM: "var(--spacingVerticalM)",
    spacingVerticalL: "var(--spacingVerticalL)",
    spacingVerticalXL: "var(--spacingVerticalXL)",
    spacingVerticalXXL: "var(--spacingVerticalXXL)",
    spacingVerticalXXXL: "var(--spacingVerticalXXXL)",
    // Durations
    durationUltraFast: "var(--durationUltraFast)",
    durationFaster: "var(--durationFaster)",
    durationFast: "var(--durationFast)",
    durationNormal: "var(--durationNormal)",
    durationSlow: "var(--durationSlow)",
    durationSlower: "var(--durationSlower)",
    durationUltraSlow: "var(--durationUltraSlow)",
    // Curves
    curveAccelerateMax: "var(--curveAccelerateMax)",
    curveAccelerateMid: "var(--curveAccelerateMid)",
    curveAccelerateMin: "var(--curveAccelerateMin)",
    curveDecelerateMax: "var(--curveDecelerateMax)",
    curveDecelerateMid: "var(--curveDecelerateMid)",
    curveDecelerateMin: "var(--curveDecelerateMin)",
    curveEasyEaseMax: "var(--curveEasyEaseMax)",
    curveEasyEase: "var(--curveEasyEase)",
    curveLinear: "var(--curveLinear)"
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/utils/shadows.js
  init_define_process();
  init_define_process_env();
  function createShadowTokens(ambientColor, keyColor, tokenSuffix = "") {
    return {
      [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
      [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
      [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
      [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
      [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
      [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`
    };
  }

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/global/brandColors.js
  init_define_process();
  init_define_process_env();
  var brandWeb = {
    10: `#061724`,
    20: `#082338`,
    30: `#0a2e4a`,
    40: `#0c3b5e`,
    50: `#0e4775`,
    60: `#0f548c`,
    70: `#115ea3`,
    80: `#0f6cbd`,
    90: `#2886de`,
    100: `#479ef5`,
    110: `#62abf5`,
    120: `#77b7f7`,
    130: `#96c6fa`,
    140: `#b4d6fa`,
    150: `#cfe4fa`,
    160: `#ebf3fc`
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/alias/darkColorPalette.js
  init_define_process();
  init_define_process_env();
  var statusColorPaletteTokens = /* @__PURE__ */ statusSharedColorNames.reduce((acc, sharedColor) => {
    const color3 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color3}Background1`]: statusSharedColors[sharedColor].shade40,
      [`colorPalette${color3}Background2`]: statusSharedColors[sharedColor].shade30,
      [`colorPalette${color3}Background3`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color3}Foreground1`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color3}Foreground2`]: statusSharedColors[sharedColor].tint40,
      [`colorPalette${color3}Foreground3`]: statusSharedColors[sharedColor].tint20,
      [`colorPalette${color3}BorderActive`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color3}Border1`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color3}Border2`]: statusSharedColors[sharedColor].tint20
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary;
  statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.primary;
  statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.shade30;
  var personaColorPaletteTokens = /* @__PURE__ */ personaSharedColorNames.reduce((acc, sharedColor) => {
    const color3 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color3}Background2`]: personaSharedColors[sharedColor].shade30,
      [`colorPalette${color3}Foreground2`]: personaSharedColors[sharedColor].tint40,
      [`colorPalette${color3}BorderActive`]: personaSharedColors[sharedColor].tint30
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20;
  personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20;
  var colorPaletteTokens = {
    ...statusColorPaletteTokens,
    ...personaColorPaletteTokens
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/themes/web/darkTheme.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/utils/createDarkTheme.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/alias/darkColor.js
  init_define_process();
  init_define_process_env();
  var generateColorTokens = (brand) => ({
    colorNeutralForeground1: white,
    colorNeutralForeground1Hover: white,
    colorNeutralForeground1Pressed: white,
    colorNeutralForeground1Selected: white,
    colorNeutralForeground2: grey[84],
    colorNeutralForeground2Hover: white,
    colorNeutralForeground2Pressed: white,
    colorNeutralForeground2Selected: white,
    colorNeutralForeground2BrandHover: brand[100],
    colorNeutralForeground2BrandPressed: brand[90],
    colorNeutralForeground2BrandSelected: brand[100],
    colorNeutralForeground3: grey[68],
    colorNeutralForeground3Hover: grey[84],
    colorNeutralForeground3Pressed: grey[84],
    colorNeutralForeground3Selected: grey[84],
    colorNeutralForeground3BrandHover: brand[100],
    colorNeutralForeground3BrandPressed: brand[90],
    colorNeutralForeground3BrandSelected: brand[100],
    colorNeutralForeground4: grey[60],
    colorNeutralForegroundDisabled: grey[36],
    colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
    colorBrandForegroundLink: brand[100],
    colorBrandForegroundLinkHover: brand[110],
    colorBrandForegroundLinkPressed: brand[90],
    colorBrandForegroundLinkSelected: brand[100],
    colorNeutralForeground2Link: grey[84],
    colorNeutralForeground2LinkHover: white,
    colorNeutralForeground2LinkPressed: white,
    colorNeutralForeground2LinkSelected: white,
    colorCompoundBrandForeground1: brand[100],
    colorCompoundBrandForeground1Hover: brand[110],
    colorCompoundBrandForeground1Pressed: brand[90],
    colorBrandForeground1: brand[100],
    colorBrandForeground2: brand[110],
    colorNeutralForeground1Static: grey[14],
    colorNeutralForegroundStaticInverted: white,
    colorNeutralForegroundInverted: grey[14],
    colorNeutralForegroundInvertedHover: grey[14],
    colorNeutralForegroundInvertedPressed: grey[14],
    colorNeutralForegroundInvertedSelected: grey[14],
    colorNeutralForegroundInverted2: grey[14],
    colorNeutralForegroundOnBrand: white,
    colorNeutralForegroundInvertedLink: white,
    colorNeutralForegroundInvertedLinkHover: white,
    colorNeutralForegroundInvertedLinkPressed: white,
    colorNeutralForegroundInvertedLinkSelected: white,
    colorBrandForegroundInverted: brand[80],
    colorBrandForegroundInvertedHover: brand[70],
    colorBrandForegroundInvertedPressed: brand[60],
    colorBrandForegroundOnLight: brand[80],
    colorBrandForegroundOnLightHover: brand[70],
    colorBrandForegroundOnLightPressed: brand[50],
    colorBrandForegroundOnLightSelected: brand[60],
    colorNeutralBackground1: grey[16],
    colorNeutralBackground1Hover: grey[24],
    colorNeutralBackground1Pressed: grey[12],
    colorNeutralBackground1Selected: grey[22],
    colorNeutralBackground2: grey[12],
    colorNeutralBackground2Hover: grey[20],
    colorNeutralBackground2Pressed: grey[8],
    colorNeutralBackground2Selected: grey[18],
    colorNeutralBackground3: grey[8],
    colorNeutralBackground3Hover: grey[16],
    colorNeutralBackground3Pressed: grey[4],
    colorNeutralBackground3Selected: grey[14],
    colorNeutralBackground4: grey[4],
    colorNeutralBackground4Hover: grey[12],
    colorNeutralBackground4Pressed: black,
    colorNeutralBackground4Selected: grey[10],
    colorNeutralBackground5: black,
    colorNeutralBackground5Hover: grey[8],
    colorNeutralBackground5Pressed: grey[2],
    colorNeutralBackground5Selected: grey[6],
    colorNeutralBackground6: grey[20],
    colorNeutralBackgroundInverted: white,
    colorNeutralBackgroundStatic: grey[24],
    colorNeutralBackgroundAlpha: grey10Alpha[50],
    colorNeutralBackgroundAlpha2: grey12Alpha[70],
    colorSubtleBackground: "transparent",
    colorSubtleBackgroundHover: grey[22],
    colorSubtleBackgroundPressed: grey[18],
    colorSubtleBackgroundSelected: grey[20],
    colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
    colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
    colorSubtleBackgroundLightAlphaSelected: "transparent",
    colorSubtleBackgroundInverted: "transparent",
    colorSubtleBackgroundInvertedHover: blackAlpha[10],
    colorSubtleBackgroundInvertedPressed: blackAlpha[30],
    colorSubtleBackgroundInvertedSelected: blackAlpha[20],
    colorTransparentBackground: "transparent",
    colorTransparentBackgroundHover: "transparent",
    colorTransparentBackgroundPressed: "transparent",
    colorTransparentBackgroundSelected: "transparent",
    colorNeutralBackgroundDisabled: grey[8],
    colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
    colorNeutralStencil1: grey[34],
    colorNeutralStencil2: grey[20],
    colorNeutralStencil1Alpha: whiteAlpha[10],
    colorNeutralStencil2Alpha: whiteAlpha[5],
    colorBackgroundOverlay: blackAlpha[50],
    colorScrollbarOverlay: whiteAlpha[60],
    colorBrandBackground: brand[70],
    colorBrandBackgroundHover: brand[80],
    colorBrandBackgroundPressed: brand[40],
    colorBrandBackgroundSelected: brand[60],
    colorCompoundBrandBackground: brand[100],
    colorCompoundBrandBackgroundHover: brand[110],
    colorCompoundBrandBackgroundPressed: brand[90],
    colorBrandBackgroundStatic: brand[80],
    colorBrandBackground2: brand[40],
    colorBrandBackgroundInverted: white,
    colorBrandBackgroundInvertedHover: brand[160],
    colorBrandBackgroundInvertedPressed: brand[140],
    colorBrandBackgroundInvertedSelected: brand[150],
    colorNeutralStrokeAccessible: grey[68],
    colorNeutralStrokeAccessibleHover: grey[74],
    colorNeutralStrokeAccessiblePressed: grey[70],
    colorNeutralStrokeAccessibleSelected: brand[100],
    colorNeutralStroke1: grey[40],
    colorNeutralStroke1Hover: grey[46],
    colorNeutralStroke1Pressed: grey[42],
    colorNeutralStroke1Selected: grey[44],
    colorNeutralStroke2: grey[32],
    colorNeutralStroke3: grey[24],
    colorNeutralStrokeOnBrand: grey[16],
    colorNeutralStrokeOnBrand2: white,
    colorNeutralStrokeOnBrand2Hover: white,
    colorNeutralStrokeOnBrand2Pressed: white,
    colorNeutralStrokeOnBrand2Selected: white,
    colorBrandStroke1: brand[100],
    colorBrandStroke2: brand[50],
    colorCompoundBrandStroke: brand[100],
    colorCompoundBrandStrokeHover: brand[110],
    colorCompoundBrandStrokePressed: brand[90],
    colorNeutralStrokeDisabled: grey[26],
    colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
    colorTransparentStroke: "transparent",
    colorTransparentStrokeInteractive: "transparent",
    colorTransparentStrokeDisabled: "transparent",
    colorNeutralStrokeAlpha: whiteAlpha[10],
    colorStrokeFocus1: black,
    colorStrokeFocus2: white,
    colorNeutralShadowAmbient: "rgba(0,0,0,0.24)",
    colorNeutralShadowKey: "rgba(0,0,0,0.28)",
    colorNeutralShadowAmbientLighter: "rgba(0,0,0,0.12)",
    colorNeutralShadowKeyLighter: "rgba(0,0,0,0.14)",
    colorNeutralShadowAmbientDarker: "rgba(0,0,0,0.40)",
    colorNeutralShadowKeyDarker: "rgba(0,0,0,0.48)",
    colorBrandShadowAmbient: "rgba(0,0,0,0.30)",
    colorBrandShadowKey: "rgba(0,0,0,0.25)"
  });

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/utils/createDarkTheme.js
  var createDarkTheme = (brand) => {
    const colorTokens = generateColorTokens(brand);
    return {
      ...borderRadius3,
      ...fontSizes,
      ...lineHeights,
      ...fontFamilies,
      ...fontWeights,
      ...strokeWidths,
      ...horizontalSpacings,
      ...verticalSpacings,
      ...durations,
      ...curves,
      ...colorTokens,
      ...colorPaletteTokens,
      ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
      ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, "Brand")
    };
  };

  // node_modules/.pnpm/@fluentui+tokens@1.0.0-alpha.4/node_modules/@fluentui/tokens/lib/themes/web/darkTheme.js
  var webDarkTheme = /* @__PURE__ */ createDarkTheme(brandWeb);

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var React32 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  init_define_process();
  init_define_process_env();
  var React31 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderStyles.js
  init_define_process();
  init_define_process_env();
  var fluentProviderClassNames = {
    root: "fui-FluentProvider"
  };
  var useStyles = /* @__PURE__ */ __styles({
    root: {
      sj55zd: "f19n0e5",
      De3pzq: "fxugw4r",
      fsow6f: ["f1o700av", "fes3tcz"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useFluentProviderStyles_unstable = (state) => {
    const renderer = useRenderer();
    const styles = useStyles({
      dir: state.dir,
      renderer
    });
    state.root.className = mergeClasses(fluentProviderClassNames.root, state.themeClassName, styles.root, state.root.className);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  var useInsertionEffect2 = React31["useInsertionEffect"] ? React31["useInsertionEffect"] : useIsomorphicLayoutEffect;
  var createStyleTag = (target, elementAttributes) => {
    if (!target) {
      return void 0;
    }
    const tag = target.createElement("style");
    Object.keys(elementAttributes).forEach((attrName) => {
      tag.setAttribute(attrName, elementAttributes[attrName]);
    });
    target.head.appendChild(tag);
    return tag;
  };
  var insertSheet = (tag, rule) => {
    const sheet = tag.sheet;
    if (sheet) {
      if (sheet.cssRules.length > 0) {
        sheet.deleteRule(0);
      }
      sheet.insertRule(rule, 0);
    } else if (true) {
      console.error("FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.");
    }
  };
  var useFluentProviderThemeStyleTag = (options) => {
    const {
      targetDocument,
      theme,
      rendererAttributes
    } = options;
    const styleTag = React31.useRef();
    const styleTagId = useId2(fluentProviderClassNames.root);
    const styleElementAttributes = rendererAttributes;
    const cssVarsAsString = React31.useMemo(() => {
      return theme ? Object.keys(theme).reduce((cssVarRule, cssVar) => {
        cssVarRule += `--${cssVar}: ${theme[cssVar]}; `;
        return cssVarRule;
      }, "") : "";
    }, [theme]);
    const rule = `.${styleTagId} { ${cssVarsAsString} }`;
    useHandleSSRStyleElements(targetDocument, styleTagId);
    useInsertionEffect2(() => {
      const ssrStyleElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.getElementById(styleTagId);
      if (ssrStyleElement) {
        styleTag.current = ssrStyleElement;
      } else {
        styleTag.current = createStyleTag(targetDocument, {
          ...styleElementAttributes,
          id: styleTagId
        });
        if (styleTag.current) {
          insertSheet(styleTag.current, rule);
        }
      }
      return () => {
        var _styleTag_current;
        (_styleTag_current = styleTag.current) === null || _styleTag_current === void 0 ? void 0 : _styleTag_current.remove();
      };
    }, [styleTagId, targetDocument, rule, styleElementAttributes]);
    return {
      styleTagId,
      rule
    };
  };
  function useHandleSSRStyleElements(targetDocument, styleTagId) {
    React31.useState(() => {
      if (!targetDocument) {
        return;
      }
      const themeStyleElement = targetDocument.getElementById(styleTagId);
      if (themeStyleElement) {
        targetDocument.head.append(themeStyleElement);
      }
    });
  }

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var useFluentProvider_unstable = (props, ref) => {
    const parentContext = useFluent();
    const parentTheme = useTheme();
    const parentOverrides = useOverrides();
    const parentCustomStyleHooks = useCustomStyleHooks();
    const {
      applyStylesToPortals = true,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir = parentContext.dir,
      targetDocument = parentContext.targetDocument,
      theme,
      overrides_unstable: overrides = {}
    } = props;
    const mergedTheme = shallowMerge(parentTheme, theme);
    const mergedOverrides = shallowMerge(parentOverrides, overrides);
    const mergedCustomStyleHooks = shallowMerge(parentCustomStyleHooks, customStyleHooks_unstable);
    React32.useEffect(() => {
      if (mergedTheme === void 0) {
        console.warn(`
      FluentProvider: your "theme" is not defined !
      =============================================
      Make sure your root FluentProvider has set a theme or you're setting the theme in your child FluentProvider.
      `);
      }
    }, []);
    const renderer = useRenderer();
    var _renderer_styleElementAttributes;
    const {
      styleTagId,
      rule
    } = useFluentProviderThemeStyleTag({
      theme: mergedTheme,
      targetDocument,
      rendererAttributes: (_renderer_styleElementAttributes = renderer.styleElementAttributes) !== null && _renderer_styleElementAttributes !== void 0 ? _renderer_styleElementAttributes : {}
    });
    return {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable: mergedCustomStyleHooks,
      dir,
      targetDocument,
      theme: mergedTheme,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable: mergedOverrides,
      themeClassName: styleTagId,
      components: {
        root: "div"
      },
      root: getNativeElementProps("div", {
        ...props,
        dir,
        ref: useMergedRefs(ref, useFocusVisible({
          targetDocument
        }))
      }),
      serverStyleProps: {
        cssRule: rule,
        attributes: {
          ...renderer.styleElementAttributes,
          id: styleTagId
        }
      }
    };
  };
  function shallowMerge(a4, b5) {
    if (a4 && b5) {
      return {
        ...a4,
        ...b5
      };
    }
    if (a4) {
      return a4;
    }
    return b5;
  }
  function useTheme() {
    return React32.useContext(ThemeContext);
  }

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderContextValues.js
  init_define_process();
  init_define_process_env();
  var React33 = __toESM(require_react());
  function useFluentProviderContextValues_unstable(state) {
    const {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir,
      root: root3,
      targetDocument,
      theme,
      themeClassName,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable
    } = state;
    const provider = React33.useMemo(() => ({
      dir,
      targetDocument
    }), [dir, targetDocument]);
    const [tooltip] = React33.useState(() => ({}));
    return {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable,
      provider,
      textDirection: dir,
      tooltip,
      theme,
      themeClassName: applyStylesToPortals ? root3.className : themeClassName
    };
  }

  // node_modules/.pnpm/@fluentui+react-provider@9.5.4_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var FluentProvider = /* @__PURE__ */ React34.forwardRef((props, ref) => {
    const state = useFluentProvider_unstable(props, ref);
    useFluentProviderStyles_unstable(state);
    const contextValues = useFluentProviderContextValues_unstable(state);
    return renderFluentProvider_unstable(state, contextValues);
  });
  FluentProvider.displayName = "FluentProvider";

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-d_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-d_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/createContext.js
  init_define_process();
  init_define_process_env();
  var React35 = __toESM(require_react());
  var import_scheduler = __toESM(require_scheduler2());
  var createProvider = (Original) => {
    const Provider3 = (props) => {
      const valueRef = React35.useRef(props.value);
      const versionRef = React35.useRef(0);
      const contextValue = React35.useRef();
      if (!contextValue.current) {
        contextValue.current = {
          value: valueRef,
          version: versionRef,
          listeners: []
        };
      }
      useIsomorphicLayoutEffect(() => {
        valueRef.current = props.value;
        versionRef.current += 1;
        (0, import_scheduler.unstable_runWithPriority)(import_scheduler.unstable_NormalPriority, () => {
          contextValue.current.listeners.forEach((listener) => {
            listener([versionRef.current, props.value]);
          });
        });
      }, [props.value]);
      return /* @__PURE__ */ React35.createElement(Original, {
        value: contextValue.current
      }, props.children);
    };
    if (true) {
      Provider3.displayName = "ContextSelector.Provider";
    }
    return Provider3;
  };
  var createContext12 = (defaultValue) => {
    const context = /* @__PURE__ */ React35.createContext({
      value: {
        current: defaultValue
      },
      version: {
        current: -1
      },
      listeners: []
    });
    context.Provider = createProvider(context.Provider);
    delete context.Consumer;
    return context;
  };

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-d_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/useContextSelector.js
  init_define_process();
  init_define_process_env();
  var React36 = __toESM(require_react());
  var useContextSelector = (context, selector2) => {
    const contextValue = React36.useContext(context);
    const {
      value: {
        current: value
      },
      version: {
        current: version2
      },
      listeners
    } = contextValue;
    const selected = selector2(value);
    const [state, dispatch2] = React36.useReducer((prevState, payload) => {
      if (!payload) {
        return [value, selected];
      }
      if (payload[0] <= version2) {
        if (objectIs(prevState[1], selected)) {
          return prevState;
        }
        return [value, selected];
      }
      try {
        if (objectIs(prevState[0], payload[1])) {
          return prevState;
        }
        const nextSelected = selector2(payload[1]);
        if (objectIs(prevState[1], nextSelected)) {
          return prevState;
        }
        return [payload[1], nextSelected];
      } catch (e3) {
      }
      return [prevState[0], prevState[1]];
    }, [value, selected]);
    if (!objectIs(state[1], selected)) {
      dispatch2(void 0);
    }
    useIsomorphicLayoutEffect(() => {
      listeners.push(dispatch2);
      return () => {
        const index = listeners.indexOf(dispatch2);
        listeners.splice(index, 1);
      };
    }, [listeners]);
    return state[1];
  };
  function is(x3, y4) {
    return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
  }
  var objectIs = (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore fallback to native if it exists (not in IE11)
    typeof Object.is === "function" ? Object.is : is
  );

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-d_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/useHasParentContext.js
  init_define_process();
  init_define_process_env();
  var React37 = __toESM(require_react());
  function useHasParentContext(context) {
    const contextValue = React37.useContext(context);
    if (contextValue.version) {
      return contextValue.version.current !== -1;
    }
    return false;
  }

  // node_modules/.pnpm/@fluentui+react-aria@9.3.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-aria/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-aria@9.3.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+keyboard-keys@9.0.2/node_modules/@fluentui/keyboard-keys/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+keyboard-keys@9.0.2/node_modules/@fluentui/keyboard-keys/lib/keys.js
  init_define_process();
  init_define_process_env();
  var Enter = "Enter";
  var Space = " ";
  var Tab = "Tab";
  var ArrowDown = "ArrowDown";
  var ArrowLeft = "ArrowLeft";
  var ArrowRight = "ArrowRight";
  var ArrowUp = "ArrowUp";
  var End = "End";
  var Home = "Home";
  var PageDown = "PageDown";
  var PageUp = "PageUp";
  var Escape = "Escape";

  // node_modules/.pnpm/@fluentui+react-aria@9.3.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  var React38 = __toESM(require_react());
  function useARIAButtonProps(type, props) {
    const {
      disabled,
      disabledFocusable = false,
      ["aria-disabled"]: ariaDisabled,
      onClick,
      onKeyDown,
      onKeyUp,
      ...rest
    } = props !== null && props !== void 0 ? props : {};
    const normalizedARIADisabled = typeof ariaDisabled === "string" ? ariaDisabled === "true" : ariaDisabled;
    const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;
    const handleClick = useEventCallback((ev) => {
      if (isDisabled) {
        ev.preventDefault();
        ev.stopPropagation();
      } else {
        onClick === null || onClick === void 0 ? void 0 : onClick(ev);
      }
    });
    const handleKeyDown = useEventCallback((ev) => {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        return;
      } else if (key === Enter) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    const handleKeyUp = useEventCallback((ev) => {
      onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    if (type === "button" || type === void 0) {
      return {
        ...rest,
        disabled: disabled && !disabledFocusable,
        "aria-disabled": disabledFocusable ? true : normalizedARIADisabled,
        // onclick should still use internal handler to ensure prevention if disabled
        // if disabledFocusable then there's no requirement for handlers as those events should not be propagated
        onClick: disabledFocusable ? void 0 : handleClick,
        onKeyUp: disabledFocusable ? void 0 : onKeyUp,
        onKeyDown: disabledFocusable ? void 0 : onKeyDown
      };
    } else {
      const resultProps = {
        role: "button",
        tabIndex: disabled && !disabledFocusable ? void 0 : 0,
        ...rest,
        // If it's not a <button> than listeners are required even with disabledFocusable
        // Since you cannot assure the default behavior of the element
        // E.g: <a> will redirect on click
        onClick: handleClick,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        "aria-disabled": disabled || disabledFocusable || normalizedARIADisabled
      };
      if (type === "a" && isDisabled) {
        resultProps.href = void 0;
      }
      return resultProps;
    }
  }

  // node_modules/.pnpm/@fluentui+react-aria@9.3.18_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-aria/lib/button/useARIAButtonShorthand.js
  init_define_process();
  init_define_process_env();
  var useARIAButtonShorthand = (slot, options) => {
    const shorthand = resolveShorthand(slot, options);
    var _shorthand_as;
    const shorthandARIAButton = useARIAButtonProps((_shorthand_as = shorthand === null || shorthand === void 0 ? void 0 : shorthand.as) !== null && _shorthand_as !== void 0 ? _shorthand_as : "button", shorthand);
    return shorthand && shorthandARIAButton;
  };

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  init_define_process();
  init_define_process_env();
  var React39 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/useIconState.js
  init_define_process();
  init_define_process_env();
  var useRootStyles = __styles2({
    "root": {
      "mc9l5x": "f1w7gpdv",
      "Bg96gwp": "fez10in",
      "ycbfsm": "fg4l7m0"
    }
  }, {
    "d": [".f1w7gpdv{display:inline;}", ".fez10in{line-height:0;}"],
    "t": ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}"]
  });
  var useIconState = (props) => {
    const {
      title,
      primaryFill = "currentColor",
      ...rest
    } = props;
    const state = {
      ...rest,
      title: void 0,
      fill: primaryFill
    };
    const styles = useRootStyles();
    state.className = mergeClasses(styles.root, state.className);
    if (title) {
      state["aria-label"] = title;
    }
    if (!state["aria-label"] && !state["aria-labelledby"]) {
      state["aria-hidden"] = true;
    } else {
      state["role"] = "img";
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var createFluentIcon = (displayName, width, paths) => {
    const viewBoxWidth = width === "1em" ? "20" : width;
    const Icon = (props) => {
      const state = {
        ...useIconState(props),
        width,
        height: width,
        viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`,
        xmlns: "http://www.w3.org/2000/svg"
      };
      return React39.createElement("svg", state, ...paths.map((d4) => React39.createElement("path", {
        d: d4,
        fill: state.fill
      })));
    };
    Icon.displayName = displayName;
    return Icon;
  };

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var CheckmarkFilled = /* @__PURE__ */ createFluentIcon("CheckmarkFilled", "1em", ["M7.03 13.9 3.56 10a.75.75 0 0 0-1.12 1l4 4.5c.29.32.79.34 1.09.03l10.5-10.5a.75.75 0 0 0-1.06-1.06l-9.94 9.94Z"]);
  var ChevronDownRegular = /* @__PURE__ */ createFluentIcon("ChevronDownRegular", "1em", ["M15.85 7.65c.2.2.2.5 0 .7l-5.46 5.49a.55.55 0 0 1-.78 0L4.15 8.35a.5.5 0 1 1 .7-.7L10 12.8l5.15-5.16c.2-.2.5-.2.7 0Z"]);
  var ChevronLeftFilled = /* @__PURE__ */ createFluentIcon("ChevronLeftFilled", "1em", ["M12.27 15.8a.75.75 0 0 1-1.06-.03l-5-5.25a.75.75 0 0 1 0-1.04l5-5.25a.75.75 0 1 1 1.08 1.04L7.8 10l4.5 4.73c.29.3.28.78-.02 1.06Z"]);
  var ChevronLeftRegular = /* @__PURE__ */ createFluentIcon("ChevronLeftRegular", "1em", ["M12.35 15.85a.5.5 0 0 1-.7 0L6.16 10.4a.55.55 0 0 1 0-.78l5.49-5.46a.5.5 0 1 1 .7.7L7.2 10l5.16 5.15c.2.2.2.5 0 .7Z"]);
  var ChevronRightFilled = /* @__PURE__ */ createFluentIcon("ChevronRightFilled", "1em", ["M7.73 4.2a.75.75 0 0 1 1.06.03l5 5.25c.28.3.28.75 0 1.04l-5 5.25a.75.75 0 1 1-1.08-1.04L12.2 10l-4.5-4.73a.75.75 0 0 1 .02-1.06Z"]);
  var ChevronRightRegular = /* @__PURE__ */ createFluentIcon("ChevronRightRegular", "1em", ["M7.65 4.15c.2-.2.5-.2.7 0l5.49 5.46c.21.22.21.57 0 .78l-5.49 5.46a.5.5 0 0 1-.7-.7L12.8 10 7.65 4.85a.5.5 0 0 1 0-.7Z"]);
  var CircleFilled = /* @__PURE__ */ createFluentIcon("CircleFilled", "1em", ["M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-2.js
  init_define_process();
  init_define_process_env();
  var Checkmark12Filled = /* @__PURE__ */ createFluentIcon("Checkmark12Filled", "12", ["M9.76 3.2c.3.29.32.76.04 1.06l-4.25 4.5a.75.75 0 0 1-1.08.02L2.22 6.53a.75.75 0 0 1 1.06-1.06l1.7 1.7L8.7 3.24a.75.75 0 0 1 1.06-.04Z"]);
  var Checkmark16Filled = /* @__PURE__ */ createFluentIcon("Checkmark16Filled", "16", ["M14.05 3.49c.28.3.27.77-.04 1.06l-7.93 7.47A.85.85 0 0 1 4.9 12L2.22 9.28a.75.75 0 1 1 1.06-1.06l2.24 2.27 7.47-7.04a.75.75 0 0 1 1.06.04Z"]);
  var CheckmarkCircle12Filled = /* @__PURE__ */ createFluentIcon("CheckmarkCircle12Filled", "12", ["M1 6a5 5 0 1 1 10 0A5 5 0 0 1 1 6Zm7.35-.9a.5.5 0 1 0-.7-.7L5.5 6.54 4.35 5.4a.5.5 0 1 0-.7.7l1.5 1.5c.2.2.5.2.7 0l2.5-2.5Z"]);

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-5.js
  init_define_process();
  init_define_process_env();
  var ErrorCircle12Filled = /* @__PURE__ */ createFluentIcon("ErrorCircle12Filled", "12", ["M6 11A5 5 0 1 0 6 1a5 5 0 0 0 0 10Zm-.75-2.75a.75.75 0 1 1 1.5 0 .75.75 0 0 1-1.5 0Zm.26-4.84a.5.5 0 0 1 .98 0l.01.09v2.59a.5.5 0 0 1-1 0V3.41Z"]);

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-10.js
  init_define_process();
  init_define_process_env();
  var Square12Filled = /* @__PURE__ */ createFluentIcon("Square12Filled", "12", ["M2 4c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Z"]);
  var Square16Filled = /* @__PURE__ */ createFluentIcon("Square16Filled", "16", ["M2 4.5A2.5 2.5 0 0 1 4.5 2h7A2.5 2.5 0 0 1 14 4.5v7a2.5 2.5 0 0 1-2.5 2.5h-7A2.5 2.5 0 0 1 2 11.5v-7Z"]);

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-13.js
  init_define_process();
  init_define_process_env();
  var Warning12Filled = /* @__PURE__ */ createFluentIcon("Warning12Filled", "12", ["M5.21 1.46a.9.9 0 0 1 1.58 0l4.09 7.17a.92.92 0 0 1-.79 1.37H1.91a.92.92 0 0 1-.79-1.37l4.1-7.17ZM5.5 4.5v1a.5.5 0 0 0 1 0v-1a.5.5 0 0 0-1 0ZM6 6.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"]);

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/bundleIcon.js
  init_define_process();
  init_define_process_env();
  var React40 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/constants.js
  init_define_process();
  init_define_process_env();
  var iconFilledClassName = "fui-Icon-filled";
  var iconRegularClassName = "fui-Icon-regular";

  // node_modules/.pnpm/@fluentui+react-icons@2.0.200_react@18.2.0/node_modules/@fluentui/react-icons/lib/utils/bundleIcon.js
  var useBundledIconStyles = __styles2({
    "root": {
      "mc9l5x": "fjseox"
    },
    "visible": {
      "mc9l5x": "f1w7gpdv"
    }
  }, {
    "d": [".fjseox{display:none;}", ".f1w7gpdv{display:inline;}"]
  });
  var bundleIcon = (FilledIcon, RegularIcon) => {
    const Component3 = (props) => {
      const {
        className,
        primaryFill = "currentColor",
        filled,
        ...rest
      } = props;
      const styles = useBundledIconStyles();
      return React40.createElement(React40.Fragment, null, React40.createElement(FilledIcon, Object.assign({}, rest, {
        className: mergeClasses(styles.root, filled && styles.visible, iconFilledClassName, className),
        fill: primaryFill
      })), React40.createElement(RegularIcon, Object.assign({}, rest, {
        className: mergeClasses(styles.root, !filled && styles.visible, iconRegularClassName, className),
        fill: primaryFill
      })));
    };
    Component3.displayName = "CompoundIcon";
    return Component3;
  };
  var bundleIcon_default = bundleIcon;

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/createVirtualElementFromClick.js
  init_define_process();
  init_define_process_env();
  function createVirtualElementFromClick(nativeEvent) {
    const left = nativeEvent.clientX;
    const top = nativeEvent.clientY;
    const right = left + 1;
    const bottom = top + 1;
    function getBoundingClientRect() {
      return {
        left,
        top,
        right,
        bottom,
        x: left,
        y: top,
        height: 1,
        width: 1
      };
    }
    return {
      getBoundingClientRect
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/usePositioning.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@floating-ui+dom@1.2.6/node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@floating-ui+core@1.2.6/node_modules/@floating-ui/core/dist/floating-ui.core.browser.min.mjs
  init_define_process();
  init_define_process_env();
  function t(t3) {
    return t3.split("-")[1];
  }
  function e(t3) {
    return "y" === t3 ? "height" : "width";
  }
  function n(t3) {
    return t3.split("-")[0];
  }
  function o(t3) {
    return ["top", "bottom"].includes(n(t3)) ? "x" : "y";
  }
  function i(i4, r3, a4) {
    let { reference: l5, floating: s4 } = i4;
    const c4 = l5.x + l5.width / 2 - s4.width / 2, f5 = l5.y + l5.height / 2 - s4.height / 2, m5 = o(r3), u5 = e(m5), g4 = l5[u5] / 2 - s4[u5] / 2, d4 = "x" === m5;
    let p4;
    switch (n(r3)) {
      case "top":
        p4 = { x: c4, y: l5.y - s4.height };
        break;
      case "bottom":
        p4 = { x: c4, y: l5.y + l5.height };
        break;
      case "right":
        p4 = { x: l5.x + l5.width, y: f5 };
        break;
      case "left":
        p4 = { x: l5.x - s4.width, y: f5 };
        break;
      default:
        p4 = { x: l5.x, y: l5.y };
    }
    switch (t(r3)) {
      case "start":
        p4[m5] -= g4 * (a4 && d4 ? -1 : 1);
        break;
      case "end":
        p4[m5] += g4 * (a4 && d4 ? -1 : 1);
    }
    return p4;
  }
  var r = async (t3, e3, n5) => {
    const { placement: o4 = "bottom", strategy: r3 = "absolute", middleware: a4 = [], platform: l5 } = n5, s4 = a4.filter(Boolean), c4 = await (null == l5.isRTL ? void 0 : l5.isRTL(e3));
    let f5 = await l5.getElementRects({ reference: t3, floating: e3, strategy: r3 }), { x: m5, y: u5 } = i(f5, o4, c4), g4 = o4, d4 = {}, p4 = 0;
    for (let n6 = 0; n6 < s4.length; n6++) {
      const { name: a5, fn: h5 } = s4[n6], { x: y4, y: x3, data: w4, reset: v5 } = await h5({ x: m5, y: u5, initialPlacement: o4, placement: g4, strategy: r3, middlewareData: d4, rects: f5, platform: l5, elements: { reference: t3, floating: e3 } });
      m5 = null != y4 ? y4 : m5, u5 = null != x3 ? x3 : u5, d4 = { ...d4, [a5]: { ...d4[a5], ...w4 } }, v5 && p4 <= 50 && (p4++, "object" == typeof v5 && (v5.placement && (g4 = v5.placement), v5.rects && (f5 = true === v5.rects ? await l5.getElementRects({ reference: t3, floating: e3, strategy: r3 }) : v5.rects), { x: m5, y: u5 } = i(f5, g4, c4)), n6 = -1);
    }
    return { x: m5, y: u5, placement: g4, strategy: r3, middlewareData: d4 };
  };
  function a(t3) {
    return "number" != typeof t3 ? function(t4) {
      return { top: 0, right: 0, bottom: 0, left: 0, ...t4 };
    }(t3) : { top: t3, right: t3, bottom: t3, left: t3 };
  }
  function l(t3) {
    return { ...t3, top: t3.y, left: t3.x, right: t3.x + t3.width, bottom: t3.y + t3.height };
  }
  async function s(t3, e3) {
    var n5;
    void 0 === e3 && (e3 = {});
    const { x: o4, y: i4, platform: r3, rects: s4, elements: c4, strategy: f5 } = t3, { boundary: m5 = "clippingAncestors", rootBoundary: u5 = "viewport", elementContext: g4 = "floating", altBoundary: d4 = false, padding: p4 = 0 } = e3, h5 = a(p4), y4 = c4[d4 ? "floating" === g4 ? "reference" : "floating" : g4], x3 = l(await r3.getClippingRect({ element: null == (n5 = await (null == r3.isElement ? void 0 : r3.isElement(y4))) || n5 ? y4 : y4.contextElement || await (null == r3.getDocumentElement ? void 0 : r3.getDocumentElement(c4.floating)), boundary: m5, rootBoundary: u5, strategy: f5 })), w4 = "floating" === g4 ? { ...s4.floating, x: o4, y: i4 } : s4.reference, v5 = await (null == r3.getOffsetParent ? void 0 : r3.getOffsetParent(c4.floating)), b5 = await (null == r3.isElement ? void 0 : r3.isElement(v5)) && await (null == r3.getScale ? void 0 : r3.getScale(v5)) || { x: 1, y: 1 }, A4 = l(r3.convertOffsetParentRelativeRectToViewportRelativeRect ? await r3.convertOffsetParentRelativeRectToViewportRelativeRect({ rect: w4, offsetParent: v5, strategy: f5 }) : w4);
    return { top: (x3.top - A4.top + h5.top) / b5.y, bottom: (A4.bottom - x3.bottom + h5.bottom) / b5.y, left: (x3.left - A4.left + h5.left) / b5.x, right: (A4.right - x3.right + h5.right) / b5.x };
  }
  var c = Math.min;
  var f = Math.max;
  function m(t3, e3, n5) {
    return f(t3, c(e3, n5));
  }
  var u = (n5) => ({ name: "arrow", options: n5, async fn(i4) {
    const { element: r3, padding: l5 = 0 } = n5 || {}, { x: s4, y: c4, placement: f5, rects: u5, platform: g4, elements: d4 } = i4;
    if (null == r3)
      return {};
    const p4 = a(l5), h5 = { x: s4, y: c4 }, y4 = o(f5), x3 = e(y4), w4 = await g4.getDimensions(r3), v5 = "y" === y4, b5 = v5 ? "top" : "left", A4 = v5 ? "bottom" : "right", R3 = v5 ? "clientHeight" : "clientWidth", P3 = u5.reference[x3] + u5.reference[y4] - h5[y4] - u5.floating[x3], E2 = h5[y4] - u5.reference[y4], T4 = await (null == g4.getOffsetParent ? void 0 : g4.getOffsetParent(r3));
    let D4 = T4 ? T4[R3] : 0;
    D4 && await (null == g4.isElement ? void 0 : g4.isElement(T4)) || (D4 = d4.floating[R3] || u5.floating[x3]);
    const L4 = P3 / 2 - E2 / 2, k2 = p4[b5], O4 = D4 - w4[x3] - p4[A4], B2 = D4 / 2 - w4[x3] / 2 + L4, C2 = m(k2, B2, O4), H3 = null != t(f5) && B2 != C2 && u5.reference[x3] / 2 - (B2 < k2 ? p4[b5] : p4[A4]) - w4[x3] / 2 < 0;
    return { [y4]: h5[y4] - (H3 ? B2 < k2 ? k2 - B2 : O4 - B2 : 0), data: { [y4]: C2, centerOffset: B2 - C2 } };
  } });
  var g = ["top", "right", "bottom", "left"];
  var d = g.reduce((t3, e3) => t3.concat(e3, e3 + "-start", e3 + "-end"), []);
  var p = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function h(t3) {
    return t3.replace(/left|right|bottom|top/g, (t4) => p[t4]);
  }
  function y(n5, i4, r3) {
    void 0 === r3 && (r3 = false);
    const a4 = t(n5), l5 = o(n5), s4 = e(l5);
    let c4 = "x" === l5 ? a4 === (r3 ? "end" : "start") ? "right" : "left" : "start" === a4 ? "bottom" : "top";
    return i4.reference[s4] > i4.floating[s4] && (c4 = h(c4)), { main: c4, cross: h(c4) };
  }
  var x = { start: "end", end: "start" };
  function w(t3) {
    return t3.replace(/start|end/g, (t4) => x[t4]);
  }
  var b = function(e3) {
    return void 0 === e3 && (e3 = {}), { name: "flip", options: e3, async fn(o4) {
      var i4;
      const { placement: r3, middlewareData: a4, rects: l5, initialPlacement: c4, platform: f5, elements: m5 } = o4, { mainAxis: u5 = true, crossAxis: g4 = true, fallbackPlacements: d4, fallbackStrategy: p4 = "bestFit", fallbackAxisSideDirection: x3 = "none", flipAlignment: v5 = true, ...b5 } = e3, A4 = n(r3), R3 = n(c4) === c4, P3 = await (null == f5.isRTL ? void 0 : f5.isRTL(m5.floating)), E2 = d4 || (R3 || !v5 ? [h(c4)] : function(t3) {
        const e4 = h(t3);
        return [w(t3), e4, w(e4)];
      }(c4));
      d4 || "none" === x3 || E2.push(...function(e4, o5, i5, r4) {
        const a5 = t(e4);
        let l6 = function(t3, e5, n5) {
          const o6 = ["left", "right"], i6 = ["right", "left"], r5 = ["top", "bottom"], a6 = ["bottom", "top"];
          switch (t3) {
            case "top":
            case "bottom":
              return n5 ? e5 ? i6 : o6 : e5 ? o6 : i6;
            case "left":
            case "right":
              return e5 ? r5 : a6;
            default:
              return [];
          }
        }(n(e4), "start" === i5, r4);
        return a5 && (l6 = l6.map((t3) => t3 + "-" + a5), o5 && (l6 = l6.concat(l6.map(w)))), l6;
      }(c4, v5, x3, P3));
      const T4 = [c4, ...E2], D4 = await s(o4, b5), L4 = [];
      let k2 = (null == (i4 = a4.flip) ? void 0 : i4.overflows) || [];
      if (u5 && L4.push(D4[A4]), g4) {
        const { main: t3, cross: e4 } = y(r3, l5, P3);
        L4.push(D4[t3], D4[e4]);
      }
      if (k2 = [...k2, { placement: r3, overflows: L4 }], !L4.every((t3) => t3 <= 0)) {
        var O4, B2;
        const t3 = ((null == (O4 = a4.flip) ? void 0 : O4.index) || 0) + 1, e4 = T4[t3];
        if (e4)
          return { data: { index: t3, overflows: k2 }, reset: { placement: e4 } };
        let n5 = null == (B2 = k2.filter((t4) => t4.overflows[0] <= 0).sort((t4, e5) => t4.overflows[1] - e5.overflows[1])[0]) ? void 0 : B2.placement;
        if (!n5)
          switch (p4) {
            case "bestFit": {
              var C2;
              const t4 = null == (C2 = k2.map((t5) => [t5.placement, t5.overflows.filter((t6) => t6 > 0).reduce((t6, e5) => t6 + e5, 0)]).sort((t5, e5) => t5[1] - e5[1])[0]) ? void 0 : C2[0];
              t4 && (n5 = t4);
              break;
            }
            case "initialPlacement":
              n5 = c4;
          }
        if (r3 !== n5)
          return { reset: { placement: n5 } };
      }
      return {};
    } };
  };
  function A(t3, e3) {
    return { top: t3.top - e3.height, right: t3.right - e3.width, bottom: t3.bottom - e3.height, left: t3.left - e3.width };
  }
  function R(t3) {
    return g.some((e3) => t3[e3] >= 0);
  }
  var P = function(t3) {
    return void 0 === t3 && (t3 = {}), { name: "hide", options: t3, async fn(e3) {
      const { strategy: n5 = "referenceHidden", ...o4 } = t3, { rects: i4 } = e3;
      switch (n5) {
        case "referenceHidden": {
          const t4 = A(await s(e3, { ...o4, elementContext: "reference" }), i4.reference);
          return { data: { referenceHiddenOffsets: t4, referenceHidden: R(t4) } };
        }
        case "escaped": {
          const t4 = A(await s(e3, { ...o4, altBoundary: true }), i4.floating);
          return { data: { escapedOffsets: t4, escaped: R(t4) } };
        }
        default:
          return {};
      }
    } };
  };
  var D = function(e3) {
    return void 0 === e3 && (e3 = 0), { name: "offset", options: e3, async fn(i4) {
      const { x: r3, y: a4 } = i4, l5 = await async function(e4, i5) {
        const { placement: r4, platform: a5, elements: l6 } = e4, s4 = await (null == a5.isRTL ? void 0 : a5.isRTL(l6.floating)), c4 = n(r4), f5 = t(r4), m5 = "x" === o(r4), u5 = ["left", "top"].includes(c4) ? -1 : 1, g4 = s4 && m5 ? -1 : 1, d4 = "function" == typeof i5 ? i5(e4) : i5;
        let { mainAxis: p4, crossAxis: h5, alignmentAxis: y4 } = "number" == typeof d4 ? { mainAxis: d4, crossAxis: 0, alignmentAxis: null } : { mainAxis: 0, crossAxis: 0, alignmentAxis: null, ...d4 };
        return f5 && "number" == typeof y4 && (h5 = "end" === f5 ? -1 * y4 : y4), m5 ? { x: h5 * g4, y: p4 * u5 } : { x: p4 * u5, y: h5 * g4 };
      }(i4, e3);
      return { x: r3 + l5.x, y: a4 + l5.y, data: l5 };
    } };
  };
  function L(t3) {
    return "x" === t3 ? "y" : "x";
  }
  var k = function(t3) {
    return void 0 === t3 && (t3 = {}), { name: "shift", options: t3, async fn(e3) {
      const { x: i4, y: r3, placement: a4 } = e3, { mainAxis: l5 = true, crossAxis: c4 = false, limiter: f5 = { fn: (t4) => {
        let { x: e4, y: n5 } = t4;
        return { x: e4, y: n5 };
      } }, ...u5 } = t3, g4 = { x: i4, y: r3 }, d4 = await s(e3, u5), p4 = o(n(a4)), h5 = L(p4);
      let y4 = g4[p4], x3 = g4[h5];
      if (l5) {
        const t4 = "y" === p4 ? "bottom" : "right";
        y4 = m(y4 + d4["y" === p4 ? "top" : "left"], y4, y4 - d4[t4]);
      }
      if (c4) {
        const t4 = "y" === h5 ? "bottom" : "right";
        x3 = m(x3 + d4["y" === h5 ? "top" : "left"], x3, x3 - d4[t4]);
      }
      const w4 = f5.fn({ ...e3, [p4]: y4, [h5]: x3 });
      return { ...w4, data: { x: w4.x - i4, y: w4.y - r3 } };
    } };
  };
  var O = function(t3) {
    return void 0 === t3 && (t3 = {}), { options: t3, fn(e3) {
      const { x: i4, y: r3, placement: a4, rects: l5, middlewareData: s4 } = e3, { offset: c4 = 0, mainAxis: f5 = true, crossAxis: m5 = true } = t3, u5 = { x: i4, y: r3 }, g4 = o(a4), d4 = L(g4);
      let p4 = u5[g4], h5 = u5[d4];
      const y4 = "function" == typeof c4 ? c4(e3) : c4, x3 = "number" == typeof y4 ? { mainAxis: y4, crossAxis: 0 } : { mainAxis: 0, crossAxis: 0, ...y4 };
      if (f5) {
        const t4 = "y" === g4 ? "height" : "width", e4 = l5.reference[g4] - l5.floating[t4] + x3.mainAxis, n5 = l5.reference[g4] + l5.reference[t4] - x3.mainAxis;
        p4 < e4 ? p4 = e4 : p4 > n5 && (p4 = n5);
      }
      if (m5) {
        var w4, v5;
        const t4 = "y" === g4 ? "width" : "height", e4 = ["top", "left"].includes(n(a4)), o4 = l5.reference[d4] - l5.floating[t4] + (e4 && (null == (w4 = s4.offset) ? void 0 : w4[d4]) || 0) + (e4 ? 0 : x3.crossAxis), i5 = l5.reference[d4] + l5.reference[t4] + (e4 ? 0 : (null == (v5 = s4.offset) ? void 0 : v5[d4]) || 0) - (e4 ? x3.crossAxis : 0);
        h5 < o4 ? h5 = o4 : h5 > i5 && (h5 = i5);
      }
      return { [g4]: p4, [d4]: h5 };
    } };
  };
  var B = function(e3) {
    return void 0 === e3 && (e3 = {}), { name: "size", options: e3, async fn(i4) {
      const { placement: r3, rects: a4, platform: l5, elements: m5 } = i4, { apply: u5 = () => {
      }, ...g4 } = e3, d4 = await s(i4, g4), p4 = n(r3), h5 = t(r3), y4 = "x" === o(r3), { width: x3, height: w4 } = a4.floating;
      let v5, b5;
      "top" === p4 || "bottom" === p4 ? (v5 = p4, b5 = h5 === (await (null == l5.isRTL ? void 0 : l5.isRTL(m5.floating)) ? "start" : "end") ? "left" : "right") : (b5 = p4, v5 = "end" === h5 ? "top" : "bottom");
      const A4 = w4 - d4[v5], R3 = x3 - d4[b5], P3 = !i4.middlewareData.shift;
      let E2 = A4, T4 = R3;
      if (y4) {
        const t3 = x3 - d4.left - d4.right;
        T4 = h5 || P3 ? c(R3, t3) : t3;
      } else {
        const t3 = w4 - d4.top - d4.bottom;
        E2 = h5 || P3 ? c(A4, t3) : t3;
      }
      if (P3 && !h5) {
        const t3 = f(d4.left, 0), e4 = f(d4.right, 0), n5 = f(d4.top, 0), o4 = f(d4.bottom, 0);
        y4 ? T4 = x3 - 2 * (0 !== t3 || 0 !== e4 ? t3 + e4 : f(d4.left, d4.right)) : E2 = w4 - 2 * (0 !== n5 || 0 !== o4 ? n5 + o4 : f(d4.top, d4.bottom));
      }
      await u5({ ...i4, availableWidth: T4, availableHeight: E2 });
      const D4 = await l5.getDimensions(m5.floating);
      return x3 !== D4.width || w4 !== D4.height ? { reset: { rects: true } } : {};
    } };
  };

  // node_modules/.pnpm/@floating-ui+dom@1.2.6/node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs
  function n2(t3) {
    var e3;
    return (null == (e3 = t3.ownerDocument) ? void 0 : e3.defaultView) || window;
  }
  function o2(t3) {
    return n2(t3).getComputedStyle(t3);
  }
  function i2(t3) {
    return t3 instanceof n2(t3).Node;
  }
  function r2(t3) {
    return i2(t3) ? (t3.nodeName || "").toLowerCase() : "";
  }
  var l2;
  function c2() {
    if (l2)
      return l2;
    const t3 = navigator.userAgentData;
    return t3 && Array.isArray(t3.brands) ? (l2 = t3.brands.map((t4) => t4.brand + "/" + t4.version).join(" "), l2) : navigator.userAgent;
  }
  function s2(t3) {
    return t3 instanceof n2(t3).HTMLElement;
  }
  function f2(t3) {
    return t3 instanceof n2(t3).Element;
  }
  function u2(t3) {
    if ("undefined" == typeof ShadowRoot)
      return false;
    return t3 instanceof n2(t3).ShadowRoot || t3 instanceof ShadowRoot;
  }
  function a2(t3) {
    const { overflow: e3, overflowX: n5, overflowY: i4, display: r3 } = o2(t3);
    return /auto|scroll|overlay|hidden|clip/.test(e3 + i4 + n5) && !["inline", "contents"].includes(r3);
  }
  function d2(t3) {
    return ["table", "td", "th"].includes(r2(t3));
  }
  function h2(t3) {
    const e3 = /firefox/i.test(c2()), n5 = o2(t3), i4 = n5.backdropFilter || n5.WebkitBackdropFilter;
    return "none" !== n5.transform || "none" !== n5.perspective || !!i4 && "none" !== i4 || e3 && "filter" === n5.willChange || e3 && !!n5.filter && "none" !== n5.filter || ["transform", "perspective"].some((t4) => n5.willChange.includes(t4)) || ["paint", "layout", "strict", "content"].some((t4) => {
      const e4 = n5.contain;
      return null != e4 && e4.includes(t4);
    });
  }
  function p2() {
    return /^((?!chrome|android).)*safari/i.test(c2());
  }
  function g2(t3) {
    return ["html", "body", "#document"].includes(r2(t3));
  }
  var m2 = Math.min;
  var y2 = Math.max;
  var x2 = Math.round;
  function w2(t3) {
    const e3 = o2(t3);
    let n5 = parseFloat(e3.width), i4 = parseFloat(e3.height);
    const r3 = s2(t3), l5 = r3 ? t3.offsetWidth : n5, c4 = r3 ? t3.offsetHeight : i4, f5 = x2(n5) !== l5 || x2(i4) !== c4;
    return f5 && (n5 = l5, i4 = c4), { width: n5, height: i4, fallback: f5 };
  }
  function v2(t3) {
    return f2(t3) ? t3 : t3.contextElement;
  }
  var b2 = { x: 1, y: 1 };
  function L2(t3) {
    const e3 = v2(t3);
    if (!s2(e3))
      return b2;
    const n5 = e3.getBoundingClientRect(), { width: o4, height: i4, fallback: r3 } = w2(e3);
    let l5 = (r3 ? x2(n5.width) : n5.width) / o4, c4 = (r3 ? x2(n5.height) : n5.height) / i4;
    return l5 && Number.isFinite(l5) || (l5 = 1), c4 && Number.isFinite(c4) || (c4 = 1), { x: l5, y: c4 };
  }
  function E(e3, o4, i4, r3) {
    var l5, c4;
    void 0 === o4 && (o4 = false), void 0 === i4 && (i4 = false);
    const s4 = e3.getBoundingClientRect(), u5 = v2(e3);
    let a4 = b2;
    o4 && (r3 ? f2(r3) && (a4 = L2(r3)) : a4 = L2(e3));
    const d4 = u5 ? n2(u5) : window, h5 = p2() && i4;
    let g4 = (s4.left + (h5 && (null == (l5 = d4.visualViewport) ? void 0 : l5.offsetLeft) || 0)) / a4.x, m5 = (s4.top + (h5 && (null == (c4 = d4.visualViewport) ? void 0 : c4.offsetTop) || 0)) / a4.y, y4 = s4.width / a4.x, x3 = s4.height / a4.y;
    if (u5) {
      const t3 = n2(u5), e4 = r3 && f2(r3) ? n2(r3) : r3;
      let o5 = t3.frameElement;
      for (; o5 && r3 && e4 !== t3; ) {
        const t4 = L2(o5), e5 = o5.getBoundingClientRect(), i5 = getComputedStyle(o5);
        e5.x += (o5.clientLeft + parseFloat(i5.paddingLeft)) * t4.x, e5.y += (o5.clientTop + parseFloat(i5.paddingTop)) * t4.y, g4 *= t4.x, m5 *= t4.y, y4 *= t4.x, x3 *= t4.y, g4 += e5.x, m5 += e5.y, o5 = n2(o5).frameElement;
      }
    }
    return l({ width: y4, height: x3, x: g4, y: m5 });
  }
  function T2(t3) {
    return ((i2(t3) ? t3.ownerDocument : t3.document) || window.document).documentElement;
  }
  function R2(t3) {
    return f2(t3) ? { scrollLeft: t3.scrollLeft, scrollTop: t3.scrollTop } : { scrollLeft: t3.pageXOffset, scrollTop: t3.pageYOffset };
  }
  function C(t3) {
    return E(T2(t3)).left + R2(t3).scrollLeft;
  }
  function F(t3) {
    if ("html" === r2(t3))
      return t3;
    const e3 = t3.assignedSlot || t3.parentNode || u2(t3) && t3.host || T2(t3);
    return u2(e3) ? e3.host : e3;
  }
  function W(t3) {
    const e3 = F(t3);
    return g2(e3) ? e3.ownerDocument.body : s2(e3) && a2(e3) ? e3 : W(e3);
  }
  function D2(t3, e3) {
    var o4;
    void 0 === e3 && (e3 = []);
    const i4 = W(t3), r3 = i4 === (null == (o4 = t3.ownerDocument) ? void 0 : o4.body), l5 = n2(i4);
    return r3 ? e3.concat(l5, l5.visualViewport || [], a2(i4) ? i4 : []) : e3.concat(i4, D2(i4));
  }
  function S(e3, i4, r3) {
    let l5;
    if ("viewport" === i4)
      l5 = function(t3, e4) {
        const o4 = n2(t3), i5 = T2(t3), r4 = o4.visualViewport;
        let l6 = i5.clientWidth, c5 = i5.clientHeight, s4 = 0, f5 = 0;
        if (r4) {
          l6 = r4.width, c5 = r4.height;
          const t4 = p2();
          (!t4 || t4 && "fixed" === e4) && (s4 = r4.offsetLeft, f5 = r4.offsetTop);
        }
        return { width: l6, height: c5, x: s4, y: f5 };
      }(e3, r3);
    else if ("document" === i4)
      l5 = function(t3) {
        const e4 = T2(t3), n5 = R2(t3), i5 = t3.ownerDocument.body, r4 = y2(e4.scrollWidth, e4.clientWidth, i5.scrollWidth, i5.clientWidth), l6 = y2(e4.scrollHeight, e4.clientHeight, i5.scrollHeight, i5.clientHeight);
        let c5 = -n5.scrollLeft + C(t3);
        const s4 = -n5.scrollTop;
        return "rtl" === o2(i5).direction && (c5 += y2(e4.clientWidth, i5.clientWidth) - r4), { width: r4, height: l6, x: c5, y: s4 };
      }(T2(e3));
    else if (f2(i4))
      l5 = function(t3, e4) {
        const n5 = E(t3, true, "fixed" === e4), o4 = n5.top + t3.clientTop, i5 = n5.left + t3.clientLeft, r4 = s2(t3) ? L2(t3) : { x: 1, y: 1 };
        return { width: t3.clientWidth * r4.x, height: t3.clientHeight * r4.y, x: i5 * r4.x, y: o4 * r4.y };
      }(i4, r3);
    else {
      const t3 = { ...i4 };
      if (p2()) {
        var c4, u5;
        const o4 = n2(e3);
        t3.x -= (null == (c4 = o4.visualViewport) ? void 0 : c4.offsetLeft) || 0, t3.y -= (null == (u5 = o4.visualViewport) ? void 0 : u5.offsetTop) || 0;
      }
      l5 = t3;
    }
    return l(l5);
  }
  function A2(t3, e3) {
    return s2(t3) && "fixed" !== o2(t3).position ? e3 ? e3(t3) : t3.offsetParent : null;
  }
  function H(t3, e3) {
    const i4 = n2(t3);
    if (!s2(t3))
      return i4;
    let l5 = A2(t3, e3);
    for (; l5 && d2(l5) && "static" === o2(l5).position; )
      l5 = A2(l5, e3);
    return l5 && ("html" === r2(l5) || "body" === r2(l5) && "static" === o2(l5).position && !h2(l5)) ? i4 : l5 || function(t4) {
      let e4 = F(t4);
      for (; s2(e4) && !g2(e4); ) {
        if (h2(e4))
          return e4;
        e4 = F(e4);
      }
      return null;
    }(t3) || i4;
  }
  function V(t3, e3, n5) {
    const o4 = s2(e3), i4 = T2(e3), l5 = E(t3, true, "fixed" === n5, e3);
    let c4 = { scrollLeft: 0, scrollTop: 0 };
    const f5 = { x: 0, y: 0 };
    if (o4 || !o4 && "fixed" !== n5)
      if (("body" !== r2(e3) || a2(i4)) && (c4 = R2(e3)), s2(e3)) {
        const t4 = E(e3, true);
        f5.x = t4.x + e3.clientLeft, f5.y = t4.y + e3.clientTop;
      } else
        i4 && (f5.x = C(i4));
    return { x: l5.left + c4.scrollLeft - f5.x, y: l5.top + c4.scrollTop - f5.y, width: l5.width, height: l5.height };
  }
  var O2 = { getClippingRect: function(t3) {
    let { element: e3, boundary: n5, rootBoundary: i4, strategy: l5 } = t3;
    const c4 = "clippingAncestors" === n5 ? function(t4, e4) {
      const n6 = e4.get(t4);
      if (n6)
        return n6;
      let i5 = D2(t4).filter((t5) => f2(t5) && "body" !== r2(t5)), l6 = null;
      const c5 = "fixed" === o2(t4).position;
      let s5 = c5 ? F(t4) : t4;
      for (; f2(s5) && !g2(s5); ) {
        const t5 = o2(s5), e5 = h2(s5);
        "fixed" === t5.position && (l6 = null), (c5 ? e5 || l6 : e5 || "static" !== t5.position || !l6 || !["absolute", "fixed"].includes(l6.position)) ? l6 = t5 : i5 = i5.filter((t6) => t6 !== s5), s5 = F(s5);
      }
      return e4.set(t4, i5), i5;
    }(e3, this._c) : [].concat(n5), s4 = [...c4, i4], u5 = s4[0], a4 = s4.reduce((t4, n6) => {
      const o4 = S(e3, n6, l5);
      return t4.top = y2(o4.top, t4.top), t4.right = m2(o4.right, t4.right), t4.bottom = m2(o4.bottom, t4.bottom), t4.left = y2(o4.left, t4.left), t4;
    }, S(e3, u5, l5));
    return { width: a4.right - a4.left, height: a4.bottom - a4.top, x: a4.left, y: a4.top };
  }, convertOffsetParentRelativeRectToViewportRelativeRect: function(t3) {
    let { rect: e3, offsetParent: n5, strategy: o4 } = t3;
    const i4 = s2(n5), l5 = T2(n5);
    if (n5 === l5)
      return e3;
    let c4 = { scrollLeft: 0, scrollTop: 0 }, f5 = { x: 1, y: 1 };
    const u5 = { x: 0, y: 0 };
    if ((i4 || !i4 && "fixed" !== o4) && (("body" !== r2(n5) || a2(l5)) && (c4 = R2(n5)), s2(n5))) {
      const t4 = E(n5);
      f5 = L2(n5), u5.x = t4.x + n5.clientLeft, u5.y = t4.y + n5.clientTop;
    }
    return { width: e3.width * f5.x, height: e3.height * f5.y, x: e3.x * f5.x - c4.scrollLeft * f5.x + u5.x, y: e3.y * f5.y - c4.scrollTop * f5.y + u5.y };
  }, isElement: f2, getDimensions: function(t3) {
    return w2(t3);
  }, getOffsetParent: H, getDocumentElement: T2, getScale: L2, async getElementRects(t3) {
    let { reference: e3, floating: n5, strategy: o4 } = t3;
    const i4 = this.getOffsetParent || H, r3 = this.getDimensions;
    return { reference: V(e3, await i4(n5), o4), floating: { x: 0, y: 0, ...await r3(n5) } };
  }, getClientRects: (t3) => Array.from(t3.getClientRects()), isRTL: (t3) => "rtl" === o2(t3).direction };
  var z = (t3, n5, o4) => {
    const i4 = /* @__PURE__ */ new Map(), r3 = { platform: O2, ...o4 }, l5 = { ...r3.platform, _c: i4 };
    return r(t3, n5, { ...r3, platform: l5 });
  };

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/usePositioning.js
  var React43 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/parseFloatingUIPlacement.js
  init_define_process();
  init_define_process_env();
  function parseFloatingUIPlacement(placement) {
    const tokens2 = placement.split("-");
    return {
      side: tokens2[0],
      alignment: tokens2[1]
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/getBoundary.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/getScrollParent.js
  init_define_process();
  init_define_process_env();
  var getParentNode = (node2) => {
    if (node2.nodeName === "HTML") {
      return node2;
    }
    return node2.parentNode || node2.host;
  };
  var getStyleComputedProperty = (node2) => {
    var _node_ownerDocument;
    if (node2.nodeType !== 1) {
      return {};
    }
    const window2 = (_node_ownerDocument = node2.ownerDocument) === null || _node_ownerDocument === void 0 ? void 0 : _node_ownerDocument.defaultView;
    return window2.getComputedStyle(node2, null);
  };
  var getScrollParent = (node2) => {
    const parentNode = node2 && getParentNode(node2);
    if (!parentNode)
      return document.body;
    switch (parentNode.nodeName) {
      case "HTML":
      case "BODY":
        return parentNode.ownerDocument.body;
      case "#document":
        return parentNode.body;
    }
    const {
      overflow: overflow2,
      overflowX,
      overflowY
    } = getStyleComputedProperty(parentNode);
    if (/(auto|scroll|overlay)/.test(overflow2 + overflowY + overflowX)) {
      return parentNode;
    }
    return getScrollParent(parentNode);
  };
  var hasScrollParent = (node2) => {
    var _scrollParentElement_ownerDocument;
    const scrollParentElement = getScrollParent(node2);
    return scrollParentElement ? scrollParentElement !== ((_scrollParentElement_ownerDocument = scrollParentElement.ownerDocument) === null || _scrollParentElement_ownerDocument === void 0 ? void 0 : _scrollParentElement_ownerDocument.body) : false;
  };

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/getBoundary.js
  function getBoundary(element, boundary) {
    if (boundary === "window") {
      return element === null || element === void 0 ? void 0 : element.ownerDocument.documentElement;
    }
    if (boundary === "clippingParents") {
      return "clippingAncestors";
    }
    if (boundary === "scrollParent") {
      let boundariesNode = getScrollParent(element);
      if (boundariesNode.nodeName === "BODY") {
        boundariesNode = element === null || element === void 0 ? void 0 : element.ownerDocument.documentElement;
      }
      return boundariesNode;
    }
    return boundary;
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/getReactFiberFromNode.js
  init_define_process();
  init_define_process_env();
  var React41 = __toESM(require_react());
  var WorkTag;
  (function(WorkTag2) {
    WorkTag2[WorkTag2["FunctionComponent"] = 0] = "FunctionComponent";
    WorkTag2[WorkTag2["ClassComponent"] = 1] = "ClassComponent";
    WorkTag2[WorkTag2["IndeterminateComponent"] = 2] = "IndeterminateComponent";
    WorkTag2[WorkTag2["HostRoot"] = 3] = "HostRoot";
    WorkTag2[WorkTag2["HostPortal"] = 4] = "HostPortal";
    WorkTag2[WorkTag2["HostComponent"] = 5] = "HostComponent";
    WorkTag2[WorkTag2["HostText"] = 6] = "HostText";
    WorkTag2[WorkTag2["Fragment"] = 7] = "Fragment";
    WorkTag2[WorkTag2["Mode"] = 8] = "Mode";
    WorkTag2[WorkTag2["ContextConsumer"] = 9] = "ContextConsumer";
    WorkTag2[WorkTag2["ContextProvider"] = 10] = "ContextProvider";
    WorkTag2[WorkTag2["ForwardRef"] = 11] = "ForwardRef";
    WorkTag2[WorkTag2["Profiler"] = 12] = "Profiler";
    WorkTag2[WorkTag2["SuspenseComponent"] = 13] = "SuspenseComponent";
    WorkTag2[WorkTag2["MemoComponent"] = 14] = "MemoComponent";
    WorkTag2[WorkTag2["SimpleMemoComponent"] = 15] = "SimpleMemoComponent";
    WorkTag2[WorkTag2["LazyComponent"] = 16] = "LazyComponent";
    WorkTag2[WorkTag2["IncompleteClassComponent"] = 17] = "IncompleteClassComponent";
    WorkTag2[WorkTag2["DehydratedFragment"] = 18] = "DehydratedFragment";
    WorkTag2[WorkTag2["SuspenseListComponent"] = 19] = "SuspenseListComponent";
    WorkTag2[WorkTag2["FundamentalComponent"] = 20] = "FundamentalComponent";
    WorkTag2[WorkTag2["ScopeComponent"] = 21] = "ScopeComponent";
  })(WorkTag || (WorkTag = {}));
  function getReactFiberFromNode(elm) {
    if (!elm) {
      return null;
    }
    for (const k2 in elm) {
      if (k2.indexOf("__reactInternalInstance$") === 0 || k2.indexOf("__reactFiber$") === 0) {
        return elm[k2];
      }
    }
    throw new Error("getReactFiber(): Failed to find a React Fiber on a node");
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/toFloatingUIPadding.js
  init_define_process();
  init_define_process_env();
  function toFloatingUIPadding(padding3, isRtl) {
    if (typeof padding3 === "number") {
      return padding3;
    }
    const {
      start: start2,
      end,
      ...verticalPadding
    } = padding3;
    const paddingObject = verticalPadding;
    const left = isRtl ? "end" : "start";
    const right = isRtl ? "start" : "end";
    if (padding3[left]) {
      paddingObject.left = padding3[left];
    }
    if (padding3[right]) {
      paddingObject.right = padding3[right];
    }
    return paddingObject;
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/toFloatingUIPlacement.js
  init_define_process();
  init_define_process_env();
  var getPositionMap = (rtl) => ({
    above: "top",
    below: "bottom",
    before: rtl ? "right" : "left",
    after: rtl ? "left" : "right"
  });
  var getAlignmentMap = () => ({
    start: "start",
    end: "end",
    top: "start",
    bottom: "end",
    center: void 0
  });
  var shouldAlignToCenter = (p4, a4) => {
    const positionedVertically = p4 === "above" || p4 === "below";
    const alignedVertically = a4 === "top" || a4 === "bottom";
    return positionedVertically && alignedVertically || !positionedVertically && !alignedVertically;
  };
  var toFloatingUIPlacement = (align, position2, rtl) => {
    const alignment = shouldAlignToCenter(position2, align) ? "center" : align;
    const computedPosition = position2 && getPositionMap(rtl)[position2];
    const computedAlignment = alignment && getAlignmentMap()[alignment];
    if (computedPosition && computedAlignment) {
      return `${computedPosition}-${computedAlignment}`;
    }
    return computedPosition;
  };

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/fromFloatingUIPlacement.js
  init_define_process();
  init_define_process_env();
  var getPositionMap2 = () => ({
    top: "above",
    bottom: "below",
    right: "after",
    left: "before"
  });
  var getAlignmentMap2 = (position2) => {
    if (position2 === "above" || position2 === "below") {
      return {
        start: "start",
        end: "end"
      };
    }
    return {
      start: "top",
      end: "bottom"
    };
  };
  var fromFloatingUIPlacement = (placement) => {
    const {
      side,
      alignment: floatingUIAlignment
    } = parseFloatingUIPlacement(placement);
    const position2 = getPositionMap2()[side];
    const alignment = floatingUIAlignment && getAlignmentMap2(position2)[floatingUIAlignment];
    return {
      position: position2,
      alignment
    };
  };

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/resolvePositioningShorthand.js
  init_define_process();
  init_define_process_env();
  var shorthandLookup = {
    above: {
      position: "above",
      align: "center"
    },
    "above-start": {
      position: "above",
      align: "start"
    },
    "above-end": {
      position: "above",
      align: "end"
    },
    below: {
      position: "below",
      align: "center"
    },
    "below-start": {
      position: "below",
      align: "start"
    },
    "below-end": {
      position: "below",
      align: "end"
    },
    before: {
      position: "before",
      align: "center"
    },
    "before-top": {
      position: "before",
      align: "top"
    },
    "before-bottom": {
      position: "before",
      align: "bottom"
    },
    after: {
      position: "after",
      align: "center"
    },
    "after-top": {
      position: "after",
      align: "top"
    },
    "after-bottom": {
      position: "after",
      align: "bottom"
    }
  };
  function resolvePositioningShorthand(shorthand) {
    if (shorthand === void 0 || shorthand === null) {
      return {};
    }
    if (typeof shorthand === "string") {
      return shorthandLookup[shorthand];
    }
    return shorthand;
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/useCallbackRef.js
  init_define_process();
  init_define_process_env();
  var React42 = __toESM(require_react());
  function useCallbackRef(initialValue, callback, skipInitialResolve) {
    const isFirst = React42.useRef(true);
    const [ref] = React42.useState(() => ({
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          const last = ref.value;
          if (last !== value) {
            ref.value = value;
            if (skipInitialResolve && isFirst.current) {
              return;
            }
            ref.callback(value, last);
          }
        }
      }
    }));
    useIsomorphicLayoutEffect(() => {
      isFirst.current = false;
    }, []);
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/debounce.js
  init_define_process();
  init_define_process_env();
  function debounce(fn) {
    let pending;
    return () => {
      if (!pending) {
        pending = new Promise((resolve) => {
          Promise.resolve().then(() => {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/hasAutoFocusFilter.js
  init_define_process();
  init_define_process_env();
  function hasAutofocusProp(node2) {
    const isAutoFocusableElement = node2.nodeName === "BUTTON" || node2.nodeName === "INPUT" || node2.nodeName === "SELECT" || node2.nodeName === "TEXTAREA";
    if (isAutoFocusableElement) {
      var _getReactFiberFromNode;
      return !!((_getReactFiberFromNode = getReactFiberFromNode(node2)) === null || _getReactFiberFromNode === void 0 ? void 0 : _getReactFiberFromNode.pendingProps.autoFocus);
    }
    return false;
  }
  function hasAutofocusFilter(node2) {
    return hasAutofocusProp(node2) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/writeArrowUpdates.js
  init_define_process();
  init_define_process_env();
  function writeArrowUpdates(options) {
    const {
      arrow,
      middlewareData
    } = options;
    if (!middlewareData.arrow || !arrow) {
      return;
    }
    const {
      x: arrowX,
      y: arrowY
    } = middlewareData.arrow;
    Object.assign(arrow.style, {
      left: `${arrowX}px`,
      top: `${arrowY}px`
    });
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/writeContainerupdates.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/constants.js
  init_define_process();
  init_define_process_env();
  var DATA_POSITIONING_INTERSECTING = "data-popper-is-intersecting";
  var DATA_POSITIONING_ESCAPED = "data-popper-escaped";
  var DATA_POSITIONING_HIDDEN = "data-popper-reference-hidden";
  var DATA_POSITIONING_PLACEMENT = "data-popper-placement";

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/writeContainerupdates.js
  function writeContainerUpdates(options) {
    var _middlewareData_hide, _middlewareData_hide1, _container_ownerDocument_defaultView;
    const {
      container,
      placement,
      middlewareData,
      strategy,
      lowPPI,
      coordinates
    } = options;
    if (!container) {
      return;
    }
    container.setAttribute(DATA_POSITIONING_PLACEMENT, placement);
    container.removeAttribute(DATA_POSITIONING_INTERSECTING);
    if (middlewareData.intersectionObserver.intersecting) {
      container.setAttribute(DATA_POSITIONING_INTERSECTING, "");
    }
    container.removeAttribute(DATA_POSITIONING_ESCAPED);
    if ((_middlewareData_hide = middlewareData.hide) === null || _middlewareData_hide === void 0 ? void 0 : _middlewareData_hide.escaped) {
      container.setAttribute(DATA_POSITIONING_ESCAPED, "");
    }
    container.removeAttribute(DATA_POSITIONING_HIDDEN);
    if ((_middlewareData_hide1 = middlewareData.hide) === null || _middlewareData_hide1 === void 0 ? void 0 : _middlewareData_hide1.referenceHidden) {
      container.setAttribute(DATA_POSITIONING_HIDDEN, "");
    }
    const devicePixelRatio = ((_container_ownerDocument_defaultView = container.ownerDocument.defaultView) === null || _container_ownerDocument_defaultView === void 0 ? void 0 : _container_ownerDocument_defaultView.devicePixelRatio) || 1;
    const x3 = Math.round(coordinates.x * devicePixelRatio) / devicePixelRatio;
    const y4 = Math.round(coordinates.y * devicePixelRatio) / devicePixelRatio;
    Object.assign(container.style, {
      transform: lowPPI ? `translate(${x3}px, ${y4}px)` : `translate3d(${x3}px, ${y4}px, 0)`,
      position: strategy
    });
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/coverTarget.js
  init_define_process();
  init_define_process_env();
  function coverTarget() {
    return {
      name: "coverTarget",
      fn: (middlewareArguments) => {
        const {
          placement,
          rects,
          x: x3,
          y: y4
        } = middlewareArguments;
        const basePlacement = parseFloatingUIPlacement(placement).side;
        const newCoords = {
          x: x3,
          y: y4
        };
        switch (basePlacement) {
          case "bottom":
            newCoords.y -= rects.reference.height;
            break;
          case "top":
            newCoords.y += rects.reference.height;
            break;
          case "left":
            newCoords.x += rects.reference.width;
            break;
          case "right":
            newCoords.x -= rects.reference.width;
            break;
        }
        return newCoords;
      }
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/flip.js
  init_define_process();
  init_define_process_env();
  function flip(options) {
    const {
      hasScrollableElement,
      flipBoundary,
      container,
      fallbackPositions = [],
      isRtl
    } = options;
    const fallbackPlacements = fallbackPositions.reduce((acc, shorthand) => {
      const {
        position: position2,
        align
      } = resolvePositioningShorthand(shorthand);
      const placement = toFloatingUIPlacement(align, position2, isRtl);
      if (placement) {
        acc.push(placement);
      }
      return acc;
    }, []);
    return b({
      ...hasScrollableElement && {
        boundary: "clippingAncestors"
      },
      ...flipBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, flipBoundary)
      },
      fallbackStrategy: "bestFit",
      ...fallbackPlacements.length && {
        fallbackPlacements
      }
    });
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/intersecting.js
  init_define_process();
  init_define_process_env();
  function intersecting() {
    return {
      name: "intersectionObserver",
      fn: async (middlewareArguments) => {
        const floatingRect = middlewareArguments.rects.floating;
        const altOverflow = await s(middlewareArguments, {
          altBoundary: true
        });
        const isIntersectingTop = altOverflow.top < floatingRect.height && altOverflow.top > 0;
        const isIntersectingBottom = altOverflow.bottom < floatingRect.height && altOverflow.bottom > 0;
        const isIntersecting = isIntersectingTop || isIntersectingBottom;
        return {
          data: {
            intersecting: isIntersecting
          }
        };
      }
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/maxSize.js
  init_define_process();
  init_define_process_env();
  function maxSize(autoSize, options) {
    const {
      container,
      overflowBoundary
    } = options;
    return B({
      ...overflowBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, overflowBoundary)
      },
      apply({
        availableHeight,
        availableWidth,
        elements,
        rects
      }) {
        const applyMaxWidth = autoSize === "always" || autoSize === "width-always" || rects.floating.width > availableWidth && (autoSize === true || autoSize === "width");
        const applyMaxHeight = autoSize === "always" || autoSize === "height-always" || rects.floating.height > availableHeight && (autoSize === true || autoSize === "height");
        if (applyMaxHeight) {
          Object.assign(elements.floating.style, {
            maxHeight: `${availableHeight}px`,
            boxSizing: "border-box",
            overflowY: "auto"
          });
        }
        if (applyMaxWidth) {
          Object.assign(elements.floating.style, {
            maxWidth: `${availableWidth}px`,
            boxSizing: "border-box",
            overflowX: "auto"
          });
        }
      }
    });
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/offset.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/utils/getFloatingUIOffset.js
  init_define_process();
  init_define_process_env();
  function getFloatingUIOffset(rawOffset) {
    if (!rawOffset) {
      return rawOffset;
    }
    if (typeof rawOffset === "number" || typeof rawOffset === "object") {
      return rawOffset;
    }
    return ({
      rects: {
        floating,
        reference
      },
      placement
    }) => {
      const {
        position: position2,
        alignment
      } = fromFloatingUIPlacement(placement);
      return rawOffset({
        positionedRect: floating,
        targetRect: reference,
        position: position2,
        alignment
      });
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/offset.js
  function offset(offsetValue) {
    const floatingUIOffset = getFloatingUIOffset(offsetValue);
    return D(floatingUIOffset);
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/middleware/shift.js
  init_define_process();
  init_define_process_env();
  function shift(options) {
    const {
      hasScrollableElement,
      disableTether,
      overflowBoundary,
      container,
      overflowBoundaryPadding,
      isRtl
    } = options;
    return k({
      ...hasScrollableElement && {
        boundary: "clippingAncestors"
      },
      ...disableTether && {
        crossAxis: disableTether === "all",
        limiter: O({
          crossAxis: disableTether !== "all",
          mainAxis: false
        })
      },
      ...overflowBoundaryPadding && {
        padding: toFloatingUIPadding(overflowBoundaryPadding, isRtl)
      },
      ...overflowBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, overflowBoundary)
      }
    });
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/createPositionManager.js
  init_define_process();
  init_define_process_env();
  function createPositionManager(options) {
    const {
      container,
      target,
      arrow,
      strategy,
      middleware: middleware2,
      placement
    } = options;
    let isDestroyed = false;
    if (!target || !container) {
      return {
        updatePosition: () => void 0,
        dispose: () => void 0
      };
    }
    let isFirstUpdate = true;
    const scrollParents = /* @__PURE__ */ new Set();
    const targetWindow = container.ownerDocument.defaultView;
    Object.assign(container.style, {
      position: "fixed",
      left: 0,
      top: 0,
      margin: 0
    });
    const forceUpdate = () => {
      if (isDestroyed) {
        return;
      }
      if (isFirstUpdate) {
        scrollParents.add(getScrollParent(container));
        if (isHTMLElement(target)) {
          scrollParents.add(getScrollParent(target));
        }
        scrollParents.forEach((scrollParent) => {
          scrollParent.addEventListener("scroll", updatePosition);
        });
        isFirstUpdate = false;
      }
      Object.assign(container.style, {
        position: strategy
      });
      z(target, container, {
        placement,
        middleware: middleware2,
        strategy
      }).then(({
        x: x3,
        y: y4,
        middlewareData,
        placement: computedPlacement
      }) => {
        if (isDestroyed) {
          return;
        }
        writeArrowUpdates({
          arrow,
          middlewareData
        });
        writeContainerUpdates({
          container,
          middlewareData,
          placement: computedPlacement,
          coordinates: {
            x: x3,
            y: y4
          },
          lowPPI: ((targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.devicePixelRatio) || 1) <= 1,
          strategy
        });
      }).catch((err) => {
        if (true) {
          console.error("[usePositioning]: Failed to calculate position", err);
        }
      });
    };
    const updatePosition = debounce(() => forceUpdate());
    const dispose = () => {
      isDestroyed = true;
      if (targetWindow) {
        targetWindow.removeEventListener("scroll", updatePosition);
        targetWindow.removeEventListener("resize", updatePosition);
      }
      scrollParents.forEach((scrollParent) => {
        scrollParent.removeEventListener("scroll", updatePosition);
      });
    };
    if (targetWindow) {
      targetWindow.addEventListener("scroll", updatePosition);
      targetWindow.addEventListener("resize", updatePosition);
    }
    updatePosition();
    return {
      updatePosition,
      dispose
    };
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/usePositioning.js
  function usePositioning(options) {
    const managerRef = React43.useRef(null);
    const targetRef = React43.useRef(null);
    const overrideTargetRef = React43.useRef(null);
    const containerRef = React43.useRef(null);
    const arrowRef = React43.useRef(null);
    const {
      enabled = true
    } = options;
    const resolvePositioningOptions = usePositioningOptions(options);
    const updatePositionManager = React43.useCallback(() => {
      if (managerRef.current) {
        managerRef.current.dispose();
      }
      managerRef.current = null;
      var _overrideTargetRef_current;
      const target = (_overrideTargetRef_current = overrideTargetRef.current) !== null && _overrideTargetRef_current !== void 0 ? _overrideTargetRef_current : targetRef.current;
      if (enabled && canUseDOM() && target && containerRef.current) {
        managerRef.current = createPositionManager({
          container: containerRef.current,
          target,
          arrow: arrowRef.current,
          ...resolvePositioningOptions(containerRef.current, arrowRef.current)
        });
      }
    }, [enabled, resolvePositioningOptions]);
    const setOverrideTarget = useEventCallback((target) => {
      overrideTargetRef.current = target;
      updatePositionManager();
    });
    React43.useImperativeHandle(options.positioningRef, () => {
      return {
        updatePosition: () => {
          var _managerRef_current;
          return (_managerRef_current = managerRef.current) === null || _managerRef_current === void 0 ? void 0 : _managerRef_current.updatePosition();
        },
        setTarget: (target) => {
          if (options.target && true) {
            const err = new Error();
            console.warn("Imperative setTarget should not be used at the same time as target option");
            console.warn(err.stack);
          }
          setOverrideTarget(target);
        }
      };
    }, [options.target, setOverrideTarget]);
    useIsomorphicLayoutEffect(() => {
      var _options_target;
      setOverrideTarget((_options_target = options.target) !== null && _options_target !== void 0 ? _options_target : null);
    }, [options.target, setOverrideTarget]);
    useIsomorphicLayoutEffect(() => {
      updatePositionManager();
    }, [updatePositionManager]);
    if (true) {
      React43.useEffect(() => {
        if (containerRef.current) {
          var _contentNode_ownerDocument;
          const contentNode = containerRef.current;
          const treeWalker = (_contentNode_ownerDocument = contentNode.ownerDocument) === null || _contentNode_ownerDocument === void 0 ? void 0 : _contentNode_ownerDocument.createTreeWalker(contentNode, NodeFilter.SHOW_ELEMENT, {
            acceptNode: hasAutofocusFilter
          });
          while (treeWalker.nextNode()) {
            const node2 = treeWalker.currentNode;
            console.warn("<Popper>:", node2);
            console.warn(['<Popper>: ^ this node contains "autoFocus" prop on a React element. This can break the initial', "positioning of an element and cause a window jump effect. This issue occurs because React polyfills", '"autoFocus" behavior to solve inconsistencies between different browsers:', "https://github.com/facebook/react/issues/11851#issuecomment-351787078", "\n", 'However, ".focus()" in this case occurs before any other React effects will be executed', "(React.useEffect(), componentDidMount(), etc.) and we can not prevent this behavior. If you really", 'want to use "autoFocus" please add "position: fixed" to styles of the element that is wrapped by', '"Popper".', `In general, it's not recommended to use "autoFocus" as it may break accessibility aspects:`, "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-autofocus.md", "\n", 'We suggest to use the "trapFocus" prop on Fluent components or a catch "ref" and then use', '"ref.current.focus" in React.useEffect():', "https://reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-dom-element"].join(" "));
          }
        }
      }, []);
    }
    const setTarget2 = useCallbackRef(null, (target) => {
      if (targetRef.current !== target) {
        targetRef.current = target;
        updatePositionManager();
      }
    });
    const setContainer = useCallbackRef(null, (container) => {
      if (containerRef.current !== container) {
        containerRef.current = container;
        updatePositionManager();
      }
    });
    const setArrow = useCallbackRef(null, (arrow) => {
      if (arrowRef.current !== arrow) {
        arrowRef.current = arrow;
        updatePositionManager();
      }
    });
    return {
      targetRef: setTarget2,
      containerRef: setContainer,
      arrowRef: setArrow
    };
  }
  function usePositioningOptions(options) {
    const {
      align,
      arrowPadding,
      autoSize,
      coverTarget: coverTarget2,
      flipBoundary,
      offset: offset2,
      overflowBoundary,
      pinned,
      position: position2,
      unstable_disableTether: disableTether,
      positionFixed,
      overflowBoundaryPadding,
      fallbackPositions
    } = options;
    const {
      dir
    } = useFluent();
    const isRtl = dir === "rtl";
    const strategy = positionFixed ? "fixed" : "absolute";
    return React43.useCallback((container, arrow) => {
      const hasScrollableElement = hasScrollParent(container);
      const middleware2 = [offset2 && offset(offset2), coverTarget2 && coverTarget(), !pinned && flip({
        container,
        flipBoundary,
        hasScrollableElement,
        isRtl,
        fallbackPositions
      }), shift({
        container,
        hasScrollableElement,
        overflowBoundary,
        disableTether,
        overflowBoundaryPadding,
        isRtl
      }), autoSize && maxSize(autoSize, {
        container,
        overflowBoundary
      }), intersecting(), arrow && u({
        element: arrow,
        padding: arrowPadding
      }), P({
        strategy: "referenceHidden"
      }), P({
        strategy: "escaped"
      })].filter(Boolean);
      const placement = toFloatingUIPlacement(align, position2, isRtl);
      return {
        placement,
        middleware: middleware2,
        strategy
      };
    }, [align, arrowPadding, autoSize, coverTarget2, disableTether, flipBoundary, isRtl, offset2, overflowBoundary, pinned, position2, strategy, overflowBoundaryPadding, fallbackPositions]);
  }

  // node_modules/.pnpm/@fluentui+react-positioning@9.5.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-positioning/lib/usePositioningMouseTarget.js
  init_define_process();
  init_define_process_env();
  var React44 = __toESM(require_react());
  var usePositioningMouseTarget = (initialState2) => {
    const [virtualElement, setVirtualElement] = React44.useState(initialState2);
    const setVirtualMouseTarget = (event) => {
      if (event === void 0 || event === null) {
        setVirtualElement(void 0);
        return;
      }
      let mouseevent;
      if (!(event instanceof MouseEvent)) {
        mouseevent = event.nativeEvent;
      } else {
        mouseevent = event;
      }
      if (!(mouseevent instanceof MouseEvent) && true) {
        console.error("usePositioningMouseTarget should only be used with MouseEvent");
      }
      const contextTarget = createVirtualElementFromClick(mouseevent);
      setVirtualElement(contextTarget);
    };
    return [virtualElement, setVirtualMouseTarget];
  };

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  init_define_process();
  init_define_process_env();
  var React50 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  init_define_process();
  init_define_process_env();
  var React48 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/elementContains.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/getParent.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/isVirtualElement.js
  init_define_process();
  init_define_process_env();
  function isVirtualElement(element) {
    return element && !!element._virtual;
  }

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/getParent.js
  function getVirtualParent(child) {
    return isVirtualElement(child) ? child._virtual.parent || null : null;
  }
  function getParent(child, options = {}) {
    if (!child) {
      return null;
    }
    if (!options.skipVirtual) {
      const virtualParent = getVirtualParent(child);
      if (virtualParent) {
        return virtualParent;
      }
    }
    return (child === null || child === void 0 ? void 0 : child.parentNode) || null;
  }

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/elementContains.js
  function elementContains(parent, child) {
    if (!parent || !child) {
      return false;
    }
    if (parent === child) {
      return true;
    } else {
      const set4 = /* @__PURE__ */ new WeakSet();
      while (child) {
        const nextParent = getParent(child, {
          skipVirtual: set4.has(child)
        });
        set4.add(child);
        if (nextParent === parent) {
          return true;
        }
        child = nextParent;
      }
    }
    return false;
  }

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/virtualParent/setVirtualParent.js
  init_define_process();
  init_define_process_env();
  function setVirtualParent(child, parent) {
    if (!child) {
      return;
    }
    const virtualChild = child;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {};
    }
    virtualChild._virtual.parent = parent;
  }

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  init_define_process();
  init_define_process_env();
  var React47 = __toESM(require_react());

  // node_modules/.pnpm/use-disposable@1.0.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/use-disposable/lib/index.js
  init_define_process();
  init_define_process_env();
  var React45 = __toESM(require_react(), 1);
  var React46 = __toESM(require_react(), 1);
  var React210 = __toESM(require_react(), 1);
  var React310 = __toESM(require_react(), 1);
  var getCurrentOwner = () => React45.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
  var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
  var useIsStrictMode = () => {
    if (false) {
      return false;
    }
    const isStrictMode = React45.useRef(void 0);
    const reactMajorVersion = React45.useMemo(() => {
      return Number(React45.version.split(".")[0]);
    }, [React45.version]);
    if (isNaN(reactMajorVersion) || reactMajorVersion < 18) {
      return false;
    }
    if (isStrictMode.current === void 0) {
      let currentOwner = getCurrentOwner();
      while (currentOwner.return) {
        currentOwner = currentOwner.return;
        if (currentOwner.type === REACT_STRICT_MODE_TYPE || currentOwner.elementType === REACT_STRICT_MODE_TYPE) {
          isStrictMode.current = true;
        }
      }
    }
    return !!isStrictMode.current;
  };
  var effectSet = /* @__PURE__ */ new WeakSet();
  function useStrictEffect(effect, deps) {
    const currentOwner = getCurrentOwner();
    React210.useEffect(() => {
      if (!effectSet.has(currentOwner)) {
        effectSet.add(currentOwner);
        effect();
        return;
      }
      const dispose = effect();
      return dispose;
    }, deps);
  }
  var memoSet = /* @__PURE__ */ new WeakSet();
  function useStrictMemo(factory, deps) {
    return React310.useMemo(() => {
      const currentOwner = getCurrentOwner();
      if (!memoSet.has(currentOwner)) {
        memoSet.add(currentOwner);
        return null;
      }
      return factory();
    }, deps);
  }
  function useDisposable(factory, deps) {
    var _a;
    const isStrictMode = useIsStrictMode() && true;
    const useMemo42 = isStrictMode ? useStrictMemo : React46.useMemo;
    const useEffect34 = isStrictMode ? useStrictEffect : React46.useEffect;
    const [disposable, dispose] = (_a = useMemo42(() => factory(), deps)) != null ? _a : [
      null,
      () => null
    ];
    useEffect34(() => {
      return dispose;
    }, deps);
    return disposable;
  }

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  var useInsertionEffect4 = React47["useInsertionEffect"];
  var useStyles2 = /* @__PURE__ */ __styles2({
    root: {
      qhf8xq: "f10pi13n",
      Bj3rh1h: "f494woh"
    }
  }, {
    d: [".f10pi13n{position:relative;}", ".f494woh{z-index:1000000;}"]
  });
  var usePortalMountNode = (options) => {
    const {
      targetDocument,
      dir
    } = useFluent();
    const focusVisibleRef = useFocusVisible();
    const classes = useStyles2();
    const themeClassName = useThemeClassName();
    const className = mergeClasses(themeClassName, classes.root, options.className);
    const element = useDisposable(() => {
      if (targetDocument === void 0 || options.disabled) {
        return [null, () => null];
      }
      const newElement = targetDocument.createElement("div");
      targetDocument.body.appendChild(newElement);
      return [newElement, () => newElement.remove()];
    }, [targetDocument]);
    if (useInsertionEffect4) {
      useInsertionEffect4(() => {
        if (!element) {
          return;
        }
        const classesToApply = className.split(" ").filter(Boolean);
        element.classList.add(...classesToApply);
        element.setAttribute("dir", dir);
        focusVisibleRef.current = element;
        return () => {
          element.classList.remove(...classesToApply);
          element.removeAttribute("dir");
        };
      }, [className, dir, element, focusVisibleRef]);
    } else {
      React47.useMemo(() => {
        if (!element) {
          return;
        }
        element.className = className;
        element.setAttribute("dir", dir);
        focusVisibleRef.current = element;
      }, [className, dir, element, focusVisibleRef]);
    }
    return element;
  };

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  function toMountNodeProps(mountNode) {
    if (isHTMLElement(mountNode)) {
      return {
        element: mountNode
      };
    }
    if (typeof mountNode === "object") {
      if (mountNode === null) {
        return {
          element: null
        };
      }
      return mountNode;
    }
    return {};
  }
  var usePortal_unstable = (props) => {
    const {
      element,
      className
    } = toMountNodeProps(props.mountNode);
    const virtualParentRootRef = React48.useRef(null);
    const fallbackElement = usePortalMountNode({
      disabled: !!element,
      className
    });
    const state = {
      children: props.children,
      mountNode: element !== null && element !== void 0 ? element : fallbackElement,
      virtualParentRootRef
    };
    React48.useEffect(() => {
      if (state.virtualParentRootRef.current && state.mountNode) {
        setVirtualParent(state.mountNode, state.virtualParentRootRef.current);
      }
      return () => {
        if (state.mountNode) {
          setVirtualParent(state.mountNode, void 0);
        }
      };
    }, [state.virtualParentRootRef, state.mountNode]);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/renderPortal.js
  init_define_process();
  init_define_process_env();
  var ReactDOM = __toESM(require_react_dom());
  var React49 = __toESM(require_react());
  var renderPortal_unstable = (state) => {
    return /* @__PURE__ */ React49.createElement("span", {
      hidden: true,
      ref: state.virtualParentRootRef
    }, state.mountNode && /* @__PURE__ */ ReactDOM.createPortal(state.children, state.mountNode));
  };

  // node_modules/.pnpm/@fluentui+react-portal@9.2.6_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  var Portal = (props) => {
    const state = usePortal_unstable(props);
    return renderPortal_unstable(state);
  };
  Portal.displayName = "Portal";

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/Button.js
  init_define_process();
  init_define_process_env();
  var React53 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/renderButton.js
  init_define_process();
  init_define_process_env();
  var renderButton_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    const {
      iconOnly,
      iconPosition
    } = state;
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, iconPosition !== "after" && slots.icon && /* @__PURE__ */ createElement5(slots.icon, slotProps.icon), !iconOnly && state.root.children, iconPosition === "after" && slots.icon && /* @__PURE__ */ createElement5(slots.icon, slotProps.icon));
  };

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  init_define_process();
  init_define_process_env();
  var React52 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js
  init_define_process();
  init_define_process_env();
  var React51 = __toESM(require_react());
  var buttonContext = /* @__PURE__ */ React51.createContext(void 0);
  var buttonContextDefaultValue = {};
  var ButtonContextProvider = buttonContext.Provider;
  var _React_useContext;
  var useButtonContext = () => (_React_useContext = React51.useContext(buttonContext)) !== null && _React_useContext !== void 0 ? _React_useContext : buttonContextDefaultValue;

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var useButton_unstable = (props, ref) => {
    const {
      size: contextSize
    } = useButtonContext();
    const {
      appearance = "secondary",
      as = "button",
      disabled = false,
      disabledFocusable = false,
      icon,
      iconPosition = "before",
      shape = "rounded",
      size = contextSize !== null && contextSize !== void 0 ? contextSize : "medium"
    } = props;
    const iconShorthand = resolveShorthand(icon);
    return {
      // Props passed at the top-level
      appearance,
      disabled,
      disabledFocusable,
      iconPosition,
      shape,
      size,
      // State calculated from a set of props
      iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !props.children),
      // Slots definition
      components: {
        root: "button",
        icon: "span"
      },
      root: getNativeElementProps(as, useARIAButtonShorthand(props, {
        required: true,
        defaultProps: {
          ref,
          type: "button"
        }
      })),
      icon: iconShorthand
    };
  };

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.js
  init_define_process();
  init_define_process_env();
  var buttonClassNames = {
    root: "fui-Button",
    icon: "fui-Button__icon"
  };
  var useRootBaseClassName = /* @__PURE__ */ __resetStyles2("rsawnvh", "r1eny37h", [".rsawnvh{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;box-sizing:border-box;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".rsawnvh:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".rsawnvh:hover .fui-Icon-filled{display:inline;}", ".rsawnvh:hover .fui-Icon-regular{display:none;}", ".rsawnvh:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".rsawnvh:hover:active .fui-Icon-filled{display:inline;}", ".rsawnvh:hover:active .fui-Icon-regular{display:none;}", "@media screen and (prefers-reduced-motion: reduce){.rsawnvh{transition-duration:0.01ms;}}", "@media (forced-colors: active){.rsawnvh:focus{border-color:ButtonText;}.rsawnvh:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.rsawnvh:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", ".rsawnvh:focus{outline-style:none;}", ".rsawnvh:focus-visible{outline-style:none;}", ".rsawnvh[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}", ".r1eny37h{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;box-sizing:border-box;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".r1eny37h:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".r1eny37h:hover .fui-Icon-filled{display:inline;}", ".r1eny37h:hover .fui-Icon-regular{display:none;}", ".r1eny37h:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".r1eny37h:hover:active .fui-Icon-filled{display:inline;}", ".r1eny37h:hover:active .fui-Icon-regular{display:none;}", "@media screen and (prefers-reduced-motion: reduce){.r1eny37h{transition-duration:0.01ms;}}", "@media (forced-colors: active){.r1eny37h:focus{border-color:ButtonText;}.r1eny37h:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.r1eny37h:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", ".r1eny37h:focus{outline-style:none;}", ".r1eny37h:focus-visible{outline-style:none;}", ".r1eny37h[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}"]);
  var useIconBaseClassName = /* @__PURE__ */ __resetStyles2("rywnvv2", null, [".rywnvv2{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;font-size:20px;height:20px;width:20px;--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}"]);
  var useRootStyles2 = /* @__PURE__ */ __styles2({
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      iro3zm: "fwiml72"
    },
    primary: {
      De3pzq: "ffp7eso",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1phragk",
      Jwef8y: "f15wkkf3",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f1rq72xc",
      iro3zm: "fnp9lpt",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1d6v5y2",
      Bsw6fvg: "f1rirnrt",
      Bjwas2f: "f1uu00uk",
      Bn1d65q: ["fkvaka8", "f9a0qzu"],
      Bxeuatn: "f1ux7til",
      n51gp8: ["f9a0qzu", "fkvaka8"],
      Bbusuzp: "f1lkg8j3",
      ycbfsm: "fkc42ay",
      Bqrx1nm: "fq7113v",
      pgvf35: "ff1wgvm",
      Bh7lczh: ["fiob0tu", "f1x4h75k"],
      dpv3f4: "f1j6scgf",
      Bpnjhaq: ["f1x4h75k", "fiob0tu"],
      ze5xyy: "f4xjyn1",
      g2kj27: "fbgcvur",
      Bf756sw: "f1ks1yx8",
      Bow2dr7: ["f1o6qegi", "fmxjhhp"],
      Bvhedfk: "fcnxywj",
      Gye4lf: ["fmxjhhp", "f1o6qegi"],
      pc6evw: "f9ddjv3"
    },
    secondary: {},
    subtle: {
      De3pzq: "fhovq9v",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "f1t94bn6",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "fnwyq0v",
      Bbdnnc7: "fy5bs14",
      iro3zm: "fsv2rcd",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1omzyqd",
      x3br3k: "fj8yq94"
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f139oj5f",
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1fg1p5m"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    },
    rounded: {},
    square: {
      Bbmb7ep: ["fzi6hpg", "fyowgf4"],
      Beyfa6y: ["fyowgf4", "fzi6hpg"],
      B7oj6ja: ["f3fg2lr", "f13av6d4"],
      Btl43ni: ["f13av6d4", "f3fg2lr"]
    },
    small: {
      Bf4jedk: "fh7ncta",
      z8tnut: "f1khb0e9",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1jnq6q7",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      Bbmb7ep: ["fclariu", "fyjfh2l"],
      Beyfa6y: ["fyjfh2l", "fclariu"],
      B7oj6ja: ["f11xeu6h", "f1knf8zw"],
      Btl43ni: ["f1knf8zw", "f11xeu6h"],
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    smallWithIcon: {
      Byoj8tv: "f1brlhvm",
      z8tnut: "f1sl3k7w"
    },
    medium: {},
    large: {
      Bf4jedk: "f14es27b",
      z8tnut: "fp9bwmr",
      z189sj: ["fjodcmx", "fhx4nu"],
      Byoj8tv: "f150uoa4",
      uwmqm3: ["fhx4nu", "fjodcmx"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    largeWithIcon: {
      Byoj8tv: "fy7v416",
      z8tnut: "f1a1bwwz"
    }
  }, {
    d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}", ".fzi6hpg{border-bottom-right-radius:var(--borderRadiusNone);}", ".fyowgf4{border-bottom-left-radius:var(--borderRadiusNone);}", ".f3fg2lr{border-top-right-radius:var(--borderRadiusNone);}", ".f13av6d4{border-top-left-radius:var(--borderRadiusNone);}", ".fh7ncta{min-width:64px;}", ".f1khb0e9{padding-top:3px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1jnq6q7{padding-bottom:3px;}", ".fclariu{border-bottom-right-radius:3px;}", ".fyjfh2l{border-bottom-left-radius:3px;}", ".f11xeu6h{border-top-right-radius:3px;}", ".f1knf8zw{border-top-left-radius:3px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1brlhvm{padding-bottom:1px;}", ".f1sl3k7w{padding-top:1px;}", ".f14es27b{min-width:96px;}", ".fp9bwmr{padding-top:8px;}", ".fjodcmx{padding-right:var(--spacingHorizontalL);}", ".fhx4nu{padding-left:var(--spacingHorizontalL);}", ".f150uoa4{padding-bottom:8px;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fy7v416{padding-bottom:7px;}", ".f1a1bwwz{padding-top:7px;}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".fy5bs14:hover .fui-Button__icon{color:var(--colorNeutralForeground2BrandHover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".fj8yq94:hover:active .fui-Button__icon{color:var(--colorNeutralForeground2BrandPressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
    m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1uu00uk{border-top-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkvaka8{border-right-color:HighlightText;}.f9a0qzu{border-left-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ux7til{border-bottom-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9a0qzu{border-left-color:HighlightText;}.fkvaka8{border-right-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fiob0tu:hover{border-right-color:Highlight;}.f1x4h75k:hover{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fmxjhhp:hover:active{border-left-color:Highlight;}.f1o6qegi:hover:active{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootDisabledStyles = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1bg9a2p",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr",
      Jwef8y: "f1falr9n",
      Bgoe8wy: "f12mpcsy",
      Bwzppfd: ["f1gwvigk", "f18rmfxp"],
      oetu4i: "f1jnshp0",
      gg5e9n: ["f18rmfxp", "f1gwvigk"],
      Bi91k9c: "fvgxktp",
      eoavqd: "fphbwmw",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      iro3zm: "f1t6o4dc",
      b661bw: "f10ztigi",
      Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
      B9zn80p: "f12zbtn2",
      Bpld233: ["f1gzf82w", "f1ft5sdu"],
      B2d53fq: "fcvwxyo",
      c3iz72: "f8w4c43",
      em6i61: "f1ol4fw6",
      vm6p8p: "f1q1lw4e"
    },
    highContrast: {
      Bsw6fvg: "f4lkoma",
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bbusuzp: "f1dcs8yz",
      G867l3: "fjwq6ea",
      gdbnj: ["f1lr3nhc", "f1mbxvi6"],
      mxns5l: "fn5gmvv",
      o3nasb: ["f1mbxvi6", "f1lr3nhc"],
      Bqrx1nm: "f1vmkb5g",
      pgvf35: "f53ppgq",
      Bh7lczh: ["f1663y11", "f80fkiy"],
      dpv3f4: "f18v5270",
      Bpnjhaq: ["f80fkiy", "f1663y11"],
      ze5xyy: "f1kc2mi9",
      g2kj27: "f1y0svfh",
      Bf756sw: "fihuait",
      Bow2dr7: ["fnxhupq", "fyd6l6x"],
      Bvhedfk: "fx507ft",
      Gye4lf: ["fyd6l6x", "fnxhupq"],
      pc6evw: "fb3rf2x"
    },
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "f9ql6rf",
      iro3zm: "f3h1zc4"
    },
    primary: {
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    secondary: {},
    subtle: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    }
  }, {
    d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}"],
    h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f8w4c43:hover:active{cursor:not-allowed;}", ".f1ol4fw6:hover:active .fui-Icon-filled{display:none;}", ".f1q1lw4e:hover:active .fui-Icon-regular{display:inline;}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f3h1zc4:hover:active{background-color:var(--colorTransparentBackground);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}"],
    m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rvyvqg{border-right-color:GrayText;}.f14g86mu{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1mbxvi6:focus{border-left-color:GrayText;}.f1lr3nhc:focus{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1vmkb5g:hover{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f53ppgq:hover{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1663y11:hover{border-right-color:GrayText;}.f80fkiy:hover{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f18v5270:hover{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f80fkiy:hover{border-left-color:GrayText;}.f1663y11:hover{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1y0svfh:hover:active{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fihuait:hover:active{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnxhupq:hover:active{border-right-color:GrayText;}.fyd6l6x:hover:active{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fx507ft:hover:active{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fyd6l6x:hover:active{border-left-color:GrayText;}.fnxhupq:hover:active{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fb3rf2x:hover:active{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootFocusStyles = /* @__PURE__ */ __styles2({
    circular: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      kdpuga: ["fanj13w", "f1gou5sz"],
      Bw81rd7: ["f1gou5sz", "fanj13w"],
      B6xbmo0: ["fulf6x3", "foeb2x"],
      dm238s: ["foeb2x", "fulf6x3"]
    },
    rounded: {},
    square: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      kdpuga: ["f1ndz5i7", "f1co4qro"],
      Bw81rd7: ["f1co4qro", "f1ndz5i7"],
      B6xbmo0: ["f146y5a9", "f1k2ftg"],
      dm238s: ["f1k2ftg", "f146y5a9"]
    },
    primary: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f15my96h",
      Bci5o5g: ["f8yq1e5", "f59w28j"],
      n8qw10: "f1mze7uc",
      Bdrgwmp: ["f59w28j", "f8yq1e5"],
      j6ew2k: "ftbnf46"
    },
    small: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      kdpuga: ["fg3gtdo", "fwii5mg"],
      Bw81rd7: ["fwii5mg", "fg3gtdo"],
      B6xbmo0: ["f1palphq", "f12nxie7"],
      dm238s: ["f12nxie7", "f1palphq"]
    },
    medium: {},
    large: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      kdpuga: ["ft3lys4", "f1la4x2g"],
      Bw81rd7: ["f1la4x2g", "ft3lys4"],
      B6xbmo0: ["f156y0zm", "fakimq4"],
      dm238s: ["fakimq4", "f156y0zm"]
    }
  }, {
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    d: [".fanj13w[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1gou5sz[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusCircular);}", ".fulf6x3[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusCircular);}", ".foeb2x[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusCircular);}", ".f1ndz5i7[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusNone);}", ".f1co4qro[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusNone);}", ".f146y5a9[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusNone);}", ".f1k2ftg[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusNone);}", ".f15my96h[data-fui-focus-visible]{border-top-color:var(--colorNeutralForegroundOnBrand);}", ".f8yq1e5[data-fui-focus-visible]{border-right-color:var(--colorNeutralForegroundOnBrand);}", ".f59w28j[data-fui-focus-visible]{border-left-color:var(--colorNeutralForegroundOnBrand);}", ".f1mze7uc[data-fui-focus-visible]{border-bottom-color:var(--colorNeutralForegroundOnBrand);}", ".ftbnf46[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 2px var(--colorStrokeFocus2);}", ".fg3gtdo[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fwii5mg[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1palphq[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusSmall);}", ".f12nxie7[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusSmall);}", ".ft3lys4[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusLarge);}", ".f1la4x2g[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusLarge);}", ".f156y0zm[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusLarge);}", ".fakimq4[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusLarge);}"]
  });
  var useRootIconOnlyStyles = /* @__PURE__ */ __styles2({
    small: {
      z8tnut: "f1sl3k7w",
      z189sj: ["f136y8j8", "f10xn8zz"],
      Byoj8tv: "f1brlhvm",
      uwmqm3: ["f10xn8zz", "f136y8j8"],
      Bf4jedk: "f17fgpbq",
      B2u0y6b: "f1jt17bm"
    },
    medium: {
      z8tnut: "f1sbtcvk",
      z189sj: ["fwiuce9", "f15vdbe4"],
      Byoj8tv: "fdghr9",
      uwmqm3: ["f15vdbe4", "fwiuce9"],
      Bf4jedk: "fwbmr0d",
      B2u0y6b: "f44c6la"
    },
    large: {
      z8tnut: "f1a1bwwz",
      z189sj: ["f18k1jr3", "f1rtp3s9"],
      Byoj8tv: "fy7v416",
      uwmqm3: ["f1rtp3s9", "f18k1jr3"],
      Bf4jedk: "f12clzc2",
      B2u0y6b: "fjy1crr"
    }
  }, {
    d: [".f1sl3k7w{padding-top:1px;}", ".f136y8j8{padding-right:1px;}", ".f10xn8zz{padding-left:1px;}", ".f1brlhvm{padding-bottom:1px;}", ".f17fgpbq{min-width:24px;}", ".f1jt17bm{max-width:24px;}", ".f1sbtcvk{padding-top:5px;}", ".fwiuce9{padding-right:5px;}", ".f15vdbe4{padding-left:5px;}", ".fdghr9{padding-bottom:5px;}", ".fwbmr0d{min-width:32px;}", ".f44c6la{max-width:32px;}", ".f1a1bwwz{padding-top:7px;}", ".f18k1jr3{padding-right:7px;}", ".f1rtp3s9{padding-left:7px;}", ".fy7v416{padding-bottom:7px;}", ".f12clzc2{min-width:40px;}", ".fjy1crr{max-width:40px;}"]
  });
  var useIconStyles = /* @__PURE__ */ __styles2({
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3",
      Bqrlyyl: "fbaiahx"
    },
    medium: {},
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun",
      Bqrlyyl: "f1exjqw5"
    },
    before: {
      t21cq0: ["f1nizpg2", "f1a695kz"]
    },
    after: {
      Frg6f3: ["f1a695kz", "f1nizpg2"]
    }
  }, {
    d: [".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".fbaiahx{--fui-Button__icon--spacing:var(--spacingHorizontalXS);}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".f1exjqw5{--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}", ".f1nizpg2{margin-right:var(--fui-Button__icon--spacing);}", ".f1a695kz{margin-left:var(--fui-Button__icon--spacing);}"]
  });
  var useButtonStyles_unstable = (state) => {
    const rootBaseClassName = useRootBaseClassName();
    const iconBaseClassName = useIconBaseClassName();
    const rootStyles = useRootStyles2();
    const rootDisabledStyles = useRootDisabledStyles();
    const rootFocusStyles = useRootFocusStyles();
    const rootIconOnlyStyles = useRootIconOnlyStyles();
    const iconStyles = useIconStyles();
    const {
      appearance,
      disabled,
      disabledFocusable,
      icon,
      iconOnly,
      iconPosition,
      shape,
      size
    } = state;
    state.root.className = mergeClasses(
      buttonClassNames.root,
      rootBaseClassName,
      appearance && rootStyles[appearance],
      rootStyles[size],
      icon && size === "small" && rootStyles.smallWithIcon,
      icon && size === "large" && rootStyles.largeWithIcon,
      rootStyles[shape],
      // Disabled styles
      (disabled || disabledFocusable) && rootDisabledStyles.base,
      (disabled || disabledFocusable) && rootDisabledStyles.highContrast,
      appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
      // Focus styles
      appearance === "primary" && rootFocusStyles.primary,
      rootFocusStyles[size],
      rootFocusStyles[shape],
      // Icon-only styles
      iconOnly && rootIconOnlyStyles[size],
      // User provided class name
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(buttonClassNames.icon, iconBaseClassName, state.root.children !== void 0 && state.root.children !== null && iconStyles[iconPosition], iconStyles[size], state.icon.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-button@9.3.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var Button = /* @__PURE__ */ React53.forwardRef((props, ref) => {
    const state = useButton_unstable(props, ref);
    useButtonStyles_unstable(state);
    const {
      useButtonStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderButton_unstable(state);
  });
  Button.displayName = "Button";

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  init_define_process();
  init_define_process_env();
  var React61 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  init_define_process();
  init_define_process_env();
  var React60 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/Field.js
  init_define_process();
  init_define_process_env();
  var React59 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/renderField.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/contexts/FieldContext.js
  init_define_process();
  init_define_process_env();
  var React54 = __toESM(require_react());
  var FieldContext = /* @__PURE__ */ React54.createContext(void 0);
  var FieldContextProvider = FieldContext.Provider;
  var useFieldContext_unstable = () => React54.useContext(FieldContext);

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/contexts/useFieldContextValues.js
  init_define_process();
  init_define_process_env();
  var React55 = __toESM(require_react());
  var useFieldContextValues_unstable = (state) => {
    var _state_label, _state_label1, _state_validationMessage, _state_hint;
    const {
      generatedControlId,
      orientation,
      required,
      size,
      validationState
    } = state;
    const labelFor = (_state_label = state.label) === null || _state_label === void 0 ? void 0 : _state_label.htmlFor;
    const labelId = (_state_label1 = state.label) === null || _state_label1 === void 0 ? void 0 : _state_label1.id;
    const validationMessageId = (_state_validationMessage = state.validationMessage) === null || _state_validationMessage === void 0 ? void 0 : _state_validationMessage.id;
    const hintId = (_state_hint = state.hint) === null || _state_hint === void 0 ? void 0 : _state_hint.id;
    const field = React55.useMemo(() => ({
      generatedControlId,
      hintId,
      labelFor,
      labelId,
      orientation,
      required,
      size,
      validationMessageId,
      validationState
    }), [generatedControlId, hintId, labelFor, labelId, orientation, required, size, validationMessageId, validationState]);
    return {
      field
    };
  };

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/contexts/useFieldControlProps.js
  init_define_process();
  init_define_process_env();
  var _props;
  var _props1;
  var _arialabelledby;
  var _props2;
  var _ariainvalid;
  var _props3;
  var _props4;
  var _ariarequired;
  var _props5;
  function useFieldControlProps_unstable(props, options) {
    return getFieldControlProps(useFieldContext_unstable(), props, options);
  }
  function getFieldControlProps(context, props, options) {
    if (!context) {
      return props;
    }
    props = {
      ...props
    };
    const {
      generatedControlId,
      hintId,
      labelFor,
      labelId,
      required,
      validationMessageId,
      validationState
    } = context;
    if (generatedControlId) {
      var _id;
      (_id = (_props = props).id) !== null && _id !== void 0 ? _id : _props.id = generatedControlId;
    }
    if (labelId && (!(options === null || options === void 0 ? void 0 : options.supportsLabelFor) || labelFor !== props.id)) {
      var _2;
      (_2 = (_props1 = props)[_arialabelledby = "aria-labelledby"]) !== null && _2 !== void 0 ? _2 : _props1[_arialabelledby] = labelId;
    }
    if (validationMessageId || hintId) {
      props["aria-describedby"] = [validationMessageId, hintId, props === null || props === void 0 ? void 0 : props["aria-describedby"]].filter(Boolean).join(" ");
    }
    if (validationState === "error") {
      var _1;
      (_1 = (_props2 = props)[_ariainvalid = "aria-invalid"]) !== null && _1 !== void 0 ? _1 : _props2[_ariainvalid] = true;
    }
    if (required) {
      if (options === null || options === void 0 ? void 0 : options.supportsRequired) {
        var _required;
        (_required = (_props3 = props).required) !== null && _required !== void 0 ? _required : _props3.required = true;
      } else {
        var _22;
        (_22 = (_props4 = props)[_ariarequired = "aria-required"]) !== null && _22 !== void 0 ? _22 : _props4[_ariarequired] = true;
      }
    }
    if (options === null || options === void 0 ? void 0 : options.supportsSize) {
      var _size;
      (_size = (_props5 = props).size) !== null && _size !== void 0 ? _size : _props5.size = context.size;
    }
    return props;
  }

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/renderField.js
  var renderField_unstable = (state, contextValues) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    let {
      children: children2
    } = state;
    if (typeof children2 === "function") {
      children2 = children2(getFieldControlProps(contextValues.field) || {});
    }
    return /* @__PURE__ */ createElement5(FieldContextProvider, {
      value: contextValues === null || contextValues === void 0 ? void 0 : contextValues.field
    }, /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.label && /* @__PURE__ */ createElement5(slots.label, slotProps.label), children2, slots.validationMessage && /* @__PURE__ */ createElement5(slots.validationMessage, slotProps.validationMessage, slots.validationMessageIcon && /* @__PURE__ */ createElement5(slots.validationMessageIcon, slotProps.validationMessageIcon), slotProps.validationMessage.children), slots.hint && /* @__PURE__ */ createElement5(slots.hint, slotProps.hint)));
  };

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/useField.js
  init_define_process();
  init_define_process_env();
  var React58 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/components/Label/Label.js
  init_define_process();
  init_define_process_env();
  var React57 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/components/Label/useLabel.js
  init_define_process();
  init_define_process_env();
  var React56 = __toESM(require_react());
  var useLabel_unstable = (props, ref) => {
    const {
      disabled = false,
      required = false,
      weight = "regular",
      size = "medium"
    } = props;
    return {
      disabled,
      required: resolveShorthand(required === true ? "*" : required || void 0, {
        defaultProps: {
          "aria-hidden": "true"
        }
      }),
      weight,
      size,
      components: {
        root: "label",
        required: "span"
      },
      root: getNativeElementProps("label", {
        ref,
        ...props
      })
    };
  };

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/components/Label/renderLabel.js
  init_define_process();
  init_define_process_env();
  var renderLabel_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, state.root.children, slots.required && /* @__PURE__ */ createElement5(slots.required, slotProps.required));
  };

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/components/Label/useLabelStyles.js
  init_define_process();
  init_define_process_env();
  var labelClassNames = {
    root: "fui-Label",
    required: "fui-Label__required"
  };
  var useStyles3 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      sj55zd: "f19n0e5"
    },
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    required: {
      sj55zd: "f1whyuy6",
      uwmqm3: ["fycuoez", "f8wuabp"]
    },
    requiredDisabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      Be2twd7: "fy9rknc",
      Bg96gwp: "fwrc4pm"
    },
    medium: {
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Be2twd7: "fod5ikn",
      Bg96gwp: "faaz57k",
      Bhrd7zp: "fl43uef"
    },
    semibold: {
      Bhrd7zp: "fl43uef"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1whyuy6{color:var(--colorPaletteRedForeground3);}", ".fycuoez{padding-left:4px;}", ".f8wuabp{padding-right:4px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}"]
  });
  var useLabelStyles_unstable = (state) => {
    const styles = useStyles3();
    state.root.className = mergeClasses(labelClassNames.root, styles.root, state.disabled && styles.disabled, styles[state.size], state.weight === "semibold" && styles.semibold, state.root.className);
    if (state.required) {
      state.required.className = mergeClasses(labelClassNames.required, styles.required, state.disabled && styles.requiredDisabled, state.required.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-label@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var Label = /* @__PURE__ */ React57.forwardRef((props, ref) => {
    const state = useLabel_unstable(props, ref);
    useLabelStyles_unstable(state);
    const {
      useLabelStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderLabel_unstable(state);
  });
  Label.displayName = "Label";

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/useField.js
  var validationMessageIcons = {
    error: /* @__PURE__ */ React58.createElement(ErrorCircle12Filled, null),
    warning: /* @__PURE__ */ React58.createElement(Warning12Filled, null),
    success: /* @__PURE__ */ React58.createElement(CheckmarkCircle12Filled, null),
    none: void 0
  };
  var useField_unstable = (props, ref) => {
    const {
      children: children2,
      orientation = "vertical",
      required = false,
      validationState = props.validationMessage ? "error" : "none",
      size = "medium"
    } = props;
    const baseId = useId2("field-");
    const generatedControlId = baseId + "__control";
    const root3 = getNativeElementProps(
      "div",
      {
        ...props,
        ref
      },
      /*excludedPropNames:*/
      ["children"]
    );
    const label = resolveShorthand(props.label, {
      defaultProps: {
        htmlFor: generatedControlId,
        id: baseId + "__label",
        required,
        size
      }
    });
    const validationMessage = resolveShorthand(props.validationMessage, {
      defaultProps: {
        id: baseId + "__validationMessage",
        role: validationState === "error" ? "alert" : void 0
      }
    });
    const hint = resolveShorthand(props.hint, {
      defaultProps: {
        id: baseId + "__hint"
      }
    });
    const defaultIcon = validationMessageIcons[validationState];
    const validationMessageIcon = resolveShorthand(props.validationMessageIcon, {
      required: !!defaultIcon,
      defaultProps: {
        children: defaultIcon
      }
    });
    return {
      children: children2,
      generatedControlId,
      orientation,
      required,
      size,
      validationState,
      components: {
        root: "div",
        label: Label,
        validationMessage: "div",
        validationMessageIcon: "span",
        hint: "div"
      },
      root: root3,
      label,
      validationMessageIcon,
      validationMessage,
      hint
    };
  };

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/useFieldStyles.js
  init_define_process();
  init_define_process_env();
  var fieldClassNames = {
    root: `fui-Field`,
    label: `fui-Field__label`,
    validationMessage: `fui-Field__validationMessage`,
    validationMessageIcon: `fui-Field__validationMessageIcon`,
    hint: `fui-Field__hint`
  };
  var useRootStyles3 = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f13qh94s"
    },
    horizontal: {
      Budl1dq: "f2wwaib",
      wkccdc: "f1645dqt"
    },
    horizontalNoLabel: {
      uwmqm3: ["f15jqgz8", "fggqkej"],
      Budl1dq: "f1c2z91y"
    }
  }, {
    d: [".f13qh94s{display:grid;}", ".f2wwaib{grid-template-columns:33% 1fr;}", ".f1645dqt{grid-template-rows:auto auto auto 1fr;}", ".f15jqgz8{padding-left:33%;}", ".fggqkej{padding-right:33%;}", ".f1c2z91y{grid-template-columns:1fr;}"]
  });
  var useLabelStyles = /* @__PURE__ */ __styles2({
    base: {
      z8tnut: "fclwglc",
      Byoj8tv: "fywfov9"
    },
    large: {
      z8tnut: "f1sl3k7w",
      Byoj8tv: "f1brlhvm"
    },
    vertical: {
      jrapky: "fyacil5"
    },
    verticalLarge: {
      jrapky: "f8l5zjj"
    },
    horizontal: {
      t21cq0: ["fkujibs", "f199hnxi"],
      Ijaq50: "f16hsg94",
      nk6f5a: "f1nzqi2z"
    }
  }, {
    d: [".fclwglc{padding-top:var(--spacingVerticalXXS);}", ".fywfov9{padding-bottom:var(--spacingVerticalXXS);}", ".f1sl3k7w{padding-top:1px;}", ".f1brlhvm{padding-bottom:1px;}", ".fyacil5{margin-bottom:var(--spacingVerticalXXS);}", ".f8l5zjj{margin-bottom:var(--spacingVerticalXS);}", ".fkujibs{margin-right:var(--spacingHorizontalM);}", ".f199hnxi{margin-left:var(--spacingHorizontalM);}", ".f16hsg94{grid-row-start:1;}", ".f1nzqi2z{grid-row-end:-1;}"]
  });
  var useSecondaryTextBaseClassName = /* @__PURE__ */ __resetStyles2("r5c4z9l", null, [".r5c4z9l{margin-top:var(--spacingVerticalXXS);color:var(--colorNeutralForeground3);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase200);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase200);}"]);
  var useSecondaryTextStyles = /* @__PURE__ */ __styles2({
    error: {
      sj55zd: "f1hcrxcs"
    },
    withIcon: {
      uwmqm3: ["frawy03", "fg4c52"]
    }
  }, {
    d: [".f1hcrxcs{color:var(--colorPaletteRedForeground1);}", ".frawy03{padding-left:calc(12px + var(--spacingHorizontalXS));}", ".fg4c52{padding-right:calc(12px + var(--spacingHorizontalXS));}"]
  });
  var useValidationMessageIconBaseClassName = /* @__PURE__ */ __resetStyles2("ra7h1uk", "r1rh6bd7", [".ra7h1uk{display:inline-block;font-size:12px;margin-left:calc(-12px - var(--spacingHorizontalXS));margin-right:var(--spacingHorizontalXS);line-height:0;vertical-align:-1px;}", ".r1rh6bd7{display:inline-block;font-size:12px;margin-right:calc(-12px - var(--spacingHorizontalXS));margin-left:var(--spacingHorizontalXS);line-height:0;vertical-align:-1px;}"]);
  var useValidationMessageIconStyles = /* @__PURE__ */ __styles2({
    error: {
      sj55zd: "f1hcrxcs"
    },
    warning: {
      sj55zd: "f1k5f75o"
    },
    success: {
      sj55zd: "ffmvakt"
    }
  }, {
    d: [".f1hcrxcs{color:var(--colorPaletteRedForeground1);}", ".f1k5f75o{color:var(--colorPaletteDarkOrangeForeground1);}", ".ffmvakt{color:var(--colorPaletteGreenForeground1);}"]
  });
  var useFieldStyles_unstable = (state) => {
    const {
      validationState
    } = state;
    const horizontal = state.orientation === "horizontal";
    const rootStyles = useRootStyles3();
    state.root.className = mergeClasses(fieldClassNames.root, rootStyles.base, horizontal && rootStyles.horizontal, horizontal && !state.label && rootStyles.horizontalNoLabel, state.root.className);
    const labelStyles = useLabelStyles();
    if (state.label) {
      state.label.className = mergeClasses(fieldClassNames.label, labelStyles.base, horizontal && labelStyles.horizontal, !horizontal && labelStyles.vertical, state.label.size === "large" && labelStyles.large, !horizontal && state.label.size === "large" && labelStyles.verticalLarge, state.label.className);
    }
    const validationMessageIconBaseClassName = useValidationMessageIconBaseClassName();
    const validationMessageIconStyles = useValidationMessageIconStyles();
    if (state.validationMessageIcon) {
      state.validationMessageIcon.className = mergeClasses(fieldClassNames.validationMessageIcon, validationMessageIconBaseClassName, validationState !== "none" && validationMessageIconStyles[validationState], state.validationMessageIcon.className);
    }
    const secondaryTextBaseClassName = useSecondaryTextBaseClassName();
    const secondaryTextStyles = useSecondaryTextStyles();
    if (state.validationMessage) {
      state.validationMessage.className = mergeClasses(fieldClassNames.validationMessage, secondaryTextBaseClassName, validationState === "error" && secondaryTextStyles.error, !!state.validationMessageIcon && secondaryTextStyles.withIcon, state.validationMessage.className);
    }
    if (state.hint) {
      state.hint.className = mergeClasses(fieldClassNames.hint, secondaryTextBaseClassName, state.hint.className);
    }
  };

  // node_modules/.pnpm/@fluentui+react-field@9.1.1_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-field/lib/components/Field/Field.js
  var Field = /* @__PURE__ */ React59.forwardRef((props, ref) => {
    const state = useField_unstable(props, ref);
    useFieldStyles_unstable(state);
    const context = useFieldContextValues_unstable(state);
    return renderField_unstable(state, context);
  });
  Field.displayName = "Field";

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  var useCheckbox_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true
    });
    const {
      disabled = false,
      required,
      shape = "square",
      size = "medium",
      labelPosition = "after",
      onChange
    } = props;
    const [checked, setChecked] = useControllableState({
      defaultState: props.defaultChecked,
      state: props.checked,
      initialState: false
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: ["checked", "defaultChecked", "size", "onChange"]
    });
    const mixed = checked === "mixed";
    const id4 = useId2("checkbox-", nativeProps.primary.id);
    let checkmarkIcon;
    if (mixed) {
      if (shape === "circular") {
        checkmarkIcon = /* @__PURE__ */ React60.createElement(CircleFilled, null);
      } else {
        checkmarkIcon = size === "large" ? /* @__PURE__ */ React60.createElement(Square16Filled, null) : /* @__PURE__ */ React60.createElement(Square12Filled, null);
      }
    } else if (checked) {
      checkmarkIcon = size === "large" ? /* @__PURE__ */ React60.createElement(Checkmark16Filled, null) : /* @__PURE__ */ React60.createElement(Checkmark12Filled, null);
    }
    const state = {
      shape,
      checked,
      disabled,
      size,
      labelPosition,
      components: {
        root: "span",
        input: "input",
        indicator: "div",
        label: Label
      },
      root: resolveShorthand(props.root, {
        required: true,
        defaultProps: {
          ref: useFocusWithin(),
          ...nativeProps.root
        }
      }),
      input: resolveShorthand(props.input, {
        required: true,
        defaultProps: {
          type: "checkbox",
          id: id4,
          ref,
          checked: checked === true,
          ...nativeProps.primary
        }
      }),
      label: resolveShorthand(props.label, {
        required: false,
        defaultProps: {
          htmlFor: id4,
          disabled,
          required,
          size: "medium"
        }
      }),
      indicator: resolveShorthand(props.indicator, {
        required: true,
        defaultProps: {
          "aria-hidden": true,
          children: checkmarkIcon
        }
      })
    };
    state.input.onChange = useEventCallback((ev) => {
      const val = ev.currentTarget.indeterminate ? "mixed" : ev.currentTarget.checked;
      onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
        checked: val
      });
      setChecked(val);
    });
    const inputRef = useMergedRefs(state.input.ref);
    state.input.ref = inputRef;
    useIsomorphicLayoutEffect(() => {
      if (inputRef.current) {
        inputRef.current.indeterminate = mixed;
      }
    }, [inputRef, mixed]);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/renderCheckbox.js
  init_define_process();
  init_define_process_env();
  var renderCheckbox_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, /* @__PURE__ */ createElement5(slots.input, slotProps.input), state.labelPosition === "before" && slots.label && /* @__PURE__ */ createElement5(slots.label, slotProps.label), /* @__PURE__ */ createElement5(slots.indicator, slotProps.indicator), state.labelPosition === "after" && slots.label && /* @__PURE__ */ createElement5(slots.label, slotProps.label));
  };

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckboxStyles.js
  init_define_process();
  init_define_process_env();
  var checkboxClassNames = {
    root: "fui-Checkbox",
    label: "fui-Checkbox__label",
    input: "fui-Checkbox__input",
    indicator: "fui-Checkbox__indicator"
  };
  var useRootBaseClassName2 = /* @__PURE__ */ __resetStyles2("r113b80b", "r1qhrryh", [".r113b80b{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".r113b80b:focus{outline-style:none;}", ".r113b80b:focus-visible{outline-style:none;}", ".r113b80b[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.r113b80b[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:-2px;bottom:-2px;left:-2px;right:-2px;}', ".r1qhrryh{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".r1qhrryh:focus{outline-style:none;}", ".r1qhrryh:focus-visible{outline-style:none;}", ".r1qhrryh[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.r1qhrryh[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:-2px;bottom:-2px;right:-2px;left:-2px;}']);
  var useRootStyles4 = /* @__PURE__ */ __styles2({
    unchecked: {
      Bi91k9c: "f3p8bqa",
      ns3gzv: "ffqb913",
      n5iecx: ["f42z0vd", "f1j37kh1"],
      Bq2lx2j: "f10v6cc1",
      Bv7p3up: ["f1j37kh1", "f42z0vd"],
      lj723h: "f1r2dosr",
      B6u2zzw: "f1oarbgq",
      Be5wueo: ["fo8gord", "f18ci1af"],
      Cgwcxn: "fviagcr",
      Btnvhkj: ["f18ci1af", "fo8gord"]
    },
    checked: {
      sj55zd: "f19n0e5",
      Bvs3sgl: "f5opsb9",
      opw9sb: "fpaw01r",
      C5wppx: "f1gqj827",
      B32epof: ["fub94a2", "f13mj44e"],
      Bphahg7: "f1qq5vh1",
      Jctw66: ["f13mj44e", "fub94a2"],
      Bq0zqd5: "f5x9vvn",
      ns3gzv: "fub8hyy",
      n5iecx: ["fffzknn", "f172bh4s"],
      Bq2lx2j: "f6tipb1",
      Bv7p3up: ["f172bh4s", "fffzknn"],
      Bgesukf: "f8adco2",
      B6u2zzw: "f1lepnt8",
      Be5wueo: ["f80ygm0", "frrkusm"],
      Cgwcxn: "f1gg953z",
      Btnvhkj: ["frrkusm", "f80ygm0"]
    },
    mixed: {
      sj55zd: "f19n0e5",
      C5wppx: "f12fgbth",
      B32epof: ["f171e6fm", "fttsnhr"],
      Bphahg7: "f1fyk1ks",
      Jctw66: ["fttsnhr", "f171e6fm"],
      opw9sb: "fvvg2h8",
      ns3gzv: "f1nlwys0",
      n5iecx: ["f1bhstg2", "f6tsdgz"],
      Bq2lx2j: "fqxbw9v",
      Bv7p3up: ["f6tsdgz", "f1bhstg2"],
      cc1l3s: "f1r38qqt",
      B6u2zzw: "f12q3i2l",
      Be5wueo: ["f9g1hxu", "f1o4ic5t"],
      Cgwcxn: "f1c3thm1",
      Btnvhkj: ["f1o4ic5t", "f9g1hxu"],
      km5s60: "ffd07pq"
    },
    disabled: {
      Bceei9c: "f158kwzp",
      sj55zd: "f1s2aq7o",
      C5wppx: "fgiuqeu",
      B32epof: ["f1q4sfkt", "f71co73"],
      Bphahg7: "f1u7lsiy",
      Jctw66: ["f71co73", "f1q4sfkt"],
      opw9sb: "f3vxa14",
      Bbusuzp: "f1dcs8yz",
      B7bxudy: "f1lmtjkn"
    }
  }, {
    h: [".f3p8bqa:hover{color:var(--colorNeutralForeground2);}", ".ffqb913:hover>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessibleHover);}", ".f42z0vd:hover>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessibleHover);}", ".f1j37kh1:hover>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessibleHover);}", ".f10v6cc1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".f5x9vvn:hover>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundHover);}", ".fub8hyy:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundHover);}", ".fffzknn:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundHover);}", ".f172bh4s:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundHover);}", ".f6tipb1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundHover);}", ".f1nlwys0:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokeHover);}", ".f1bhstg2:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokeHover);}", ".f6tsdgz:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokeHover);}", ".fqxbw9v:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokeHover);}", ".f1r38qqt:hover>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Hover);}"],
    a: [".f1r2dosr:active{color:var(--colorNeutralForeground1);}", ".f1oarbgq:active>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fo8gord:active>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f18ci1af:active>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fviagcr:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f8adco2:active>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1lepnt8:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundPressed);}", ".f80ygm0:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundPressed);}", ".frrkusm:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1gg953z:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundPressed);}", ".f12q3i2l:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokePressed);}", ".f9g1hxu:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokePressed);}", ".f1o4ic5t:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokePressed);}", ".f1c3thm1:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".ffd07pq:active>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Pressed);}"],
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".f5opsb9>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackground);}", ".fpaw01r>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundInverted);}", ".f1gqj827>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackground);}", ".fub94a2>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackground);}", ".f13mj44e>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackground);}", ".f1qq5vh1>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackground);}", ".f12fgbth>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStroke);}", ".f171e6fm>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStroke);}", ".fttsnhr>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStroke);}", ".f1fyk1ks>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStroke);}", ".fvvg2h8>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1);}", ".f158kwzp{cursor:default;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fgiuqeu>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1q4sfkt>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f71co73>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1u7lsiy>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f3vxa14>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundDisabled);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lmtjkn>.fui-Checkbox__indicator{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useInputBaseClassName = /* @__PURE__ */ __resetStyles2("ruo9svu", null, [".ruo9svu{box-sizing:border-box;cursor:inherit;height:100%;margin:0;opacity:0;position:absolute;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));}"]);
  var useInputStyles = /* @__PURE__ */ __styles2({
    before: {
      j35jbq: ["f1e31b4d", "f1vgc2s3"]
    },
    after: {
      oyh7mz: ["f1vgc2s3", "f1e31b4d"]
    },
    large: {
      a9b677: "f1mq5jt6"
    }
  }, {
    d: [".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1mq5jt6{width:calc(20px + 2 * var(--spacingHorizontalS));}"]
  });
  var useIndicatorBaseClassName = /* @__PURE__ */ __resetStyles2("rrh91wr", null, [".rrh91wr{-webkit-align-self:flex-start;-ms-flex-item-align:flex-start;align-self:flex-start;box-sizing:border-box;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;overflow:hidden;border:var(--strokeWidthThin) solid var(--colorNeutralStrokeAccessible);border-radius:var(--borderRadiusSmall);margin:var(--spacingVerticalS) var(--spacingHorizontalS);fill:currentColor;pointer-events:none;font-size:12px;height:16px;width:16px;}"]);
  var useIndicatorStyles = /* @__PURE__ */ __styles2({
    large: {
      Be2twd7: "f4ybsrx",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    }
  }, {
    d: [".f4ybsrx{font-size:16px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}"]
  });
  var useLabelStyles2 = /* @__PURE__ */ __styles2({
    base: {
      qb2dma: "f7nlbp4",
      sj55zd: "f1ym3bx4",
      Bceei9c: "fpo1scq",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    before: {
      z189sj: ["f7x41pl", "fruq291"]
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"]
    },
    medium: {
      B6of3ja: "fjzwpt6",
      jrapky: "fh6j2fo"
    },
    large: {
      B6of3ja: "f1xlvstr",
      jrapky: "f49ad5g"
    }
  }, {
    d: [".f7nlbp4{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;}", ".f1ym3bx4{color:inherit;}", ".fpo1scq{cursor:inherit;}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".fjzwpt6{margin-top:calc((16px - var(--lineHeightBase300)) / 2);}", ".fh6j2fo{margin-bottom:calc((16px - var(--lineHeightBase300)) / 2);}", ".f1xlvstr{margin-top:calc((20px - var(--lineHeightBase300)) / 2);}", ".f49ad5g{margin-bottom:calc((20px - var(--lineHeightBase300)) / 2);}"]
  });
  var useCheckboxStyles_unstable = (state) => {
    const {
      checked,
      disabled,
      labelPosition,
      shape,
      size
    } = state;
    const rootBaseClassName = useRootBaseClassName2();
    const rootStyles = useRootStyles4();
    state.root.className = mergeClasses(checkboxClassNames.root, rootBaseClassName, disabled ? rootStyles.disabled : checked === "mixed" ? rootStyles.mixed : checked ? rootStyles.checked : rootStyles.unchecked, state.root.className);
    const inputBaseClassName = useInputBaseClassName();
    const inputStyles = useInputStyles();
    state.input.className = mergeClasses(checkboxClassNames.input, inputBaseClassName, size === "large" && inputStyles.large, inputStyles[labelPosition], state.input.className);
    const indicatorBaseClassName = useIndicatorBaseClassName();
    const indicatorStyles = useIndicatorStyles();
    if (state.indicator) {
      state.indicator.className = mergeClasses(checkboxClassNames.indicator, indicatorBaseClassName, size === "large" && indicatorStyles.large, shape === "circular" && indicatorStyles.circular, state.indicator.className);
    }
    const labelStyles = useLabelStyles2();
    if (state.label) {
      state.label.className = mergeClasses(checkboxClassNames.label, labelStyles.base, labelStyles[size], labelStyles[labelPosition], state.label.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-checkbox@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._4oxqq7sthpwbl2kt3ypsbtfzti/node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  var Checkbox = /* @__PURE__ */ React61.forwardRef((props, ref) => {
    const state = useCheckbox_unstable(props, ref);
    useCheckboxStyles_unstable(state);
    const {
      useAccordionHeaderStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderCheckbox_unstable(state);
  });
  Checkbox.displayName = "Checkbox";

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/contexts/ComboboxContext.js
  init_define_process();
  init_define_process_env();
  var ComboboxContext = /* @__PURE__ */ createContext12({
    activeOption: void 0,
    appearance: "outline",
    focusVisible: false,
    open: false,
    registerOption() {
      return () => void 0;
    },
    selectedOptions: [],
    selectOption() {
    },
    setActiveOption() {
    },
    setOpen() {
    },
    size: "medium"
  });
  var ComboboxProvider = ComboboxContext.Provider;

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/contexts/ListboxContext.js
  init_define_process();
  init_define_process_env();
  var ListboxContext = /* @__PURE__ */ createContext12({
    activeOption: void 0,
    focusVisible: false,
    multiselect: false,
    registerOption() {
      return () => void 0;
    },
    selectedOptions: [],
    selectOption() {
    },
    setActiveOption() {
    }
  });
  var ListboxProvider = ListboxContext.Provider;

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/contexts/useComboboxContextValues.js
  init_define_process();
  init_define_process_env();
  function useComboboxContextValues(state) {
    const {
      activeOption,
      appearance,
      focusVisible,
      open,
      registerOption,
      selectedOptions,
      selectOption,
      setActiveOption,
      setOpen,
      size
    } = state;
    const combobox = {
      activeOption,
      appearance,
      focusVisible,
      open,
      registerOption,
      selectedOptions,
      selectOption,
      setActiveOption,
      setOpen,
      size
    };
    return {
      combobox
    };
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/contexts/useListboxContextValues.js
  init_define_process();
  init_define_process_env();
  function useListboxContextValues(state) {
    const hasComboboxContext = useHasParentContext(ComboboxContext);
    const {
      activeOption,
      focusVisible,
      multiselect,
      registerOption,
      selectedOptions,
      selectOption,
      setActiveOption
    } = state;
    const comboboxRegisterOption = useContextSelector(ComboboxContext, (ctx) => ctx.registerOption);
    const registerOptionValue = hasComboboxContext ? comboboxRegisterOption : registerOption;
    const listbox = {
      activeOption,
      focusVisible,
      multiselect,
      registerOption: registerOptionValue,
      selectedOptions,
      selectOption,
      setActiveOption
    };
    return {
      listbox
    };
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/Listbox.js
  init_define_process();
  init_define_process_env();
  var React66 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/useListbox.js
  init_define_process();
  init_define_process_env();
  var React65 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/dropdownKeyActions.js
  init_define_process();
  init_define_process_env();
  var React62 = __toESM(require_react());
  function getDropdownActionFromKey(e3, options = {}) {
    const {
      open = true,
      multiselect = false
    } = options;
    const code = e3.key;
    const {
      altKey,
      ctrlKey,
      key,
      metaKey
    } = e3;
    if (key.length === 1 && code !== Space && !altKey && !ctrlKey && !metaKey) {
      return "Type";
    }
    if (!open) {
      if (code === ArrowDown || code === ArrowUp || code === Enter || code === Space) {
        return "Open";
      }
      return "None";
    }
    if (code === ArrowUp && altKey || code === Enter || !multiselect && code === Space) {
      return "CloseSelect";
    }
    if (multiselect && code === Space) {
      return "Select";
    }
    if (code === Escape) {
      return "Close";
    }
    if (code === ArrowDown) {
      return "Next";
    }
    if (code === ArrowUp) {
      return "Previous";
    }
    if (code === Home) {
      return "First";
    }
    if (code === End) {
      return "Last";
    }
    if (code === PageUp) {
      return "PageUp";
    }
    if (code === PageDown) {
      return "PageDown";
    }
    if (code === Tab) {
      return "Tab";
    }
    return "None";
  }
  function getIndexFromAction(action, currentIndex, maxIndex) {
    switch (action) {
      case "Next":
        return Math.min(maxIndex, currentIndex + 1);
        break;
      case "Previous":
        return Math.max(0, currentIndex - 1);
      case "First":
        return 0;
      case "Last":
        return maxIndex;
      case "PageDown":
        return Math.min(maxIndex, currentIndex + 10);
      case "PageUp":
        return Math.max(0, currentIndex - 10);
      default:
        return currentIndex;
    }
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useOptionCollection.js
  init_define_process();
  init_define_process_env();
  var React63 = __toESM(require_react());
  var useOptionCollection = () => {
    const nodes = React63.useRef([]);
    const collectionAPI = React63.useMemo(() => {
      const getCount = () => nodes.current.length;
      const getOptionAtIndex = (index) => {
        var _nodes_current_index;
        return (_nodes_current_index = nodes.current[index]) === null || _nodes_current_index === void 0 ? void 0 : _nodes_current_index.option;
      };
      const getIndexOfId = (id4) => nodes.current.findIndex((node2) => node2.option.id === id4);
      const getOptionById = (id4) => {
        const item = nodes.current.find((node2) => node2.option.id === id4);
        return item === null || item === void 0 ? void 0 : item.option;
      };
      const getOptionsMatchingText = (matcher) => {
        return nodes.current.filter((node2) => matcher(node2.option.text)).map((node2) => node2.option);
      };
      const getOptionsMatchingValue = (matcher) => {
        return nodes.current.filter((node2) => matcher(node2.option.value)).map((node2) => node2.option);
      };
      return {
        getCount,
        getOptionAtIndex,
        getIndexOfId,
        getOptionById,
        getOptionsMatchingText,
        getOptionsMatchingValue
      };
    }, []);
    const registerOption = React63.useCallback((option, element) => {
      var _nodes_current_index;
      const index = nodes.current.findIndex((node2) => {
        if (!node2.element || !element) {
          return false;
        }
        if (node2.option.id === option.id) {
          return true;
        }
        return node2.element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING;
      });
      if (((_nodes_current_index = nodes.current[index]) === null || _nodes_current_index === void 0 ? void 0 : _nodes_current_index.option.id) !== option.id) {
        const newItem = {
          element,
          option
        };
        if (index === -1) {
          nodes.current = [...nodes.current, newItem];
        } else {
          nodes.current.splice(index, 0, newItem);
        }
      }
      return () => {
        nodes.current = nodes.current.filter((node2) => node2.option.id !== option.id);
      };
    }, []);
    return {
      ...collectionAPI,
      options: nodes.current.map((node2) => node2.option),
      registerOption
    };
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useScrollOptionsIntoView.js
  init_define_process();
  init_define_process_env();
  var React64 = __toESM(require_react());
  function useScrollOptionsIntoView(state) {
    const {
      activeOption
    } = state;
    const scrollContainerRef = React64.useRef(null);
    React64.useEffect(() => {
      if (scrollContainerRef.current && activeOption && canUseDOM()) {
        const activeOptionElement = scrollContainerRef.current.querySelector(`#${activeOption.id}`);
        if (!activeOptionElement) {
          return;
        }
        const {
          offsetHeight,
          offsetTop
        } = activeOptionElement;
        const {
          offsetHeight: parentOffsetHeight,
          scrollTop
        } = scrollContainerRef.current;
        const isAbove = offsetTop < scrollTop;
        const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
        const buffer = 2;
        if (isAbove) {
          scrollContainerRef.current.scrollTo(0, offsetTop - buffer);
        } else if (isBelow) {
          scrollContainerRef.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight + buffer);
        }
      }
    }, [activeOption]);
    return scrollContainerRef;
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useSelection.js
  init_define_process();
  init_define_process_env();
  var import_react13 = __toESM(require_react());
  var useSelection = (props) => {
    const {
      defaultSelectedOptions,
      multiselect,
      onOptionSelect
    } = props;
    const [selectedOptions, setSelectedOptions] = useControllableState({
      state: props.selectedOptions,
      defaultState: defaultSelectedOptions,
      initialState: []
    });
    const selectOption = (0, import_react13.useCallback)((event, option) => {
      if (option.disabled) {
        return;
      }
      let newSelection = [option.value];
      if (multiselect) {
        const selectedIndex = selectedOptions.findIndex((o4) => o4 === option.value);
        if (selectedIndex > -1) {
          newSelection = [...selectedOptions.slice(0, selectedIndex), ...selectedOptions.slice(selectedIndex + 1)];
        } else {
          newSelection = [...selectedOptions, option.value];
        }
      }
      setSelectedOptions(newSelection);
      onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {
        optionValue: option.value,
        optionText: option.text,
        selectedOptions: newSelection
      });
    }, [onOptionSelect, multiselect, selectedOptions, setSelectedOptions]);
    const clearSelection = (event) => {
      setSelectedOptions([]);
      onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, {
        optionValue: void 0,
        optionText: void 0,
        selectedOptions: []
      });
    };
    return {
      clearSelection,
      selectOption,
      selectedOptions
    };
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/useListbox.js
  var useListbox_unstable = (props, ref) => {
    const {
      multiselect
    } = props;
    const optionCollection = useOptionCollection();
    const {
      getCount,
      getOptionAtIndex,
      getIndexOfId
    } = optionCollection;
    const {
      clearSelection,
      selectedOptions,
      selectOption
    } = useSelection(props);
    const [activeOption, setActiveOption] = React65.useState();
    const [focusVisible, setFocusVisible] = React65.useState(false);
    const onKeyDown = (event) => {
      const action = getDropdownActionFromKey(event, {
        open: true
      });
      const maxIndex = getCount() - 1;
      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;
      let newIndex = activeIndex;
      switch (action) {
        case "Select":
        case "CloseSelect":
          activeOption && selectOption(event, activeOption);
          break;
        default:
          newIndex = getIndexFromAction(action, activeIndex, maxIndex);
      }
      if (newIndex !== activeIndex) {
        event.preventDefault();
        setActiveOption(getOptionAtIndex(newIndex));
        setFocusVisible(true);
      }
    };
    const onMouseOver = (event) => {
      setFocusVisible(false);
    };
    const hasComboboxContext = useHasParentContext(ComboboxContext);
    const comboboxActiveOption = useContextSelector(ComboboxContext, (ctx) => ctx.activeOption);
    const comboboxFocusVisible = useContextSelector(ComboboxContext, (ctx) => ctx.focusVisible);
    const comboboxSelectedOptions = useContextSelector(ComboboxContext, (ctx) => ctx.selectedOptions);
    const comboboxSelectOption = useContextSelector(ComboboxContext, (ctx) => ctx.selectOption);
    const comboboxSetActiveOption = useContextSelector(ComboboxContext, (ctx) => ctx.setActiveOption);
    const optionContextValues = hasComboboxContext ? {
      activeOption: comboboxActiveOption,
      focusVisible: comboboxFocusVisible,
      selectedOptions: comboboxSelectedOptions,
      selectOption: comboboxSelectOption,
      setActiveOption: comboboxSetActiveOption
    } : {
      activeOption,
      focusVisible,
      selectedOptions,
      selectOption,
      setActiveOption
    };
    const state = {
      components: {
        root: "div"
      },
      root: getNativeElementProps("div", {
        ref,
        role: multiselect ? "menu" : "listbox",
        "aria-activedescendant": hasComboboxContext ? void 0 : activeOption === null || activeOption === void 0 ? void 0 : activeOption.id,
        "aria-multiselectable": multiselect,
        tabIndex: 0,
        ...props
      }),
      multiselect,
      clearSelection,
      ...optionCollection,
      ...optionContextValues
    };
    const scrollContainerRef = useScrollOptionsIntoView(state);
    state.root.ref = useMergedRefs(state.root.ref, scrollContainerRef);
    state.root.onKeyDown = useEventCallback(mergeCallbacks(state.root.onKeyDown, onKeyDown));
    state.root.onMouseOver = useEventCallback(mergeCallbacks(state.root.onMouseOver, onMouseOver));
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/renderListbox.js
  init_define_process();
  init_define_process_env();
  var renderListbox_unstable = (state, contextValues) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(ListboxContext.Provider, {
      value: contextValues.listbox
    }, /* @__PURE__ */ createElement5(slots.root, slotProps.root));
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/useListboxStyles.js
  init_define_process();
  init_define_process_env();
  var listboxClassNames = {
    root: "fui-Listbox"
  };
  var useStyles4 = /* @__PURE__ */ __styles2({
    root: {
      De3pzq: "fxugw4r",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      Bf4jedk: "f3hsy1e",
      Bmxbyg5: "f5zp4f",
      Bpd4iqm: "fpvhumw",
      oeaueh: "f1yog68k",
      Bw0xxkn: "f13sgyd8",
      z8tnut: "f1x4af0m",
      z189sj: ["f7x41pl", "fruq291"],
      Byoj8tv: "fd55psn",
      uwmqm3: ["fruq291", "f7x41pl"],
      Belr9w4: "fiut8dr"
    }
  }, {
    d: [".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f1vx9l62{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}", ".f3hsy1e{min-width:160px;}", ".f5zp4f{overflow-y:auto;}", ".fpvhumw{outline-width:1px;}", ".f1yog68k{outline-style:solid;}", ".f13sgyd8{outline-color:var(--colorTransparentStroke);}", ".f1x4af0m{padding-top:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".fd55psn{padding-bottom:var(--spacingHorizontalXS);}", ".fiut8dr{row-gap:var(--spacingHorizontalXXS);}"]
  });
  var useListboxStyles_unstable = (state) => {
    const styles = useStyles4();
    state.root.className = mergeClasses(listboxClassNames.root, styles.root, state.root.className);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Listbox/Listbox.js
  var Listbox = /* @__PURE__ */ React66.forwardRef((props, ref) => {
    const state = useListbox_unstable(props, ref);
    const contextValues = useListboxContextValues(state);
    useListboxStyles_unstable(state);
    const {
      useListboxStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderListbox_unstable(state, contextValues);
  });
  Listbox.displayName = "Listbox";

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Option/Option.js
  init_define_process();
  init_define_process_env();
  var React68 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Option/useOption.js
  init_define_process();
  init_define_process_env();
  var React67 = __toESM(require_react());
  function getTextString(text, children2) {
    if (text !== void 0) {
      return text;
    }
    let textString = "";
    let hasNonStringChild = false;
    React67.Children.forEach(children2, (child) => {
      if (typeof child === "string") {
        textString += child;
      } else {
        hasNonStringChild = true;
      }
    });
    if (hasNonStringChild) {
      console.warn("Provide a `text` prop to Option components when they contain non-string children.");
    }
    return textString;
  }
  var useOption_unstable = (props, ref) => {
    const {
      children: children2,
      disabled,
      text,
      value
    } = props;
    const optionRef = React67.useRef(null);
    const optionText = getTextString(text, children2);
    const optionValue = value !== null && value !== void 0 ? value : optionText;
    const id4 = useId2("fluent-option", props.id);
    const optionData = React67.useMemo(() => ({
      id: id4,
      disabled,
      text: optionText,
      value: optionValue
    }), [id4, disabled, optionText, optionValue]);
    const focusVisible = useContextSelector(ListboxContext, (ctx) => ctx.focusVisible);
    const multiselect = useContextSelector(ListboxContext, (ctx) => ctx.multiselect);
    const registerOption = useContextSelector(ListboxContext, (ctx) => ctx.registerOption);
    const selected = useContextSelector(ListboxContext, (ctx) => {
      const selectedOptions = ctx.selectedOptions;
      return !!optionValue && !!selectedOptions.find((o4) => o4 === optionValue);
    });
    const selectOption = useContextSelector(ListboxContext, (ctx) => ctx.selectOption);
    const setActiveOption = useContextSelector(ListboxContext, (ctx) => ctx.setActiveOption);
    const setOpen = useContextSelector(ComboboxContext, (ctx) => ctx.setOpen);
    const active = useContextSelector(ListboxContext, (ctx) => {
      var _ctx_activeOption, _ctx_activeOption1;
      return ((_ctx_activeOption = ctx.activeOption) === null || _ctx_activeOption === void 0 ? void 0 : _ctx_activeOption.id) !== void 0 && ((_ctx_activeOption1 = ctx.activeOption) === null || _ctx_activeOption1 === void 0 ? void 0 : _ctx_activeOption1.id) === id4;
    });
    let CheckIcon = /* @__PURE__ */ React67.createElement(CheckmarkFilled, null);
    if (multiselect) {
      CheckIcon = selected ? /* @__PURE__ */ React67.createElement(Checkmark12Filled, null) : "";
    }
    const onClick = (event) => {
      var _props_onClick;
      if (disabled) {
        event.preventDefault();
        return;
      }
      setActiveOption(optionData);
      if (!multiselect) {
        setOpen === null || setOpen === void 0 ? void 0 : setOpen(event, false);
      }
      selectOption(event, optionData);
      (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, event);
    };
    React67.useEffect(() => {
      if (id4 && optionRef.current) {
        return registerOption(optionData, optionRef.current);
      }
    }, [id4, optionData, registerOption]);
    const semanticProps = multiselect ? {
      role: "menuitemcheckbox",
      "aria-checked": selected
    } : {
      role: "option",
      "aria-selected": selected
    };
    return {
      components: {
        root: "div",
        checkIcon: "span"
      },
      root: getNativeElementProps("div", {
        ref: useMergedRefs(ref, optionRef),
        "aria-disabled": disabled ? "true" : void 0,
        id: id4,
        ...semanticProps,
        ...props,
        onClick
      }),
      checkIcon: resolveShorthand(props.checkIcon, {
        required: true,
        defaultProps: {
          "aria-hidden": "true",
          children: CheckIcon
        }
      }),
      active,
      disabled,
      focusVisible,
      multiselect,
      selected
    };
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Option/renderOption.js
  init_define_process();
  init_define_process_env();
  var renderOption_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.checkIcon && /* @__PURE__ */ createElement5(slots.checkIcon, slotProps.checkIcon), slotProps.root.children);
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Option/useOptionStyles.js
  init_define_process();
  init_define_process_env();
  var optionClassNames = {
    root: "fui-Option",
    checkIcon: "fui-Option__checkIcon"
  };
  var useStyles5 = /* @__PURE__ */ __styles2({
    root: {
      Bt984gj: "f122n59",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      sj55zd: "f19n0e5",
      i8kkvl: "f1ufnopg",
      Bceei9c: "f1k6fduh",
      mc9l5x: "f22iagw",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi",
      z8tnut: "fp2oml8",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      qhf8xq: "f10pi13n",
      Jwef8y: "f1knas48",
      ecr2s2: "fb40n2d"
    },
    active: {
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      B80jsxd: "f1nwj1ja",
      t2ki1e: "ffmd2fr",
      Bm2nyyq: "f8rth92",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Bw17bha: "f1lh990p",
      vfts7: ["ftkbnf5", "flthirb"],
      xrcqlc: "fc9v8v1",
      Ihftqj: ["f1mwfetb", "f18mat8f"],
      Bcgy8vk: "f1cb6c3",
      Bhxzhr1: ["f18mat8f", "f1mwfetb"],
      B3778ie: ["f1ibwz09", "f1kp91vd"],
      d9w3h3: ["f1kp91vd", "f1ibwz09"],
      Bl18szs: ["f1pix4dl", "f13nd1z4"],
      B4j8arr: ["f13nd1z4", "f1pix4dl"],
      B0n5ga8: "f1qw5sz7",
      s924m2: ["f19va7ni", "f1a9v3mw"],
      B1q35kw: "fkkziue",
      Gp14am: ["f1a9v3mw", "f19va7ni"],
      bn5sak: "f1a97anr",
      By385i5: "f5226zp",
      Eqx8gd: ["fa2bdqt", "fei6g0k"],
      B1piin3: ["fei6g0k", "fa2bdqt"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Jwef8y: "f9ql6rf",
      ecr2s2: "fgj9um3",
      Bbusuzp: "f1dcs8yz"
    },
    selected: {},
    checkIcon: {
      Be2twd7: "fod5ikn",
      Frg6f3: ["f18b9hdq", "fn6qj8t"],
      t21cq0: ["f1xk557c", "f1h9en5y"],
      Bcdw1i0: "fd7fpy0",
      Bo70h7d: "fvc9v3g"
    },
    selectedCheck: {
      Bcdw1i0: "f1022m68"
    },
    multiselectCheck: {
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fq0vr37",
      h3c5rm: ["f1byw159", "f11cr0be"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f11cr0be", "f1byw159"],
      Bbmb7ep: ["f1g3puop", "fi2rrw2"],
      Beyfa6y: ["fi2rrw2", "f1g3puop"],
      B7oj6ja: ["f1rstyi9", "f1s4nn1u"],
      Btl43ni: ["f1s4nn1u", "f1rstyi9"],
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      Brf1p80: "f4d9j23",
      Bkfmm31: "f1w9h62z",
      Be2twd7: "f1ugzwwg",
      Bqenvij: "fd461yt",
      a9b677: "fjw5fx7",
      Bcdw1i0: "f1022m68"
    },
    selectedMultiselectCheck: {
      De3pzq: "ftywsgz",
      sj55zd: "fqpbvvt",
      g2u3we: "f3xi7mh",
      h3c5rm: ["ftovhe4", "f1wczvin"],
      B9xav0g: "f68vbr6",
      zhjwy3: ["f1wczvin", "ftovhe4"]
    },
    checkDisabled: {
      sj55zd: "f1s2aq7o",
      Bbusuzp: "f1dcs8yz"
    }
  }, {
    d: [".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1ufnopg{-webkit-column-gap:var(--spacingHorizontalXS);column-gap:var(--spacingHorizontalXS);}", ".f1k6fduh{cursor:pointer;}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fp2oml8{padding-top:var(--spacingVerticalSNudge);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1tdddsa{padding-bottom:var(--spacingVerticalSNudge);}", ".f10pi13n{position:relative;}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".f1nwj1ja::after{pointer-events:none;}", ".ffmd2fr::after{z-index:1;}", ".f8rth92::after{border-top-style:solid;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f1lh990p::after{border-bottom-style:solid;}", ".fc9v8v1::after{border-top-width:2px;}", ".f1mwfetb::after{border-right-width:2px;}", ".f18mat8f::after{border-left-width:2px;}", ".f1cb6c3::after{border-bottom-width:2px;}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1pix4dl::after{border-top-right-radius:var(--borderRadiusMedium);}", ".f13nd1z4::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1qw5sz7::after{border-top-color:var(--colorStrokeFocus2);}", ".f19va7ni::after{border-right-color:var(--colorStrokeFocus2);}", ".f1a9v3mw::after{border-left-color:var(--colorStrokeFocus2);}", ".fkkziue::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f1a97anr::after{top:-2px;}", ".f5226zp::after{bottom:-2px;}", ".fa2bdqt::after{left:-2px;}", ".fei6g0k::after{right:-2px;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".f18b9hdq{margin-left:calc(var(--spacingHorizontalXXS) * -1);}", ".fn6qj8t{margin-right:calc(var(--spacingHorizontalXXS) * -1);}", ".f1xk557c{margin-right:var(--spacingHorizontalXXS);}", ".f1h9en5y{margin-left:var(--spacingHorizontalXXS);}", ".fd7fpy0{visibility:hidden;}", ".fvc9v3g svg{display:block;}", ".f1022m68{visibility:visible;}", ".f192inf7{border-top-width:var(--strokeWidthThin);}", ".f5tn483{border-right-width:var(--strokeWidthThin);}", ".f1ojsxk5{border-left-width:var(--strokeWidthThin);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fq0vr37{border-top-color:var(--colorNeutralStrokeAccessible);}", ".f1byw159{border-right-color:var(--colorNeutralStrokeAccessible);}", ".f11cr0be{border-left-color:var(--colorNeutralStrokeAccessible);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f1g3puop{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fi2rrw2{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1rstyi9{border-top-right-radius:var(--borderRadiusSmall);}", ".f1s4nn1u{border-top-left-radius:var(--borderRadiusSmall);}", ".f1ewtqcl{box-sizing:border-box;}", ".f4d9j23{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;}", ".f1w9h62z{fill:currentColor;}", ".f1ugzwwg{font-size:12px;}", ".fd461yt{height:16px;}", ".fjw5fx7{width:16px;}", ".ftywsgz{background-color:var(--colorCompoundBrandBackground);}", ".fqpbvvt{color:var(--colorNeutralForegroundInverted);}", ".f3xi7mh{border-top-color:var(--colorCompoundBrandBackground);}", ".ftovhe4{border-right-color:var(--colorCompoundBrandBackground);}", ".f1wczvin{border-left-color:var(--colorCompoundBrandBackground);}", ".f68vbr6{border-bottom-color:var(--colorCompoundBrandBackground);}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}"],
    a: [".fb40n2d:active{background-color:var(--colorNeutralBackground1Pressed);}", ".fgj9um3:active{background-color:var(--colorTransparentBackground);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useOptionStyles_unstable = (state) => {
    const {
      active,
      disabled,
      focusVisible,
      multiselect,
      selected
    } = state;
    const styles = useStyles5();
    state.root.className = mergeClasses(optionClassNames.root, styles.root, active && focusVisible && styles.active, disabled && styles.disabled, selected && styles.selected, state.root.className);
    if (state.checkIcon) {
      state.checkIcon.className = mergeClasses(optionClassNames.checkIcon, styles.checkIcon, state.checkIcon.className, multiselect && styles.multiselectCheck, selected && styles.selectedCheck, selected && multiselect && styles.selectedMultiselectCheck, disabled && styles.checkDisabled);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Option/Option.js
  var Option = /* @__PURE__ */ React68.forwardRef((props, ref) => {
    const state = useOption_unstable(props, ref);
    useOptionStyles_unstable(state);
    const {
      useOptionStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderOption_unstable(state);
  });
  Option.displayName = "Option";

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useComboboxBaseState.js
  init_define_process();
  init_define_process_env();
  var React69 = __toESM(require_react());
  var useComboboxBaseState = (props) => {
    const {
      appearance = "outline",
      children: children2,
      editable = false,
      inlinePopup = false,
      multiselect,
      onOpenChange,
      size = "medium"
    } = props;
    const optionCollection = useOptionCollection();
    const {
      getOptionAtIndex,
      getOptionsMatchingValue
    } = optionCollection;
    const [activeOption, setActiveOption] = React69.useState();
    const [focusVisible, setFocusVisible] = React69.useState(false);
    const [hasFocus, setHasFocus] = React69.useState(false);
    const ignoreNextBlur = React69.useRef(false);
    const selectionState = useSelection(props);
    const {
      selectedOptions
    } = selectionState;
    const isFirstMount = useFirstMount();
    const [controllableValue, setValue] = useControllableState({
      state: props.value,
      initialState: void 0
    });
    const value = React69.useMemo(() => {
      if (controllableValue !== void 0) {
        return controllableValue;
      }
      if (isFirstMount && props.defaultValue !== void 0) {
        return props.defaultValue;
      }
      const selectedOptionsText = getOptionsMatchingValue((optionValue) => {
        return selectedOptions.includes(optionValue);
      }).map((option) => option.text);
      if (multiselect) {
        return editable ? "" : selectedOptionsText.join(", ");
      }
      return selectedOptionsText[0];
    }, [controllableValue, editable, getOptionsMatchingValue, multiselect, props.defaultValue, selectedOptions]);
    const [open, setOpenState] = useControllableState({
      state: props.open,
      defaultState: props.defaultOpen,
      initialState: false
    });
    const setOpen = React69.useCallback((event, newState) => {
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {
        open: newState
      });
      setOpenState(newState);
    }, [onOpenChange, setOpenState]);
    React69.useEffect(() => {
      if (open && !activeOption) {
        if (!multiselect && selectedOptions.length > 0) {
          const selectedOption = getOptionsMatchingValue((v5) => v5 === selectedOptions[0]).pop();
          selectedOption && setActiveOption(selectedOption);
        } else {
          setActiveOption(getOptionAtIndex(0));
        }
      } else if (!open) {
        setActiveOption(void 0);
      }
    }, [open, children2]);
    return {
      ...optionCollection,
      ...selectionState,
      activeOption,
      appearance,
      focusVisible,
      hasFocus,
      ignoreNextBlur,
      inlinePopup,
      open,
      setActiveOption,
      setFocusVisible,
      setHasFocus,
      setOpen,
      setValue,
      size,
      value
    };
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useComboboxPopup.js
  init_define_process();
  init_define_process_env();
  function useComboboxPopup(props, triggerShorthand, listboxShorthand) {
    const {
      positioning
    } = props;
    const fallbackPositions = ["above", "after", "after-top", "before", "before-top"];
    const popperOptions = {
      position: "below",
      align: "start",
      offset: {
        crossAxis: 0,
        mainAxis: 2
      },
      fallbackPositions,
      ...resolvePositioningShorthand(positioning)
    };
    const {
      targetRef,
      containerRef
    } = usePositioning(popperOptions);
    const listboxRef = useMergedRefs(listboxShorthand === null || listboxShorthand === void 0 ? void 0 : listboxShorthand.ref, containerRef);
    const listbox = listboxShorthand && {
      ...listboxShorthand,
      ref: listboxRef
    };
    return [{
      ...triggerShorthand,
      ref: useMergedRefs(triggerShorthand === null || triggerShorthand === void 0 ? void 0 : triggerShorthand.ref, targetRef)
    }, listbox];
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/utils/useTriggerListboxSlots.js
  init_define_process();
  init_define_process_env();
  var React70 = __toESM(require_react());
  function useTriggerListboxSlots(props, state, ref, triggerSlot, listboxSlot) {
    const {
      multiselect
    } = props;
    const {
      activeOption,
      getCount,
      getIndexOfId,
      getOptionAtIndex,
      ignoreNextBlur,
      open,
      selectOption,
      setActiveOption,
      setFocusVisible,
      setHasFocus,
      setOpen
    } = state;
    const triggerRef = React70.useRef(null);
    const listboxId = useId2("fluent-listbox", listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id);
    const listbox = listboxSlot && {
      id: listboxId,
      multiselect,
      tabIndex: void 0,
      ...listboxSlot
    };
    const trigger = {
      "aria-expanded": open,
      "aria-activedescendant": open ? activeOption === null || activeOption === void 0 ? void 0 : activeOption.id : void 0,
      role: "combobox",
      ...triggerSlot,
      // explicitly type the ref as an intersection here to prevent type errors
      // since the `children` prop has mutually incompatible types between input/button
      // functionally both ref and triggerRef will always be the same element type
      ref: useMergedRefs(ref, triggerSlot === null || triggerSlot === void 0 ? void 0 : triggerSlot.ref, triggerRef)
    };
    const listboxOnClick = useEventCallback(mergeCallbacks((event) => {
      var _triggerRef_current;
      (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();
    }, listbox === null || listbox === void 0 ? void 0 : listbox.onClick));
    const listboxOnMouseOver = useEventCallback(mergeCallbacks((event) => {
      setFocusVisible(false);
    }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseOver));
    const listboxOnMouseDown = useEventCallback(mergeCallbacks((event) => {
      ignoreNextBlur.current = true;
    }, listbox === null || listbox === void 0 ? void 0 : listbox.onMouseDown));
    if (listbox) {
      listbox.onClick = listboxOnClick;
      listbox.onMouseOver = listboxOnMouseOver;
      listbox.onMouseDown = listboxOnMouseDown;
    }
    trigger.onBlur = mergeCallbacks((event) => {
      if (!ignoreNextBlur.current) {
        setOpen(event, false);
      }
      ignoreNextBlur.current = false;
      setHasFocus(false);
    }, trigger.onBlur);
    trigger.onClick = mergeCallbacks((event) => {
      setOpen(event, !open);
    }, trigger.onClick);
    trigger.onFocus = mergeCallbacks((event) => {
      setHasFocus(true);
    }, trigger.onFocus);
    trigger.onKeyDown = mergeCallbacks((event) => {
      const action = getDropdownActionFromKey(event, {
        open,
        multiselect
      });
      const maxIndex = getCount() - 1;
      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;
      let newIndex = activeIndex;
      switch (action) {
        case "Open":
          event.preventDefault();
          setFocusVisible(true);
          setOpen(event, true);
          break;
        case "Close":
          event.stopPropagation();
          event.preventDefault();
          setOpen(event, false);
          break;
        case "CloseSelect":
          !multiselect && !(activeOption === null || activeOption === void 0 ? void 0 : activeOption.disabled) && setOpen(event, false);
        case "Select":
          activeOption && selectOption(event, activeOption);
          event.preventDefault();
          break;
        case "Tab":
          !multiselect && activeOption && selectOption(event, activeOption);
          break;
        default:
          newIndex = getIndexFromAction(action, activeIndex, maxIndex);
      }
      if (newIndex !== activeIndex) {
        event.preventDefault();
        setActiveOption(getOptionAtIndex(newIndex));
        setFocusVisible(true);
      }
    }, trigger.onKeyDown);
    trigger.onMouseOver = mergeCallbacks((event) => {
      setFocusVisible(false);
    }, trigger.onMouseOver);
    return [trigger, listbox];
  }

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Dropdown/Dropdown.js
  init_define_process();
  init_define_process_env();
  var React72 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Dropdown/useDropdown.js
  init_define_process();
  init_define_process_env();
  var React71 = __toESM(require_react());
  var useDropdown_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsSize: true
    });
    const baseState = useComboboxBaseState(props);
    const {
      activeOption,
      getIndexOfId,
      getOptionsMatchingText,
      open,
      setActiveOption,
      setFocusVisible,
      setOpen
    } = baseState;
    const {
      primary: triggerNativeProps,
      root: rootNativeProps
    } = getPartitionedNativeProps({
      props,
      primarySlotTagName: "button",
      excludedPropNames: ["children"]
    });
    const rootRef = React71.useRef(null);
    const [popupWidth, setPopupWidth] = React71.useState();
    React71.useEffect(() => {
      var _rootRef_current;
      const width = open ? `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px` : void 0;
      setPopupWidth(width);
    }, [open]);
    const searchString = React71.useRef("");
    const [setKeyTimeout, clearKeyTimeout] = useTimeout();
    const getNextMatchingOption = () => {
      let matcher = (optionText) => optionText.toLowerCase().indexOf(searchString.current) === 0;
      let matches = getOptionsMatchingText(matcher);
      let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;
      if (open && searchString.current.length === 1) {
        startIndex++;
      }
      if (!matches.length) {
        const letters = searchString.current.split("");
        const allSameLetter = letters.length && letters.every((letter) => letter === letters[0]);
        if (allSameLetter) {
          startIndex++;
          matcher = (optionText) => optionText.toLowerCase().indexOf(letters[0]) === 0;
          matches = getOptionsMatchingText(matcher);
        }
      }
      if (matches.length > 1 && activeOption) {
        const nextMatch = matches.find((option) => getIndexOfId(option.id) >= startIndex);
        return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];
      }
      var _matches_;
      return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : void 0;
    };
    const onTriggerKeyDown = (ev) => {
      clearKeyTimeout();
      if (getDropdownActionFromKey(ev) === "Type") {
        searchString.current += ev.key.toLowerCase();
        setKeyTimeout(() => {
          searchString.current = "";
        }, 500);
        !open && setOpen(ev, true);
        const nextOption = getNextMatchingOption();
        setActiveOption(nextOption);
        setFocusVisible(true);
      }
    };
    let triggerSlot;
    let listboxSlot;
    triggerSlot = resolveShorthand(props.button, {
      required: true,
      defaultProps: {
        type: "button",
        children: baseState.value || props.placeholder,
        ...triggerNativeProps
      }
    });
    triggerSlot.onKeyDown = mergeCallbacks(onTriggerKeyDown, triggerSlot.onKeyDown);
    listboxSlot = baseState.open || baseState.hasFocus ? resolveShorthand(props.listbox, {
      required: true,
      defaultProps: {
        children: props.children,
        style: {
          width: popupWidth
        }
      }
    }) : void 0;
    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);
    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);
    const state = {
      components: {
        root: "div",
        button: "button",
        expandIcon: "span",
        listbox: Listbox
      },
      root: resolveShorthand(props.root, {
        required: true,
        defaultProps: {
          "aria-owns": !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : void 0,
          children: props.children,
          ...rootNativeProps
        }
      }),
      button: triggerSlot,
      listbox: listboxSlot,
      expandIcon: resolveShorthand(props.expandIcon, {
        required: true,
        defaultProps: {
          children: /* @__PURE__ */ React71.createElement(ChevronDownRegular, null)
        }
      }),
      placeholderVisible: !baseState.value && !!props.placeholder,
      ...baseState
    };
    state.root.ref = useMergedRefs(state.root.ref, rootRef);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Dropdown/renderDropdown.js
  init_define_process();
  init_define_process_env();
  var renderDropdown_unstable = (state, contextValues) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, /* @__PURE__ */ createElement5(ComboboxContext.Provider, {
      value: contextValues.combobox
    }, /* @__PURE__ */ createElement5(slots.button, slotProps.button, slotProps.button.children, slots.expandIcon && /* @__PURE__ */ createElement5(slots.expandIcon, slotProps.expandIcon)), slots.listbox && (state.inlinePopup ? /* @__PURE__ */ createElement5(slots.listbox, slotProps.listbox) : /* @__PURE__ */ createElement5(Portal, null, /* @__PURE__ */ createElement5(slots.listbox, slotProps.listbox)))));
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Dropdown/useDropdownStyles.js
  init_define_process();
  init_define_process_env();
  var dropdownClassNames = {
    root: "fui-Dropdown",
    button: "fui-Dropdown__button",
    expandIcon: "fui-Dropdown__expandIcon",
    listbox: "fui-Dropdown__listbox"
  };
  var useStyles6 = /* @__PURE__ */ __styles2({
    root: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f14t3ns0",
      Bf4jedk: "f1exfvgq",
      qhf8xq: "f10pi13n",
      Bbr2w1p: "f14a1fxs",
      Bduesf4: "f3e99gv",
      Bpq79vn: "fhljsf7",
      li1rpt: "f1gw3sf2",
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      Eqx8gd: ["f1a7op3", "f1cjjd47"],
      By385i5: "f1gboi2j",
      B1piin3: ["f1cjjd47", "f1a7op3"],
      Dlnsje: "ffyw7fx",
      d9w3h3: ["f1kp91vd", "f1ibwz09"],
      B3778ie: ["f1ibwz09", "f1kp91vd"],
      Bcgy8vk: "f14pi962",
      Bw17bha: "f1lh990p",
      B1q35kw: "f1jc6hxc",
      Gjdm7m: "f13evtba",
      b1kco5: "f1yk9hq",
      Ba2ppi3: "fhwpy7i",
      F2fol1: "f14ee0xe",
      lck23g: "f1xhbsuh",
      df92cz: "fv8e3ye",
      I188md: "ftb5wc6",
      umuwi5: "fjw5xc1",
      Blcqepd: "f1xdyd5c",
      nplu4u: "fatpbeo",
      Bioka5o: "fb7uyps",
      H713fs: "f1cmft4k",
      B9ooomg: "f1x58t8o",
      Bercvud: "f1ibeo51"
    },
    listbox: {
      E5pizo: "f1hg901r",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Bxyxcbc: "fmmk62d"
    },
    listboxCollapsed: {
      mc9l5x: "fjseox"
    },
    button: {
      Bt984gj: "f122n59",
      De3pzq: "f1c21dwh",
      B4j52fo: "fre7gi1",
      Bekrc4i: ["f1358rze", "f1rvrf73"],
      Bn0qgzm: "fqdk4by",
      ibv6hh: ["f1rvrf73", "f1358rze"],
      B7ck84d: "f1ewtqcl",
      sj55zd: "f19n0e5",
      i8kkvl: "f14mj54c",
      Bceei9c: "f1k6fduh",
      mc9l5x: "f13qh94s",
      Bahqtrf: "fk6fouc",
      Budl1dq: "f12nh0o2",
      Brf1p80: "f1869bpl",
      fsow6f: ["f1o700av", "fes3tcz"],
      a9b677: "fly5x3f",
      Brovlpu: "ftqa4ok"
    },
    placeholder: {
      sj55zd: "fxc4j92"
    },
    small: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm",
      z8tnut: "f1khb0e9",
      z189sj: ["fdw0yi8", "fk8j09s"],
      Byoj8tv: "f1jnq6q7",
      uwmqm3: ["f1xile11", "fqznh8f"]
    },
    medium: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      z8tnut: "f1sbtcvk",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "fdghr9",
      uwmqm3: ["f1e60jzv", "f135dnwl"]
    },
    large: {
      i8kkvl: "f1rjii52",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k",
      z8tnut: "f1a1bwwz",
      z189sj: ["fw5db7e", "f1uw59to"],
      Byoj8tv: "fy7v416",
      uwmqm3: ["fnphzt9", "flt1dlf"]
    },
    outline: {
      De3pzq: "fxugw4r",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fj3muxo",
      h3c5rm: ["f1akhkt", "f1lxtadh"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f1lxtadh", "f1akhkt"]
    },
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "flmw63s",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      B6oc9vd: "fvs00aa",
      ak43y8: ["f1assf6x", "f4ruux4"],
      wmxk5l: "fqhmt4z",
      B50zh58: ["f4ruux4", "f1assf6x"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bn0qgzm: "f1vxd6vx",
      oivjwe: "fg706s2",
      B9xav0g: "f1c1zstj",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"]
    },
    "filled-lighter": {
      De3pzq: "fxugw4r",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"]
    },
    "filled-darker": {
      De3pzq: "f16xq7d1",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"]
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    invalidUnderline: {
      hhx65j: "f1fgmyf4"
    },
    disabled: {
      Bceei9c: "fdrzuqr",
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"]
    },
    disabledText: {
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr"
    }
  }, {
    d: [".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1ewtqcl{box-sizing:border-box;}", ".f14t3ns0{display:inline-block;}", ".f1exfvgq{min-width:250px;}", ".f10pi13n{position:relative;}", ".f1gw3sf2::after{box-sizing:border-box;}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".f1a7op3::after{left:-1px;}", ".f1cjjd47::after{right:-1px;}", ".f1gboi2j::after{bottom:-1px;}", ".ffyw7fx::after{height:max(var(--strokeWidthThick), var(--borderRadiusMedium));}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f14pi962::after{border-bottom-width:var(--strokeWidthThick);}", ".f1lh990p::after{border-bottom-style:solid;}", ".f1jc6hxc::after{border-bottom-color:var(--colorCompoundBrandStroke);}", ".f13evtba::after{-webkit-clip-path:inset(calc(100% - 2px) 0 0 0);clip-path:inset(calc(100% - 2px) 0 0 0);}", ".f1yk9hq::after{-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);}", ".fhwpy7i::after{transition-property:transform;}", ".f14ee0xe::after{transition-duration:var(--durationUltraFast);}", ".f1xhbsuh::after{transition-delay:var(--curveAccelerateMid);}", ".f1hg901r{box-shadow:var(--shadow16);}", ".fmmk62d{max-height:80vh;}", ".fjseox{display:none;}", ".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fre7gi1{border-top-width:0;}", ".f1358rze{border-right-width:0;}", ".f1rvrf73{border-left-width:0;}", ".fqdk4by{border-bottom-width:0;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f14mj54c{-webkit-column-gap:var(--spacingHorizontalXXS);column-gap:var(--spacingHorizontalXXS);}", ".f1k6fduh{cursor:pointer;}", ".f13qh94s{display:grid;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f12nh0o2{grid-template-columns:[content] 1fr [icon] auto [end];}", ".f1869bpl{-webkit-box-pack:justify;-webkit-justify-content:space-between;justify-content:space-between;}", ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fly5x3f{width:100%;}", ".fxc4j92{color:var(--colorNeutralForeground4);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1khb0e9{padding-top:3px;}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".f1jnq6q7{padding-bottom:3px;}", ".f1xile11{padding-left:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fqznh8f{padding-right:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1sbtcvk{padding-top:5px;}", ".f11gcy0p{padding-right:var(--spacingHorizontalMNudge);}", ".f1ng84yb{padding-left:var(--spacingHorizontalMNudge);}", ".fdghr9{padding-bottom:5px;}", ".f1e60jzv{padding-left:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f135dnwl{padding-right:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f1rjii52{-webkit-column-gap:var(--spacingHorizontalSNudge);column-gap:var(--spacingHorizontalSNudge);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1a1bwwz{padding-top:7px;}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".fy7v416{padding-bottom:7px;}", ".fnphzt9{padding-left:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".flt1dlf{padding-right:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f192inf7{border-top-width:var(--strokeWidthThin);}", ".f5tn483{border-right-width:var(--strokeWidthThin);}", ".f1ojsxk5{border-left-width:var(--strokeWidthThin);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fj3muxo{border-top-color:var(--colorNeutralStroke1);}", ".f1akhkt{border-right-color:var(--colorNeutralStroke1);}", ".f1lxtadh{border-left-color:var(--colorNeutralStroke1);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}", ".fdrzuqr{cursor:not-allowed;}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}"],
    w: [".f14a1fxs:focus-within{outline-width:2px;}", ".f3e99gv:focus-within{outline-style:solid;}", ".fhljsf7:focus-within{outline-color:transparent;}", ".fjw5xc1:focus-within::after{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);}", ".f1xdyd5c:focus-within::after{transition-property:transform;}", ".fatpbeo:focus-within::after{transition-duration:var(--durationNormal);}", ".fb7uyps:focus-within::after{transition-delay:var(--curveDecelerateMid);}", ".f1ibeo51:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.fv8e3ye::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.ftb5wc6::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1cmft4k:focus-within::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1x58t8o:focus-within::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rvyvqg{border-right-color:GrayText;}.f14g86mu{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".flmw63s:hover{border-bottom-color:var(--colorNeutralStrokeAccessible);}"],
    a: [".fvs00aa:active{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1assf6x:active{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f4ruux4:active{border-left-color:var(--colorNeutralStroke1Pressed);}", ".fqhmt4z:active{border-bottom-color:var(--colorNeutralStrokeAccessible);}"]
  });
  var useIconStyles2 = /* @__PURE__ */ __styles2({
    icon: {
      B7ck84d: "f1ewtqcl",
      sj55zd: "fxkbij4",
      mc9l5x: "ftgm304",
      Be2twd7: "f1pp30po",
      Br312pm: "f12w6cgp",
      Bw0ie65: "f8bv1bt",
      Bo70h7d: "fvc9v3g"
    },
    small: {
      Be2twd7: "f4ybsrx",
      Frg6f3: ["f1h9en5y", "f1xk557c"]
    },
    medium: {
      Be2twd7: "fe5j1ua",
      Frg6f3: ["f1h9en5y", "f1xk557c"]
    },
    large: {
      Be2twd7: "f1rt2boy",
      Frg6f3: ["f1t5qyk5", "f1ikr372"]
    },
    disabled: {
      sj55zd: "f1s2aq7o"
    }
  }, {
    d: [".f1ewtqcl{box-sizing:border-box;}", ".fxkbij4{color:var(--colorNeutralStrokeAccessible);}", ".ftgm304{display:block;}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f12w6cgp{grid-column-start:icon;}", ".f8bv1bt{grid-column-end:end;}", ".fvc9v3g svg{display:block;}", ".f4ybsrx{font-size:16px;}", ".f1h9en5y{margin-left:var(--spacingHorizontalXXS);}", ".f1xk557c{margin-right:var(--spacingHorizontalXXS);}", ".fe5j1ua{font-size:20px;}", ".f1rt2boy{font-size:24px;}", ".f1t5qyk5{margin-left:var(--spacingHorizontalSNudge);}", ".f1ikr372{margin-right:var(--spacingHorizontalSNudge);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}"]
  });
  var useDropdownStyles_unstable = (state) => {
    const {
      appearance,
      open,
      placeholderVisible,
      size
    } = state;
    const invalid = `${state.button["aria-invalid"]}` === "true";
    const disabled = state.button.disabled;
    const styles = useStyles6();
    const iconStyles = useIconStyles2();
    state.root.className = mergeClasses(dropdownClassNames.root, styles.root, styles[appearance], !disabled && appearance === "outline" && styles.outlineInteractive, invalid && appearance !== "underline" && styles.invalid, invalid && appearance === "underline" && styles.invalidUnderline, disabled && styles.disabled, state.root.className);
    state.button.className = mergeClasses(dropdownClassNames.button, styles.button, styles[size], placeholderVisible && styles.placeholder, disabled && styles.disabledText, state.button.className);
    if (state.listbox) {
      state.listbox.className = mergeClasses(dropdownClassNames.listbox, styles.listbox, !open && styles.listboxCollapsed, state.listbox.className);
    }
    if (state.expandIcon) {
      state.expandIcon.className = mergeClasses(dropdownClassNames.expandIcon, iconStyles.icon, iconStyles[size], disabled && iconStyles.disabled, state.expandIcon.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-combobox@9.2.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2._g6zdppgtltg226siuknsfrb3eq/node_modules/@fluentui/react-combobox/lib/components/Dropdown/Dropdown.js
  var Dropdown = /* @__PURE__ */ React72.forwardRef((props, ref) => {
    const state = useDropdown_unstable(props, ref);
    const contextValues = useComboboxContextValues(state);
    useDropdownStyles_unstable(state);
    const {
      useDropdownStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderDropdown_unstable(state, contextValues);
  });
  Dropdown.displayName = "Dropdown";

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  init_define_process();
  init_define_process_env();
  var React74 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/components/Divider/renderDivider.js
  init_define_process();
  init_define_process_env();
  var renderDivider_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slotProps.root.children !== void 0 && /* @__PURE__ */ createElement5(slots.wrapper, slotProps.wrapper, slotProps.root.children));
  };

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/components/Divider/useDivider.js
  init_define_process();
  init_define_process_env();
  var React73 = __toESM(require_react());
  var useDivider_unstable = (props, ref) => {
    const {
      alignContent = "center",
      appearance = "default",
      inset: inset2 = false,
      vertical = false,
      wrapper
    } = props;
    const dividerId = useId2("divider-");
    return {
      // Props passed at the top-level
      alignContent,
      appearance,
      inset: inset2,
      vertical,
      // Slots definition
      components: {
        root: "div",
        wrapper: "div"
      },
      root: getNativeElementProps("div", {
        role: "separator",
        "aria-orientation": vertical ? "vertical" : "horizontal",
        "aria-labelledby": props.children ? dividerId : void 0,
        ...props,
        ref
      }),
      wrapper: resolveShorthand(wrapper, {
        required: true,
        defaultProps: {
          id: dividerId,
          children: props.children
        }
      })
    };
  };

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/components/Divider/useDividerStyles.js
  init_define_process();
  init_define_process_env();
  var dividerClassNames = {
    root: "fui-Divider",
    wrapper: "fui-Divider__wrapper"
  };
  var useBaseStyles = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      Bh6795r: "fqerorx",
      qhf8xq: "f10pi13n",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm",
      fsow6f: "f17mccla",
      Bcvre1j: "fyl8oag",
      Br0sdwz: "f16vkdww",
      Bn78ew0: "fhsnbul",
      li1rpt: "f1gw3sf2",
      ap17g6: "f1ly5f7u",
      B771hl4: "f1s3tz6t"
    },
    childless: {
      susq4k: "f1kyqvp9",
      Bicfajf: ["fzynn9s", "f1z0ukd1"],
      jwcpgy: ["fekrn8e", "ftdg338"],
      B4rk6o: "fesgyo"
    },
    start: {
      Bsft5z2: "f13zj6fq"
    },
    center: {
      Ftih45: "f1wl9k8s",
      Bsft5z2: "f13zj6fq"
    },
    end: {
      Ftih45: "f1wl9k8s"
    },
    brand: {
      sj55zd: "f16muhyy",
      Bq4z7u6: "fcbuu2a",
      Bk5zm6e: ["f1wdw2dr", "f1ttio3w"],
      Bqjgrrk: "f1582fpk",
      Bm6vgfq: ["f1ttio3w", "f1wdw2dr"],
      B0n5ga8: "f1ahrvm8",
      s924m2: ["f1cd3wbc", "f17hbk9y"],
      B1q35kw: "fvrapl0",
      Gp14am: ["f17hbk9y", "f1cd3wbc"]
    },
    "default": {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f1vccso1",
      Bk5zm6e: ["f1geml7w", "fjml6kk"],
      Bqjgrrk: "f1r7kh1m",
      Bm6vgfq: ["fjml6kk", "f1geml7w"],
      B0n5ga8: "f16j7guv",
      s924m2: ["fx01ahm", "fj1a37q"],
      B1q35kw: "fl8d8yv",
      Gp14am: ["fj1a37q", "fx01ahm"]
    },
    subtle: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f5g06un",
      Bk5zm6e: ["f13sxdku", "f1n015lb"],
      Bqjgrrk: "f1x6bl8t",
      Bm6vgfq: ["f1n015lb", "f13sxdku"],
      B0n5ga8: "fvod1wy",
      s924m2: ["fwslg65", "flk0e17"],
      B1q35kw: "f103fvts",
      Gp14am: ["flk0e17", "fwslg65"]
    },
    strong: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f10tv6oz",
      Bk5zm6e: ["f16xp3sf", "f1seuxxq"],
      Bqjgrrk: "fwrmqbx",
      Bm6vgfq: ["f1seuxxq", "f16xp3sf"],
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    }
  }, {
    d: [".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f1063pyq{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}", ".fqerorx{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f10pi13n{position:relative;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f17mccla{text-align:center;}", ".fyl8oag::before{box-sizing:border-box;}", ".f16vkdww::before{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".fhsnbul::before{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f1gw3sf2::after{box-sizing:border-box;}", ".f1ly5f7u::after{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f1s3tz6t::after{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f1kyqvp9::before{margin-bottom:0;}", ".fzynn9s::before{margin-right:0;}", ".f1z0ukd1::before{margin-left:0;}", ".fekrn8e::after{margin-left:0;}", ".ftdg338::after{margin-right:0;}", ".fesgyo::after{margin-top:0;}", '.f13zj6fq::after{content:"";}', '.f1wl9k8s::before{content:"";}', ".f16muhyy{color:var(--colorBrandForeground1);}", ".fcbuu2a::before{border-top-color:var(--colorBrandStroke1);}", ".f1wdw2dr::before{border-right-color:var(--colorBrandStroke1);}", ".f1ttio3w::before{border-left-color:var(--colorBrandStroke1);}", ".f1582fpk::before{border-bottom-color:var(--colorBrandStroke1);}", ".f1ahrvm8::after{border-top-color:var(--colorBrandStroke1);}", ".f1cd3wbc::after{border-right-color:var(--colorBrandStroke1);}", ".f17hbk9y::after{border-left-color:var(--colorBrandStroke1);}", ".fvrapl0::after{border-bottom-color:var(--colorBrandStroke1);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f1vccso1::before{border-top-color:var(--colorNeutralStroke2);}", ".f1geml7w::before{border-right-color:var(--colorNeutralStroke2);}", ".fjml6kk::before{border-left-color:var(--colorNeutralStroke2);}", ".f1r7kh1m::before{border-bottom-color:var(--colorNeutralStroke2);}", ".f16j7guv::after{border-top-color:var(--colorNeutralStroke2);}", ".fx01ahm::after{border-right-color:var(--colorNeutralStroke2);}", ".fj1a37q::after{border-left-color:var(--colorNeutralStroke2);}", ".fl8d8yv::after{border-bottom-color:var(--colorNeutralStroke2);}", ".f5g06un::before{border-top-color:var(--colorNeutralStroke3);}", ".f13sxdku::before{border-right-color:var(--colorNeutralStroke3);}", ".f1n015lb::before{border-left-color:var(--colorNeutralStroke3);}", ".f1x6bl8t::before{border-bottom-color:var(--colorNeutralStroke3);}", ".fvod1wy::after{border-top-color:var(--colorNeutralStroke3);}", ".fwslg65::after{border-right-color:var(--colorNeutralStroke3);}", ".flk0e17::after{border-left-color:var(--colorNeutralStroke3);}", ".f103fvts::after{border-bottom-color:var(--colorNeutralStroke3);}", ".f10tv6oz::before{border-top-color:var(--colorNeutralStroke1);}", ".f16xp3sf::before{border-right-color:var(--colorNeutralStroke1);}", ".f1seuxxq::before{border-left-color:var(--colorNeutralStroke1);}", ".fwrmqbx::before{border-bottom-color:var(--colorNeutralStroke1);}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}"]
  });
  var useHorizontalStyles = /* @__PURE__ */ __styles2({
    base: {
      a9b677: "fly5x3f",
      Bdkvgpv: "f163fonl",
      B0qfbqy: "f51yk4v",
      pbipgd: "f13rof3u",
      Bm2nyyq: "f8rth92",
      xrcqlc: "f6czdpx",
      i5u598: "f1iyka9k"
    },
    inset: {
      uwmqm3: ["fjlbh76", "f11qrl6u"],
      z189sj: ["f11qrl6u", "fjlbh76"]
    },
    start: {
      Ftih45: "f1wl9k8s",
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bxwl2t9: "f1he2m4d",
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    center: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    end: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bsft5z2: "f13zj6fq",
      jwcpgy: ["f12w1bnb", "f1558wlj"],
      Iy66sp: "f1ayce8x"
    }
  }, {
    d: [".fly5x3f{width:100%;}", ".f163fonl::before{border-top-style:solid;}", ".f51yk4v::before{border-top-width:var(--strokeWidthThin);}", ".f13rof3u::before{min-width:8px;}", ".f8rth92::after{border-top-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f1iyka9k::after{min-width:8px;}", ".fjlbh76{padding-left:12px;}", ".f11qrl6u{padding-right:12px;}", '.f1wl9k8s::before{content:"";}', ".f1ojjlep::before{margin-right:12px;}", ".fk1kexq::before{margin-left:12px;}", ".f1he2m4d::before{max-width:8px;}", ".f12w1bnb::after{margin-left:12px;}", ".f1558wlj::after{margin-right:12px;}", '.f13zj6fq::after{content:"";}', ".f1ayce8x::after{max-width:8px;}"]
  });
  var useVerticalStyles = /* @__PURE__ */ __styles2({
    base: {
      Beiy3e4: "f1vx9l62",
      sshi5w: "f16gbxbe",
      m598lv: ["f1yq6w5o", "f1jpmc5p"],
      B4f6apu: ["f9sc749", "f1x8pvcy"],
      zkzzav: "fhkwbjy",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bde111x: "f19onpk6"
    },
    inset: {
      B6of3ja: "f1xdg43u",
      jrapky: "f1jlhsmd"
    },
    withChildren: {
      sshi5w: "f1tjaq3g"
    },
    start: {
      Ftih45: "f1wl9k8s",
      susq4k: "fg2pwug",
      Bbdr6tz: "fkjtzyi",
      B4rk6o: "f8vk40g"
    },
    center: {
      susq4k: "fg2pwug",
      B4rk6o: "f8vk40g"
    },
    end: {
      susq4k: "fg2pwug",
      Bsft5z2: "f13zj6fq",
      B4rk6o: "f8vk40g",
      gn64ia: "fqg5mu5"
    }
  }, {
    d: [".f1vx9l62{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}", ".f16gbxbe{min-height:20px;}", ".f1yq6w5o::before{border-right-style:solid;}", ".f1jpmc5p::before{border-left-style:solid;}", ".f9sc749::before{border-right-width:var(--strokeWidthThin);}", ".f1x8pvcy::before{border-left-width:var(--strokeWidthThin);}", ".fhkwbjy::before{min-height:8px;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f19onpk6::after{min-height:8px;}", ".f1xdg43u{margin-top:12px;}", ".f1jlhsmd{margin-bottom:12px;}", ".f1tjaq3g{min-height:84px;}", '.f1wl9k8s::before{content:"";}', ".fg2pwug::before{margin-bottom:12px;}", ".fkjtzyi::before{max-height:8px;}", ".f8vk40g::after{margin-top:12px;}", '.f13zj6fq::after{content:"";}', ".fqg5mu5::after{max-height:8px;}"]
  });
  var useDividerStyles_unstable = (state) => {
    const baseStyles = useBaseStyles();
    const horizontalStyles = useHorizontalStyles();
    const verticalStyles = useVerticalStyles();
    const {
      alignContent,
      appearance,
      inset: inset2,
      vertical
    } = state;
    state.root.className = mergeClasses(
      dividerClassNames.root,
      // Base styles
      baseStyles.base,
      baseStyles[alignContent],
      appearance && baseStyles[appearance],
      // Horizontal styles
      !vertical && horizontalStyles.base,
      !vertical && inset2 && horizontalStyles.inset,
      !vertical && horizontalStyles[alignContent],
      // Vertical styles
      vertical && verticalStyles.base,
      vertical && inset2 && verticalStyles.inset,
      vertical && verticalStyles[alignContent],
      vertical && state.root.children !== void 0 && verticalStyles.withChildren,
      // Childless styles
      state.root.children === void 0 && baseStyles.childless,
      // User provided class name
      state.root.className
    );
    if (state.wrapper) {
      state.wrapper.className = mergeClasses(dividerClassNames.wrapper, state.wrapper.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-divider@9.2.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  var Divider = /* @__PURE__ */ React74.forwardRef((props, ref) => {
    const state = useDivider_unstable(props, ref);
    useDividerStyles_unstable(state);
    const {
      useDividerStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderDivider_unstable(state);
  });
  Divider.displayName = "Divider";

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/components/Input/Input.js
  init_define_process();
  init_define_process_env();
  var React76 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/components/Input/useInput.js
  init_define_process();
  init_define_process_env();
  var React75 = __toESM(require_react());
  var useInput_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true,
      supportsSize: true
    });
    const overrides = useOverrides();
    var _overrides_inputDefaultAppearance;
    const {
      size = "medium",
      appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : "outline",
      onChange
    } = props;
    if (appearance === "filled-darker-shadow" || appearance === "filled-lighter-shadow") {
      console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the future.");
    }
    const [value, setValue] = useControllableState({
      state: props.value,
      defaultState: props.defaultValue,
      initialState: ""
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: ["size", "onChange", "value", "defaultValue"]
    });
    const state = {
      size,
      appearance,
      components: {
        root: "span",
        input: "input",
        contentBefore: "span",
        contentAfter: "span"
      },
      input: resolveShorthand(props.input, {
        required: true,
        defaultProps: {
          type: "text",
          ref,
          ...nativeProps.primary
        }
      }),
      contentAfter: resolveShorthand(props.contentAfter),
      contentBefore: resolveShorthand(props.contentBefore),
      root: resolveShorthand(props.root, {
        required: true,
        defaultProps: nativeProps.root
      })
    };
    state.input.value = value;
    state.input.onChange = useEventCallback((ev) => {
      const newValue = ev.target.value;
      onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
        value: newValue
      });
      setValue(newValue);
    });
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/components/Input/renderInput.js
  init_define_process();
  init_define_process_env();
  var renderInput_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.contentBefore && /* @__PURE__ */ createElement5(slots.contentBefore, slotProps.contentBefore), /* @__PURE__ */ createElement5(slots.input, slotProps.input), slots.contentAfter && /* @__PURE__ */ createElement5(slots.contentAfter, slotProps.contentAfter));
  };

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/components/Input/useInputStyles.js
  init_define_process();
  init_define_process_env();
  var inputClassNames = {
    root: "fui-Input",
    input: "fui-Input__input",
    contentBefore: "fui-Input__contentBefore",
    contentAfter: "fui-Input__contentAfter"
  };
  var useRootClassName = /* @__PURE__ */ __resetStyles2("r1jtohuq", "rl1z2p5", [".r1jtohuq{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:nowrap;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.r1jtohuq::after{box-sizing:border-box;content:"";position:absolute;left:-1px;bottom:-1px;right:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);-webkit-clip-path:inset(calc(100% - 2px) 0 0 0);clip-path:inset(calc(100% - 2px) 0 0 0);-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', "@media screen and (prefers-reduced-motion: reduce){.r1jtohuq::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", ".r1jtohuq:focus-within::after{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", "@media screen and (prefers-reduced-motion: reduce){.r1jtohuq:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", ".r1jtohuq:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".r1jtohuq:focus-within{outline:2px solid transparent;}", ".rl1z2p5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:nowrap;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.rl1z2p5::after{box-sizing:border-box;content:"";position:absolute;right:-1px;bottom:-1px;left:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);-webkit-clip-path:inset(calc(100% - 2px) 0 0 0);clip-path:inset(calc(100% - 2px) 0 0 0);-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", ".rl1z2p5:focus-within::after{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", ".rl1z2p5:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".rl1z2p5:focus-within{outline:2px solid transparent;}"]);
  var useRootStyles5 = /* @__PURE__ */ __styles2({
    small: {
      sshi5w: "f1pha7fy",
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    medium: {},
    large: {
      sshi5w: "f1w5jphr",
      uwmqm3: ["f1uw59to", "fw5db7e"],
      z189sj: ["fw5db7e", "f1uw59to"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k",
      i8kkvl: "f1rjii52",
      Belr9w4: "f1r7g2jn"
    },
    outline: {},
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "f1l4zc64",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      Drbcw7: "f8vnjqi",
      udz0bu: ["fz1etlk", "f1hc16gm"],
      Be8ivqh: "f1klwx88",
      ofdepl: ["f1hc16gm", "fz1etlk"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      wvpqe5: ["f1deefiw", "f1n71otn"],
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"]
    },
    underlineInteractive: {
      oetu4i: "f1l4zc64",
      Be8ivqh: "f1klwx88",
      B3778ie: ["f1nf3wye", "feulmo5"],
      d9w3h3: ["feulmo5", "f1nf3wye"],
      Bl18szs: ["f18vqdqu", "f53nyzz"],
      B4j8arr: ["f53nyzz", "f18vqdqu"]
    },
    filled: {
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    filledInteractive: {
      q7v0qe: "ftmjh5b",
      kmh5ft: ["f17blpuu", "fsrcdbj"],
      nagaa4: "f1tpwn32",
      B1yhkcb: ["fsrcdbj", "f17blpuu"]
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    "filled-darker": {
      De3pzq: "f16xq7d1"
    },
    "filled-lighter": {
      De3pzq: "fxugw4r"
    },
    "filled-darker-shadow": {
      De3pzq: "f16xq7d1",
      E5pizo: "fyed02w"
    },
    "filled-lighter-shadow": {
      De3pzq: "fxugw4r",
      E5pizo: "fyed02w"
    },
    disabled: {
      Bceei9c: "fdrzuqr",
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bsft5z2: "fhr9occ",
      Bduesf4: "f99w1ws"
    }
  }, {
    d: [".f1pha7fy{min-height:24px;}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1w5jphr{min-height:40px;}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1rjii52{-webkit-column-gap:var(--spacingHorizontalSNudge);column-gap:var(--spacingHorizontalSNudge);}", ".f1r7g2jn{row-gap:var(--spacingHorizontalSNudge);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".f1nf3wye::after{border-bottom-right-radius:0;}", ".feulmo5::after{border-bottom-left-radius:0;}", ".f18vqdqu::after{border-top-right-radius:0;}", ".f53nyzz::after{border-top-left-radius:0;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".fyed02w{box-shadow:var(--shadow2);}", ".fdrzuqr{cursor:not-allowed;}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fhr9occ::after{content:unset;}"],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".f1l4zc64:hover{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".ftmjh5b:hover,.ftmjh5b:focus-within{border-top-color:var(--colorTransparentStrokeInteractive);}", ".f17blpuu:hover,.f17blpuu:focus-within{border-right-color:var(--colorTransparentStrokeInteractive);}", ".fsrcdbj:hover,.fsrcdbj:focus-within{border-left-color:var(--colorTransparentStrokeInteractive);}", ".f1tpwn32:hover,.f1tpwn32:focus-within{border-bottom-color:var(--colorTransparentStrokeInteractive);}"],
    a: [".f8vnjqi:active,.f8vnjqi:focus-within{border-top-color:var(--colorNeutralStroke1Pressed);}", ".fz1etlk:active,.fz1etlk:focus-within{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1hc16gm:active,.f1hc16gm:focus-within{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1klwx88:active,.f1klwx88:focus-within{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}"],
    m: [["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rvyvqg{border-right-color:GrayText;}.f14g86mu{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    w: [".f99w1ws:focus-within{outline-style:none;}"]
  });
  var useInputClassName = /* @__PURE__ */ __resetStyles2("rvp2gzh", null, [".rvp2gzh{box-sizing:border-box;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;min-width:0;border-style:none;padding:0 var(--spacingHorizontalXXS);color:var(--colorNeutralForeground1);background-color:transparent;outline-style:none;font-family:inherit;font-size:inherit;font-weight:inherit;line-height:inherit;}", ".rvp2gzh::-webkit-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::-moz-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh:-ms-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::placeholder{color:var(--colorNeutralForeground4);opacity:1;}"]);
  var useInputElementStyles = /* @__PURE__ */ __styles2({
    large: {
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      De3pzq: "f1c21dwh",
      Bceei9c: "fdrzuqr",
      yvdlaj: "fahhnxm"
    }
  }, {
    d: [".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fdrzuqr{cursor:not-allowed;}", ".fahhnxm::-webkit-input-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".fahhnxm::-moz-placeholder{color:var(--colorNeutralForegroundDisabled);}"]
  });
  var useContentClassName = /* @__PURE__ */ __resetStyles2("r1572tok", null, [".r1572tok{box-sizing:border-box;color:var(--colorNeutralForeground3);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".r1572tok>svg{font-size:20px;}"]);
  var useContentStyles = /* @__PURE__ */ __styles2({
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      kwki1k: "f3u2cy0"
    },
    medium: {},
    large: {
      kwki1k: "fa420co"
    }
  }, {
    d: [".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f3u2cy0>svg{font-size:16px;}", ".fa420co>svg{font-size:24px;}"]
  });
  var useInputStyles_unstable = (state) => {
    const {
      size,
      appearance
    } = state;
    const disabled = state.input.disabled;
    const invalid = `${state.input["aria-invalid"]}` === "true";
    const filled = appearance.startsWith("filled");
    const rootStyles = useRootStyles5();
    const inputStyles = useInputElementStyles();
    const contentStyles = useContentStyles();
    state.root.className = mergeClasses(inputClassNames.root, useRootClassName(), rootStyles[size], rootStyles[appearance], !disabled && appearance === "outline" && rootStyles.outlineInteractive, !disabled && appearance === "underline" && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, filled && rootStyles.filled, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, state.root.className);
    state.input.className = mergeClasses(inputClassNames.input, useInputClassName(), size === "large" && inputStyles.large, disabled && inputStyles.disabled, state.input.className);
    const contentClasses = [useContentClassName(), disabled && contentStyles.disabled, contentStyles[size]];
    if (state.contentBefore) {
      state.contentBefore.className = mergeClasses(inputClassNames.contentBefore, ...contentClasses, state.contentBefore.className);
    }
    if (state.contentAfter) {
      state.contentAfter.className = mergeClasses(inputClassNames.contentAfter, ...contentClasses, state.contentAfter.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-input@9.4.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_r_4di3ffewpaiiadzk3zhc3oqhte/node_modules/@fluentui/react-input/lib/components/Input/Input.js
  var Input = /* @__PURE__ */ React76.forwardRef((props, ref) => {
    const state = useInput_unstable(props, ref);
    useInputStyles_unstable(state);
    const {
      useInputStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderInput_unstable(state);
  });
  Input.displayName = "Input";

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/contexts/menuContext.js
  init_define_process();
  init_define_process_env();
  var React80 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+rea_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+rea_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/createContext.js
  init_define_process();
  init_define_process_env();
  var React77 = __toESM(require_react());
  var import_scheduler2 = __toESM(require_scheduler2());
  var createProvider2 = (Original) => {
    const Provider3 = (props) => {
      const valueRef = React77.useRef(props.value);
      const versionRef = React77.useRef(0);
      const contextValue = React77.useRef();
      if (!contextValue.current) {
        contextValue.current = {
          value: valueRef,
          version: versionRef,
          listeners: []
        };
      }
      useIsomorphicLayoutEffect(() => {
        valueRef.current = props.value;
        versionRef.current += 1;
        (0, import_scheduler2.unstable_runWithPriority)(import_scheduler2.unstable_NormalPriority, () => {
          contextValue.current.listeners.forEach((listener) => {
            listener([versionRef.current, props.value]);
          });
        });
      }, [props.value]);
      return /* @__PURE__ */ React77.createElement(Original, {
        value: contextValue.current
      }, props.children);
    };
    if (true) {
      Provider3.displayName = "ContextSelector.Provider";
    }
    return Provider3;
  };
  var createContext16 = (defaultValue) => {
    const context = /* @__PURE__ */ React77.createContext({
      value: {
        current: defaultValue
      },
      version: {
        current: -1
      },
      listeners: []
    });
    context.Provider = createProvider2(context.Provider);
    delete context.Consumer;
    return context;
  };

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+rea_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/useContextSelector.js
  init_define_process();
  init_define_process_env();
  var React78 = __toESM(require_react());
  var useContextSelector2 = (context, selector2) => {
    const contextValue = React78.useContext(context);
    const {
      value: {
        current: value
      },
      version: {
        current: version2
      },
      listeners
    } = contextValue;
    const selected = selector2(value);
    const [state, dispatch2] = React78.useReducer((prevState, payload) => {
      if (!payload) {
        return [value, selected];
      }
      if (payload[0] <= version2) {
        if (objectIs2(prevState[1], selected)) {
          return prevState;
        }
        return [value, selected];
      }
      try {
        if (objectIs2(prevState[0], payload[1])) {
          return prevState;
        }
        const nextSelected = selector2(payload[1]);
        if (objectIs2(prevState[1], nextSelected)) {
          return prevState;
        }
        return [payload[1], nextSelected];
      } catch (e3) {
      }
      return [prevState[0], prevState[1]];
    }, [value, selected]);
    if (!objectIs2(state[1], selected)) {
      dispatch2(void 0);
    }
    useIsomorphicLayoutEffect(() => {
      listeners.push(dispatch2);
      return () => {
        const index = listeners.indexOf(dispatch2);
        listeners.splice(index, 1);
      };
    }, [listeners]);
    return state[1];
  };
  function is2(x3, y4) {
    return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
  }
  var objectIs2 = (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore fallback to native if it exists (not in IE11)
    typeof Object.is === "function" ? Object.is : is2
  );

  // node_modules/.pnpm/@fluentui+react-context-selector@9.1.18_@types+rea_x2tgmd5czrw5g2ga26werhroae/node_modules/@fluentui/react-context-selector/lib/useHasParentContext.js
  init_define_process();
  init_define_process_env();
  var React79 = __toESM(require_react());
  function useHasParentContext2(context) {
    const contextValue = React79.useContext(context);
    if (contextValue.version) {
      return contextValue.version.current !== -1;
    }
    return false;
  }

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/contexts/menuContext.js
  var MenuContext = /* @__PURE__ */ createContext16(void 0);
  var menuContextDefaultValue = {
    open: false,
    setOpen: () => false,
    checkedValues: {},
    onCheckedValueChange: () => null,
    isSubmenu: false,
    triggerRef: {
      current: null
    },
    menuPopoverRef: {
      current: null
    },
    mountNode: null,
    triggerId: "",
    openOnContext: false,
    openOnHover: false,
    hasIcons: false,
    hasCheckmarks: false,
    inline: false,
    persistOnItemClick: false
  };
  var MenuProvider = MenuContext.Provider;
  var useMenuContext_unstable = (selector2) => useContextSelector2(MenuContext, (ctx = menuContextDefaultValue) => selector2(ctx));

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/contexts/menuTriggerContext.js
  init_define_process();
  init_define_process_env();
  var React81 = __toESM(require_react());
  var MenuTriggerContext = /* @__PURE__ */ React81.createContext(void 0);
  var menuTriggerContextDefaultValue = false;
  var MenuTriggerContextProvider = MenuTriggerContext.Provider;
  var _React_useContext2;
  var useMenuTriggerContext_unstable = () => (_React_useContext2 = React81.useContext(MenuTriggerContext)) !== null && _React_useContext2 !== void 0 ? _React_useContext2 : menuTriggerContextDefaultValue;

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/contexts/menuListContext.js
  init_define_process();
  init_define_process_env();
  var React82 = __toESM(require_react());
  var MenuListContext = /* @__PURE__ */ createContext16(void 0);
  var menuListContextDefaultValue = {
    checkedValues: {},
    setFocusByFirstCharacter: () => null,
    toggleCheckbox: () => null,
    selectRadio: () => null,
    hasIcons: false,
    hasCheckmarks: false
  };
  var MenuListProvider = MenuListContext.Provider;
  var useMenuListContext_unstable = (selector2) => useContextSelector2(MenuListContext, (ctx = menuListContextDefaultValue) => selector2(ctx));

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/Menu.js
  init_define_process();
  init_define_process_env();
  var React86 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/useMenu.js
  init_define_process();
  init_define_process_env();
  var React84 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/utils/useOnMenuEnter.js
  init_define_process();
  init_define_process_env();
  var React83 = __toESM(require_react());
  var MENU_ENTER_EVENT = "fuimenuenter";
  var useOnMenuMouseEnter = (options) => {
    const {
      refs,
      callback,
      element,
      disabled
    } = options;
    const listener = useEventCallback((ev) => {
      const popoverRef = refs[0];
      const someMenuPopover = ev.target;
      var _popoverRef_current;
      const isOutsidePopover = !elementContains((_popoverRef_current = popoverRef.current) !== null && _popoverRef_current !== void 0 ? _popoverRef_current : null, someMenuPopover);
      if (isOutsidePopover && !disabled) {
        callback(ev);
      }
    });
    React83.useEffect(() => {
      if (element == null) {
        return;
      }
      if (!disabled) {
        element.addEventListener(MENU_ENTER_EVENT, listener);
      }
      return () => {
        element.removeEventListener(MENU_ENTER_EVENT, listener);
      };
    }, [listener, element, disabled]);
  };
  var dispatchMenuEnterEvent = (el, nativeEvent) => {
    el.dispatchEvent(new CustomEvent(MENU_ENTER_EVENT, {
      bubbles: true,
      detail: {
        nativeEvent
      }
    }));
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/utils/useIsSubmenu.js
  init_define_process();
  init_define_process_env();
  function useIsSubmenu() {
    const menuContextValue = useMenuContext_unstable((context) => context.isSubmenu);
    const hasMenuListContext = useHasParentContext2(MenuListContext);
    return menuContextValue || hasMenuListContext;
  }

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/useMenu.js
  var submenuFallbackPositions = ["after", "after-bottom", "before-top", "before", "before-bottom", "above"];
  var useMenu_unstable = (props) => {
    const isSubmenu = useIsSubmenu();
    const {
      hoverDelay = 500,
      inline = false,
      hasCheckmarks = false,
      hasIcons = false,
      closeOnScroll = false,
      openOnContext = false,
      persistOnItemClick = false,
      openOnHover = isSubmenu,
      defaultCheckedValues,
      mountNode = null
    } = props;
    const triggerId = useId2("menu");
    const [contextTarget, setContextTarget] = usePositioningMouseTarget();
    const positioningState = {
      position: isSubmenu ? "after" : "below",
      align: isSubmenu ? "top" : "start",
      target: props.openOnContext ? contextTarget : void 0,
      fallbackPositions: isSubmenu ? submenuFallbackPositions : void 0,
      ...resolvePositioningShorthand(props.positioning)
    };
    const children2 = React84.Children.toArray(props.children);
    if (true) {
      if (children2.length === 0) {
        console.warn("Menu must contain at least one child");
      }
      if (children2.length > 2) {
        console.warn("Menu must contain at most two children");
      }
    }
    let menuTrigger = void 0;
    let menuPopover = void 0;
    if (children2.length === 2) {
      menuTrigger = children2[0];
      menuPopover = children2[1];
    } else if (children2.length === 1) {
      menuPopover = children2[0];
    }
    const {
      targetRef: triggerRef,
      containerRef: menuPopoverRef
    } = usePositioning(positioningState);
    const [open, setOpen] = useMenuOpenState({
      hoverDelay,
      isSubmenu,
      setContextTarget,
      closeOnScroll,
      menuPopoverRef,
      triggerRef,
      open: props.open,
      defaultOpen: props.defaultOpen,
      onOpenChange: props.onOpenChange,
      openOnContext
    });
    const [checkedValues, onCheckedValueChange] = useMenuSelectableState({
      checkedValues: props.checkedValues,
      defaultCheckedValues,
      onCheckedValueChange: props.onCheckedValueChange
    });
    return {
      inline,
      hoverDelay,
      triggerId,
      isSubmenu,
      openOnHover,
      contextTarget,
      setContextTarget,
      hasCheckmarks,
      hasIcons,
      closeOnScroll,
      menuTrigger,
      menuPopover,
      mountNode,
      triggerRef,
      menuPopoverRef,
      components: {},
      openOnContext,
      open,
      setOpen,
      checkedValues,
      onCheckedValueChange,
      persistOnItemClick
    };
  };
  var useMenuSelectableState = (props) => {
    const [checkedValues, setCheckedValues] = useControllableState({
      state: props.checkedValues,
      defaultState: props.defaultCheckedValues,
      initialState: {}
    });
    const onCheckedValueChange = useEventCallback((e3, {
      name,
      checkedItems
    }) => {
      var _props_onCheckedValueChange;
      (_props_onCheckedValueChange = props.onCheckedValueChange) === null || _props_onCheckedValueChange === void 0 ? void 0 : _props_onCheckedValueChange.call(props, e3, {
        name,
        checkedItems
      });
      setCheckedValues((currentValue) => ({
        ...currentValue,
        [name]: checkedItems
      }));
    });
    return [checkedValues, onCheckedValueChange];
  };
  var useMenuOpenState = (state) => {
    const {
      targetDocument
    } = useFluent();
    const parentSetOpen = useMenuContext_unstable((context) => context.setOpen);
    const onOpenChange = useEventCallback((e3, data) => {
      var _state_onOpenChange;
      return (_state_onOpenChange = state.onOpenChange) === null || _state_onOpenChange === void 0 ? void 0 : _state_onOpenChange.call(state, e3, data);
    });
    const setOpenTimeout = React84.useRef(0);
    const enteringTriggerRef = React84.useRef(false);
    const [open, setOpenState] = useControllableState({
      state: state.open,
      defaultState: state.defaultOpen,
      initialState: false
    });
    const trySetOpen = useEventCallback((e3, data) => {
      const event = e3 instanceof CustomEvent && e3.type === MENU_ENTER_EVENT ? e3.detail.nativeEvent : e3;
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {
        ...data
      });
      if (data.open && e3.type === "contextmenu") {
        state.setContextTarget(e3);
      }
      if (!data.open) {
        state.setContextTarget(void 0);
      }
      if (data.bubble) {
        parentSetOpen(e3, {
          ...data
        });
      }
      setOpenState(data.open);
    });
    const setOpen = useEventCallback((e3, data) => {
      clearTimeout(setOpenTimeout.current);
      if (!(e3 instanceof Event) && e3.persist) {
        e3.persist();
      }
      if (e3.type === "mouseleave" || e3.type === "mouseenter" || e3.type === "mousemove" || e3.type === MENU_ENTER_EVENT) {
        var _state_triggerRef_current;
        if ((_state_triggerRef_current = state.triggerRef.current) === null || _state_triggerRef_current === void 0 ? void 0 : _state_triggerRef_current.contains(e3.target)) {
          enteringTriggerRef.current = e3.type === "mouseenter" || e3.type === "mousemove";
        }
        setOpenTimeout.current = setTimeout(() => trySetOpen(e3, data), state.hoverDelay);
      } else {
        trySetOpen(e3, data);
      }
    });
    useOnClickOutside({
      contains: elementContains,
      disabled: !open,
      element: targetDocument,
      refs: [state.menuPopoverRef, !state.openOnContext && state.triggerRef].filter(Boolean),
      callback: (event) => setOpen(event, {
        open: false,
        type: "clickOutside",
        event
      })
    });
    const closeOnScroll = state.openOnContext || state.closeOnScroll;
    useOnScrollOutside({
      contains: elementContains,
      element: targetDocument,
      callback: (event) => setOpen(event, {
        open: false,
        type: "scrollOutside",
        event
      }),
      refs: [state.menuPopoverRef, !state.openOnContext && state.triggerRef].filter(Boolean),
      disabled: !open || !closeOnScroll
    });
    useOnMenuMouseEnter({
      element: targetDocument,
      callback: (event) => {
        if (!enteringTriggerRef.current) {
          setOpen(event, {
            open: false,
            type: "menuMouseEnter",
            event
          });
        }
      },
      disabled: !open,
      refs: [state.menuPopoverRef]
    });
    React84.useEffect(() => {
      return () => {
        clearTimeout(setOpenTimeout.current);
      };
    }, []);
    const {
      findFirstFocusable
    } = useFocusFinders();
    const focusFirst = React84.useCallback(() => {
      const firstFocusable = findFirstFocusable(state.menuPopoverRef.current);
      firstFocusable === null || firstFocusable === void 0 ? void 0 : firstFocusable.focus();
    }, [findFirstFocusable, state.menuPopoverRef]);
    const firstMount = useFirstMount();
    React84.useEffect(() => {
      if (open) {
        focusFirst();
      } else {
        if (!firstMount) {
          if ((targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement) === (targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.body)) {
            var _state_triggerRef_current;
            (_state_triggerRef_current = state.triggerRef.current) === null || _state_triggerRef_current === void 0 ? void 0 : _state_triggerRef_current.focus();
          }
        }
      }
    }, [state.triggerRef, state.isSubmenu, open, focusFirst, firstMount, targetDocument, state.menuPopoverRef]);
    return [open, setOpen];
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/useMenuContextValues.js
  init_define_process();
  init_define_process_env();
  function useMenuContextValues_unstable(state) {
    const {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      inline,
      isSubmenu,
      menuPopoverRef,
      mountNode,
      onCheckedValueChange,
      open,
      openOnContext,
      openOnHover,
      persistOnItemClick,
      setOpen,
      triggerId,
      triggerRef
    } = state;
    const menu = {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      inline,
      isSubmenu,
      menuPopoverRef,
      mountNode,
      onCheckedValueChange,
      open,
      openOnContext,
      openOnHover,
      persistOnItemClick,
      setOpen,
      triggerId,
      triggerRef
    };
    return {
      menu
    };
  }

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/renderMenu.js
  init_define_process();
  init_define_process_env();
  var React85 = __toESM(require_react());
  var renderMenu_unstable = (state, contextValues) => {
    return /* @__PURE__ */ React85.createElement(MenuProvider, {
      value: contextValues.menu
    }, state.menuTrigger, state.open && state.menuPopover);
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/Menu/Menu.js
  var Menu = (props) => {
    const state = useMenu_unstable(props);
    const contextValues = useMenuContextValues_unstable(state);
    return renderMenu_unstable(state, contextValues);
  };
  Menu.displayName = "Menu";

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/MenuItem.js
  init_define_process();
  init_define_process_env();
  var React89 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItem.js
  init_define_process();
  init_define_process_env();
  var React88 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/useCharacterSearch.js
  init_define_process();
  init_define_process_env();
  var React87 = __toESM(require_react());
  var useCharacterSearch = (state, ref) => {
    const setFocusByFirstCharacter = useMenuListContext_unstable((context) => context.setFocusByFirstCharacter);
    const {
      onKeyDown: originalOnKeyDown
    } = state.root;
    state.root.onKeyDown = (e3) => {
      var _e_key;
      originalOnKeyDown === null || originalOnKeyDown === void 0 ? void 0 : originalOnKeyDown(e3);
      if (((_e_key = e3.key) === null || _e_key === void 0 ? void 0 : _e_key.length) > 1) {
        return;
      }
      if (ref.current) {
        setFocusByFirstCharacter === null || setFocusByFirstCharacter === void 0 ? void 0 : setFocusByFirstCharacter(e3, ref.current);
      }
    };
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItem.js
  var ChevronRightIcon = /* @__PURE__ */ bundleIcon_default(ChevronRightFilled, ChevronRightRegular);
  var ChevronLeftIcon = /* @__PURE__ */ bundleIcon_default(ChevronLeftFilled, ChevronLeftRegular);
  var useMenuItem_unstable = (props, ref) => {
    const isSubmenuTrigger = useMenuTriggerContext_unstable();
    const persistOnClickContext = useMenuContext_unstable((context) => context.persistOnItemClick);
    const {
      as = "div",
      disabled = false,
      hasSubmenu = isSubmenuTrigger,
      persistOnClick = persistOnClickContext
    } = props;
    const hasIcons = useMenuListContext_unstable((context) => context.hasIcons);
    const hasCheckmarks = useMenuListContext_unstable((context) => context.hasCheckmarks);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const {
      dir
    } = useFluent();
    const innerRef = React88.useRef(null);
    const dismissedWithKeyboardRef = React88.useRef(false);
    const state = {
      hasSubmenu,
      disabled,
      persistOnClick,
      components: {
        root: "div",
        icon: "span",
        checkmark: "span",
        submenuIndicator: "span",
        content: "span",
        secondaryContent: "span"
      },
      root: getNativeElementProps(as, useARIAButtonProps(as, {
        role: "menuitem",
        ...props,
        disabled: false,
        disabledFocusable: disabled,
        ref: useMergedRefs(ref, innerRef),
        onKeyDown: useEventCallback((event) => {
          var _props_onKeyDown;
          (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, event);
          if (!event.isDefaultPrevented() && (event.key === Space || event.key === Enter)) {
            dismissedWithKeyboardRef.current = true;
          }
        }),
        onMouseEnter: useEventCallback((event) => {
          var _innerRef_current, _props_onMouseEnter;
          (_innerRef_current = innerRef.current) === null || _innerRef_current === void 0 ? void 0 : _innerRef_current.focus();
          (_props_onMouseEnter = props.onMouseEnter) === null || _props_onMouseEnter === void 0 ? void 0 : _props_onMouseEnter.call(props, event);
        }),
        onClick: useEventCallback((event) => {
          var _props_onClick;
          if (!hasSubmenu && !persistOnClick) {
            setOpen(event, {
              open: false,
              keyboard: dismissedWithKeyboardRef.current,
              bubble: true,
              type: "menuItemClick",
              event
            });
            dismissedWithKeyboardRef.current = false;
          }
          (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, event);
        })
      })),
      icon: resolveShorthand(props.icon, {
        required: hasIcons
      }),
      checkmark: resolveShorthand(props.checkmark, {
        required: hasCheckmarks
      }),
      submenuIndicator: resolveShorthand(props.submenuIndicator, {
        required: hasSubmenu,
        defaultProps: {
          children: dir === "ltr" ? /* @__PURE__ */ React88.createElement(ChevronRightIcon, null) : /* @__PURE__ */ React88.createElement(ChevronLeftIcon, null)
        }
      }),
      content: resolveShorthand(props.content, {
        required: !!props.children,
        defaultProps: {
          children: props.children
        }
      }),
      secondaryContent: resolveShorthand(props.secondaryContent)
    };
    useCharacterSearch(state, innerRef);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/renderMenuItem.js
  init_define_process();
  init_define_process_env();
  var renderMenuItem_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.checkmark && /* @__PURE__ */ createElement5(slots.checkmark, slotProps.checkmark), slots.icon && /* @__PURE__ */ createElement5(slots.icon, slotProps.icon), slots.content && /* @__PURE__ */ createElement5(slots.content, slotProps.content), slots.secondaryContent && /* @__PURE__ */ createElement5(slots.secondaryContent, slotProps.secondaryContent), slots.submenuIndicator && /* @__PURE__ */ createElement5(slots.submenuIndicator, slotProps.submenuIndicator));
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItemStyles.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/selectable/useCheckmarkStyles.js
  init_define_process();
  init_define_process_env();
  var useStyles7 = /* @__PURE__ */ __styles2({
    root: {
      a9b677: "fjw5fx7",
      Bqenvij: "fd461yt",
      Bcdw1i0: "fd7fpy0"
    },
    rootChecked: {
      Bcdw1i0: "f1022m68"
    }
  }, {
    d: [".fjw5fx7{width:16px;}", ".fd461yt{height:16px;}", ".fd7fpy0{visibility:hidden;}", ".f1022m68{visibility:visible;}"]
  });
  var useCheckmarkStyles_unstable = (state) => {
    const styles = useStyles7();
    if (state.checkmark) {
      state.checkmark.className = mergeClasses(styles.root, state.checked && styles.rootChecked, state.checkmark.className);
    }
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItemStyles.js
  var menuItemClassNames = {
    root: "fui-MenuItem",
    icon: "fui-MenuItem__icon",
    checkmark: "fui-MenuItem__checkmark",
    submenuIndicator: "fui-MenuItem__submenuIndicator",
    content: "fui-MenuItem__content",
    secondaryContent: "fui-MenuItem__secondaryContent"
  };
  var useStyles8 = /* @__PURE__ */ __styles2({
    focusIndicator: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "fdiulkx",
      Bjwuhne: "f1yalx80",
      Ghsupd: ["fq22d5a", "f1jw7pan"],
      Bule8hv: ["f1jw7pan", "fq22d5a"]
    },
    root: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      qhf8xq: "f10pi13n",
      sj55zd: "fkfq4zb",
      De3pzq: "fxugw4r",
      z189sj: ["f81rol6", "frdkuqy"],
      uwmqm3: ["frdkuqy", "f81rol6"],
      Bqenvij: "f1d2rq10",
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      Be2twd7: "fkhj508",
      Bceei9c: "f1k6fduh",
      i8kkvl: "f1q8lukm",
      Belr9w4: "f1ma2n7n",
      Jwef8y: "f1knas48",
      Bi91k9c: "fnwyq0v",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      Bg7n49j: "fp258yr",
      famaaq: "f1xqy1su"
    },
    content: {
      uwmqm3: ["f161knb0", "f12huiiw"],
      z189sj: ["f12huiiw", "f161knb0"],
      De3pzq: "f3rmtva",
      Bh6795r: "fqerorx"
    },
    secondaryContent: {
      uwmqm3: ["f161knb0", "f12huiiw"],
      z189sj: ["f12huiiw", "f161knb0"],
      sj55zd: "f11d4kpn",
      Bi91k9c: "f1jp5ecu",
      t0hwav: "fc1cou1"
    },
    icon: {
      a9b677: "f64fuq3",
      Bqenvij: "fjamq6b",
      Be2twd7: "fe5j1ua",
      Bg96gwp: "fez10in",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23"
    },
    submenuIndicator: {
      a9b677: "f64fuq3",
      Bqenvij: "fjamq6b",
      Be2twd7: "fe5j1ua",
      Bg96gwp: "fez10in",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23"
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Bi91k9c: "fvgxktp",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      Bg7n49j: "f1q1x1ba",
      t0hwav: "ft33916",
      Bbusuzp: "f1dcs8yz",
      ze5xyy: "f1kc2mi9",
      Bctn1xl: "fk56vqo",
      Bh6z0a4: "f1ikwg0d"
    }
  }, {
    f: [".ftqa4ok:focus{outline-style:none;}", ".fc1cou1:focus{color:var(--colorNeutralForeground3Hover);}", ".ft33916:focus{color:var(--colorNeutralForegroundDisabled);}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".fdiulkx[data-fui-focus-visible]::after{top:-2px;}", ".f1yalx80[data-fui-focus-visible]::after{bottom:-2px;}", ".fq22d5a[data-fui-focus-visible]::after{left:-2px;}", ".f1jw7pan[data-fui-focus-visible]::after{right:-2px;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f10pi13n{position:relative;}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f81rol6{padding-right:10px;}", ".frdkuqy{padding-left:10px;}", ".f1d2rq10{height:32px;}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1k6fduh{cursor:pointer;}", ".f1q8lukm{-webkit-column-gap:4px;column-gap:4px;}", ".f1ma2n7n{row-gap:4px;}", ".f1xqy1su{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".f161knb0{padding-left:2px;}", ".f12huiiw{padding-right:2px;}", ".f3rmtva{background-color:transparent;}", ".fqerorx{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f64fuq3{width:20px;}", ".fjamq6b{height:20px;}", ".fe5j1ua{font-size:20px;}", ".fez10in{line-height:0;}", ".ftuwxu6{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}", ".f4d9j23{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fp258yr:hover .fui-MenuItem__icon{color:var(--colorNeutralForeground2BrandSelected);}", ".f1jp5ecu:hover{color:var(--colorNeutralForeground3Hover);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1q1x1ba:hover .fui-MenuItem__icon{color:var(--colorNeutralForegroundDisabled);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fk56vqo:hover .fui-MenuItem__icon{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ikwg0d:focus{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useMenuItemStyles_unstable = (state) => {
    const styles = useStyles8();
    state.root.className = mergeClasses(menuItemClassNames.root, styles.root, styles.focusIndicator, state.disabled && styles.disabled, state.root.className);
    if (state.content) {
      state.content.className = mergeClasses(menuItemClassNames.content, styles.content, state.content.className);
    }
    if (state.checkmark) {
      state.checkmark.className = mergeClasses(menuItemClassNames.checkmark, state.checkmark.className);
    }
    if (state.secondaryContent) {
      state.secondaryContent.className = mergeClasses(menuItemClassNames.secondaryContent, !state.disabled && styles.secondaryContent, state.secondaryContent.className);
    }
    if (state.icon) {
      state.icon.className = mergeClasses(menuItemClassNames.icon, styles.icon, state.icon.className);
    }
    if (state.submenuIndicator) {
      state.submenuIndicator.className = mergeClasses(menuItemClassNames.submenuIndicator, styles.submenuIndicator, state.submenuIndicator.className);
    }
    useCheckmarkStyles_unstable(state);
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuItem/MenuItem.js
  var MenuItem = /* @__PURE__ */ React89.forwardRef((props, ref) => {
    const state = useMenuItem_unstable(props, ref);
    useMenuItemStyles_unstable(state);
    const {
      useMenuItemStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderMenuItem_unstable(state);
  });
  MenuItem.displayName = "MenuItem";

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/MenuList.js
  init_define_process();
  init_define_process_env();
  var React91 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuList.js
  init_define_process();
  init_define_process_env();
  var React90 = __toESM(require_react());
  var useMenuList_unstable = (props, ref) => {
    const {
      findAllFocusable
    } = useFocusFinders();
    const menuContext = useMenuContextSelectors();
    const hasMenuContext = useHasParentContext2(MenuContext);
    const focusAttributes = useArrowNavigationGroup({
      circular: true,
      ignoreDefaultKeydown: {
        Tab: hasMenuContext
      }
    });
    if (usingPropsAndMenuContext(props, menuContext, hasMenuContext)) {
      console.warn("You are using both MenuList and Menu props, we recommend you to use Menu props when available");
    }
    const innerRef = React90.useRef(null);
    const setFocusByFirstCharacter = React90.useCallback((e3, itemEl) => {
      const acceptedRoles = ["menuitem", "menuitemcheckbox", "menuitemradio"];
      if (!innerRef.current) {
        return;
      }
      const menuItems = findAllFocusable(innerRef.current, (el) => el.hasAttribute("role") && acceptedRoles.indexOf(el.getAttribute("role")) !== -1);
      let startIndex = menuItems.indexOf(itemEl) + 1;
      if (startIndex === menuItems.length) {
        startIndex = 0;
      }
      const firstChars = menuItems.map((menuItem) => {
        var _menuItem_textContent;
        return (_menuItem_textContent = menuItem.textContent) === null || _menuItem_textContent === void 0 ? void 0 : _menuItem_textContent.charAt(0).toLowerCase();
      });
      const char2 = e3.key.toLowerCase();
      const getIndexFirstChars = (start2, firstChar) => {
        for (let i4 = start2; i4 < firstChars.length; i4++) {
          if (char2 === firstChars[i4]) {
            return i4;
          }
        }
        return -1;
      };
      let index = getIndexFirstChars(startIndex, char2);
      if (index === -1) {
        index = getIndexFirstChars(0, char2);
      }
      if (index > -1) {
        menuItems[index].focus();
      }
    }, [findAllFocusable]);
    var _props_checkedValues;
    const [checkedValues, setCheckedValues] = useControllableState({
      state: (_props_checkedValues = props.checkedValues) !== null && _props_checkedValues !== void 0 ? _props_checkedValues : hasMenuContext ? menuContext.checkedValues : void 0,
      defaultState: props.defaultCheckedValues,
      initialState: {}
    });
    var _props_onCheckedValueChange;
    const handleCheckedValueChange = (_props_onCheckedValueChange = props.onCheckedValueChange) !== null && _props_onCheckedValueChange !== void 0 ? _props_onCheckedValueChange : hasMenuContext ? menuContext.onCheckedValueChange : void 0;
    const toggleCheckbox = useEventCallback((e3, name, value, checked) => {
      const checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];
      const newCheckedItems = [...checkedItems];
      if (checked) {
        newCheckedItems.splice(newCheckedItems.indexOf(value), 1);
      } else {
        newCheckedItems.push(value);
      }
      handleCheckedValueChange === null || handleCheckedValueChange === void 0 ? void 0 : handleCheckedValueChange(e3, {
        name,
        checkedItems: newCheckedItems
      });
      setCheckedValues((s4) => ({
        ...s4,
        [name]: newCheckedItems
      }));
    });
    const selectRadio = useEventCallback((e3, name, value) => {
      const newCheckedItems = [value];
      setCheckedValues((s4) => ({
        ...s4,
        [name]: newCheckedItems
      }));
      handleCheckedValueChange === null || handleCheckedValueChange === void 0 ? void 0 : handleCheckedValueChange(e3, {
        name,
        checkedItems: newCheckedItems
      });
    });
    return {
      components: {
        root: "div"
      },
      root: getNativeElementProps("div", {
        ref: useMergedRefs(ref, innerRef),
        role: "menu",
        "aria-labelledby": menuContext.triggerId,
        ...focusAttributes,
        ...props
      }),
      hasIcons: menuContext.hasIcons || false,
      hasCheckmarks: menuContext.hasCheckmarks || false,
      checkedValues,
      setFocusByFirstCharacter,
      selectRadio,
      toggleCheckbox
    };
  };
  var useMenuContextSelectors = () => {
    const checkedValues = useMenuContext_unstable((context) => context.checkedValues);
    const onCheckedValueChange = useMenuContext_unstable((context) => context.onCheckedValueChange);
    const triggerId = useMenuContext_unstable((context) => context.triggerId);
    const hasIcons = useMenuContext_unstable((context) => context.hasIcons);
    const hasCheckmarks = useMenuContext_unstable((context) => context.hasCheckmarks);
    return {
      checkedValues,
      onCheckedValueChange,
      triggerId,
      hasIcons,
      hasCheckmarks
    };
  };
  var usingPropsAndMenuContext = (props, contextValue, hasMenuContext) => {
    let isUsingPropsAndContext = false;
    for (const val in contextValue) {
      if (props[val]) {
        isUsingPropsAndContext = true;
      }
    }
    return hasMenuContext && isUsingPropsAndContext;
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/renderMenuList.js
  init_define_process();
  init_define_process_env();
  var renderMenuList_unstable = (state, contextValues) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(MenuListProvider, {
      value: contextValues.menuList
    }, /* @__PURE__ */ createElement5(slots.root, slotProps.root));
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuListContextValues.js
  init_define_process();
  init_define_process_env();
  function useMenuListContextValues_unstable(state) {
    const {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      selectRadio,
      setFocusByFirstCharacter,
      toggleCheckbox
    } = state;
    const menuList = {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      selectRadio,
      setFocusByFirstCharacter,
      toggleCheckbox
    };
    return {
      menuList
    };
  }

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuListStyles.js
  init_define_process();
  init_define_process_env();
  var menuListClassNames = {
    root: "fui-MenuList"
  };
  var useStyles9 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      i8kkvl: "f16mnhsx",
      Belr9w4: "fbi42co"
    }
  }, {
    d: [".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f1vx9l62{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}", ".f16mnhsx{-webkit-column-gap:2px;column-gap:2px;}", ".fbi42co{row-gap:2px;}"]
  });
  var useMenuListStyles_unstable = (state) => {
    const styles = useStyles9();
    state.root.className = mergeClasses(menuListClassNames.root, styles.root, state.root.className);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuList/MenuList.js
  var MenuList = /* @__PURE__ */ React91.forwardRef((props, ref) => {
    const state = useMenuList_unstable(props, ref);
    const contextValues = useMenuListContextValues_unstable(state);
    useMenuListStyles_unstable(state);
    const {
      useMenuListStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderMenuList_unstable(state, contextValues);
  });
  MenuList.displayName = "MenuList";

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuPopover/MenuPopover.js
  init_define_process();
  init_define_process_env();
  var React93 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuPopover/useMenuPopover.js
  init_define_process();
  init_define_process_env();
  var React92 = __toESM(require_react());
  var useMenuPopover_unstable = (props, ref) => {
    const popoverRef = useMenuContext_unstable((context) => context.menuPopoverRef);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const open = useMenuContext_unstable((context) => context.open);
    const openOnHover = useMenuContext_unstable((context) => context.openOnHover);
    const isSubmenu = useIsSubmenu();
    const canDispatchCustomEventRef = React92.useRef(true);
    const throttleDispatchTimerRef = React92.useRef(0);
    const {
      dir
    } = useFluent();
    const CloseArrowKey = dir === "ltr" ? ArrowLeft : ArrowRight;
    const mouseOverListenerCallbackRef = React92.useCallback((node2) => {
      if (node2) {
        node2.addEventListener("mouseover", (e3) => {
          if (canDispatchCustomEventRef.current) {
            canDispatchCustomEventRef.current = false;
            dispatchMenuEnterEvent(popoverRef.current, e3);
            throttleDispatchTimerRef.current = setTimeout(() => canDispatchCustomEventRef.current = true, 250);
          }
        });
      }
    }, [popoverRef, throttleDispatchTimerRef]);
    React92.useEffect(() => {
      () => clearTimeout(throttleDispatchTimerRef.current);
    }, []);
    var _useMenuContext_unstable;
    const inline = (_useMenuContext_unstable = useMenuContext_unstable((context) => context.inline)) !== null && _useMenuContext_unstable !== void 0 ? _useMenuContext_unstable : false;
    const mountNode = useMenuContext_unstable((context) => context.mountNode);
    const rootProps = getNativeElementProps("div", {
      role: "presentation",
      ...props,
      ref: useMergedRefs(ref, popoverRef, mouseOverListenerCallbackRef)
    });
    const {
      onMouseEnter: onMouseEnterOriginal,
      onKeyDown: onKeyDownOriginal
    } = rootProps;
    rootProps.onMouseEnter = useEventCallback((event) => {
      if (openOnHover) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuPopoverMouseEnter",
          event
        });
      }
      onMouseEnterOriginal === null || onMouseEnterOriginal === void 0 ? void 0 : onMouseEnterOriginal(event);
    });
    rootProps.onKeyDown = useEventCallback((event) => {
      const key = event.key;
      if (key === Escape || isSubmenu && key === CloseArrowKey) {
        var _popoverRef_current;
        if (open && ((_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(event.target))) {
          setOpen(event, {
            open: false,
            keyboard: true,
            type: "menuPopoverKeyDown",
            event
          });
          event.stopPropagation();
        }
      }
      if (key === Tab) {
        setOpen(event, {
          open: false,
          keyboard: true,
          type: "menuPopoverKeyDown",
          event
        });
      }
      onKeyDownOriginal === null || onKeyDownOriginal === void 0 ? void 0 : onKeyDownOriginal(event);
    });
    return {
      inline,
      mountNode,
      components: {
        root: "div"
      },
      root: rootProps
    };
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuPopover/useMenuPopoverStyles.js
  init_define_process();
  init_define_process_env();
  var menuPopoverClassNames = {
    root: "fui-MenuPopover"
  };
  var useStyles10 = /* @__PURE__ */ __styles2({
    root: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      De3pzq: "fxugw4r",
      sj55zd: "f19n0e5",
      Bf4jedk: "fkqu4gx",
      B2u0y6b: "f1kaai3v",
      a9b677: "f1ahpp82",
      E5pizo: "f1hg901r",
      z8tnut: "f10ra9hq",
      z189sj: ["f8wuabp", "fycuoez"],
      Byoj8tv: "f1y2xyjm",
      uwmqm3: ["fycuoez", "f8wuabp"],
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".fkqu4gx{min-width:128px;}", ".f1kaai3v{max-width:300px;}", ".f1ahpp82{width:-webkit-max-content;width:-moz-max-content;width:max-content;}", ".f1hg901r{box-shadow:var(--shadow16);}", ".f10ra9hq{padding-top:4px;}", ".f8wuabp{padding-right:4px;}", ".fycuoez{padding-left:4px;}", ".f1y2xyjm{padding-bottom:4px;}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useMenuPopoverStyles_unstable = (state) => {
    const styles = useStyles10();
    state.root.className = mergeClasses(menuPopoverClassNames.root, styles.root, state.root.className);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuPopover/renderMenuPopover.js
  init_define_process();
  init_define_process_env();
  var renderMenuPopover_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    if (state.inline) {
      return /* @__PURE__ */ createElement5(slots.root, slotProps.root);
    }
    return /* @__PURE__ */ createElement5(Portal, {
      mountNode: state.mountNode
    }, /* @__PURE__ */ createElement5(slots.root, slotProps.root));
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuPopover/MenuPopover.js
  var MenuPopover = /* @__PURE__ */ React93.forwardRef((props, ref) => {
    const state = useMenuPopover_unstable(props, ref);
    useMenuPopoverStyles_unstable(state);
    const {
      useMenuPopoverStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderMenuPopover_unstable(state);
  });
  MenuPopover.displayName = "MenuPopover";

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuTrigger/MenuTrigger.js
  init_define_process();
  init_define_process_env();
  var React96 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuTrigger/useMenuTrigger.js
  init_define_process();
  init_define_process_env();
  var React94 = __toESM(require_react());
  var useMenuTrigger_unstable = (props) => {
    const {
      children: children2,
      disableButtonEnhancement = false
    } = props;
    const triggerRef = useMenuContext_unstable((context) => context.triggerRef);
    const menuPopoverRef = useMenuContext_unstable((context) => context.menuPopoverRef);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const open = useMenuContext_unstable((context) => context.open);
    const triggerId = useMenuContext_unstable((context) => context.triggerId);
    const openOnHover = useMenuContext_unstable((context) => context.openOnHover);
    const openOnContext = useMenuContext_unstable((context) => context.openOnContext);
    const isSubmenu = useIsSubmenu();
    const {
      findFirstFocusable
    } = useFocusFinders();
    const focusFirst = React94.useCallback(() => {
      const firstFocusable = findFirstFocusable(menuPopoverRef.current);
      firstFocusable === null || firstFocusable === void 0 ? void 0 : firstFocusable.focus();
    }, [findFirstFocusable, menuPopoverRef]);
    const openedWithKeyboardRef = React94.useRef(false);
    const hasMouseMoved = React94.useRef(false);
    const {
      dir
    } = useFluent();
    const OpenArrowKey = dir === "ltr" ? ArrowRight : ArrowLeft;
    const child = getTriggerChild(children2);
    const onContextMenu = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnContext) {
        event.preventDefault();
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerContextMenu",
          event
        });
      }
    };
    const onClick = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (!openOnContext) {
        setOpen(event, {
          open: !open,
          keyboard: openedWithKeyboardRef.current,
          type: "menuTriggerClick",
          event
        });
        openedWithKeyboardRef.current = false;
      }
    };
    const onKeyDown = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      const key = event.key;
      if (!openOnContext && (isSubmenu && key === OpenArrowKey || !isSubmenu && key === ArrowDown)) {
        setOpen(event, {
          open: true,
          keyboard: true,
          type: "menuTriggerKeyDown",
          event
        });
      }
      if (key === Escape && !isSubmenu) {
        setOpen(event, {
          open: false,
          keyboard: true,
          type: "menuTriggerKeyDown",
          event
        });
      }
      if (open && key === OpenArrowKey && isSubmenu) {
        focusFirst();
      }
    };
    const onMouseEnter = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover && hasMouseMoved.current) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerMouseEnter",
          event
        });
      }
    };
    const onMouseMove = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover && !hasMouseMoved.current) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerMouseMove",
          event
        });
        hasMouseMoved.current = true;
      }
    };
    const onMouseLeave = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover) {
        setOpen(event, {
          open: false,
          keyboard: false,
          type: "menuTriggerMouseLeave",
          event
        });
      }
    };
    const contextMenuProps = {
      id: triggerId,
      ...child === null || child === void 0 ? void 0 : child.props,
      ref: useMergedRefs(triggerRef, child === null || child === void 0 ? void 0 : child.ref),
      onMouseEnter: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onMouseEnter, onMouseEnter)),
      onMouseLeave: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onMouseLeave, onMouseLeave)),
      onContextMenu: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onContextMenu, onContextMenu)),
      onMouseMove: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onMouseMove, onMouseMove))
    };
    const triggerChildProps = {
      "aria-haspopup": "menu",
      "aria-expanded": !open && !isSubmenu ? void 0 : open,
      ...contextMenuProps,
      onClick: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onClick, onClick)),
      onKeyDown: useEventCallback(mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onKeyDown, onKeyDown))
    };
    const ariaButtonTriggerChildProps = useARIAButtonProps((child === null || child === void 0 ? void 0 : child.type) === "button" || (child === null || child === void 0 ? void 0 : child.type) === "a" ? child.type : "div", triggerChildProps);
    return {
      isSubmenu,
      children: applyTriggerPropsToChildren(children2, openOnContext ? contextMenuProps : disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)
    };
  };
  var isTargetDisabled = (event) => {
    const isDisabled = (el) => el.hasAttribute("disabled") || el.hasAttribute("aria-disabled") && el.getAttribute("aria-disabled") === "true";
    if (isHTMLElement(event.target) && isDisabled(event.target)) {
      return true;
    }
    return isHTMLElement(event.currentTarget) && isDisabled(event.currentTarget);
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuTrigger/renderMenuTrigger.js
  init_define_process();
  init_define_process_env();
  var React95 = __toESM(require_react());
  var renderMenuTrigger_unstable = (state) => {
    return /* @__PURE__ */ React95.createElement(MenuTriggerContextProvider, {
      value: state.isSubmenu
    }, state.children);
  };

  // node_modules/.pnpm/@fluentui+react-menu@9.7.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0_scheduler@0.20.0/node_modules/@fluentui/react-menu/lib/components/MenuTrigger/MenuTrigger.js
  var MenuTrigger = (props) => {
    const state = useMenuTrigger_unstable(props);
    return renderMenuTrigger_unstable(state);
  };
  MenuTrigger.displayName = "MenuTrigger";
  MenuTrigger.isFluentTriggerComponent = true;

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/components/Select/Select.js
  init_define_process();
  init_define_process_env();
  var React98 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/components/Select/useSelect.js
  init_define_process();
  init_define_process_env();
  var React97 = __toESM(require_react());
  var useSelect_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true,
      supportsSize: true
    });
    const overrides = useOverrides();
    var _overrides_inputDefaultAppearance;
    const {
      defaultValue,
      value,
      select,
      icon,
      root: root3,
      appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : "outline",
      onChange,
      size = "medium"
    } = props;
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "select",
      excludedPropNames: ["appearance", "defaultValue", "onChange", "size", "value"]
    });
    const state = {
      size,
      appearance,
      components: {
        root: "span",
        select: "select",
        icon: "span"
      },
      select: resolveShorthand(select, {
        required: true,
        defaultProps: {
          defaultValue,
          value,
          ref,
          ...nativeProps.primary
        }
      }),
      icon: resolveShorthand(icon, {
        required: true,
        defaultProps: {
          children: /* @__PURE__ */ React97.createElement(ChevronDownRegular, null)
        }
      }),
      root: resolveShorthand(root3, {
        required: true,
        defaultProps: nativeProps.root
      })
    };
    state.select.onChange = useEventCallback((event) => {
      onChange === null || onChange === void 0 ? void 0 : onChange(event, {
        value: event.target.value
      });
    });
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/components/Select/renderSelect.js
  init_define_process();
  init_define_process_env();
  var renderSelect_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, /* @__PURE__ */ createElement5(slots.select, slotProps.select, slotProps.select.children), /* @__PURE__ */ createElement5(slots.icon, slotProps.icon));
  };

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/components/Select/useSelectStyles.js
  init_define_process();
  init_define_process_env();
  var selectClassNames = {
    root: "fui-Select",
    select: "fui-Select__select",
    icon: "fui-Select__icon"
  };
  var iconSizes = {
    small: "16px",
    medium: "20px",
    large: "24px"
  };
  var paddingRight = {
    small: `calc(${tokens.spacingHorizontalSNudge}
    + ${iconSizes.small}
    + ${tokens.spacingHorizontalXXS}
    + ${tokens.spacingHorizontalXXS})`,
    medium: `calc(${tokens.spacingHorizontalMNudge}
    + ${iconSizes.medium}
    + ${tokens.spacingHorizontalXXS}
    + ${tokens.spacingHorizontalXXS})`,
    large: `calc(${tokens.spacingHorizontalM}
    + ${iconSizes.large}
    + ${tokens.spacingHorizontalSNudge}
    + ${tokens.spacingHorizontalSNudge})`
  };
  var paddingLeft = {
    small: `calc(${tokens.spacingHorizontalSNudge} + ${tokens.spacingHorizontalXXS})`,
    medium: `calc(${tokens.spacingHorizontalMNudge} + ${tokens.spacingHorizontalXXS})`,
    large: `calc(${tokens.spacingHorizontalM} + ${tokens.spacingHorizontalSNudge})`
  };
  var useRootStyles6 = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Eh141a: "flvyvdh",
      Bahqtrf: "fk6fouc",
      qhf8xq: "f10pi13n",
      h62rwi: "f7ll8cq",
      B3778ie: ["f1ibwz09", "f1kp91vd"],
      d9w3h3: ["f1kp91vd", "f1ibwz09"],
      Bl18szs: ["f18vqdqu", "f53nyzz"],
      B4j8arr: ["f53nyzz", "f18vqdqu"],
      li1rpt: "f1gw3sf2",
      Bsft5z2: "f13zj6fq",
      Dlnsje: "fhwjr99",
      E3zdtr: "f1mdlcz9",
      By385i5: "fo72kxq",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"],
      b1kco5: "f1yk9hq",
      Ba2ppi3: "fhwpy7i",
      F2fol1: "f14ee0xe",
      lck23g: "f1xhbsuh",
      df92cz: "fv8e3ye",
      I188md: "ftb5wc6",
      umuwi5: "fjw5xc1",
      Blcqepd: "f1xdyd5c",
      nplu4u: "fatpbeo",
      Bioka5o: "fb7uyps",
      H713fs: "f1cmft4k",
      B9ooomg: "f1x58t8o"
    }
  }, {
    d: [".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".flvyvdh{-webkit-box-flex-wrap:nowrap;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f10pi13n{position:relative;}", ".f7ll8cq::after{background-image:linear-gradient(\n        0deg,\n        var(--colorCompoundBrandStroke) 0%,\n        var(--colorCompoundBrandStroke) 50%,\n        transparent 50%,\n        transparent 100%\n      );}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f18vqdqu::after{border-top-right-radius:0;}", ".f53nyzz::after{border-top-left-radius:0;}", ".f1gw3sf2::after{box-sizing:border-box;}", '.f13zj6fq::after{content:"";}', ".fhwjr99::after{height:var(--borderRadiusMedium);}", ".f1mdlcz9::after{position:absolute;}", ".fo72kxq::after{bottom:0;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".f1yk9hq::after{-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);}", ".fhwpy7i::after{transition-property:transform;}", ".f14ee0xe::after{transition-duration:var(--durationUltraFast);}", ".f1xhbsuh::after{transition-delay:var(--curveAccelerateMid);}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.fv8e3ye::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.ftb5wc6::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1cmft4k:focus-within::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1x58t8o:focus-within::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }]],
    w: [".fjw5xc1:focus-within::after{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);}", ".f1xdyd5c:focus-within::after{transition-property:transform;}", ".fatpbeo:focus-within::after{transition-duration:var(--durationNormal);}", ".fb7uyps:focus-within::after{transition-delay:var(--curveDecelerateMid);}"]
  });
  var useSelectStyles = /* @__PURE__ */ __styles2({
    base: {
      Bowrso0: "fqrijq1",
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      E5pizo: "f1couhl3",
      B7ck84d: "f1ewtqcl",
      sj55zd: "f19n0e5",
      Bceei9c: "f1k6fduh",
      Bh6795r: "fqerorx",
      B2u0y6b: "f6dzj5z",
      Byoj8tv: "f1qch9an",
      z8tnut: "f1g0x7ka",
      B3aqqti: "fatbyko",
      Brovlpu: "f1grzc83",
      Bxa1mx5: "f19shzzi"
    },
    disabled: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr",
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"]
    },
    disabledUnderline: {
      g2u3we: "fgig46g",
      h3c5rm: ["f1mxt3zg", "fziff3p"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fziff3p", "f1mxt3zg"]
    },
    small: {
      Bqenvij: "frvgh55",
      uwmqm3: ["f1xile11", "fqznh8f"],
      z189sj: ["fiqd4sw", "f11fkzut"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    medium: {
      Bqenvij: "f1d2rq10",
      uwmqm3: ["f1e60jzv", "f135dnwl"],
      z189sj: ["f154vowv", "flqamny"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Bqenvij: "fbhnoac",
      uwmqm3: ["fnphzt9", "flt1dlf"],
      z189sj: ["f1xi5ia2", "f1xi1l47"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k"
    },
    outline: {
      De3pzq: "fxugw4r",
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fj3muxo",
      h3c5rm: ["f1akhkt", "f1lxtadh"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f1lxtadh", "f1akhkt"]
    },
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "flmw63s",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      B6oc9vd: "fvs00aa",
      ak43y8: ["f1assf6x", "f4ruux4"],
      wmxk5l: "fqhmt4z",
      B50zh58: ["f4ruux4", "f1assf6x"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bn0qgzm: "f1f09k3d",
      oivjwe: "fg706s2",
      B9xav0g: "f1c1zstj",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"]
    },
    "filled-lighter": {
      De3pzq: "fxugw4r"
    },
    "filled-darker": {
      De3pzq: "f16xq7d1"
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    invalidUnderline: {
      hhx65j: "f1fgmyf4"
    }
  }, {
    d: [".fqrijq1{-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1couhl3{box-shadow:none;}", ".f1ewtqcl{box-sizing:border-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1k6fduh{cursor:pointer;}", ".fqerorx{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f6dzj5z{max-width:100%;}", ".f1qch9an{padding-bottom:0;}", ".f1g0x7ka{padding-top:0;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".fgig46g{border-top-color:var(--colorTransparentStrokeDisabled);}", ".f1mxt3zg{border-right-color:var(--colorTransparentStrokeDisabled);}", ".fziff3p{border-left-color:var(--colorTransparentStrokeDisabled);}", ".frvgh55{height:24px;}", ".f1xile11{padding-left:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fqznh8f{padding-right:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fiqd4sw{padding-right:calc(var(--spacingHorizontalSNudge)\n    + 16px\n    + var(--spacingHorizontalXXS)\n    + var(--spacingHorizontalXXS));}", ".f11fkzut{padding-left:calc(var(--spacingHorizontalSNudge)\n    + 16px\n    + var(--spacingHorizontalXXS)\n    + var(--spacingHorizontalXXS));}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1d2rq10{height:32px;}", ".f1e60jzv{padding-left:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f135dnwl{padding-right:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f154vowv{padding-right:calc(var(--spacingHorizontalMNudge)\n    + 20px\n    + var(--spacingHorizontalXXS)\n    + var(--spacingHorizontalXXS));}", ".flqamny{padding-left:calc(var(--spacingHorizontalMNudge)\n    + 20px\n    + var(--spacingHorizontalXXS)\n    + var(--spacingHorizontalXXS));}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fbhnoac{height:40px;}", ".fnphzt9{padding-left:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".flt1dlf{padding-right:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".f1xi5ia2{padding-right:calc(var(--spacingHorizontalM)\n    + 24px\n    + var(--spacingHorizontalSNudge)\n    + var(--spacingHorizontalSNudge));}", ".f1xi1l47{padding-left:calc(var(--spacingHorizontalM)\n    + 24px\n    + var(--spacingHorizontalSNudge)\n    + var(--spacingHorizontalSNudge));}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".fj3muxo{border-top-color:var(--colorNeutralStroke1);}", ".f1akhkt{border-right-color:var(--colorNeutralStroke1);}", ".f1lxtadh{border-left-color:var(--colorNeutralStroke1);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}"],
    f: [".fatbyko:focus{outline-width:2px;}", ".f1grzc83:focus{outline-style:solid;}", ".f19shzzi:focus{outline-color:transparent;}"],
    m: [["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rvyvqg{border-right-color:GrayText;}.f14g86mu{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".flmw63s:hover{border-bottom-color:var(--colorNeutralStrokeAccessible);}"],
    a: [".fvs00aa:active{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1assf6x:active{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f4ruux4:active{border-left-color:var(--colorNeutralStroke1Pressed);}", ".fqhmt4z:active{border-bottom-color:var(--colorNeutralStrokeAccessible);}"]
  });
  var useIconStyles3 = /* @__PURE__ */ __styles2({
    icon: {
      B7ck84d: "f1ewtqcl",
      sj55zd: "fxkbij4",
      mc9l5x: "ftgm304",
      qhf8xq: "f1euv43f",
      Bkecrkj: "f1aehjj5",
      Bo70h7d: "fvc9v3g"
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Bbusuzp: "f1dcs8yz"
    },
    small: {
      Be2twd7: "f4ybsrx",
      Bqenvij: "fd461yt",
      j35jbq: ["f13lnp83", "f1i5nn0v"],
      a9b677: "fjw5fx7"
    },
    medium: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      j35jbq: ["fnyteob", "f1enpzzf"],
      a9b677: "f64fuq3"
    },
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      j35jbq: ["f8b87gs", "fedtrts"],
      a9b677: "fq4mcun"
    }
  }, {
    d: [".f1ewtqcl{box-sizing:border-box;}", ".fxkbij4{color:var(--colorNeutralStrokeAccessible);}", ".ftgm304{display:block;}", ".f1euv43f{position:absolute;}", ".f1aehjj5{pointer-events:none;}", ".fvc9v3g svg{display:block;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f4ybsrx{font-size:16px;}", ".fd461yt{height:16px;}", ".f13lnp83{right:var(--spacingHorizontalSNudge);}", ".f1i5nn0v{left:var(--spacingHorizontalSNudge);}", ".fjw5fx7{width:16px;}", ".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".fnyteob{right:var(--spacingHorizontalMNudge);}", ".f1enpzzf{left:var(--spacingHorizontalMNudge);}", ".f64fuq3{width:20px;}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".f8b87gs{right:var(--spacingHorizontalM);}", ".fedtrts{left:var(--spacingHorizontalM);}", ".fq4mcun{width:24px;}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useSelectStyles_unstable = (state) => {
    const {
      size,
      appearance
    } = state;
    const disabled = state.select.disabled;
    const invalid = `${state.select["aria-invalid"]}` === "true";
    const iconStyles = useIconStyles3();
    const rootStyles = useRootStyles6();
    const selectStyles = useSelectStyles();
    state.root.className = mergeClasses(selectClassNames.root, rootStyles.base, state.root.className);
    state.select.className = mergeClasses(selectClassNames.select, selectStyles.base, selectStyles[size], selectStyles[appearance], !disabled && appearance === "outline" && selectStyles.outlineInteractive, !disabled && invalid && appearance !== "underline" && selectStyles.invalid, !disabled && invalid && appearance === "underline" && selectStyles.invalidUnderline, disabled && selectStyles.disabled, disabled && appearance === "underline" && selectStyles.disabledUnderline, state.select.className);
    if (state.icon) {
      state.icon.className = mergeClasses(selectClassNames.icon, iconStyles.icon, disabled && iconStyles.disabled, iconStyles[size], state.icon.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-select@9.1.11_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0__s7f6as2umxkapuzqc5sztjjeji/node_modules/@fluentui/react-select/lib/components/Select/Select.js
  var Select2 = /* @__PURE__ */ React98.forwardRef((props, ref) => {
    const state = useSelect_unstable(props, ref);
    useSelectStyles_unstable(state);
    const {
      useSelectStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderSelect_unstable(state);
  });
  Select2.displayName = "Select";

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/Spinner.js
  init_define_process();
  init_define_process_env();
  var React101 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinner.js
  init_define_process();
  init_define_process_env();
  var React100 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/DefaultSvg.js
  init_define_process();
  init_define_process_env();
  var React99 = __toESM(require_react());
  var DefaultSvg = () => /* @__PURE__ */ React99.createElement("svg", {
    className: "fui-Spinner__Progressbar"
  }, /* @__PURE__ */ React99.createElement("circle", {
    className: "fui-Spinner__Track"
  }), /* @__PURE__ */ React99.createElement("circle", {
    className: "fui-Spinner__Tail"
  }));

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinner.js
  var useSpinner_unstable = (props, ref) => {
    const {
      appearance = "primary",
      labelPosition = "after",
      size = "medium"
    } = props;
    const baseId = useId2("spinner");
    const {
      role = "progressbar",
      tabIndex,
      ...rest
    } = props;
    const nativeRoot = getNativeElementProps("div", {
      ref,
      role,
      ...rest
    }, ["size"]);
    const labelShorthand = resolveShorthand(props.label, {
      defaultProps: {
        id: baseId
      },
      required: false
    });
    const spinnerShortHand = resolveShorthand(props.spinner, {
      required: true,
      defaultProps: {
        children: /* @__PURE__ */ React100.createElement(DefaultSvg, null),
        tabIndex
      }
    });
    if (labelShorthand && nativeRoot && !nativeRoot["aria-labelledby"]) {
      nativeRoot["aria-labelledby"] = labelShorthand.id;
    }
    const state = {
      appearance,
      labelPosition,
      size,
      components: {
        root: "div",
        spinner: "span",
        label: Label
      },
      root: nativeRoot,
      spinner: spinnerShortHand,
      label: labelShorthand
    };
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/renderSpinner.js
  init_define_process();
  init_define_process_env();
  var renderSpinner_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    const {
      labelPosition
    } = state;
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.label && (labelPosition === "above" || labelPosition === "before") && /* @__PURE__ */ createElement5(slots.label, slotProps.label), slots.spinner && /* @__PURE__ */ createElement5(slots.spinner, slotProps.spinner), slots.label && (labelPosition === "below" || labelPosition === "after") && /* @__PURE__ */ createElement5(slots.label, slotProps.label));
  };

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinnerStyles.js
  init_define_process();
  init_define_process_env();
  var spinnerClassNames = {
    root: "fui-Spinner",
    spinner: "fui-Spinner__spinner",
    label: "fui-Spinner__label"
  };
  var useRootStyles7 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      Brf1p80: "f4d9j23",
      Bg96gwp: "fez10in",
      i8kkvl: "f4px1ci",
      Belr9w4: "fn67r4l"
    },
    horizontal: {
      Beiy3e4: "f1063pyq"
    },
    vertical: {
      Beiy3e4: "f1vx9l62"
    }
  }, {
    d: [".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".f4d9j23{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;}", ".fez10in{line-height:0;}", ".f4px1ci{-webkit-column-gap:8px;column-gap:8px;}", ".fn67r4l{row-gap:8px;}", ".f1063pyq{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}", ".f1vx9l62{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}"]
  });
  var useLoaderStyles = /* @__PURE__ */ __styles2({
    spinnerSVG: {
      B3aqqti: "f1or16p5",
      Brovlpu: "f1grzc83",
      Bxa1mx5: "f19shzzi",
      Bwaue66: ["f5tbecn", "f15qb8s7"],
      fyp1ls: "fn4mtlg",
      ag6ruv: "f1y80fxs",
      osj692: "f1r2crtq",
      aq5vjd: "f1wsi8sr",
      tlu9e1: "f1bkm2qd",
      J3u96z: "f1urqz7h",
      d32isg: "f1da2vov",
      Bsvqbuc: "f11rfva0",
      b3s3i5: "f1exc66"
    },
    tiny: {
      Bah9ito: "f1j4wmu2",
      ut6tcf: "f1vppzuq",
      B7p06xz: "fv1u54w",
      B807ibg: "fngtx1d"
    },
    "extra-small": {
      Bah9ito: "fmpqlna",
      ut6tcf: "f15z5jzu",
      B7p06xz: "fv1u54w",
      B807ibg: "fadawes"
    },
    small: {
      Bah9ito: "fo52gbo",
      ut6tcf: "f1b41i3v",
      B7p06xz: "fv1u54w",
      B807ibg: "f1xqyyrl"
    },
    medium: {
      Bah9ito: "f1aiqagr",
      ut6tcf: "f1wtx80b",
      B7p06xz: "f1flujpd",
      B807ibg: "f1u06hy7"
    },
    large: {
      Bah9ito: "f1trdq7b",
      ut6tcf: "f9e0mc5",
      B7p06xz: "f1flujpd",
      B807ibg: "f13pmvhl"
    },
    "extra-large": {
      Bah9ito: "f89rf2a",
      ut6tcf: "f1w2xg3q",
      B7p06xz: "f1flujpd",
      B807ibg: "fmn74v6"
    },
    huge: {
      Bah9ito: "f1rx7k5y",
      ut6tcf: "f1vtyt49",
      B7p06xz: "f1owbg48",
      B807ibg: "f1fr1izd"
    }
  }, {
    f: [".f1or16p5:focus{outline-width:3px;}", ".f1grzc83:focus{outline-style:solid;}", ".f19shzzi:focus{outline-color:transparent;}"],
    k: ["@-webkit-keyframes fb7n1on{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@-webkit-keyframes f1gx3jof{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(-360deg);-moz-transform:rotate(-360deg);-ms-transform:rotate(-360deg);transform:rotate(-360deg);}}", "@keyframes fb7n1on{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@keyframes f1gx3jof{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(-360deg);-moz-transform:rotate(-360deg);-ms-transform:rotate(-360deg);transform:rotate(-360deg);}}"],
    d: [".f5tbecn>svg{-webkit-animation-name:fb7n1on;animation-name:fb7n1on;}", ".f15qb8s7>svg{-webkit-animation-name:f1gx3jof;animation-name:f1gx3jof;}", ".fn4mtlg>svg{-webkit-animation-duration:3s;animation-duration:3s;}", ".f1y80fxs>svg{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}", ".f1r2crtq>svg{-webkit-animation-timing-function:linear;animation-timing-function:linear;}", ".f1wsi8sr>svg{background-color:transparent;}", ".f1da2vov>svg>circle{cx:50%;}", ".f11rfva0>svg>circle{cy:50%;}", ".f1exc66>svg>circle{fill:none;}", ".f1j4wmu2>svg{height:20px;}", ".f1vppzuq>svg{width:20px;}", ".fv1u54w>svg>circle{stroke-width:var(--strokeWidthThick);}", ".fngtx1d>svg>circle{r:9px;}", ".fmpqlna>svg{height:24px;}", ".f15z5jzu>svg{width:24px;}", ".fadawes>svg>circle{r:11px;}", ".fo52gbo>svg{height:28px;}", ".f1b41i3v>svg{width:28px;}", ".f1xqyyrl>svg>circle{r:13px;}", ".f1aiqagr>svg{height:32px;}", ".f1wtx80b>svg{width:32px;}", ".f1flujpd>svg>circle{stroke-width:var(--strokeWidthThicker);}", ".f1u06hy7>svg>circle{r:14.5px;}", ".f1trdq7b>svg{height:36px;}", ".f9e0mc5>svg{width:36px;}", ".f13pmvhl>svg>circle{r:16.5px;}", ".f89rf2a>svg{height:40px;}", ".f1w2xg3q>svg{width:40px;}", ".fmn74v6>svg>circle{r:18.5px;}", ".f1rx7k5y>svg{height:44px;}", ".f1vtyt49>svg{width:44px;}", ".f1owbg48>svg>circle{stroke-width:var(--strokeWidthThickest);}", ".f1fr1izd>svg>circle{r:20px;}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.f1bkm2qd>svg{-webkit-animation-duration:0.01ms;animation-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1urqz7h>svg{-webkit-animation-iteration-count:1;animation-iteration-count:1;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }]]
  });
  var useTrackStyles = /* @__PURE__ */ __styles2({
    inverted: {
      gwg7kz: "f1jvpmnu",
      Bvrehnu: "fq8a5sv",
      Bidp6o: "f1b4lwqj",
      cq3kgi: "f1najlst",
      Btwiser: "fjxod4",
      B8001xd: "fu3xdw0",
      Bdordwa: ["f1ttdh6v", "fmyjox0"],
      Bo2mdfu: "f1eseayc",
      E10nrc: "folzdkc",
      Bwl7w15: "fhlfkde",
      Bksq7rz: "f1esql28"
    },
    primary: {
      gwg7kz: "f11ditju",
      B8k2rxp: "f1m9nikz",
      Bvrehnu: "fq8a5sv",
      Bidp6o: "f1b4lwqj",
      cq3kgi: "f1najlst",
      Btwiser: "fjxod4",
      B8001xd: "fu3xdw0",
      Bdordwa: ["f1ttdh6v", "fmyjox0"],
      Bo2mdfu: "f1eseayc",
      E10nrc: "folzdkc",
      Bwl7w15: "fhlfkde",
      Bksq7rz: "f61h2gu",
      y14cdu: "flglbw1"
    }
  }, {
    d: [".f1jvpmnu>svg>circle.fui-Spinner__Tail{stroke:var(--colorNeutralStrokeOnBrand2);}", ".fq8a5sv>svg>circle.fui-Spinner__Tail{-webkit-animation-name:f1v1ql0f;animation-name:f1v1ql0f;}", ".f1b4lwqj>svg>circle.fui-Spinner__Tail{-webkit-animation-duration:1.5s;animation-duration:1.5s;}", ".f1najlst>svg>circle.fui-Spinner__Tail{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}", ".fjxod4>svg>circle.fui-Spinner__Tail{-webkit-animation-timing-function:var(--curveEasyEase);animation-timing-function:var(--curveEasyEase);}", ".fu3xdw0>svg>circle.fui-Spinner__Tail{stroke-linecap:round;}", ".f1ttdh6v>svg>circle.fui-Spinner__Tail{-webkit-transform:rotate(-90deg);-moz-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);}", ".fmyjox0>svg>circle.fui-Spinner__Tail{-webkit-transform:rotate(90deg);-moz-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg);}", ".f1eseayc>svg>circle.fui-Spinner__Tail{transform-origin:50% 50%;}", ".f1esql28>svg>circle.fui-Spinner__Track{stroke:rgba(255, 255, 255, 0.2);}", ".f11ditju>svg>circle.fui-Spinner__Tail{stroke:var(--colorBrandStroke1);}", ".f61h2gu>svg>circle.fui-Spinner__Track{stroke:var(--colorBrandStroke2);}"],
    k: ["@-webkit-keyframes f1v1ql0f{0%{stroke-dasharray:1,150;stroke-dashoffset:0;}50%{stroke-dasharray:90,150;stroke-dashoffset:-35;}100%{stroke-dasharray:90,150;stroke-dashoffset:-124;}}", "@keyframes f1v1ql0f{0%{stroke-dasharray:1,150;stroke-dashoffset:0;}50%{stroke-dasharray:90,150;stroke-dashoffset:-35;}100%{stroke-dasharray:90,150;stroke-dashoffset:-124;}}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.folzdkc>svg>circle.fui-Spinner__Tail{-webkit-animation-duration:0.01ms;animation-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.fhlfkde>svg>circle.fui-Spinner__Tail{-webkit-animation-iteration-count:1;animation-iteration-count:1;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (forced-colors: active){.f1m9nikz>svg>circle.fui-Spinner__Tail{stroke:var(--colorNeutralStrokeOnBrand2);}}", {
      m: "screen and (forced-colors: active)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.folzdkc>svg>circle.fui-Spinner__Tail{-webkit-animation-duration:0.01ms;animation-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.fhlfkde>svg>circle.fui-Spinner__Tail{-webkit-animation-iteration-count:1;animation-iteration-count:1;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (forced-colors: active){.flglbw1>svg>circle.fui-Spinner__Track{stroke:var(--colorNeutralBackgroundInverted);}}", {
      m: "screen and (forced-colors: active)"
    }]]
  });
  var useLabelStyles3 = /* @__PURE__ */ __styles2({
    inverted: {
      sj55zd: "f15aqcq"
    },
    primary: {},
    tiny: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    "extra-small": {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    small: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    medium: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    large: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    "extra-large": {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    huge: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "f1pp30po",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "f106mvju"
    }
  }, {
    d: [".f15aqcq{color:rgba(255, 255, 255, 1);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f106mvju{line-height:var(--lineHeightBase500);}"]
  });
  var useSpinnerStyles_unstable = (state) => {
    const {
      labelPosition,
      size,
      appearance = "primary"
    } = state;
    const rootStyles = useRootStyles7();
    const spinnerStyles = useLoaderStyles();
    const labelStyles = useLabelStyles3();
    const trackStyles = useTrackStyles();
    state.root.className = mergeClasses(spinnerClassNames.root, rootStyles.root, (labelPosition === "above" || labelPosition === "below") && rootStyles.vertical, (labelPosition === "before" || labelPosition === "after") && rootStyles.horizontal, state.root.className);
    if (state.spinner) {
      state.spinner.className = mergeClasses(spinnerClassNames.spinner, spinnerStyles.spinnerSVG, spinnerStyles[size], trackStyles[appearance], state.spinner.className);
    }
    if (state.label) {
      state.label.className = mergeClasses(spinnerClassNames.label, labelStyles[size], labelStyles[appearance], state.label.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-spinner@9.1.10_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-spinner/lib/components/Spinner/Spinner.js
  var Spinner = /* @__PURE__ */ React101.forwardRef((props, ref) => {
    const state = useSpinner_unstable(props, ref);
    useSpinnerStyles_unstable(state);
    const {
      useSpinnerStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderSpinner_unstable(state);
  });
  Spinner.displayName = "Spinner";

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/Text/Text.js
  init_define_process();
  init_define_process_env();
  var React103 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/Text/useText.js
  init_define_process();
  init_define_process_env();
  var React102 = __toESM(require_react());
  var useText_unstable = (props, ref) => {
    const {
      wrap,
      truncate,
      block,
      italic,
      underline,
      strikethrough,
      size,
      font,
      weight,
      align
    } = props;
    var _props_as;
    const as = (_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "span";
    const state = {
      align: align !== null && align !== void 0 ? align : "start",
      block: block !== null && block !== void 0 ? block : false,
      font: font !== null && font !== void 0 ? font : "base",
      italic: italic !== null && italic !== void 0 ? italic : false,
      size: size !== null && size !== void 0 ? size : 300,
      strikethrough: strikethrough !== null && strikethrough !== void 0 ? strikethrough : false,
      truncate: truncate !== null && truncate !== void 0 ? truncate : false,
      underline: underline !== null && underline !== void 0 ? underline : false,
      weight: weight !== null && weight !== void 0 ? weight : "regular",
      wrap: wrap !== null && wrap !== void 0 ? wrap : true,
      components: {
        root: "span"
      },
      root: getNativeElementProps(as, {
        ref,
        ...props,
        as
      })
    };
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/Text/renderText.js
  init_define_process();
  init_define_process_env();
  var renderText_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root);
  };

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/Text/useTextStyles.js
  init_define_process();
  init_define_process_env();
  var textClassNames = {
    root: "fui-Text"
  };
  var useStyles11 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi",
      Bhrd7zp: "figsok6",
      fsow6f: "fpgzoln",
      mc9l5x: "f1w7gpdv",
      Huce71: "f6juhto",
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9",
      ygn44y: "f2jf649"
    },
    nowrap: {
      Huce71: "fz5stix",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw"
    },
    truncate: {
      ygn44y: "f1cmbuwj"
    },
    block: {
      mc9l5x: "ftgm304"
    },
    italic: {
      B80ckks: "f1j4dglz"
    },
    underline: {
      w71qe1: "f13mvf36"
    },
    strikethrough: {
      w71qe1: "fv5q2k7"
    },
    strikethroughUnderline: {
      w71qe1: "f1drk4o6"
    },
    base100: {
      Be2twd7: "f13mqy1h",
      Bg96gwp: "fcpl73t"
    },
    base200: {
      Be2twd7: "fy9rknc",
      Bg96gwp: "fwrc4pm"
    },
    base400: {
      Be2twd7: "fod5ikn",
      Bg96gwp: "faaz57k"
    },
    base500: {
      Be2twd7: "f1pp30po",
      Bg96gwp: "f106mvju"
    },
    base600: {
      Be2twd7: "f1x0m3f5",
      Bg96gwp: "fb86gi6"
    },
    hero700: {
      Be2twd7: "fojgt09",
      Bg96gwp: "fcen8rp"
    },
    hero800: {
      Be2twd7: "fccw675",
      Bg96gwp: "f1ebx5kk"
    },
    hero900: {
      Be2twd7: "f15afnhw",
      Bg96gwp: "fr3w3wp"
    },
    hero1000: {
      Be2twd7: "fpyltcb",
      Bg96gwp: "f1ivgwrt"
    },
    monospace: {
      Bahqtrf: "f1fedwem"
    },
    numeric: {
      Bahqtrf: "f1uq0ln5"
    },
    weightMedium: {
      Bhrd7zp: "fdj6btp"
    },
    weightSemibold: {
      Bhrd7zp: "fl43uef"
    },
    weightBold: {
      Bhrd7zp: "flh3ekv"
    },
    alignCenter: {
      fsow6f: "f17mccla"
    },
    alignEnd: {
      fsow6f: "f12ymhq5"
    },
    alignJustify: {
      fsow6f: "f1j59e10"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fpgzoln{text-align:start;}", ".f1w7gpdv{display:inline;}", ".f6juhto{white-space:normal;}", ".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".f2jf649{text-overflow:clip;}", ".fz5stix{white-space:nowrap;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".f1cmbuwj{text-overflow:ellipsis;}", ".ftgm304{display:block;}", ".f1j4dglz{font-style:italic;}", ".f13mvf36{text-decoration-line:underline;}", ".fv5q2k7{text-decoration-line:line-through;}", ".f1drk4o6{text-decoration-line:line-through underline;}", ".f13mqy1h{font-size:var(--fontSizeBase100);}", ".fcpl73t{line-height:var(--lineHeightBase100);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f106mvju{line-height:var(--lineHeightBase500);}", ".f1x0m3f5{font-size:var(--fontSizeBase600);}", ".fb86gi6{line-height:var(--lineHeightBase600);}", ".fojgt09{font-size:var(--fontSizeHero700);}", ".fcen8rp{line-height:var(--lineHeightHero700);}", ".fccw675{font-size:var(--fontSizeHero800);}", ".f1ebx5kk{line-height:var(--lineHeightHero800);}", ".f15afnhw{font-size:var(--fontSizeHero900);}", ".fr3w3wp{line-height:var(--lineHeightHero900);}", ".fpyltcb{font-size:var(--fontSizeHero1000);}", ".f1ivgwrt{line-height:var(--lineHeightHero1000);}", ".f1fedwem{font-family:var(--fontFamilyMonospace);}", ".f1uq0ln5{font-family:var(--fontFamilyNumeric);}", ".fdj6btp{font-weight:var(--fontWeightMedium);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".flh3ekv{font-weight:var(--fontWeightBold);}", ".f17mccla{text-align:center;}", ".f12ymhq5{text-align:end;}", ".f1j59e10{text-align:justify;}"]
  });
  var useTextStyles_unstable = (state) => {
    const styles = useStyles11();
    state.root.className = mergeClasses(textClassNames.root, styles.root, state.wrap === false && styles.nowrap, state.truncate && styles.truncate, state.block && styles.block, state.italic && styles.italic, state.underline && styles.underline, state.strikethrough && styles.strikethrough, state.underline && state.strikethrough && styles.strikethroughUnderline, state.size === 100 && styles.base100, state.size === 200 && styles.base200, state.size === 400 && styles.base400, state.size === 500 && styles.base500, state.size === 600 && styles.base600, state.size === 700 && styles.hero700, state.size === 800 && styles.hero800, state.size === 900 && styles.hero900, state.size === 1e3 && styles.hero1000, state.font === "monospace" && styles.monospace, state.font === "numeric" && styles.numeric, state.weight === "medium" && styles.weightMedium, state.weight === "semibold" && styles.weightSemibold, state.weight === "bold" && styles.weightBold, state.align === "center" && styles.alignCenter, state.align === "end" && styles.alignEnd, state.align === "justify" && styles.alignJustify, state.root.className);
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/Text/Text.js
  var Text = /* @__PURE__ */ React103.forwardRef((props, ref) => {
    const state = useText_unstable(props, ref);
    useTextStyles_unstable(state);
    const {
      useTextStyles_unstable: useCustomStyles
    } = useCustomStyleHooks();
    useCustomStyles(state);
    return renderText_unstable(state);
  });
  Text.displayName = "Text";

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/presets/createPreset.js
  init_define_process();
  init_define_process_env();
  var React104 = __toESM(require_react());
  function createPreset(options) {
    const {
      useStyles: useStyles16,
      className,
      displayName
    } = options;
    const Wrapper2 = /* @__PURE__ */ React104.forwardRef((props, ref) => {
      const styles = useStyles16();
      const state = useText_unstable(props, ref);
      useTextStyles_unstable(state);
      state.root.className = mergeClasses(className, state.root.className, styles.root, props.className);
      return renderText_unstable(state);
    });
    Wrapper2.displayName = displayName;
    return Wrapper2;
  }

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/presets/Caption1/Caption1.js
  init_define_process();
  init_define_process_env();
  var caption1ClassNames = {
    root: "fui-Caption1"
  };
  var useStyles12 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}"]
  });
  var Caption1 = /* @__PURE__ */ createPreset({
    useStyles: useStyles12,
    className: caption1ClassNames.root,
    displayName: "Caption1"
  });

  // node_modules/.pnpm/@fluentui+react-text@9.3.7_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-text/lib/components/presets/Title3/Title3.js
  init_define_process();
  init_define_process_env();
  var title3ClassNames = {
    root: "fui-Title3"
  };
  var useStyles13 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "f1x0m3f5",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "fb86gi6"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1x0m3f5{font-size:var(--fontSizeBase600);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".fb86gi6{line-height:var(--lineHeightBase600);}"]
  });
  var Title3 = /* @__PURE__ */ createPreset({
    useStyles: useStyles13,
    className: title3ClassNames.root,
    displayName: "Title3"
  });

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/Card.js
  init_define_process();
  init_define_process_env();
  var React108 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  init_define_process();
  init_define_process_env();
  var React107 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCardSelectable.js
  init_define_process();
  init_define_process_env();
  var React105 = __toESM(require_react());
  var useCardSelectable = (props, {
    referenceLabel,
    referenceId
  }, cardRef) => {
    const {
      checkbox = {},
      selected,
      defaultSelected,
      onSelectionChange,
      floatingAction,
      onClick,
      onKeyDown
    } = props;
    const {
      findAllFocusable
    } = useFocusFinders();
    const checkboxRef = React105.useRef(null);
    const isSelectable = [selected, defaultSelected, onSelectionChange].some((prop) => typeof prop !== "undefined");
    const [isCardSelected, setIsCardSelected] = React105.useState(false);
    const [isSelectFocused, setIsSelectFocused] = React105.useState(false);
    const shouldRestrictTriggerAction = React105.useCallback((event) => {
      if (!cardRef.current) {
        return false;
      }
      const focusableElements = findAllFocusable(cardRef.current);
      const target = event.target;
      const isElementInFocusableGroup = focusableElements.some((element) => element.contains(target));
      const isCheckboxSlot = (checkboxRef === null || checkboxRef === void 0 ? void 0 : checkboxRef.current) === target;
      return isElementInFocusableGroup && !isCheckboxSlot;
    }, [cardRef, findAllFocusable]);
    const onChangeHandler = React105.useCallback((event) => {
      if (shouldRestrictTriggerAction(event)) {
        return;
      }
      const newCheckedValue = !isCardSelected;
      setIsCardSelected(newCheckedValue);
      if (onSelectionChange) {
        onSelectionChange(event, {
          selected: newCheckedValue
        });
      }
    }, [onSelectionChange, isCardSelected, shouldRestrictTriggerAction]);
    const onKeyDownHandler = React105.useCallback((event) => {
      if ([Enter].includes(event.key)) {
        event.preventDefault();
        onChangeHandler(event);
      }
    }, [onChangeHandler]);
    const checkboxSlot = React105.useMemo(() => {
      if (!isSelectable || floatingAction) {
        return;
      }
      const selectableCheckboxProps = {};
      if (referenceId) {
        selectableCheckboxProps["aria-labelledby"] = referenceId;
      } else if (referenceLabel) {
        selectableCheckboxProps["aria-label"] = referenceLabel;
      }
      return resolveShorthand(checkbox, {
        defaultProps: {
          ref: checkboxRef,
          type: "checkbox",
          checked: isCardSelected,
          onChange: (event) => onChangeHandler(event),
          onFocus: () => setIsSelectFocused(true),
          onBlur: () => setIsSelectFocused(false),
          ...selectableCheckboxProps
        }
      });
    }, [checkbox, floatingAction, isCardSelected, isSelectable, onChangeHandler, referenceId, referenceLabel]);
    const floatingActionSlot = React105.useMemo(() => {
      if (!floatingAction) {
        return;
      }
      return resolveShorthand(floatingAction, {
        defaultProps: {
          ref: checkboxRef
        }
      });
    }, [floatingAction]);
    const selectableCardProps = React105.useMemo(() => {
      if (!isSelectable) {
        return null;
      }
      return {
        onClick: mergeCallbacks(onClick, onChangeHandler),
        onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)
      };
    }, [isSelectable, onChangeHandler, onClick, onKeyDown, onKeyDownHandler]);
    React105.useEffect(() => setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [defaultSelected, selected, setIsCardSelected]);
    return {
      selected: isCardSelected,
      selectable: isSelectable,
      selectFocused: isSelectFocused,
      selectableCardProps,
      checkboxSlot,
      floatingActionSlot
    };
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/CardContext.js
  init_define_process();
  init_define_process_env();
  var React106 = __toESM(require_react());
  var cardContext = /* @__PURE__ */ React106.createContext(void 0);
  var cardContextDefaultValue = {
    selectableA11yProps: {
      referenceId: void 0,
      setReferenceId() {
      },
      referenceLabel: void 0,
      setReferenceLabel() {
      }
    }
  };
  var CardProvider = cardContext.Provider;
  var _React_useContext3;
  var useCardContext_unstable = () => (_React_useContext3 = React106.useContext(cardContext)) !== null && _React_useContext3 !== void 0 ? _React_useContext3 : cardContextDefaultValue;

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  var focusMap = {
    off: void 0,
    "no-tab": "limited-trap-focus",
    "tab-exit": "limited",
    "tab-only": "unlimited"
  };
  var useCardInteractive = ({
    focusMode = "off",
    ...props
  }) => {
    const interactive = ["onClick", "onDoubleClick", "onMouseUp", "onMouseDown", "onPointerUp", "onPointerDown", "onTouchStart", "onTouchEnd", "onDragStart", "onDragEnd"].some((prop) => props[prop]);
    const groupperAttrs = useFocusableGroup({
      tabBehavior: focusMap[interactive ? "no-tab" : focusMode]
    });
    const interactiveFocusAttributes = {
      ...groupperAttrs,
      tabIndex: 0
    };
    return {
      interactive,
      focusAttributes: focusMode === "off" ? null : interactiveFocusAttributes
    };
  };
  var useCard_unstable = (props, ref) => {
    const {
      appearance = "filled",
      orientation = "vertical",
      size = "medium"
    } = props;
    const [referenceId, setReferenceId] = React107.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const [referenceLabel, setReferenceLabel] = React107.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const cardBaseRef = useFocusWithin();
    const {
      selectable,
      selected,
      selectableCardProps,
      selectFocused,
      checkboxSlot,
      floatingActionSlot
    } = useCardSelectable(props, {
      referenceId,
      referenceLabel
    }, cardBaseRef);
    const cardRef = useMergedRefs(cardBaseRef, ref);
    const {
      interactive,
      focusAttributes
    } = useCardInteractive(props);
    return {
      appearance,
      orientation,
      size,
      interactive,
      selectable,
      selectFocused,
      selected,
      selectableA11yProps: {
        setReferenceId,
        referenceId,
        referenceLabel,
        setReferenceLabel
      },
      components: {
        root: "div",
        floatingAction: "div",
        checkbox: "input"
      },
      root: getNativeElementProps("div", {
        ref: cardRef,
        role: "group",
        ...focusAttributes,
        ...props,
        ...selectableCardProps
      }),
      floatingAction: floatingActionSlot,
      checkbox: checkboxSlot
    };
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/renderCard.js
  init_define_process();
  init_define_process_env();
  var renderCard_unstable = (state, cardContextValue) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, /* @__PURE__ */ createElement5(CardProvider, {
      value: cardContextValue
    }, slots.checkbox ? /* @__PURE__ */ createElement5(slots.checkbox, slotProps.checkbox) : null, slots.floatingAction ? /* @__PURE__ */ createElement5(slots.floatingAction, slotProps.floatingAction) : null, slotProps.root.children));
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCardStyles.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeaderStyles.js
  init_define_process();
  init_define_process_env();
  var cardHeaderClassNames = {
    root: "fui-CardHeader",
    image: "fui-CardHeader__image",
    header: "fui-CardHeader__header",
    description: "fui-CardHeader__description",
    action: "fui-CardHeader__action"
  };
  var useStyles14 = /* @__PURE__ */ __styles2({
    root: {
      Bkc6ea2: "fkufhic",
      mc9l5x: "f13qh94s",
      t4k1zu: "f8a668j",
      v29qe6: "f4h39za",
      Bt984gj: "f122n59"
    },
    image: {
      mc9l5x: "ftuwxu6",
      t21cq0: ["fql5097", "f6yss9k"],
      Br312pm: "fwpfdsa",
      Ijaq50: "fldnz9j"
    },
    header: {
      Br312pm: "fd46tj4",
      Ijaq50: "f16hsg94"
    },
    description: {
      Br312pm: "fd46tj4",
      Ijaq50: "faunodf"
    },
    action: {
      Frg6f3: ["f6yss9k", "fql5097"],
      Br312pm: "fis13di",
      Ijaq50: "fldnz9j"
    }
  }, {
    d: [".fkufhic{--fui-CardHeader--gap:12px;}", ".f13qh94s{display:grid;}", ".f8a668j{grid-auto-columns:min-content 1fr min-content;}", ".f4h39za{grid-auto-rows:1fr min-content;}", ".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".ftuwxu6{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}", ".fql5097{margin-right:var(--fui-CardHeader--gap);}", ".f6yss9k{margin-left:var(--fui-CardHeader--gap);}", ".fwpfdsa{grid-column-start:1;}", ".fldnz9j{grid-row-start:span 2;}", ".fd46tj4{grid-column-start:2;}", ".f16hsg94{grid-row-start:1;}", ".faunodf{grid-row-start:2;}", ".fis13di{grid-column-start:3;}"]
  });
  var useCardHeaderStyles_unstable = (state) => {
    const styles = useStyles14();
    state.root.className = mergeClasses(cardHeaderClassNames.root, styles.root, state.root.className);
    if (state.image) {
      state.image.className = mergeClasses(cardHeaderClassNames.image, styles.image, state.image.className);
    }
    if (state.header) {
      state.header.className = mergeClasses(cardHeaderClassNames.header, styles.header, state.header.className);
    }
    if (state.description) {
      state.description.className = mergeClasses(cardHeaderClassNames.description, styles.description, state.description.className);
    }
    if (state.action) {
      state.action.className = mergeClasses(cardHeaderClassNames.action, styles.action, state.action.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCardStyles.js
  var cardClassNames = {
    root: "fui-Card",
    floatingAction: "fui-Card__floatingAction",
    checkbox: "fui-Card__checkbox"
  };
  var cardCSSVars = {
    cardSizeVar: "--fui-Card--size",
    cardBorderRadiusVar: "--fui-Card--border-radius"
  };
  var focusOutlineStyle = {
    outlineRadius: `var(${cardCSSVars.cardBorderRadiusVar})`,
    outlineWidth: tokens.strokeWidthThick
  };
  var useStyles15 = /* @__PURE__ */ __styles2({
    root: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      Bbmb7ep: ["fifeqxg", "f899z7z"],
      Beyfa6y: ["f899z7z", "fifeqxg"],
      B7oj6ja: ["f4h3tyx", "f18ur2pz"],
      Btl43ni: ["f18ur2pz", "f4h3tyx"],
      z8tnut: "f1lplnzb",
      z189sj: ["f10m5gbb", "f1k04kkk"],
      Byoj8tv: "fhftqfp",
      uwmqm3: ["f1k04kkk", "f10m5gbb"],
      i8kkvl: "fxsr4vj",
      Belr9w4: "fcvsdzp",
      mc9l5x: "f22iagw",
      qhf8xq: "f10pi13n",
      B7ck84d: "f1ewtqcl",
      sj55zd: "f19n0e5",
      E3zdtr: "f1mdlcz9",
      bn5sak: "frwkxtg",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"],
      By385i5: "fo72kxq",
      Bsft5z2: "f13zj6fq",
      B80jsxd: "f1nwj1ja",
      Bm2nyyq: "f8rth92",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Bw17bha: "f1lh990p",
      vfts7: ["ftkbnf5", "flthirb"],
      xrcqlc: "f6czdpx",
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bcgy8vk: "f1i1u9k0",
      Bhxzhr1: ["f1en4csx", "f13hvwk3"],
      B3778ie: ["f1qnomq5", "f2fl922"],
      d9w3h3: ["f2fl922", "f1qnomq5"],
      Bl18szs: ["f1anhtl", "f1n2zcl3"],
      B4j8arr: ["f1n2zcl3", "f1anhtl"],
      B2jhnfs: "f16v3d5c",
      wiictr: "f1su8t2g",
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "f99gebs",
      clg4pj: ["f13b0oaq", "f8t2bz6"],
      hgwjuy: "f1jvq617",
      Bonggc9: ["f8t2bz6", "f13b0oaq"],
      B1tsrr9: ["f11unbnk", "fbd201q"],
      Dah5zi: ["fbd201q", "f11unbnk"],
      Bkh64rk: ["f12nqxso", "f1uguk4w"],
      qqdqy8: ["f1uguk4w", "f12nqxso"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f3l4wcz",
      Bjwuhne: "f6j2biq",
      Ghsupd: ["fdzzmfx", "fduh8kh"],
      Bule8hv: ["fduh8kh", "fdzzmfx"]
    },
    selectableFocused: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      Bssx7fj: "f1b1k54r",
      uh7if5: ["f4ne723", "fqqcjud"],
      clntm0: "fh7aioi",
      Dlk2r6: ["fqqcjud", "f4ne723"],
      B2j2mmj: "ffht0p2",
      wigs8: "f1p0ul1q",
      pbfy6t: "f1c901ms",
      B0v4ure: "f1alokd7",
      ghq09: "f78i1la",
      B24cy0v: ["f1kvsw7t", "f1bw8brt"],
      Bwckmig: "f8k7e5g",
      Bvwlmkc: ["f1bw8brt", "f1kvsw7t"],
      Bbgo44z: "f125hn41",
      Bil7v7r: ["fgxkx34", "f1v56tyl"],
      skfxo0: "fdxas6f",
      jo1ztg: ["f1v56tyl", "fgxkx34"],
      Ba3ybja: ["fxwickw", "f1ia5cve"],
      az1dzo: ["f1ia5cve", "fxwickw"],
      vppk2z: ["f194aguw", "fqicc6c"],
      B6352mv: ["fqicc6c", "f194aguw"],
      nr063g: "fq4eyks",
      Blmvk6g: ["f1ya6x16", "ftuszwa"],
      Bsiemmq: "f1e2iu44",
      B98u21t: ["ftuszwa", "f1ya6x16"],
      B2pnrqr: "f4a0pcc",
      Bhhzhcn: "f11go4w5",
      Bec0n69: ["f4dzull", "fy687nj"],
      B29w5g4: ["fy687nj", "f4dzull"]
    },
    orientationHorizontal: {
      Beiy3e4: "f1063pyq",
      Bt984gj: "f122n59",
      Bnoktp0: "fpfyeui",
      Idhjb2: "fwi74qw",
      ihgzqh: ["ffcmwrh", "f6ppoih"],
      Bgp6ld0: ["f1dc9p14", "fd933vt"],
      Bbucpmy: "f18esqgw"
    },
    orientationVertical: {
      Beiy3e4: "f1vx9l62",
      Bt4kzjz: ["fobhde4", "fx5r7kn"],
      B1ou843: ["fx5r7kn", "fobhde4"],
      y1433z: "f19chtn8",
      B7egwnw: "fuvs6re",
      B49b4xf: "fy4glsf"
    },
    sizeSmall: {
      B7balbw: "f1pi9uxy",
      B1h88n7: "f1h1zgly"
    },
    sizeMedium: {
      B7balbw: "frsmuga",
      B1h88n7: "fuldkky"
    },
    sizeLarge: {
      B7balbw: "f1qua4xo",
      B1h88n7: "fimkt6v"
    },
    filled: {
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1knas48",
      Bvxd0ez: "f1m145df",
      ecr2s2: "fb40n2d"
    },
    filledInteractiveSelected: {
      De3pzq: "f1nfm20t",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1kz6goq"
    },
    filledAlternative: {
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledAlternativeInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1uvynv3",
      Bvxd0ez: "f1m145df",
      ecr2s2: "f1yhgkbh"
    },
    filledAlternativeInteractiveSelected: {
      De3pzq: "fjxa0vh",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fehi0vp"
    },
    outline: {
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    },
    outlineInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"],
      Jwef8y: "fjxutwb",
      Be0v6ae: "f1llr77y",
      B5kxglz: ["fzk0khw", "fjj8tog"],
      B3pwyw6: "fb1u8ub",
      Bymgtzf: ["fjj8tog", "fzk0khw"],
      ecr2s2: "fophhak",
      dmfk: "f1uohb70",
      B4ofi8: ["f1jm7v1n", "f1bus3rq"],
      jgq6uv: "f1fbu7rr",
      Baxewws: ["f1bus3rq", "f1jm7v1n"]
    },
    outlineInteractiveSelected: {
      De3pzq: "f1q9pm1r",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fg59vm4"
    },
    subtle: {
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    subtleInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd"
    },
    subtleInteractiveSelected: {
      De3pzq: "fq5gl1p",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1uqaxdt"
    },
    highContrastSelected: {
      ycbfsm: "fkc42ay",
      Bsw6fvg: "f1rirnrt",
      Bbusuzp: "f1lkg8j3",
      xgfqdd: "f1nkj0oa",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    highContrastInteractive: {
      h1vhog: "fpfvv3l",
      kslmdy: "f1oamsm6",
      Baaf6ca: "f1il21bs",
      x9zz3d: "fnn5dk0",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    select: {
      qhf8xq: "f1euv43f",
      Bhzewxz: "fqclxi7",
      j35jbq: ["fiv86kb", "f36uhnt"],
      Bj3rh1h: "f19g0ac"
    },
    hiddenCheckbox: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      a9b677: "frkrog8",
      Bqenvij: "f1mpe4l3",
      qhf8xq: "f1euv43f",
      Bh84pgu: "fmf1zke",
      Bgl5zvf: "f1wch0ki",
      Huce71: "fz5stix"
    }
  }, {
    d: [".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".fifeqxg{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f899z7z{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f4h3tyx{border-top-right-radius:var(--fui-Card--border-radius);}", ".f18ur2pz{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1lplnzb{padding-top:var(--fui-Card--size);}", ".f10m5gbb{padding-right:var(--fui-Card--size);}", ".f1k04kkk{padding-left:var(--fui-Card--size);}", ".fhftqfp{padding-bottom:var(--fui-Card--size);}", ".fxsr4vj{-webkit-column-gap:var(--fui-Card--size);column-gap:var(--fui-Card--size);}", ".fcvsdzp{row-gap:var(--fui-Card--size);}", ".f22iagw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".f10pi13n{position:relative;}", ".f1ewtqcl{box-sizing:border-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1mdlcz9::after{position:absolute;}", ".frwkxtg::after{top:0;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".fo72kxq::after{bottom:0;}", '.f13zj6fq::after{content:"";}', ".f1nwj1ja::after{pointer-events:none;}", ".f8rth92::after{border-top-style:solid;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f1lh990p::after{border-bottom-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f1i1u9k0::after{border-bottom-width:var(--strokeWidthThin);}", ".f1qnomq5::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f2fl922::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f1anhtl::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1n2zcl3::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f16v3d5c>.fui-CardHeader,.f16v3d5c>.fui-CardFooter{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", ".f1su8t2g>:not(.fui-CardPreview):not(.fui-CardHeader):not(.fui-CardFooter){-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".f99gebs[data-fui-focus-visible]::after{border-top-width:var(--strokeWidthThick);}", ".f13b0oaq[data-fui-focus-visible]::after{border-right-width:var(--strokeWidthThick);}", ".f8t2bz6[data-fui-focus-visible]::after{border-left-width:var(--strokeWidthThick);}", ".f1jvq617[data-fui-focus-visible]::after{border-bottom-width:var(--strokeWidthThick);}", ".f11unbnk[data-fui-focus-visible]::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".fbd201q[data-fui-focus-visible]::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f12nqxso[data-fui-focus-visible]::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1uguk4w[data-fui-focus-visible]::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f3l4wcz[data-fui-focus-visible]::after{top:-var(--strokeWidthThick);}", ".f6j2biq[data-fui-focus-visible]::after{bottom:-var(--strokeWidthThick);}", ".fdzzmfx[data-fui-focus-visible]::after{left:-var(--strokeWidthThick);}", ".fduh8kh[data-fui-focus-visible]::after{right:-var(--strokeWidthThick);}", ".f1b1k54r[data-fui-focus-within]:focus-within{border-top-color:transparent;}", ".f4ne723[data-fui-focus-within]:focus-within{border-right-color:transparent;}", ".fqqcjud[data-fui-focus-within]:focus-within{border-left-color:transparent;}", ".fh7aioi[data-fui-focus-within]:focus-within{border-bottom-color:transparent;}", '.ffht0p2[data-fui-focus-within]:focus-within::after{content:"";}', ".f1p0ul1q[data-fui-focus-within]:focus-within::after{position:absolute;}", ".f1c901ms[data-fui-focus-within]:focus-within::after{pointer-events:none;}", ".f1alokd7[data-fui-focus-within]:focus-within::after{z-index:1;}", ".f78i1la[data-fui-focus-within]:focus-within::after{border-top-style:solid;}", ".f1kvsw7t[data-fui-focus-within]:focus-within::after{border-right-style:solid;}", ".f1bw8brt[data-fui-focus-within]:focus-within::after{border-left-style:solid;}", ".f8k7e5g[data-fui-focus-within]:focus-within::after{border-bottom-style:solid;}", ".f125hn41[data-fui-focus-within]:focus-within::after{border-top-width:var(--strokeWidthThick);}", ".fgxkx34[data-fui-focus-within]:focus-within::after{border-right-width:var(--strokeWidthThick);}", ".f1v56tyl[data-fui-focus-within]:focus-within::after{border-left-width:var(--strokeWidthThick);}", ".fdxas6f[data-fui-focus-within]:focus-within::after{border-bottom-width:var(--strokeWidthThick);}", ".fxwickw[data-fui-focus-within]:focus-within::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f1ia5cve[data-fui-focus-within]:focus-within::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f194aguw[data-fui-focus-within]:focus-within::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".fqicc6c[data-fui-focus-within]:focus-within::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".fq4eyks[data-fui-focus-within]:focus-within::after{border-top-color:var(--colorStrokeFocus2);}", ".f1ya6x16[data-fui-focus-within]:focus-within::after{border-right-color:var(--colorStrokeFocus2);}", ".ftuszwa[data-fui-focus-within]:focus-within::after{border-left-color:var(--colorStrokeFocus2);}", ".f1e2iu44[data-fui-focus-within]:focus-within::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f4a0pcc[data-fui-focus-within]:focus-within::after{top:-var(--strokeWidthThick);}", ".f11go4w5[data-fui-focus-within]:focus-within::after{bottom:-var(--strokeWidthThick);}", ".f4dzull[data-fui-focus-within]:focus-within::after{left:-var(--strokeWidthThick);}", ".fy687nj[data-fui-focus-within]:focus-within::after{right:-var(--strokeWidthThick);}", ".f1063pyq{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}", ".f122n59{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", ".fpfyeui>.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", ".fwi74qw>.fui-CardPreview{margin-bottom:calc(var(--fui-Card--size) * -1);}", '.ffcmwrh>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', '.f6ppoih>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.f1dc9p14>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.fd933vt>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', ".f18esqgw>.fui-CardHeader:last-of-type,.f18esqgw>.fui-CardFooter:last-of-type{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".f1vx9l62{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}", ".fobhde4>.fui-CardPreview{margin-left:calc(var(--fui-Card--size) * -1);}", ".fx5r7kn>.fui-CardPreview{margin-right:calc(var(--fui-Card--size) * -1);}", '.f19chtn8>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-top:calc(var(--fui-Card--size) * -1);}', ".fuvs6re>.fui-Card__floatingAction+.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", '.fy4glsf>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-bottom:calc(var(--fui-Card--size) * -1);}', ".f1pi9uxy{--fui-Card--size:8px;}", ".f1h1zgly{--fui-Card--border-radius:var(--borderRadiusSmall);}", ".frsmuga{--fui-Card--size:12px;}", ".fuldkky{--fui-Card--border-radius:var(--borderRadiusMedium);}", ".f1qua4xo{--fui-Card--size:16px;}", ".fimkt6v{--fui-Card--border-radius:var(--borderRadiusLarge);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1whvlc6{box-shadow:var(--shadow4);}", ".f16gxe2i::after{border-top-color:var(--colorTransparentStroke);}", ".fpgykix::after{border-right-color:var(--colorTransparentStroke);}", ".fzybk4o::after{border-left-color:var(--colorTransparentStroke);}", ".f1osi826::after{border-bottom-color:var(--colorTransparentStroke);}", ".f1k6fduh{cursor:pointer;}", ".f1nfm20t{background-color:var(--colorNeutralBackground1Selected);}", ".f16eln5f::after{border-top-color:var(--colorNeutralStroke1Selected);}", ".fa2okxs::after{border-right-color:var(--colorNeutralStroke1Selected);}", ".fg4zq3l::after{border-left-color:var(--colorNeutralStroke1Selected);}", ".ff6932p::after{border-bottom-color:var(--colorNeutralStroke1Selected);}", ".f1dmdbja{background-color:var(--colorNeutralBackground2);}", ".fjxa0vh{background-color:var(--colorNeutralBackground2Selected);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1couhl3{box-shadow:none;}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}", ".f1q9pm1r{background-color:var(--colorTransparentBackgroundSelected);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1euv43f{position:absolute;}", ".fqclxi7{top:4px;}", ".fiv86kb{right:4px;}", ".f36uhnt{left:4px;}", ".f19g0ac{z-index:1;}", ".frkrog8{width:1px;}", ".f1mpe4l3{height:1px;}", ".fmf1zke{clip:rect(0 0 0 0);}", ".f1wch0ki{-webkit-clip-path:inset(50%);clip-path:inset(50%);}", ".fz5stix{white-space:nowrap;}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".f1m145df:hover{box-shadow:var(--shadow8);}", ".f1kz6goq:hover{background-color:var(--colorNeutralBackground1Selected);}", ".f1uvynv3:hover{background-color:var(--colorNeutralBackground2Hover);}", ".fehi0vp:hover{background-color:var(--colorNeutralBackground2Selected);}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".f1llr77y:hover::after{border-top-color:var(--colorNeutralStroke1Hover);}", ".fzk0khw:hover::after{border-right-color:var(--colorNeutralStroke1Hover);}", ".fjj8tog:hover::after{border-left-color:var(--colorNeutralStroke1Hover);}", ".fb1u8ub:hover::after{border-bottom-color:var(--colorNeutralStroke1Hover);}", ".fg59vm4:hover{background-color:var(--colorTransparentBackgroundSelected);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1uqaxdt:hover{background-color:var(--colorSubtleBackgroundSelected);}"],
    a: [".fb40n2d:active{background-color:var(--colorNeutralBackground1Pressed);}", ".f1yhgkbh:active{background-color:var(--colorNeutralBackground2Pressed);}", ".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f1uohb70:active::after{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1jm7v1n:active::after{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1bus3rq:active::after{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1fbu7rr:active::after{border-bottom-color:var(--colorNeutralStroke1Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}"],
    m: [["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1nkj0oa .fui-CardPreview,.f1nkj0oa .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fey3rwa::after{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f5jhx11::after{border-right-color:Highlight;}.fff9uym::after{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fm7n0jy::after{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fff9uym::after{border-left-color:Highlight;}.f5jhx11::after{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fpfvv3l:hover,.fpfvv3l :active{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1oamsm6:hover,.f1oamsm6 :active{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1il21bs:hover,.f1il21bs :active{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnn5dk0:hover .fui-CardPreview,.fnn5dk0 :active .fui-CardPreview,.fnn5dk0:hover .fui-CardFooter,.fnn5dk0 :active .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fey3rwa::after{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f5jhx11::after{border-right-color:Highlight;}.fff9uym::after{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fm7n0jy::after{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fff9uym::after{border-left-color:Highlight;}.f5jhx11::after{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useCardStyles_unstable = (state) => {
    const styles = useStyles15();
    const orientationMap = {
      horizontal: styles.orientationHorizontal,
      vertical: styles.orientationVertical
    };
    const sizeMap = {
      small: styles.sizeSmall,
      medium: styles.sizeMedium,
      large: styles.sizeLarge
    };
    const appearanceMap = {
      filled: styles.filled,
      "filled-alternative": styles.filledAlternative,
      outline: styles.outline,
      subtle: styles.subtle
    };
    const selectedMap = {
      filled: styles.filledInteractiveSelected,
      "filled-alternative": styles.filledAlternativeInteractiveSelected,
      outline: styles.outlineInteractiveSelected,
      subtle: styles.subtleInteractiveSelected
    };
    const interactiveMap = {
      filled: styles.filledInteractive,
      "filled-alternative": styles.filledAlternativeInteractive,
      outline: styles.outlineInteractive,
      subtle: styles.subtleInteractive
    };
    const isSelectableOrInteractive = state.interactive || state.selectable;
    state.root.className = mergeClasses(
      cardClassNames.root,
      styles.root,
      orientationMap[state.orientation],
      sizeMap[state.size],
      appearanceMap[state.appearance],
      isSelectableOrInteractive && interactiveMap[state.appearance],
      state.selected && selectedMap[state.appearance],
      state.selectFocused && styles.selectableFocused,
      // High contrast overrides
      state.selected && styles.highContrastSelected,
      isSelectableOrInteractive && styles.highContrastInteractive,
      state.root.className
    );
    if (state.floatingAction) {
      state.floatingAction.className = mergeClasses(cardClassNames.floatingAction, styles.select, state.floatingAction.className);
    }
    if (state.checkbox) {
      state.checkbox.className = mergeClasses(cardClassNames.checkbox, styles.hiddenCheckbox, state.checkbox.className);
    }
    return state;
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/useCardContextValue.js
  init_define_process();
  init_define_process_env();
  function useCardContextValue({
    selectableA11yProps
  }) {
    return {
      selectableA11yProps
    };
  }

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/Card/Card.js
  var Card = /* @__PURE__ */ React108.forwardRef((props, ref) => {
    const state = useCard_unstable(props, ref);
    const cardContextValue = useCardContextValue(state);
    useCardStyles_unstable(state);
    return renderCard_unstable(state, cardContextValue);
  });
  Card.displayName = "Card";

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  init_define_process();
  init_define_process_env();
  var React110 = __toESM(require_react());

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeader.js
  init_define_process();
  init_define_process_env();
  var React109 = __toESM(require_react());
  var useCardHeader_unstable = (props, ref) => {
    const {
      image,
      header,
      description,
      action
    } = props;
    const {
      selectableA11yProps: {
        referenceId,
        setReferenceId
      }
    } = useCardContext_unstable();
    const headerRef = React109.useRef(null);
    const generatedId = useId2(cardHeaderClassNames.header, referenceId);
    React109.useEffect(() => {
      if (header && headerRef.current) {
        const {
          id: id4
        } = headerRef.current;
        setReferenceId(id4 ? id4 : generatedId);
      }
    }, [header, setReferenceId, generatedId]);
    return {
      components: {
        root: "div",
        image: "div",
        header: "div",
        description: "div",
        action: "div"
      },
      root: getNativeElementProps("div", {
        ref,
        ...props
      }),
      image: resolveShorthand(image),
      header: resolveShorthand(header, {
        required: true,
        defaultProps: {
          ref: headerRef,
          id: referenceId
        }
      }),
      description: resolveShorthand(description),
      action: resolveShorthand(action)
    };
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/CardHeader/renderCardHeader.js
  init_define_process();
  init_define_process_env();
  var renderCardHeader_unstable = (state) => {
    const {
      slots,
      slotProps
    } = getSlotsNext(state);
    return /* @__PURE__ */ createElement5(slots.root, slotProps.root, slots.image && /* @__PURE__ */ createElement5(slots.image, slotProps.image), /* @__PURE__ */ createElement5(slots.header, slotProps.header), slots.description && /* @__PURE__ */ createElement5(slots.description, slotProps.description), slots.action && /* @__PURE__ */ createElement5(slots.action, slotProps.action));
  };

  // node_modules/.pnpm/@fluentui+react-card@9.0.8_@types+react-dom@18.0.11_@types+react@18.0.38_react-dom@18.2.0_react@18.2.0/node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  var CardHeader = /* @__PURE__ */ React110.forwardRef((props, ref) => {
    const state = useCardHeader_unstable(props, ref);
    useCardHeaderStyles_unstable(state);
    return renderCardHeader_unstable(state);
  });
  CardHeader.displayName = "CardHeader";

  // node_modules/.pnpm/@reactflow+core@11.7.0_react-dom@18.2.0_react@18.2.0/node_modules/@reactflow/core/dist/esm/index.js
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var import_react33 = __toESM(require_react());

  // node_modules/.pnpm/classcat@5.0.4/node_modules/classcat/index.js
  init_define_process();
  init_define_process_env();
  function cc(names) {
    if (typeof names === "string" || typeof names === "number")
      return "" + names;
    let out = "";
    if (Array.isArray(names)) {
      for (let i4 = 0, tmp; i4 < names.length; i4++) {
        if ((tmp = cc(names[i4])) !== "") {
          out += (out && " ") + tmp;
        }
      }
    } else {
      for (let k2 in names) {
        if (names[k2])
          out += (out && " ") + k2;
      }
    }
    return out;
  }

  // node_modules/.pnpm/zustand@4.3.7_react@18.2.0/node_modules/zustand/esm/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/zustand@4.3.7_react@18.2.0/node_modules/zustand/esm/vanilla.mjs
  init_define_process();
  init_define_process_env();
  var import_meta = {};
  var createStoreImpl = (createState2) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace2) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace2 != null ? replace2 : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    };
    const getState = () => state;
    const subscribe = (listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    };
    const destroy = () => {
      if ((import_meta.env && import_meta.env.MODE) !== "production") {
        console.warn(
          "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
        );
      }
      listeners.clear();
    };
    const api = { setState, getState, subscribe, destroy };
    state = createState2(setState, getState, api);
    return api;
  };
  var createStore = (createState2) => createState2 ? createStoreImpl(createState2) : createStoreImpl;

  // node_modules/.pnpm/zustand@4.3.7_react@18.2.0/node_modules/zustand/esm/index.mjs
  var import_react32 = __toESM(require_react(), 1);
  var import_with_selector = __toESM(require_with_selector(), 1);
  var { useSyncExternalStoreWithSelector } = import_with_selector.default;
  function useStore(api, selector2 = api.getState, equalityFn) {
    const slice2 = useSyncExternalStoreWithSelector(
      api.subscribe,
      api.getState,
      api.getServerState || api.getState,
      selector2,
      equalityFn
    );
    (0, import_react32.useDebugValue)(slice2);
    return slice2;
  }

  // node_modules/.pnpm/zustand@4.3.7_react@18.2.0/node_modules/zustand/esm/shallow.mjs
  init_define_process();
  init_define_process_env();
  function shallow(objA, objB) {
    if (Object.is(objA, objB)) {
      return true;
    }
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    if (objA instanceof Map && objB instanceof Map) {
      if (objA.size !== objB.size)
        return false;
      for (const [key, value] of objA) {
        if (!Object.is(value, objB.get(key))) {
          return false;
        }
      }
      return true;
    }
    if (objA instanceof Set && objB instanceof Set) {
      if (objA.size !== objB.size)
        return false;
      for (const value of objA) {
        if (!objB.has(value)) {
          return false;
        }
      }
      return true;
    }
    const keysA = Object.keys(objA);
    if (keysA.length !== Object.keys(objB).length) {
      return false;
    }
    for (let i4 = 0; i4 < keysA.length; i4++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i4]) || !Object.is(objA[keysA[i4]], objB[keysA[i4]])) {
        return false;
      }
    }
    return true;
  }

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/drag.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-dispatch@3.0.1/node_modules/d3-dispatch/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-dispatch@3.0.1/node_modules/d3-dispatch/src/dispatch.js
  init_define_process();
  init_define_process_env();
  var noop2 = { value: () => {
  } };
  function dispatch() {
    for (var i4 = 0, n5 = arguments.length, _2 = {}, t3; i4 < n5; ++i4) {
      if (!(t3 = arguments[i4] + "") || t3 in _2 || /[\s.]/.test(t3))
        throw new Error("illegal type: " + t3);
      _2[t3] = [];
    }
    return new Dispatch(_2);
  }
  function Dispatch(_2) {
    this._ = _2;
  }
  function parseTypenames(typenames, types2) {
    return typenames.trim().split(/^|\s+/).map(function(t3) {
      var name = "", i4 = t3.indexOf(".");
      if (i4 >= 0)
        name = t3.slice(i4 + 1), t3 = t3.slice(0, i4);
      if (t3 && !types2.hasOwnProperty(t3))
        throw new Error("unknown type: " + t3);
      return { type: t3, name };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _2 = this._, T4 = parseTypenames(typename + "", _2), t3, i4 = -1, n5 = T4.length;
      if (arguments.length < 2) {
        while (++i4 < n5)
          if ((t3 = (typename = T4[i4]).type) && (t3 = get(_2[t3], typename.name)))
            return t3;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i4 < n5) {
        if (t3 = (typename = T4[i4]).type)
          _2[t3] = set(_2[t3], typename.name, callback);
        else if (callback == null)
          for (t3 in _2)
            _2[t3] = set(_2[t3], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy2 = {}, _2 = this._;
      for (var t3 in _2)
        copy2[t3] = _2[t3].slice();
      return new Dispatch(copy2);
    },
    call: function(type, that) {
      if ((n5 = arguments.length - 2) > 0)
        for (var args = new Array(n5), i4 = 0, n5, t3; i4 < n5; ++i4)
          args[i4] = arguments[i4 + 2];
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (t3 = this._[type], i4 = 0, n5 = t3.length; i4 < n5; ++i4)
        t3[i4].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (var t3 = this._[type], i4 = 0, n5 = t3.length; i4 < n5; ++i4)
        t3[i4].value.apply(that, args);
    }
  };
  function get(type, name) {
    for (var i4 = 0, n5 = type.length, c4; i4 < n5; ++i4) {
      if ((c4 = type[i4]).name === name) {
        return c4.value;
      }
    }
  }
  function set(type, name, callback) {
    for (var i4 = 0, n5 = type.length; i4 < n5; ++i4) {
      if (type[i4].name === name) {
        type[i4] = noop2, type = type.slice(0, i4).concat(type.slice(i4 + 1));
        break;
      }
    }
    if (callback != null)
      type.push({ name, value: callback });
    return type;
  }
  var dispatch_default = dispatch;

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/creator.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/namespace.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/namespaces.js
  init_define_process();
  init_define_process_env();
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix2 = name += "", i4 = prefix2.indexOf(":");
    if (i4 >= 0 && (prefix2 = name.slice(0, i4)) !== "xmlns")
      name = name.slice(i4 + 1);
    return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name } : name;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/select.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/select.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selector.js
  init_define_process();
  init_define_process_env();
  function none() {
  }
  function selector_default(selector2) {
    return selector2 == null ? none : function() {
      return this.querySelector(selector2);
    };
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/select.js
  function select_default(select) {
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m5 = groups.length, subgroups = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, subgroup = subgroups[j3] = new Array(n5), node2, subnode, i4 = 0; i4 < n5; ++i4) {
        if ((node2 = group[i4]) && (subnode = select.call(node2, node2.__data__, i4, group))) {
          if ("__data__" in node2)
            subnode.__data__ = node2.__data__;
          subgroup[i4] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectAll.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/array.js
  init_define_process();
  init_define_process_env();
  function array(x3) {
    return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selectorAll.js
  init_define_process();
  init_define_process_env();
  function empty() {
    return [];
  }
  function selectorAll_default(selector2) {
    return selector2 == null ? empty : function() {
      return this.querySelectorAll(selector2);
    };
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    if (typeof select === "function")
      select = arrayAll(select);
    else
      select = selectorAll_default(select);
    for (var groups = this._groups, m5 = groups.length, subgroups = [], parents = [], j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group[i4]) {
          subgroups.push(select.call(node2, node2.__data__, i4, group));
          parents.push(node2);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectChild.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/matcher.js
  init_define_process();
  init_define_process_env();
  function matcher_default(selector2) {
    return function() {
      return this.matches(selector2);
    };
  }
  function childMatcher(selector2) {
    return function(node2) {
      return node2.matches(selector2);
    };
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectChild.js
  var find = Array.prototype.find;
  function childFind(match2) {
    return function() {
      return find.call(this.children, match2);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match2) {
    return this.select(match2 == null ? childFirst : childFind(typeof match2 === "function" ? match2 : childMatcher(match2)));
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectChildren.js
  init_define_process();
  init_define_process_env();
  var filter = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match2) {
    return function() {
      return filter.call(this.children, match2);
    };
  }
  function selectChildren_default(match2) {
    return this.selectAll(match2 == null ? children : childrenFilter(typeof match2 === "function" ? match2 : childMatcher(match2)));
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/filter.js
  init_define_process();
  init_define_process_env();
  function filter_default(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default(match2);
    for (var groups = this._groups, m5 = groups.length, subgroups = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, subgroup = subgroups[j3] = [], node2, i4 = 0; i4 < n5; ++i4) {
        if ((node2 = group[i4]) && match2.call(node2, node2.__data__, i4, group)) {
          subgroup.push(node2);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/data.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/enter.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/sparse.js
  init_define_process();
  init_define_process_env();
  function sparse_default(update) {
    return new Array(update.length);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next2) {
      return this._parent.insertBefore(child, next2);
    },
    querySelector: function(selector2) {
      return this._parent.querySelector(selector2);
    },
    querySelectorAll: function(selector2) {
      return this._parent.querySelectorAll(selector2);
    }
  };

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/constant.js
  init_define_process();
  init_define_process_env();
  function constant_default(x3) {
    return function() {
      return x3;
    };
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter, update, exit, data) {
    var i4 = 0, node2, groupLength = group.length, dataLength = data.length;
    for (; i4 < dataLength; ++i4) {
      if (node2 = group[i4]) {
        node2.__data__ = data[i4];
        update[i4] = node2;
      } else {
        enter[i4] = new EnterNode(parent, data[i4]);
      }
    }
    for (; i4 < groupLength; ++i4) {
      if (node2 = group[i4]) {
        exit[i4] = node2;
      }
    }
  }
  function bindKey(parent, group, enter, update, exit, data, key) {
    var i4, node2, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i4 = 0; i4 < groupLength; ++i4) {
      if (node2 = group[i4]) {
        keyValues[i4] = keyValue = key.call(node2, node2.__data__, i4, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i4] = node2;
        } else {
          nodeByKeyValue.set(keyValue, node2);
        }
      }
    }
    for (i4 = 0; i4 < dataLength; ++i4) {
      keyValue = key.call(parent, data[i4], i4, data) + "";
      if (node2 = nodeByKeyValue.get(keyValue)) {
        update[i4] = node2;
        node2.__data__ = data[i4];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i4] = new EnterNode(parent, data[i4]);
      }
    }
    for (i4 = 0; i4 < groupLength; ++i4) {
      if ((node2 = group[i4]) && nodeByKeyValue.get(keyValues[i4]) === node2) {
        exit[i4] = node2;
      }
    }
  }
  function datum(node2) {
    return node2.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m5 = groups.length, update = new Array(m5), enter = new Array(m5), exit = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      var parent = parents[j3], group = groups[j3], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j3, parents)), dataLength = data.length, enterGroup = enter[j3] = new Array(dataLength), updateGroup = update[j3] = new Array(dataLength), exitGroup = exit[j3] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next2; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next2 = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next2 || null;
        }
      }
    }
    update = new Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/exit.js
  init_define_process();
  init_define_process_env();
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/join.js
  init_define_process();
  init_define_process_env();
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update = onupdate(update);
      if (update)
        update = update.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/merge.js
  init_define_process();
  init_define_process_env();
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m5 = Math.min(m0, m1), merges = new Array(m0), j3 = 0; j3 < m5; ++j3) {
      for (var group0 = groups0[j3], group1 = groups1[j3], n5 = group0.length, merge = merges[j3] = new Array(n5), node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group0[i4] || group1[i4]) {
          merge[i4] = node2;
        }
      }
    }
    for (; j3 < m0; ++j3) {
      merges[j3] = groups0[j3];
    }
    return new Selection(merges, this._parents);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/order.js
  init_define_process();
  init_define_process_env();
  function order_default() {
    for (var groups = this._groups, j3 = -1, m5 = groups.length; ++j3 < m5; ) {
      for (var group = groups[j3], i4 = group.length - 1, next2 = group[i4], node2; --i4 >= 0; ) {
        if (node2 = group[i4]) {
          if (next2 && node2.compareDocumentPosition(next2) ^ 4)
            next2.parentNode.insertBefore(node2, next2);
          next2 = node2;
        }
      }
    }
    return this;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/sort.js
  init_define_process();
  init_define_process_env();
  function sort_default(compare) {
    if (!compare)
      compare = ascending;
    function compareNode(a4, b5) {
      return a4 && b5 ? compare(a4.__data__, b5.__data__) : !a4 - !b5;
    }
    for (var groups = this._groups, m5 = groups.length, sortgroups = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, sortgroup = sortgroups[j3] = new Array(n5), node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group[i4]) {
          sortgroup[i4] = node2;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending(a4, b5) {
    return a4 < b5 ? -1 : a4 > b5 ? 1 : a4 >= b5 ? 0 : NaN;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/call.js
  init_define_process();
  init_define_process_env();
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/nodes.js
  init_define_process();
  init_define_process_env();
  function nodes_default() {
    return Array.from(this);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/node.js
  init_define_process();
  init_define_process_env();
  function node_default() {
    for (var groups = this._groups, j3 = 0, m5 = groups.length; j3 < m5; ++j3) {
      for (var group = groups[j3], i4 = 0, n5 = group.length; i4 < n5; ++i4) {
        var node2 = group[i4];
        if (node2)
          return node2;
      }
    }
    return null;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/size.js
  init_define_process();
  init_define_process_env();
  function size_default() {
    let size = 0;
    for (const node2 of this)
      ++size;
    return size;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/empty.js
  init_define_process();
  init_define_process_env();
  function empty_default() {
    return !this.node();
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/each.js
  init_define_process();
  init_define_process_env();
  function each_default(callback) {
    for (var groups = this._groups, j3 = 0, m5 = groups.length; j3 < m5; ++j3) {
      for (var group = groups[j3], i4 = 0, n5 = group.length, node2; i4 < n5; ++i4) {
        if (node2 = group[i4])
          callback.call(node2, node2.__data__, i4, group);
      }
    }
    return this;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/attr.js
  init_define_process();
  init_define_process_env();
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name, value) {
    return function() {
      var v5 = value.apply(this, arguments);
      if (v5 == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v5);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v5 = value.apply(this, arguments);
      if (v5 == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v5);
    };
  }
  function attr_default(name, value) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node2 = this.node();
      return fullname.local ? node2.getAttributeNS(fullname.space, fullname.local) : node2.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/style.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/window.js
  init_define_process();
  init_define_process_env();
  function window_default(node2) {
    return node2.ownerDocument && node2.ownerDocument.defaultView || node2.document && node2 || node2.defaultView;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }
  function styleFunction(name, value, priority) {
    return function() {
      var v5 = value.apply(this, arguments);
      if (v5 == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v5, priority);
    };
  }
  function style_default(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node2, name) {
    return node2.style.getPropertyValue(name) || window_default(node2).getComputedStyle(node2, null).getPropertyValue(name);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/property.js
  init_define_process();
  init_define_process_env();
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }
  function propertyFunction(name, value) {
    return function() {
      var v5 = value.apply(this, arguments);
      if (v5 == null)
        delete this[name];
      else
        this[name] = v5;
    };
  }
  function property_default(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/classed.js
  init_define_process();
  init_define_process_env();
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node2) {
    return node2.classList || new ClassList(node2);
  }
  function ClassList(node2) {
    this._node = node2;
    this._names = classArray(node2.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name) {
      var i4 = this._names.indexOf(name);
      if (i4 < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i4 = this._names.indexOf(name);
      if (i4 >= 0) {
        this._names.splice(i4, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };
  function classedAdd(node2, names) {
    var list = classList(node2), i4 = -1, n5 = names.length;
    while (++i4 < n5)
      list.add(names[i4]);
  }
  function classedRemove(node2, names) {
    var list = classList(node2), i4 = -1, n5 = names.length;
    while (++i4 < n5)
      list.remove(names[i4]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i4 = -1, n5 = names.length;
      while (++i4 < n5)
        if (!list.contains(names[i4]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/text.js
  init_define_process();
  init_define_process_env();
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v5 = value.apply(this, arguments);
      this.textContent = v5 == null ? "" : v5;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/html.js
  init_define_process();
  init_define_process_env();
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v5 = value.apply(this, arguments);
      this.innerHTML = v5 == null ? "" : v5;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/raise.js
  init_define_process();
  init_define_process_env();
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/lower.js
  init_define_process();
  init_define_process_env();
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/append.js
  init_define_process();
  init_define_process_env();
  function append_default(name) {
    var create2 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create2.apply(this, arguments));
    });
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/insert.js
  init_define_process();
  init_define_process_env();
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/remove.js
  init_define_process();
  init_define_process_env();
  function remove() {
    var parent = this.parentNode;
    if (parent)
      parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/clone.js
  init_define_process();
  init_define_process_env();
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/datum.js
  init_define_process();
  init_define_process_env();
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/on.js
  init_define_process();
  init_define_process_env();
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t3) {
      var name = "", i4 = t3.indexOf(".");
      if (i4 >= 0)
        name = t3.slice(i4 + 1), t3 = t3.slice(0, i4);
      return { type: t3, name };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j3 = 0, i4 = -1, m5 = on.length, o4; j3 < m5; ++j3) {
        if (o4 = on[j3], (!typename.type || o4.type === typename.type) && o4.name === typename.name) {
          this.removeEventListener(o4.type, o4.listener, o4.options);
        } else {
          on[++i4] = o4;
        }
      }
      if (++i4)
        on.length = i4;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o4, listener = contextListener(value);
      if (on)
        for (var j3 = 0, m5 = on.length; j3 < m5; ++j3) {
          if ((o4 = on[j3]).type === typename.type && o4.name === typename.name) {
            this.removeEventListener(o4.type, o4.listener, o4.options);
            this.addEventListener(o4.type, o4.listener = listener, o4.options = options);
            o4.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o4 = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o4];
      else
        on.push(o4);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i4, n5 = typenames.length, t3;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j3 = 0, m5 = on.length, o4; j3 < m5; ++j3) {
          for (i4 = 0, o4 = on[j3]; i4 < n5; ++i4) {
            if ((t3 = typenames[i4]).type === o4.type && t3.name === o4.name) {
              return o4.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd : onRemove;
    for (i4 = 0; i4 < n5; ++i4)
      this.each(on(typenames[i4], value, options));
    return this;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/dispatch.js
  init_define_process();
  init_define_process_env();
  function dispatchEvent(node2, type, params) {
    var window2 = window_default(node2), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type, false, false);
    }
    node2.dispatchEvent(event);
  }
  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }
  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/iterator.js
  init_define_process();
  init_define_process_env();
  function* iterator_default() {
    for (var groups = this._groups, j3 = 0, m5 = groups.length; j3 < m5; ++j3) {
      for (var group = groups[j3], i4 = 0, n5 = group.length, node2; i4 < n5; ++i4) {
        if (node2 = group[i4])
          yield node2;
      }
    }
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/select.js
  function select_default2(selector2) {
    return typeof selector2 === "string" ? new Selection([[document.querySelector(selector2)]], [document.documentElement]) : new Selection([[selector2]], root);
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/pointer.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/sourceEvent.js
  init_define_process();
  init_define_process_env();
  function sourceEvent_default(event) {
    let sourceEvent;
    while (sourceEvent = event.sourceEvent)
      event = sourceEvent;
    return event;
  }

  // node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/pointer.js
  function pointer_default(event, node2) {
    event = sourceEvent_default(event);
    if (node2 === void 0)
      node2 = event.currentTarget;
    if (node2) {
      var svg = node2.ownerSVGElement || node2;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node2.getScreenCTM().inverse());
        return [point.x, point.y];
      }
      if (node2.getBoundingClientRect) {
        var rect = node2.getBoundingClientRect();
        return [event.clientX - rect.left - node2.clientLeft, event.clientY - rect.top - node2.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/nodrag.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/noevent.js
  init_define_process();
  init_define_process_env();
  var nonpassive = { passive: false };
  var nonpassivecapture = { capture: true, passive: false };
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/nodrag.js
  function nodrag_default(view) {
    var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
    if ("onselectstart" in root3) {
      selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
    } else {
      root3.__noselect = root3.style.MozUserSelect;
      root3.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
    if (noclick) {
      selection2.on("click.drag", noevent_default, nonpassivecapture);
      setTimeout(function() {
        selection2.on("click.drag", null);
      }, 0);
    }
    if ("onselectstart" in root3) {
      selection2.on("selectstart.drag", null);
    } else {
      root3.style.MozUserSelect = root3.__noselect;
      delete root3.__noselect;
    }
  }

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/constant.js
  init_define_process();
  init_define_process_env();
  var constant_default2 = (x3) => () => x3;

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/event.js
  init_define_process();
  init_define_process_env();
  function DragEvent(type, {
    sourceEvent,
    subject,
    target,
    identifier: identifier2,
    active,
    x: x3,
    y: y4,
    dx,
    dy,
    dispatch: dispatch2
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      subject: { value: subject, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      identifier: { value: identifier2, enumerable: true, configurable: true },
      active: { value: active, enumerable: true, configurable: true },
      x: { value: x3, enumerable: true, configurable: true },
      y: { value: y4, enumerable: true, configurable: true },
      dx: { value: dx, enumerable: true, configurable: true },
      dy: { value: dy, enumerable: true, configurable: true },
      _: { value: dispatch2 }
    });
  }
  DragEvent.prototype.on = function() {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
  };

  // node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/drag.js
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d4) {
    return d4 == null ? { x: event.x, y: event.y } : d4;
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter3 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection2) {
      selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d4) {
      if (touchending || !filter3.call(this, event, d4))
        return;
      var gesture = beforestart(this, container.call(this, event, d4), event, d4, "mouse");
      if (!gesture)
        return;
      select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      nodrag_default(event.view);
      nopropagation(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }
    function mousemoved(event) {
      noevent_default(event);
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default2(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent_default(event);
      gestures.mouse("end", event);
    }
    function touchstarted(event, d4) {
      if (!filter3.call(this, event, d4))
        return;
      var touches = event.changedTouches, c4 = container.call(this, event, d4), n5 = touches.length, i4, gesture;
      for (i4 = 0; i4 < n5; ++i4) {
        if (gesture = beforestart(this, c4, event, d4, touches[i4].identifier, touches[i4])) {
          nopropagation(event);
          gesture("start", event, touches[i4]);
        }
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n5 = touches.length, i4, gesture;
      for (i4 = 0; i4 < n5; ++i4) {
        if (gesture = gestures[touches[i4].identifier]) {
          noevent_default(event);
          gesture("drag", event, touches[i4]);
        }
      }
    }
    function touchended(event) {
      var touches = event.changedTouches, n5 = touches.length, i4, gesture;
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, 500);
      for (i4 = 0; i4 < n5; ++i4) {
        if (gesture = gestures[touches[i4].identifier]) {
          nopropagation(event);
          gesture("end", event, touches[i4]);
        }
      }
    }
    function beforestart(that, container2, event, d4, identifier2, touch) {
      var dispatch2 = listeners.copy(), p4 = pointer_default(touch || event, container2), dx, dy, s4;
      if ((s4 = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier: identifier2,
        active,
        x: p4[0],
        y: p4[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch2
      }), d4)) == null)
        return;
      dx = s4.x - p4[0] || 0;
      dy = s4.y - p4[1] || 0;
      return function gesture(type, event2, touch2) {
        var p0 = p4, n5;
        switch (type) {
          case "start":
            gestures[identifier2] = gesture, n5 = active++;
            break;
          case "end":
            delete gestures[identifier2], --active;
          case "drag":
            p4 = pointer_default(touch2 || event2, container2), n5 = active;
            break;
        }
        dispatch2.call(
          type,
          that,
          new DragEvent(type, {
            sourceEvent: event2,
            subject: s4,
            target: drag,
            identifier: identifier2,
            active: n5,
            x: p4[0] + dx,
            y: p4[1] + dy,
            dx: p4[0] - p0[0],
            dy: p4[1] - p0[1],
            dispatch: dispatch2
          }),
          d4
        );
      };
    }
    drag.filter = function(_2) {
      return arguments.length ? (filter3 = typeof _2 === "function" ? _2 : constant_default2(!!_2), drag) : filter3;
    };
    drag.container = function(_2) {
      return arguments.length ? (container = typeof _2 === "function" ? _2 : constant_default2(_2), drag) : container;
    };
    drag.subject = function(_2) {
      return arguments.length ? (subject = typeof _2 === "function" ? _2 : constant_default2(_2), drag) : subject;
    };
    drag.touchable = function(_2) {
      return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default2(!!_2), drag) : touchable;
    };
    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };
    drag.clickDistance = function(_2) {
      return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
  }

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/zoom.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/color.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/define.js
  init_define_process();
  init_define_process_env();
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format) {
    var m5, l5;
    format = (format + "").trim().toLowerCase();
    return (m5 = reHex.exec(format)) ? (l5 = m5[1].length, m5 = parseInt(m5[1], 16), l5 === 6 ? rgbn(m5) : l5 === 3 ? new Rgb(m5 >> 8 & 15 | m5 >> 4 & 240, m5 >> 4 & 15 | m5 & 240, (m5 & 15) << 4 | m5 & 15, 1) : l5 === 8 ? rgba(m5 >> 24 & 255, m5 >> 16 & 255, m5 >> 8 & 255, (m5 & 255) / 255) : l5 === 4 ? rgba(m5 >> 12 & 15 | m5 >> 8 & 240, m5 >> 8 & 15 | m5 >> 4 & 240, m5 >> 4 & 15 | m5 & 240, ((m5 & 15) << 4 | m5 & 15) / 255) : null) : (m5 = reRgbInteger.exec(format)) ? new Rgb(m5[1], m5[2], m5[3], 1) : (m5 = reRgbPercent.exec(format)) ? new Rgb(m5[1] * 255 / 100, m5[2] * 255 / 100, m5[3] * 255 / 100, 1) : (m5 = reRgbaInteger.exec(format)) ? rgba(m5[1], m5[2], m5[3], m5[4]) : (m5 = reRgbaPercent.exec(format)) ? rgba(m5[1] * 255 / 100, m5[2] * 255 / 100, m5[3] * 255 / 100, m5[4]) : (m5 = reHslPercent.exec(format)) ? hsla(m5[1], m5[2] / 100, m5[3] / 100, 1) : (m5 = reHslaPercent.exec(format)) ? hsla(m5[1], m5[2] / 100, m5[3] / 100, m5[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n5) {
    return new Rgb(n5 >> 16 & 255, n5 >> 8 & 255, n5 & 255, 1);
  }
  function rgba(r3, g4, b5, a4) {
    if (a4 <= 0)
      r3 = g4 = b5 = NaN;
    return new Rgb(r3, g4, b5, a4);
  }
  function rgbConvert(o4) {
    if (!(o4 instanceof Color))
      o4 = color(o4);
    if (!o4)
      return new Rgb();
    o4 = o4.rgb();
    return new Rgb(o4.r, o4.g, o4.b, o4.opacity);
  }
  function rgb(r3, g4, b5, opacity) {
    return arguments.length === 1 ? rgbConvert(r3) : new Rgb(r3, g4, b5, opacity == null ? 1 : opacity);
  }
  function Rgb(r3, g4, b5, opacity) {
    this.r = +r3;
    this.g = +g4;
    this.b = +b5;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h5, s4, l5, a4) {
    if (a4 <= 0)
      h5 = s4 = l5 = NaN;
    else if (l5 <= 0 || l5 >= 1)
      h5 = s4 = NaN;
    else if (s4 <= 0)
      h5 = NaN;
    return new Hsl(h5, s4, l5, a4);
  }
  function hslConvert(o4) {
    if (o4 instanceof Hsl)
      return new Hsl(o4.h, o4.s, o4.l, o4.opacity);
    if (!(o4 instanceof Color))
      o4 = color(o4);
    if (!o4)
      return new Hsl();
    if (o4 instanceof Hsl)
      return o4;
    o4 = o4.rgb();
    var r3 = o4.r / 255, g4 = o4.g / 255, b5 = o4.b / 255, min = Math.min(r3, g4, b5), max = Math.max(r3, g4, b5), h5 = NaN, s4 = max - min, l5 = (max + min) / 2;
    if (s4) {
      if (r3 === max)
        h5 = (g4 - b5) / s4 + (g4 < b5) * 6;
      else if (g4 === max)
        h5 = (b5 - r3) / s4 + 2;
      else
        h5 = (r3 - g4) / s4 + 4;
      s4 /= l5 < 0.5 ? max + min : 2 - max - min;
      h5 *= 60;
    } else {
      s4 = l5 > 0 && l5 < 1 ? 0 : h5;
    }
    return new Hsl(h5, s4, l5, o4.opacity);
  }
  function hsl(h5, s4, l5, opacity) {
    return arguments.length === 1 ? hslConvert(h5) : new Hsl(h5, s4, l5, opacity == null ? 1 : opacity);
  }
  function Hsl(h5, s4, l5, opacity) {
    this.h = +h5;
    this.s = +s4;
    this.l = +l5;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h5 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h5) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s4, m1 = 2 * l5 - m22;
      return new Rgb(
        hsl2rgb(h5 >= 240 ? h5 - 240 : h5 + 120, m1, m22),
        hsl2rgb(h5, m1, m22),
        hsl2rgb(h5 < 120 ? h5 + 240 : h5 - 120, m1, m22),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a4 = clampa(this.opacity);
      return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h5, m1, m22) {
    return (h5 < 60 ? m1 + (m22 - m1) * h5 / 60 : h5 < 180 ? m22 : h5 < 240 ? m1 + (m22 - m1) * (240 - h5) / 60 : m1) * 255;
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/rgb.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/basis.js
  init_define_process();
  init_define_process_env();
  function basis(t1, v0, v1, v22, v32) {
    var t22 = t1 * t1, t3 = t22 * t1;
    return ((1 - 3 * t1 + 3 * t22 - t3) * v0 + (4 - 6 * t22 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t22 - 3 * t3) * v22 + t3 * v32) / 6;
  }
  function basis_default(values) {
    var n5 = values.length - 1;
    return function(t3) {
      var i4 = t3 <= 0 ? t3 = 0 : t3 >= 1 ? (t3 = 1, n5 - 1) : Math.floor(t3 * n5), v1 = values[i4], v22 = values[i4 + 1], v0 = i4 > 0 ? values[i4 - 1] : 2 * v1 - v22, v32 = i4 < n5 - 1 ? values[i4 + 2] : 2 * v22 - v1;
      return basis((t3 - i4 / n5) * n5, v0, v1, v22, v32);
    };
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/basisClosed.js
  init_define_process();
  init_define_process_env();
  function basisClosed_default(values) {
    var n5 = values.length;
    return function(t3) {
      var i4 = Math.floor(((t3 %= 1) < 0 ? ++t3 : t3) * n5), v0 = values[(i4 + n5 - 1) % n5], v1 = values[i4 % n5], v22 = values[(i4 + 1) % n5], v32 = values[(i4 + 2) % n5];
      return basis((t3 - i4 / n5) * n5, v0, v1, v22, v32);
    };
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/color.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/constant.js
  init_define_process();
  init_define_process_env();
  var constant_default3 = (x3) => () => x3;

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/color.js
  function linear(a4, d4) {
    return function(t3) {
      return a4 + t3 * d4;
    };
  }
  function exponential(a4, b5, y4) {
    return a4 = Math.pow(a4, y4), b5 = Math.pow(b5, y4) - a4, y4 = 1 / y4, function(t3) {
      return Math.pow(a4 + t3 * b5, y4);
    };
  }
  function gamma(y4) {
    return (y4 = +y4) === 1 ? nogamma : function(a4, b5) {
      return b5 - a4 ? exponential(a4, b5, y4) : constant_default3(isNaN(a4) ? b5 : a4);
    };
  }
  function nogamma(a4, b5) {
    var d4 = b5 - a4;
    return d4 ? linear(a4, d4) : constant_default3(isNaN(a4) ? b5 : a4);
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y4) {
    var color3 = gamma(y4);
    function rgb2(start2, end) {
      var r3 = color3((start2 = rgb(start2)).r, (end = rgb(end)).r), g4 = color3(start2.g, end.g), b5 = color3(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
      return function(t3) {
        start2.r = r3(t3);
        start2.g = g4(t3);
        start2.b = b5(t3);
        start2.opacity = opacity(t3);
        return start2 + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n5 = colors.length, r3 = new Array(n5), g4 = new Array(n5), b5 = new Array(n5), i4, color3;
      for (i4 = 0; i4 < n5; ++i4) {
        color3 = rgb(colors[i4]);
        r3[i4] = color3.r || 0;
        g4[i4] = color3.g || 0;
        b5[i4] = color3.b || 0;
      }
      r3 = spline(r3);
      g4 = spline(g4);
      b5 = spline(b5);
      color3.opacity = 1;
      return function(t3) {
        color3.r = r3(t3);
        color3.g = g4(t3);
        color3.b = b5(t3);
        return color3 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/number.js
  init_define_process();
  init_define_process_env();
  function number_default(a4, b5) {
    return a4 = +a4, b5 = +b5, function(t3) {
      return a4 * (1 - t3) + b5 * t3;
    };
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/string.js
  init_define_process();
  init_define_process_env();
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero(b5) {
    return function() {
      return b5;
    };
  }
  function one(b5) {
    return function(t3) {
      return b5(t3) + "";
    };
  }
  function string_default(a4, b5) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i4 = -1, s4 = [], q = [];
    a4 = a4 + "", b5 = b5 + "";
    while ((am = reA.exec(a4)) && (bm = reB.exec(b5))) {
      if ((bs = bm.index) > bi) {
        bs = b5.slice(bi, bs);
        if (s4[i4])
          s4[i4] += bs;
        else
          s4[++i4] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s4[i4])
          s4[i4] += bm;
        else
          s4[++i4] = bm;
      } else {
        s4[++i4] = null;
        q.push({ i: i4, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b5.length) {
      bs = b5.slice(bi);
      if (s4[i4])
        s4[i4] += bs;
      else
        s4[++i4] = bs;
    }
    return s4.length < 2 ? q[0] ? one(q[0].x) : zero(b5) : (b5 = q.length, function(t3) {
      for (var i5 = 0, o4; i5 < b5; ++i5)
        s4[(o4 = q[i5]).i] = o4.x(t3);
      return s4.join("");
    });
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/parse.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/decompose.js
  init_define_process();
  init_define_process_env();
  var degrees = 180 / Math.PI;
  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a4, b5, c4, d4, e3, f5) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a4 * a4 + b5 * b5))
      a4 /= scaleX, b5 /= scaleX;
    if (skewX = a4 * c4 + b5 * d4)
      c4 -= a4 * skewX, d4 -= b5 * skewX;
    if (scaleY = Math.sqrt(c4 * c4 + d4 * d4))
      c4 /= scaleY, d4 /= scaleY, skewX /= scaleY;
    if (a4 * d4 < b5 * c4)
      a4 = -a4, b5 = -b5, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e3,
      translateY: f5,
      rotate: Math.atan2(b5, a4) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value) {
    const m5 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m5.isIdentity ? identity : decompose_default(m5.a, m5.b, m5.c, m5.d, m5.e, m5.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse2, pxComma, pxParen, degParen) {
    function pop(s4) {
      return s4.length ? s4.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s4, q) {
      if (xa !== xb || ya !== yb) {
        var i4 = s4.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i4 - 4, x: number_default(xa, xb) }, { i: i4 - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s4.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a4, b5, s4, q) {
      if (a4 !== b5) {
        if (a4 - b5 > 180)
          b5 += 360;
        else if (b5 - a4 > 180)
          a4 += 360;
        q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default(a4, b5) });
      } else if (b5) {
        s4.push(pop(s4) + "rotate(" + b5 + degParen);
      }
    }
    function skewX(a4, b5, s4, q) {
      if (a4 !== b5) {
        q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default(a4, b5) });
      } else if (b5) {
        s4.push(pop(s4) + "skewX(" + b5 + degParen);
      }
    }
    function scale2(xa, ya, xb, yb, s4, q) {
      if (xa !== xb || ya !== yb) {
        var i4 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
        q.push({ i: i4 - 4, x: number_default(xa, xb) }, { i: i4 - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a4, b5) {
      var s4 = [], q = [];
      a4 = parse2(a4), b5 = parse2(b5);
      translate(a4.translateX, a4.translateY, b5.translateX, b5.translateY, s4, q);
      rotate(a4.rotate, b5.rotate, s4, q);
      skewX(a4.skewX, b5.skewX, s4, q);
      scale2(a4.scaleX, a4.scaleY, b5.scaleX, b5.scaleY, s4, q);
      a4 = b5 = null;
      return function(t3) {
        var i4 = -1, n5 = q.length, o4;
        while (++i4 < n5)
          s4[(o4 = q[i4]).i] = o4.x(t3);
        return s4.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/zoom.js
  init_define_process();
  init_define_process_env();
  var epsilon2 = 1e-12;
  function cosh(x3) {
    return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
  }
  function sinh(x3) {
    return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
  }
  function tanh(x3) {
    return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
  }
  var zoom_default = function zoomRho(rho, rho2, rho4) {
    function zoom(p0, p1) {
      var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i4, S3;
      if (d22 < epsilon2) {
        S3 = Math.log(w1 / w0) / rho;
        i4 = function(t3) {
          return [
            ux0 + t3 * dx,
            uy0 + t3 * dy,
            w0 * Math.exp(rho * t3 * S3)
          ];
        };
      } else {
        var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S3 = (r1 - r0) / rho;
        i4 = function(t3) {
          var s4 = t3 * S3, coshr0 = cosh(r0), u5 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s4 + r0) - sinh(r0));
          return [
            ux0 + u5 * dx,
            uy0 + u5 * dy,
            w0 * coshr0 / cosh(rho * s4 + r0)
          ];
        };
      }
      i4.duration = S3 * 1e3 * rho / Math.SQRT2;
      return i4;
    }
    zoom.rho = function(_2) {
      var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
      return zoomRho(_1, _22, _4);
    };
    return zoom;
  }(Math.SQRT2, 2, 4);

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/interrupt.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/interrupt.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/schedule.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/timer.js
  init_define_process();
  init_define_process_env();
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f5) {
    setTimeout(f5, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t3 = new Timer();
    t3.restart(callback, delay, time);
    return t3;
  }
  function timerFlush() {
    now();
    ++frame;
    var t3 = taskHead, e3;
    while (t3) {
      if ((e3 = clockNow - t3._time) >= 0)
        t3._call.call(void 0, e3);
      t3 = t3._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t0, t1 = taskHead, t22, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t22 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t22 : taskHead = t22;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/timeout.js
  init_define_process();
  init_define_process_env();
  function timeout_default(callback, delay, time) {
    var t3 = new Timer();
    delay = delay == null ? 0 : +delay;
    t3.restart((elapsed) => {
      t3.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t3;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node2, name, id4, index, group, timing) {
    var schedules = node2.__transition;
    if (!schedules)
      node2.__transition = {};
    else if (id4 in schedules)
      return;
    create(node2, id4, {
      name,
      index,
      // For context during callback.
      group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node2, id4) {
    var schedule = get2(node2, id4);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set2(node2, id4) {
    var schedule = get2(node2, id4);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get2(node2, id4) {
    var schedule = node2.__transition;
    if (!schedule || !(schedule = schedule[id4]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node2, id4, self) {
    var schedules = node2.__transition, tween;
    schedules[id4] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start2, self.delay, self.time);
      if (self.delay <= elapsed)
        start2(elapsed - self.delay);
    }
    function start2(elapsed) {
      var i4, j3, n5, o4;
      if (self.state !== SCHEDULED)
        return stop();
      for (i4 in schedules) {
        o4 = schedules[i4];
        if (o4.name !== self.name)
          continue;
        if (o4.state === STARTED)
          return timeout_default(start2);
        if (o4.state === RUNNING) {
          o4.state = ENDED;
          o4.timer.stop();
          o4.on.call("interrupt", node2, node2.__data__, o4.index, o4.group);
          delete schedules[i4];
        } else if (+i4 < id4) {
          o4.state = ENDED;
          o4.timer.stop();
          o4.on.call("cancel", node2, node2.__data__, o4.index, o4.group);
          delete schedules[i4];
        }
      }
      timeout_default(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING;
      self.on.call("start", node2, node2.__data__, self.index, self.group);
      if (self.state !== STARTING)
        return;
      self.state = STARTED;
      tween = new Array(n5 = self.tween.length);
      for (i4 = 0, j3 = -1; i4 < n5; ++i4) {
        if (o4 = self.tween[i4].value.call(node2, node2.__data__, self.index, self.group)) {
          tween[++j3] = o4;
        }
      }
      tween.length = j3 + 1;
    }
    function tick(elapsed) {
      var t3 = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i4 = -1, n5 = tween.length;
      while (++i4 < n5) {
        tween[i4].call(node2, t3);
      }
      if (self.state === ENDING) {
        self.on.call("end", node2, node2.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id4];
      for (var i4 in schedules)
        return;
      delete node2.__transition;
    }
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node2, name) {
    var schedules = node2.__transition, schedule, active, empty2 = true, i4;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i4 in schedules) {
      if ((schedule = schedules[i4]).name !== name) {
        empty2 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node2, node2.__data__, schedule.index, schedule.group);
      delete schedules[i4];
    }
    if (empty2)
      delete node2.__transition;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/transition.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/attr.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/tween.js
  init_define_process();
  init_define_process_env();
  function tweenRemove(id4, name) {
    var tween0, tween1;
    return function() {
      var schedule = set2(this, id4), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i4 = 0, n5 = tween1.length; i4 < n5; ++i4) {
          if (tween1[i4].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i4, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id4, name, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set2(this, id4), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t3 = { name, value }, i4 = 0, n5 = tween1.length; i4 < n5; ++i4) {
          if (tween1[i4].name === name) {
            tween1[i4] = t3;
            break;
          }
        }
        if (i4 === n5)
          tween1.push(t3);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value) {
    var id4 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get2(this.node(), id4).tween;
      for (var i4 = 0, n5 = tween.length, t3; i4 < n5; ++i4) {
        if ((t3 = tween[i4]).name === name) {
          return t3.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id4, name, value));
  }
  function tweenValue(transition4, name, value) {
    var id4 = transition4._id;
    transition4.each(function() {
      var schedule = set2(this, id4);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node2) {
      return get2(node2, id4).value[name];
    };
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/interpolate.js
  init_define_process();
  init_define_process_env();
  function interpolate_default(a4, b5) {
    var c4;
    return (typeof b5 === "number" ? number_default : b5 instanceof color ? rgb_default : (c4 = color(b5)) ? (b5 = c4, rgb_default) : string_default)(a4, b5);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate2, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate2, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate2, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate2, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
    };
  }
  function attr_default2(name, value) {
    var fullname = namespace_default(name), i4 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i4, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i4, value));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/attrTween.js
  init_define_process();
  init_define_process_env();
  function attrInterpolate(name, i4) {
    return function(t3) {
      this.setAttribute(name, i4.call(this, t3));
    };
  }
  function attrInterpolateNS(fullname, i4) {
    return function(t3) {
      this.setAttributeNS(fullname.space, fullname.local, i4.call(this, t3));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && attrInterpolateNS(fullname, i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name, value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && attrInterpolate(name, i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/delay.js
  init_define_process();
  init_define_process_env();
  function delayFunction(id4, value) {
    return function() {
      init(this, id4).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id4, value) {
    return value = +value, function() {
      init(this, id4).delay = value;
    };
  }
  function delay_default(value) {
    var id4 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id4, value)) : get2(this.node(), id4).delay;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/duration.js
  init_define_process();
  init_define_process_env();
  function durationFunction(id4, value) {
    return function() {
      set2(this, id4).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id4, value) {
    return value = +value, function() {
      set2(this, id4).duration = value;
    };
  }
  function duration_default(value) {
    var id4 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id4, value)) : get2(this.node(), id4).duration;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/ease.js
  init_define_process();
  init_define_process_env();
  function easeConstant(id4, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set2(this, id4).ease = value;
    };
  }
  function ease_default(value) {
    var id4 = this._id;
    return arguments.length ? this.each(easeConstant(id4, value)) : get2(this.node(), id4).ease;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/easeVarying.js
  init_define_process();
  init_define_process_env();
  function easeVarying(id4, value) {
    return function() {
      var v5 = value.apply(this, arguments);
      if (typeof v5 !== "function")
        throw new Error();
      set2(this, id4).ease = v5;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/filter.js
  init_define_process();
  init_define_process_env();
  function filter_default2(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default(match2);
    for (var groups = this._groups, m5 = groups.length, subgroups = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, subgroup = subgroups[j3] = [], node2, i4 = 0; i4 < n5; ++i4) {
        if ((node2 = group[i4]) && match2.call(node2, node2.__data__, i4, group)) {
          subgroup.push(node2);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/merge.js
  init_define_process();
  init_define_process_env();
  function merge_default2(transition4) {
    if (transition4._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition4._groups, m0 = groups0.length, m1 = groups1.length, m5 = Math.min(m0, m1), merges = new Array(m0), j3 = 0; j3 < m5; ++j3) {
      for (var group0 = groups0[j3], group1 = groups1[j3], n5 = group0.length, merge = merges[j3] = new Array(n5), node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group0[i4] || group1[i4]) {
          merge[i4] = node2;
        }
      }
    }
    for (; j3 < m0; ++j3) {
      merges[j3] = groups0[j3];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/on.js
  init_define_process();
  init_define_process_env();
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t3) {
      var i4 = t3.indexOf(".");
      if (i4 >= 0)
        t3 = t3.slice(0, i4);
      return !t3 || t3 === "start";
    });
  }
  function onFunction(id4, name, listener) {
    var on0, on1, sit = start(name) ? init : set2;
    return function() {
      var schedule = sit(this, id4), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id4 = this._id;
    return arguments.length < 2 ? get2(this.node(), id4).on.on(name) : this.each(onFunction(id4, name, listener));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/remove.js
  init_define_process();
  init_define_process_env();
  function removeFunction(id4) {
    return function() {
      var parent = this.parentNode;
      for (var i4 in this.__transition)
        if (+i4 !== id4)
          return;
      if (parent)
        parent.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/select.js
  init_define_process();
  init_define_process_env();
  function select_default3(select) {
    var name = this._name, id4 = this._id;
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m5 = groups.length, subgroups = new Array(m5), j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, subgroup = subgroups[j3] = new Array(n5), node2, subnode, i4 = 0; i4 < n5; ++i4) {
        if ((node2 = group[i4]) && (subnode = select.call(node2, node2.__data__, i4, group))) {
          if ("__data__" in node2)
            subnode.__data__ = node2.__data__;
          subgroup[i4] = subnode;
          schedule_default(subgroup[i4], name, id4, i4, subgroup, get2(node2, id4));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id4);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/selectAll.js
  init_define_process();
  init_define_process_env();
  function selectAll_default2(select) {
    var name = this._name, id4 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default(select);
    for (var groups = this._groups, m5 = groups.length, subgroups = [], parents = [], j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group[i4]) {
          for (var children2 = select.call(node2, node2.__data__, i4, group), child, inherit2 = get2(node2, id4), k2 = 0, l5 = children2.length; k2 < l5; ++k2) {
            if (child = children2[k2]) {
              schedule_default(child, name, id4, k2, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node2);
        }
      }
    }
    return new Transition(subgroups, parents, name, id4);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/selection.js
  init_define_process();
  init_define_process_env();
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/style.js
  init_define_process();
  init_define_process_env();
  function styleNull(name, interpolate2) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate2, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate2, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id4, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
    return function() {
      var schedule = set2(this, id4), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value, priority) {
    var i4 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name, styleNull(name, i4)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i4, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i4, value), priority).on("end.style." + name, null);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/styleTween.js
  init_define_process();
  init_define_process_env();
  function styleInterpolate(name, i4, priority) {
    return function(t3) {
      this.style.setProperty(name, i4.call(this, t3), priority);
    };
  }
  function styleTween(name, value, priority) {
    var t3, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t3 = (i0 = i4) && styleInterpolate(name, i4, priority);
      return t3;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/text.js
  init_define_process();
  init_define_process_env();
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/textTween.js
  init_define_process();
  init_define_process_env();
  function textInterpolate(i4) {
    return function(t3) {
      this.textContent = i4.call(this, t3);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i4 = value.apply(this, arguments);
      if (i4 !== i0)
        t0 = (i0 = i4) && textInterpolate(i4);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/transition.js
  init_define_process();
  init_define_process_env();
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m5 = groups.length, j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group[i4]) {
          var inherit2 = get2(node2, id0);
          schedule_default(node2, name, id1, i4, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/end.js
  init_define_process();
  init_define_process_env();
  function end_default() {
    var on0, on1, that = this, id4 = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end = { value: function() {
        if (--size === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set2(this, id4), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size === 0)
        resolve();
    });
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups, parents, name, id4) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id4;
  }
  function transition3(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition3.prototype = {
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };

  // node_modules/.pnpm/d3-ease@3.0.1/node_modules/d3-ease/src/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/d3-ease@3.0.1/node_modules/d3-ease/src/cubic.js
  init_define_process();
  init_define_process_env();
  function cubicInOut(t3) {
    return ((t3 *= 2) <= 1 ? t3 * t3 * t3 : (t3 -= 2) * t3 * t3 + 2) / 2;
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node2, id4) {
    var timing;
    while (!(timing = node2.__transition) || !(timing = timing[id4])) {
      if (!(node2 = node2.parentNode)) {
        throw new Error(`transition ${id4} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id4, timing;
    if (name instanceof Transition) {
      id4 = name._id, name = name._name;
    } else {
      id4 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m5 = groups.length, j3 = 0; j3 < m5; ++j3) {
      for (var group = groups[j3], n5 = group.length, node2, i4 = 0; i4 < n5; ++i4) {
        if (node2 = group[i4]) {
          schedule_default(node2, name, id4, i4, group, timing || inherit(node2, id4));
        }
      }
    }
    return new Transition(groups, this._parents, name, id4);
  }

  // node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/constant.js
  init_define_process();
  init_define_process_env();
  var constant_default4 = (x3) => () => x3;

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/event.js
  init_define_process();
  init_define_process_env();
  function ZoomEvent(type, {
    sourceEvent,
    target,
    transform: transform3,
    dispatch: dispatch2
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      transform: { value: transform3, enumerable: true, configurable: true },
      _: { value: dispatch2 }
    });
  }

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/transform.js
  init_define_process();
  init_define_process_env();
  function Transform(k2, x3, y4) {
    this.k = k2;
    this.x = x3;
    this.y = y4;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k2) {
      return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
    },
    translate: function(x3, y4) {
      return x3 === 0 & y4 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y4);
    },
    apply: function(point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y];
    },
    applyX: function(x3) {
      return x3 * this.k + this.x;
    },
    applyY: function(y4) {
      return y4 * this.k + this.y;
    },
    invert: function(location2) {
      return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
    },
    invertX: function(x3) {
      return (x3 - this.x) / this.k;
    },
    invertY: function(y4) {
      return (y4 - this.y) / this.k;
    },
    rescaleX: function(x3) {
      return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
    },
    rescaleY: function(y4) {
      return y4.copy().domain(y4.range().map(this.invertY, this).map(y4.invert, y4));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity2 = new Transform(1, 0, 0);
  transform2.prototype = Transform.prototype;
  function transform2(node2) {
    while (!node2.__zoom)
      if (!(node2 = node2.parentNode))
        return identity2;
    return node2.__zoom;
  }

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/noevent.js
  init_define_process();
  init_define_process_env();
  function nopropagation2(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/zoom.js
  function defaultFilter2(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
  }
  function defaultExtent() {
    var e3 = this;
    if (e3 instanceof SVGElement) {
      e3 = e3.ownerSVGElement || e3;
      if (e3.hasAttribute("viewBox")) {
        e3 = e3.viewBox.baseVal;
        return [[e3.x, e3.y], [e3.x + e3.width, e3.y + e3.height]];
      }
      return [[0, 0], [e3.width.baseVal.value, e3.height.baseVal.value]];
    }
    return [[0, 0], [e3.clientWidth, e3.clientHeight]];
  }
  function defaultTransform() {
    return this.__zoom || identity2;
  }
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
  }
  function defaultTouchable2() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(transform3, extent, translateExtent) {
    var dx0 = transform3.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform3.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform3.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform3.invertY(extent[1][1]) - translateExtent[1][1];
    return transform3.translate(
      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
    );
  }
  function zoom_default2() {
    var filter3 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate2 = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection2) {
      selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform3, point, event) {
      var selection2 = collection.selection ? collection.selection() : collection;
      selection2.property("__zoom", defaultTransform);
      if (collection !== selection2) {
        schedule(collection, transform3, point, event);
      } else {
        selection2.interrupt().each(function() {
          gesture(this, arguments).event(event).start().zoom(null, typeof transform3 === "function" ? transform3.apply(this, arguments) : transform3).end();
        });
      }
    };
    zoom.scaleBy = function(selection2, k2, p4, event) {
      zoom.scaleTo(selection2, function() {
        var k0 = this.__zoom.k, k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
        return k0 * k1;
      }, p4, event);
    };
    zoom.scaleTo = function(selection2, k2, p4, event) {
      zoom.transform(selection2, function() {
        var e3 = extent.apply(this, arguments), t0 = this.__zoom, p0 = p4 == null ? centroid(e3) : typeof p4 === "function" ? p4.apply(this, arguments) : p4, p1 = t0.invert(p0), k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
        return constrain(translate(scale2(t0, k1), p0, p1), e3, translateExtent);
      }, p4, event);
    };
    zoom.translateBy = function(selection2, x3, y4, event) {
      zoom.transform(selection2, function() {
        return constrain(this.__zoom.translate(
          typeof x3 === "function" ? x3.apply(this, arguments) : x3,
          typeof y4 === "function" ? y4.apply(this, arguments) : y4
        ), extent.apply(this, arguments), translateExtent);
      }, null, event);
    };
    zoom.translateTo = function(selection2, x3, y4, p4, event) {
      zoom.transform(selection2, function() {
        var e3 = extent.apply(this, arguments), t3 = this.__zoom, p0 = p4 == null ? centroid(e3) : typeof p4 === "function" ? p4.apply(this, arguments) : p4;
        return constrain(identity2.translate(p0[0], p0[1]).scale(t3.k).translate(
          typeof x3 === "function" ? -x3.apply(this, arguments) : -x3,
          typeof y4 === "function" ? -y4.apply(this, arguments) : -y4
        ), e3, translateExtent);
      }, p4, event);
    };
    function scale2(transform3, k2) {
      k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k2));
      return k2 === transform3.k ? transform3 : new Transform(k2, transform3.x, transform3.y);
    }
    function translate(transform3, p0, p1) {
      var x3 = p0[0] - p1[0] * transform3.k, y4 = p0[1] - p1[1] * transform3.k;
      return x3 === transform3.x && y4 === transform3.y ? transform3 : new Transform(transform3.k, x3, y4);
    }
    function centroid(extent2) {
      return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
    }
    function schedule(transition4, transform3, point, event) {
      transition4.on("start.zoom", function() {
        gesture(this, arguments).event(event).start();
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).event(event).end();
      }).tween("zoom", function() {
        var that = this, args = arguments, g4 = gesture(that, args).event(event), e3 = extent.apply(that, args), p4 = point == null ? centroid(e3) : typeof point === "function" ? point.apply(that, args) : point, w4 = Math.max(e3[1][0] - e3[0][0], e3[1][1] - e3[0][1]), a4 = that.__zoom, b5 = typeof transform3 === "function" ? transform3.apply(that, args) : transform3, i4 = interpolate2(a4.invert(p4).concat(w4 / a4.k), b5.invert(p4).concat(w4 / b5.k));
        return function(t3) {
          if (t3 === 1)
            t3 = b5;
          else {
            var l5 = i4(t3), k2 = w4 / l5[2];
            t3 = new Transform(k2, p4[0] - l5[0] * k2, p4[1] - l5[1] * k2);
          }
          g4.zoom(null, t3);
        };
      });
    }
    function gesture(that, args, clean) {
      return !clean && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.active = 0;
      this.sourceEvent = null;
      this.extent = extent.apply(that, args);
      this.taps = 0;
    }
    Gesture.prototype = {
      event: function(event) {
        if (event)
          this.sourceEvent = event;
        return this;
      },
      start: function() {
        if (++this.active === 1) {
          this.that.__zooming = this;
          this.emit("start");
        }
        return this;
      },
      zoom: function(key, transform3) {
        if (this.mouse && key !== "mouse")
          this.mouse[1] = transform3.invert(this.mouse[0]);
        if (this.touch0 && key !== "touch")
          this.touch0[1] = transform3.invert(this.touch0[0]);
        if (this.touch1 && key !== "touch")
          this.touch1[1] = transform3.invert(this.touch1[0]);
        this.that.__zoom = transform3;
        this.emit("zoom");
        return this;
      },
      end: function() {
        if (--this.active === 0) {
          delete this.that.__zooming;
          this.emit("end");
        }
        return this;
      },
      emit: function(type) {
        var d4 = select_default2(this.that).datum();
        listeners.call(
          type,
          this.that,
          new ZoomEvent(type, {
            sourceEvent: this.sourceEvent,
            target: zoom,
            type,
            transform: this.that.__zoom,
            dispatch: listeners
          }),
          d4
        );
      }
    };
    function wheeled(event, ...args) {
      if (!filter3.apply(this, arguments))
        return;
      var g4 = gesture(this, args).event(event), t3 = this.__zoom, k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t3.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p4 = pointer_default(event);
      if (g4.wheel) {
        if (g4.mouse[0][0] !== p4[0] || g4.mouse[0][1] !== p4[1]) {
          g4.mouse[1] = t3.invert(g4.mouse[0] = p4);
        }
        clearTimeout(g4.wheel);
      } else if (t3.k === k2)
        return;
      else {
        g4.mouse = [p4, t3.invert(p4)];
        interrupt_default(this);
        g4.start();
      }
      noevent_default2(event);
      g4.wheel = setTimeout(wheelidled, wheelDelay);
      g4.zoom("mouse", constrain(translate(scale2(t3, k2), g4.mouse[0], g4.mouse[1]), g4.extent, translateExtent));
      function wheelidled() {
        g4.wheel = null;
        g4.end();
      }
    }
    function mousedowned(event, ...args) {
      if (touchending || !filter3.apply(this, arguments))
        return;
      var currentTarget = event.currentTarget, g4 = gesture(this, args, true).event(event), v5 = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p4 = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
      nodrag_default(event.view);
      nopropagation2(event);
      g4.mouse = [p4, this.__zoom.invert(p4)];
      interrupt_default(this);
      g4.start();
      function mousemoved(event2) {
        noevent_default2(event2);
        if (!g4.moved) {
          var dx = event2.clientX - x0, dy = event2.clientY - y0;
          g4.moved = dx * dx + dy * dy > clickDistance2;
        }
        g4.event(event2).zoom("mouse", constrain(translate(g4.that.__zoom, g4.mouse[0] = pointer_default(event2, currentTarget), g4.mouse[1]), g4.extent, translateExtent));
      }
      function mouseupped(event2) {
        v5.on("mousemove.zoom mouseup.zoom", null);
        yesdrag(event2.view, g4.moved);
        noevent_default2(event2);
        g4.event(event2).end();
      }
    }
    function dblclicked(event, ...args) {
      if (!filter3.apply(this, arguments))
        return;
      var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale2(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
      noevent_default2(event);
      if (duration > 0)
        select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
      else
        select_default2(this).call(zoom.transform, t1, p0, event);
    }
    function touchstarted(event, ...args) {
      if (!filter3.apply(this, arguments))
        return;
      var touches = event.touches, n5 = touches.length, g4 = gesture(this, args, event.changedTouches.length === n5).event(event), started, i4, t3, p4;
      nopropagation2(event);
      for (i4 = 0; i4 < n5; ++i4) {
        t3 = touches[i4], p4 = pointer_default(t3, this);
        p4 = [p4, this.__zoom.invert(p4), t3.identifier];
        if (!g4.touch0)
          g4.touch0 = p4, started = true, g4.taps = 1 + !!touchstarting;
        else if (!g4.touch1 && g4.touch0[2] !== p4[2])
          g4.touch1 = p4, g4.taps = 0;
      }
      if (touchstarting)
        touchstarting = clearTimeout(touchstarting);
      if (started) {
        if (g4.taps < 2)
          touchfirst = p4[0], touchstarting = setTimeout(function() {
            touchstarting = null;
          }, touchDelay);
        interrupt_default(this);
        g4.start();
      }
    }
    function touchmoved(event, ...args) {
      if (!this.__zooming)
        return;
      var g4 = gesture(this, args).event(event), touches = event.changedTouches, n5 = touches.length, i4, t3, p4, l5;
      noevent_default2(event);
      for (i4 = 0; i4 < n5; ++i4) {
        t3 = touches[i4], p4 = pointer_default(t3, this);
        if (g4.touch0 && g4.touch0[2] === t3.identifier)
          g4.touch0[0] = p4;
        else if (g4.touch1 && g4.touch1[2] === t3.identifier)
          g4.touch1[0] = p4;
      }
      t3 = g4.that.__zoom;
      if (g4.touch1) {
        var p0 = g4.touch0[0], l0 = g4.touch0[1], p1 = g4.touch1[0], l1 = g4.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t3 = scale2(t3, Math.sqrt(dp / dl));
        p4 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
        l5 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      } else if (g4.touch0)
        p4 = g4.touch0[0], l5 = g4.touch0[1];
      else
        return;
      g4.zoom("touch", constrain(translate(t3, p4, l5), g4.extent, translateExtent));
    }
    function touchended(event, ...args) {
      if (!this.__zooming)
        return;
      var g4 = gesture(this, args).event(event), touches = event.changedTouches, n5 = touches.length, i4, t3;
      nopropagation2(event);
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, touchDelay);
      for (i4 = 0; i4 < n5; ++i4) {
        t3 = touches[i4];
        if (g4.touch0 && g4.touch0[2] === t3.identifier)
          delete g4.touch0;
        else if (g4.touch1 && g4.touch1[2] === t3.identifier)
          delete g4.touch1;
      }
      if (g4.touch1 && !g4.touch0)
        g4.touch0 = g4.touch1, delete g4.touch1;
      if (g4.touch0)
        g4.touch0[1] = this.__zoom.invert(g4.touch0[0]);
      else {
        g4.end();
        if (g4.taps === 2) {
          t3 = pointer_default(t3, this);
          if (Math.hypot(touchfirst[0] - t3[0], touchfirst[1] - t3[1]) < tapDistance) {
            var p4 = select_default2(this).on("dblclick.zoom");
            if (p4)
              p4.apply(this, arguments);
          }
        }
      }
    }
    zoom.wheelDelta = function(_2) {
      return arguments.length ? (wheelDelta = typeof _2 === "function" ? _2 : constant_default4(+_2), zoom) : wheelDelta;
    };
    zoom.filter = function(_2) {
      return arguments.length ? (filter3 = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : filter3;
    };
    zoom.touchable = function(_2) {
      return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : touchable;
    };
    zoom.extent = function(_2) {
      return arguments.length ? (extent = typeof _2 === "function" ? _2 : constant_default4([[+_2[0][0], +_2[0][1]], [+_2[1][0], +_2[1][1]]]), zoom) : extent;
    };
    zoom.scaleExtent = function(_2) {
      return arguments.length ? (scaleExtent[0] = +_2[0], scaleExtent[1] = +_2[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    };
    zoom.translateExtent = function(_2) {
      return arguments.length ? (translateExtent[0][0] = +_2[0][0], translateExtent[1][0] = +_2[1][0], translateExtent[0][1] = +_2[0][1], translateExtent[1][1] = +_2[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    };
    zoom.constrain = function(_2) {
      return arguments.length ? (constrain = _2, zoom) : constrain;
    };
    zoom.duration = function(_2) {
      return arguments.length ? (duration = +_2, zoom) : duration;
    };
    zoom.interpolate = function(_2) {
      return arguments.length ? (interpolate2 = _2, zoom) : interpolate2;
    };
    zoom.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? zoom : value;
    };
    zoom.clickDistance = function(_2) {
      return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, zoom) : Math.sqrt(clickDistance2);
    };
    zoom.tapDistance = function(_2) {
      return arguments.length ? (tapDistance = +_2, zoom) : tapDistance;
    };
    return zoom;
  }

  // node_modules/.pnpm/@reactflow+core@11.7.0_react-dom@18.2.0_react@18.2.0/node_modules/@reactflow/core/dist/esm/index.js
  var import_react_dom = __toESM(require_react_dom());
  var StoreContext = (0, import_react33.createContext)(null);
  var Provider$1 = StoreContext.Provider;
  var errorMessages = {
    error001: () => "[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001",
    error002: () => "It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.",
    error003: (nodeType) => `Node type "${nodeType}" not found. Using fallback type "default".`,
    error004: () => "The React Flow parent container needs a width and a height to render the graph.",
    error005: () => "Only child nodes can use a parent extent.",
    error006: () => "Can't create edge. An edge needs a source and a target.",
    error007: (id4) => `The old edge with id=${id4} does not exist.`,
    error009: (type) => `Marker type "${type}" doesn't exist.`,
    error008: (sourceHandle, edge) => `Couldn't create edge for ${!sourceHandle ? "source" : "target"} handle id: "${!sourceHandle ? edge.sourceHandle : edge.targetHandle}", edge id: ${edge.id}.`,
    error010: () => "Handle: No node id found. Make sure to only use a Handle inside a custom Node.",
    error011: (edgeType) => `Edge type "${edgeType}" not found. Using fallback type "default".`
  };
  var zustandErrorMessage = errorMessages["error001"]();
  function useStore2(selector2, equalityFn) {
    const store = (0, import_react33.useContext)(StoreContext);
    if (store === null) {
      throw new Error(zustandErrorMessage);
    }
    return useStore(store, selector2, equalityFn);
  }
  var useStoreApi = () => {
    const store = (0, import_react33.useContext)(StoreContext);
    if (store === null) {
      throw new Error(zustandErrorMessage);
    }
    return (0, import_react33.useMemo)(() => ({
      getState: store.getState,
      setState: store.setState,
      subscribe: store.subscribe,
      destroy: store.destroy
    }), [store]);
  };
  var selector$g = (s4) => s4.userSelectionActive ? "none" : "all";
  function Panel({ position: position2, children: children2, className, style: style2, ...rest }) {
    const pointerEvents = useStore2(selector$g);
    const positionClasses = `${position2}`.split("-");
    return (0, import_jsx_runtime.jsx)("div", { className: cc(["react-flow__panel", className, ...positionClasses]), style: { ...style2, pointerEvents }, ...rest, children: children2 });
  }
  function Attribution({ proOptions, position: position2 = "bottom-right" }) {
    if (proOptions?.hideAttribution) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)(Panel, { position: position2, className: "react-flow__attribution", "data-message": "Please only hide this attribution when you are subscribed to React Flow Pro: https://pro.reactflow.dev", children: (0, import_jsx_runtime.jsx)("a", { href: "https://reactflow.dev", target: "_blank", rel: "noopener noreferrer", "aria-label": "React Flow attribution", children: "React Flow" }) });
  }
  var EdgeText = ({ x: x3, y: y4, label, labelStyle = {}, labelShowBg = true, labelBgStyle = {}, labelBgPadding = [2, 4], labelBgBorderRadius = 2, children: children2, className, ...rest }) => {
    const edgeRef = (0, import_react33.useRef)(null);
    const [edgeTextBbox, setEdgeTextBbox] = (0, import_react33.useState)({ x: 0, y: 0, width: 0, height: 0 });
    const edgeTextClasses = cc(["react-flow__edge-textwrapper", className]);
    (0, import_react33.useEffect)(() => {
      if (edgeRef.current) {
        const textBbox = edgeRef.current.getBBox();
        setEdgeTextBbox({
          x: textBbox.x,
          y: textBbox.y,
          width: textBbox.width,
          height: textBbox.height
        });
      }
    }, [label]);
    if (typeof label === "undefined" || !label) {
      return null;
    }
    return (0, import_jsx_runtime.jsxs)("g", { transform: `translate(${x3 - edgeTextBbox.width / 2} ${y4 - edgeTextBbox.height / 2})`, className: edgeTextClasses, visibility: edgeTextBbox.width ? "visible" : "hidden", ...rest, children: [labelShowBg && (0, import_jsx_runtime.jsx)("rect", { width: edgeTextBbox.width + 2 * labelBgPadding[0], x: -labelBgPadding[0], y: -labelBgPadding[1], height: edgeTextBbox.height + 2 * labelBgPadding[1], className: "react-flow__edge-textbg", style: labelBgStyle, rx: labelBgBorderRadius, ry: labelBgBorderRadius }), (0, import_jsx_runtime.jsx)("text", { className: "react-flow__edge-text", y: edgeTextBbox.height / 2, dy: "0.3em", ref: edgeRef, style: labelStyle, children: label }), children2] });
  };
  var EdgeText$1 = (0, import_react33.memo)(EdgeText);
  var getDimensions = (node2) => ({
    width: node2.offsetWidth,
    height: node2.offsetHeight
  });
  var clamp2 = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);
  var clampPosition = (position2 = { x: 0, y: 0 }, extent) => ({
    x: clamp2(position2.x, extent[0][0], extent[1][0]),
    y: clamp2(position2.y, extent[0][1], extent[1][1])
  });
  var calcAutoPanVelocity = (value, min, max) => {
    if (value < min) {
      return clamp2(Math.abs(value - min), 1, 50) / 50;
    } else if (value > max) {
      return -clamp2(Math.abs(value - max), 1, 50) / 50;
    }
    return 0;
  };
  var calcAutoPan = (pos, bounds) => {
    const xMovement = calcAutoPanVelocity(pos.x, 35, bounds.width - 35) * 20;
    const yMovement = calcAutoPanVelocity(pos.y, 35, bounds.height - 35) * 20;
    return [xMovement, yMovement];
  };
  var getHostForElement = (element) => element.getRootNode?.() || window?.document;
  var getBoundsOfBoxes = (box1, box2) => ({
    x: Math.min(box1.x, box2.x),
    y: Math.min(box1.y, box2.y),
    x2: Math.max(box1.x2, box2.x2),
    y2: Math.max(box1.y2, box2.y2)
  });
  var rectToBox = ({ x: x3, y: y4, width, height }) => ({
    x: x3,
    y: y4,
    x2: x3 + width,
    y2: y4 + height
  });
  var boxToRect = ({ x: x3, y: y4, x2: x22, y2: y22 }) => ({
    x: x3,
    y: y4,
    width: x22 - x3,
    height: y22 - y4
  });
  var nodeToRect = (node2) => ({
    ...node2.positionAbsolute || { x: 0, y: 0 },
    width: node2.width || 0,
    height: node2.height || 0
  });
  var getOverlappingArea = (rectA, rectB) => {
    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));
    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));
    return Math.ceil(xOverlap * yOverlap);
  };
  var isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);
  var isNumeric = (n5) => !isNaN(n5) && isFinite(n5);
  var internalsSymbol = Symbol.for("internals");
  var elementSelectionKeys = ["Enter", " ", "Escape"];
  var devWarn = (id4, message) => {
    if (true) {
      console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id4}`);
    }
  };
  var isReactKeyboardEvent = (event) => "nativeEvent" in event;
  function isInputDOMNode(event) {
    const kbEvent = isReactKeyboardEvent(event) ? event.nativeEvent : event;
    const target = kbEvent.composedPath?.()?.[0] || event.target;
    const isInput = ["INPUT", "SELECT", "TEXTAREA"].includes(target?.nodeName) || target?.hasAttribute("contenteditable");
    return isInput || !!target?.closest(".nokey");
  }
  var isMouseEvent = (event) => "clientX" in event;
  var getEventPosition = (event, bounds) => {
    const isMouseTriggered = isMouseEvent(event);
    const evtX = isMouseTriggered ? event.clientX : event.touches?.[0].clientX;
    const evtY = isMouseTriggered ? event.clientY : event.touches?.[0].clientY;
    return {
      x: evtX - (bounds?.left ?? 0),
      y: evtY - (bounds?.top ?? 0)
    };
  };
  var BaseEdge = ({ path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth = 20 }) => {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)("path", { style: style2, d: path, fill: "none", className: "react-flow__edge-path", markerEnd, markerStart }), interactionWidth && (0, import_jsx_runtime.jsx)("path", { d: path, fill: "none", strokeOpacity: 0, strokeWidth: interactionWidth, className: "react-flow__edge-interaction" }), label && isNumeric(labelX) && isNumeric(labelY) ? (0, import_jsx_runtime.jsx)(EdgeText$1, { x: labelX, y: labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius }) : null] });
  };
  BaseEdge.displayName = "BaseEdge";
  function getMouseHandler$1(id4, getState, handler) {
    return handler === void 0 ? handler : (event) => {
      const edge = getState().edges.find((e3) => e3.id === id4);
      if (edge) {
        handler(event, { ...edge });
      }
    };
  }
  function getEdgeCenter({ sourceX, sourceY, targetX, targetY }) {
    const xOffset = Math.abs(targetX - sourceX) / 2;
    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;
    const yOffset = Math.abs(targetY - sourceY) / 2;
    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;
    return [centerX, centerY, xOffset, yOffset];
  }
  function getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY }) {
    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;
    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;
    const offsetX = Math.abs(centerX - sourceX);
    const offsetY = Math.abs(centerY - sourceY);
    return [centerX, centerY, offsetX, offsetY];
  }
  var ConnectionMode;
  (function(ConnectionMode2) {
    ConnectionMode2["Strict"] = "strict";
    ConnectionMode2["Loose"] = "loose";
  })(ConnectionMode || (ConnectionMode = {}));
  var PanOnScrollMode;
  (function(PanOnScrollMode2) {
    PanOnScrollMode2["Free"] = "free";
    PanOnScrollMode2["Vertical"] = "vertical";
    PanOnScrollMode2["Horizontal"] = "horizontal";
  })(PanOnScrollMode || (PanOnScrollMode = {}));
  var SelectionMode;
  (function(SelectionMode2) {
    SelectionMode2["Partial"] = "partial";
    SelectionMode2["Full"] = "full";
  })(SelectionMode || (SelectionMode = {}));
  var ConnectionLineType;
  (function(ConnectionLineType2) {
    ConnectionLineType2["Bezier"] = "default";
    ConnectionLineType2["Straight"] = "straight";
    ConnectionLineType2["Step"] = "step";
    ConnectionLineType2["SmoothStep"] = "smoothstep";
    ConnectionLineType2["SimpleBezier"] = "simplebezier";
  })(ConnectionLineType || (ConnectionLineType = {}));
  var MarkerType;
  (function(MarkerType2) {
    MarkerType2["Arrow"] = "arrow";
    MarkerType2["ArrowClosed"] = "arrowclosed";
  })(MarkerType || (MarkerType = {}));
  var Position;
  (function(Position2) {
    Position2["Left"] = "left";
    Position2["Top"] = "top";
    Position2["Right"] = "right";
    Position2["Bottom"] = "bottom";
  })(Position || (Position = {}));
  function getControl({ pos, x1, y1, x2: x22, y2: y22 }) {
    if (pos === Position.Left || pos === Position.Right) {
      return [0.5 * (x1 + x22), y1];
    }
    return [x1, 0.5 * (y1 + y22)];
  }
  function getSimpleBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top }) {
    const [sourceControlX, sourceControlY] = getControl({
      pos: sourcePosition,
      x1: sourceX,
      y1: sourceY,
      x2: targetX,
      y2: targetY
    });
    const [targetControlX, targetControlY] = getControl({
      pos: targetPosition,
      x1: targetX,
      y1: targetY,
      x2: sourceX,
      y2: sourceY
    });
    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY,
      sourceControlX,
      sourceControlY,
      targetControlX,
      targetControlY
    });
    return [
      `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,
      labelX,
      labelY,
      offsetX,
      offsetY
    ];
  }
  var SimpleBezierEdge = (0, import_react33.memo)(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth }) => {
    const [path, labelX, labelY] = getSimpleBezierPath({
      sourceX,
      sourceY,
      sourcePosition,
      targetX,
      targetY,
      targetPosition
    });
    return (0, import_jsx_runtime.jsx)(BaseEdge, { path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth });
  });
  SimpleBezierEdge.displayName = "SimpleBezierEdge";
  var handleDirections = {
    [Position.Left]: { x: -1, y: 0 },
    [Position.Right]: { x: 1, y: 0 },
    [Position.Top]: { x: 0, y: -1 },
    [Position.Bottom]: { x: 0, y: 1 }
  };
  var getDirection = ({ source, sourcePosition = Position.Bottom, target }) => {
    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {
      return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };
    }
    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };
  };
  var distance = (a4, b5) => Math.sqrt(Math.pow(b5.x - a4.x, 2) + Math.pow(b5.y - a4.y, 2));
  function getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset: offset2 }) {
    const sourceDir = handleDirections[sourcePosition];
    const targetDir = handleDirections[targetPosition];
    const sourceGapped = { x: source.x + sourceDir.x * offset2, y: source.y + sourceDir.y * offset2 };
    const targetGapped = { x: target.x + targetDir.x * offset2, y: target.y + targetDir.y * offset2 };
    const dir = getDirection({
      source: sourceGapped,
      sourcePosition,
      target: targetGapped
    });
    const dirAccessor = dir.x !== 0 ? "x" : "y";
    const currDir = dir[dirAccessor];
    let points = [];
    let centerX, centerY;
    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({
      sourceX: source.x,
      sourceY: source.y,
      targetX: target.x,
      targetY: target.y
    });
    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {
      centerX = center.x || defaultCenterX;
      centerY = center.y || defaultCenterY;
      const verticalSplit = [
        { x: centerX, y: sourceGapped.y },
        { x: centerX, y: targetGapped.y }
      ];
      const horizontalSplit = [
        { x: sourceGapped.x, y: centerY },
        { x: targetGapped.x, y: centerY }
      ];
      if (sourceDir[dirAccessor] === currDir) {
        points = dirAccessor === "x" ? verticalSplit : horizontalSplit;
      } else {
        points = dirAccessor === "x" ? horizontalSplit : verticalSplit;
      }
    } else {
      const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];
      const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];
      if (dirAccessor === "x") {
        points = sourceDir.x === currDir ? targetSource : sourceTarget;
      } else {
        points = sourceDir.y === currDir ? sourceTarget : targetSource;
      }
      if (sourcePosition !== targetPosition) {
        const dirAccessorOpposite = dirAccessor === "x" ? "y" : "x";
        const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];
        const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];
        const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];
        const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);
        if (flipSourceTarget) {
          points = dirAccessor === "x" ? sourceTarget : targetSource;
        }
      }
      centerX = points[0].x;
      centerY = points[0].y;
    }
    const pathPoints = [source, sourceGapped, ...points, targetGapped, target];
    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];
  }
  function getBend(a4, b5, c4, size) {
    const bendSize = Math.min(distance(a4, b5) / 2, distance(b5, c4) / 2, size);
    const { x: x3, y: y4 } = b5;
    if (a4.x === x3 && x3 === c4.x || a4.y === y4 && y4 === c4.y) {
      return `L${x3} ${y4}`;
    }
    if (a4.y === y4) {
      const xDir2 = a4.x < c4.x ? -1 : 1;
      const yDir2 = a4.y < c4.y ? 1 : -1;
      return `L ${x3 + bendSize * xDir2},${y4}Q ${x3},${y4} ${x3},${y4 + bendSize * yDir2}`;
    }
    const xDir = a4.x < c4.x ? 1 : -1;
    const yDir = a4.y < c4.y ? -1 : 1;
    return `L ${x3},${y4 + bendSize * yDir}Q ${x3},${y4} ${x3 + bendSize * xDir},${y4}`;
  }
  function getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius: borderRadius4 = 5, centerX, centerY, offset: offset2 = 20 }) {
    const [points, labelX, labelY, offsetX, offsetY] = getPoints({
      source: { x: sourceX, y: sourceY },
      sourcePosition,
      target: { x: targetX, y: targetY },
      targetPosition,
      center: { x: centerX, y: centerY },
      offset: offset2
    });
    const path = points.reduce((res, p4, i4) => {
      let segment = "";
      if (i4 > 0 && i4 < points.length - 1) {
        segment = getBend(points[i4 - 1], p4, points[i4 + 1], borderRadius4);
      } else {
        segment = `${i4 === 0 ? "M" : "L"}${p4.x} ${p4.y}`;
      }
      res += segment;
      return res;
    }, "");
    return [path, labelX, labelY, offsetX, offsetY];
  }
  var SmoothStepEdge = (0, import_react33.memo)(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, sourcePosition = Position.Bottom, targetPosition = Position.Top, markerEnd, markerStart, pathOptions, interactionWidth }) => {
    const [path, labelX, labelY] = getSmoothStepPath({
      sourceX,
      sourceY,
      sourcePosition,
      targetX,
      targetY,
      targetPosition,
      borderRadius: pathOptions?.borderRadius,
      offset: pathOptions?.offset
    });
    return (0, import_jsx_runtime.jsx)(BaseEdge, { path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth });
  });
  SmoothStepEdge.displayName = "SmoothStepEdge";
  var StepEdge = (0, import_react33.memo)((props) => (0, import_jsx_runtime.jsx)(SmoothStepEdge, { ...props, pathOptions: (0, import_react33.useMemo)(() => ({ borderRadius: 0, offset: props.pathOptions?.offset }), [props.pathOptions?.offset]) }));
  StepEdge.displayName = "StepEdge";
  function getStraightPath({ sourceX, sourceY, targetX, targetY }) {
    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY
    });
    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];
  }
  var StraightEdge = (0, import_react33.memo)(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth }) => {
    const [path, labelX, labelY] = getStraightPath({ sourceX, sourceY, targetX, targetY });
    return (0, import_jsx_runtime.jsx)(BaseEdge, { path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth });
  });
  StraightEdge.displayName = "StraightEdge";
  function calculateControlOffset(distance2, curvature) {
    if (distance2 >= 0) {
      return 0.5 * distance2;
    }
    return curvature * 25 * Math.sqrt(-distance2);
  }
  function getControlWithCurvature({ pos, x1, y1, x2: x22, y2: y22, c: c4 }) {
    switch (pos) {
      case Position.Left:
        return [x1 - calculateControlOffset(x1 - x22, c4), y1];
      case Position.Right:
        return [x1 + calculateControlOffset(x22 - x1, c4), y1];
      case Position.Top:
        return [x1, y1 - calculateControlOffset(y1 - y22, c4)];
      case Position.Bottom:
        return [x1, y1 + calculateControlOffset(y22 - y1, c4)];
    }
  }
  function getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25 }) {
    const [sourceControlX, sourceControlY] = getControlWithCurvature({
      pos: sourcePosition,
      x1: sourceX,
      y1: sourceY,
      x2: targetX,
      y2: targetY,
      c: curvature
    });
    const [targetControlX, targetControlY] = getControlWithCurvature({
      pos: targetPosition,
      x1: targetX,
      y1: targetY,
      x2: sourceX,
      y2: sourceY,
      c: curvature
    });
    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY,
      sourceControlX,
      sourceControlY,
      targetControlX,
      targetControlY
    });
    return [
      `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,
      labelX,
      labelY,
      offsetX,
      offsetY
    ];
  }
  var BezierEdge = (0, import_react33.memo)(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, pathOptions, interactionWidth }) => {
    const [path, labelX, labelY] = getBezierPath({
      sourceX,
      sourceY,
      sourcePosition,
      targetX,
      targetY,
      targetPosition,
      curvature: pathOptions?.curvature
    });
    return (0, import_jsx_runtime.jsx)(BaseEdge, { path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, markerEnd, markerStart, interactionWidth });
  });
  BezierEdge.displayName = "BezierEdge";
  var NodeIdContext = (0, import_react33.createContext)(null);
  var Provider2 = NodeIdContext.Provider;
  NodeIdContext.Consumer;
  var useNodeId = () => {
    const nodeId = (0, import_react33.useContext)(NodeIdContext);
    return nodeId;
  };
  var isEdge = (element) => "id" in element && "source" in element && "target" in element;
  var getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `reactflow__edge-${source}${sourceHandle || ""}-${target}${targetHandle || ""}`;
  var getMarkerId = (marker, rfId) => {
    if (typeof marker === "undefined") {
      return "";
    }
    if (typeof marker === "string") {
      return marker;
    }
    const idPrefix = rfId ? `${rfId}__` : "";
    return `${idPrefix}${Object.keys(marker).sort().map((key) => `${key}=${marker[key]}`).join("&")}`;
  };
  var connectionExists = (edge, edges) => {
    return edges.some((el) => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));
  };
  var addEdge = (edgeParams, edges) => {
    if (!edgeParams.source || !edgeParams.target) {
      devWarn("006", errorMessages["error006"]());
      return edges;
    }
    let edge;
    if (isEdge(edgeParams)) {
      edge = { ...edgeParams };
    } else {
      edge = {
        ...edgeParams,
        id: getEdgeId(edgeParams)
      };
    }
    if (connectionExists(edge, edges)) {
      return edges;
    }
    return edges.concat(edge);
  };
  var pointToRendererPoint = ({ x: x3, y: y4 }, [tx, ty, tScale], snapToGrid, [snapX, snapY]) => {
    const position2 = {
      x: (x3 - tx) / tScale,
      y: (y4 - ty) / tScale
    };
    if (snapToGrid) {
      return {
        x: snapX * Math.round(position2.x / snapX),
        y: snapY * Math.round(position2.y / snapY)
      };
    }
    return position2;
  };
  var rendererPointToPoint = ({ x: x3, y: y4 }, [tx, ty, tScale]) => {
    return {
      x: x3 * tScale + tx,
      y: y4 * tScale + ty
    };
  };
  var getNodePositionWithOrigin = (node2, nodeOrigin = [0, 0]) => {
    if (!node2) {
      return {
        x: 0,
        y: 0,
        positionAbsolute: {
          x: 0,
          y: 0
        }
      };
    }
    const offsetX = (node2.width ?? 0) * nodeOrigin[0];
    const offsetY = (node2.height ?? 0) * nodeOrigin[1];
    const position2 = {
      x: node2.position.x - offsetX,
      y: node2.position.y - offsetY
    };
    return {
      ...position2,
      positionAbsolute: node2.positionAbsolute ? {
        x: node2.positionAbsolute.x - offsetX,
        y: node2.positionAbsolute.y - offsetY
      } : position2
    };
  };
  var getRectOfNodes = (nodes, nodeOrigin = [0, 0]) => {
    if (nodes.length === 0) {
      return { x: 0, y: 0, width: 0, height: 0 };
    }
    const box = nodes.reduce((currBox, node2) => {
      const { x: x3, y: y4 } = getNodePositionWithOrigin(node2, nodeOrigin).positionAbsolute;
      return getBoundsOfBoxes(currBox, rectToBox({
        x: x3,
        y: y4,
        width: node2.width || 0,
        height: node2.height || 0
      }));
    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });
    return boxToRect(box);
  };
  var getNodesInside = (nodeInternals, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, excludeNonSelectableNodes = false, nodeOrigin = [0, 0]) => {
    const paneRect = {
      x: (rect.x - tx) / tScale,
      y: (rect.y - ty) / tScale,
      width: rect.width / tScale,
      height: rect.height / tScale
    };
    const visibleNodes = [];
    nodeInternals.forEach((node2) => {
      const { width, height, selectable = true, hidden = false } = node2;
      if (excludeNonSelectableNodes && !selectable || hidden) {
        return false;
      }
      const { positionAbsolute } = getNodePositionWithOrigin(node2, nodeOrigin);
      const nodeRect = {
        x: positionAbsolute.x,
        y: positionAbsolute.y,
        width: width || 0,
        height: height || 0
      };
      const overlappingArea = getOverlappingArea(paneRect, nodeRect);
      const notInitialized = typeof width === "undefined" || typeof height === "undefined" || width === null || height === null;
      const partiallyVisible = partially && overlappingArea > 0;
      const area = (width || 0) * (height || 0);
      const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;
      if (isVisible || node2.dragging) {
        visibleNodes.push(node2);
      }
    });
    return visibleNodes;
  };
  var getConnectedEdges = (nodes, edges) => {
    const nodeIds = nodes.map((node2) => node2.id);
    return edges.filter((edge) => nodeIds.includes(edge.source) || nodeIds.includes(edge.target));
  };
  var getTransformForBounds = (bounds, width, height, minZoom, maxZoom, padding3 = 0.1) => {
    const xZoom = width / (bounds.width * (1 + padding3));
    const yZoom = height / (bounds.height * (1 + padding3));
    const zoom = Math.min(xZoom, yZoom);
    const clampedZoom = clamp2(zoom, minZoom, maxZoom);
    const boundsCenterX = bounds.x + bounds.width / 2;
    const boundsCenterY = bounds.y + bounds.height / 2;
    const x3 = width / 2 - boundsCenterX * clampedZoom;
    const y4 = height / 2 - boundsCenterY * clampedZoom;
    return [x3, y4, clampedZoom];
  };
  var getD3Transition = (selection2, duration = 0) => {
    return selection2.transition().duration(duration);
  };
  function getHandles(node2, handleBounds, type, currentHandle) {
    return (handleBounds[type] || []).reduce((res, h5) => {
      if (`${node2.id}-${h5.id}-${type}` !== currentHandle) {
        res.push({
          id: h5.id || null,
          type,
          nodeId: node2.id,
          x: (node2.positionAbsolute?.x ?? 0) + h5.x + h5.width / 2,
          y: (node2.positionAbsolute?.y ?? 0) + h5.y + h5.height / 2
        });
      }
      return res;
    }, []);
  }
  function getClosestHandle(pos, connectionRadius, handles) {
    let closestHandle = null;
    let minDistance = Infinity;
    handles.forEach((handle) => {
      const distance2 = Math.sqrt(Math.pow(handle.x - pos.x, 2) + Math.pow(handle.y - pos.y, 2));
      if (distance2 <= connectionRadius && distance2 < minDistance) {
        minDistance = distance2;
        closestHandle = handle;
      }
    });
    return closestHandle;
  }
  var nullConnection = { source: null, target: null, sourceHandle: null, targetHandle: null };
  function isValidHandle(event, handle, connectionMode, fromNodeId, fromHandleId, fromType, isValidConnection, doc2) {
    const isTarget = fromType === "target";
    const handleDomNode = doc2.querySelector(`.react-flow__handle[data-id="${handle?.nodeId}-${handle?.id}-${handle?.type}"]`);
    const { x: x3, y: y4 } = getEventPosition(event);
    const handleBelow = doc2.elementFromPoint(x3, y4);
    const handleToCheck = handleBelow?.classList.contains("react-flow__handle") ? handleBelow : handleDomNode;
    const result = {
      handleDomNode: handleToCheck,
      isValid: false,
      connection: nullConnection,
      endHandle: null
    };
    if (handleToCheck) {
      const handleType = getHandleType(void 0, handleToCheck);
      const handleNodeId = handleToCheck.getAttribute("data-nodeid");
      const handleId = handleToCheck.getAttribute("data-handleid");
      const connectable = handleToCheck.classList.contains("connectable");
      const connectableEnd = handleToCheck.classList.contains("connectableend");
      const connection = {
        source: isTarget ? handleNodeId : fromNodeId,
        sourceHandle: isTarget ? handleId : fromHandleId,
        target: isTarget ? fromNodeId : handleNodeId,
        targetHandle: isTarget ? fromHandleId : handleId
      };
      result.connection = connection;
      const isConnectable = connectable && connectableEnd;
      const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === "source" || !isTarget && handleType === "target" : handleNodeId !== fromNodeId || handleId !== fromHandleId);
      if (isValid) {
        result.endHandle = {
          nodeId: handleNodeId,
          handleId,
          type: handleType
        };
        result.isValid = isValidConnection(connection);
      }
    }
    return result;
  }
  function getHandleLookup({ nodes, nodeId, handleId, handleType }) {
    return nodes.reduce((res, node2) => {
      if (node2[internalsSymbol]) {
        const { handleBounds } = node2[internalsSymbol];
        let sourceHandles = [];
        let targetHandles = [];
        if (handleBounds) {
          sourceHandles = getHandles(node2, handleBounds, "source", `${nodeId}-${handleId}-${handleType}`);
          targetHandles = getHandles(node2, handleBounds, "target", `${nodeId}-${handleId}-${handleType}`);
        }
        res.push(...sourceHandles, ...targetHandles);
      }
      return res;
    }, []);
  }
  function getHandleType(edgeUpdaterType, handleDomNode) {
    if (edgeUpdaterType) {
      return edgeUpdaterType;
    } else if (handleDomNode?.classList.contains("target")) {
      return "target";
    } else if (handleDomNode?.classList.contains("source")) {
      return "source";
    }
    return null;
  }
  function resetRecentHandle(handleDomNode) {
    handleDomNode?.classList.remove("valid", "connecting", "react-flow__handle-valid", "react-flow__handle-connecting");
  }
  function getConnectionStatus(isInsideConnectionRadius, isHandleValid) {
    let connectionStatus = null;
    if (isHandleValid) {
      connectionStatus = "valid";
    } else if (isInsideConnectionRadius && !isHandleValid) {
      connectionStatus = "invalid";
    }
    return connectionStatus;
  }
  function handlePointerDown({ event, handleId, nodeId, onConnect, isTarget, getState, setState, isValidConnection, edgeUpdaterType, onEdgeUpdateEnd }) {
    const doc2 = getHostForElement(event.target);
    const { connectionMode, domNode, autoPanOnConnect, connectionRadius, onConnectStart, panBy, getNodes, cancelConnection } = getState();
    let autoPanId = 0;
    let prevClosestHandle;
    const { x: x3, y: y4 } = getEventPosition(event);
    const clickedHandle = doc2?.elementFromPoint(x3, y4);
    const handleType = getHandleType(edgeUpdaterType, clickedHandle);
    const containerBounds = domNode?.getBoundingClientRect();
    if (!containerBounds || !handleType) {
      return;
    }
    let prevActiveHandle;
    let connectionPosition = getEventPosition(event, containerBounds);
    let autoPanStarted = false;
    let connection = null;
    let isValid = false;
    let handleDomNode = null;
    const handleLookup = getHandleLookup({
      nodes: getNodes(),
      nodeId,
      handleId,
      handleType
    });
    const autoPan = () => {
      if (!autoPanOnConnect) {
        return;
      }
      const [xMovement, yMovement] = calcAutoPan(connectionPosition, containerBounds);
      panBy({ x: xMovement, y: yMovement });
      autoPanId = requestAnimationFrame(autoPan);
    };
    setState({
      connectionPosition,
      connectionStatus: null,
      // connectionNodeId etc will be removed in the next major in favor of connectionStartHandle
      connectionNodeId: nodeId,
      connectionHandleId: handleId,
      connectionHandleType: handleType,
      connectionStartHandle: {
        nodeId,
        handleId,
        type: handleType
      },
      connectionEndHandle: null
    });
    onConnectStart?.(event, { nodeId, handleId, handleType });
    function onPointerMove(event2) {
      const { transform: transform3 } = getState();
      connectionPosition = getEventPosition(event2, containerBounds);
      prevClosestHandle = getClosestHandle(pointToRendererPoint(connectionPosition, transform3, false, [1, 1]), connectionRadius, handleLookup);
      if (!autoPanStarted) {
        autoPan();
        autoPanStarted = true;
      }
      const result = isValidHandle(event2, prevClosestHandle, connectionMode, nodeId, handleId, isTarget ? "target" : "source", isValidConnection, doc2);
      handleDomNode = result.handleDomNode;
      connection = result.connection;
      isValid = result.isValid;
      setState({
        connectionPosition: prevClosestHandle && isValid ? rendererPointToPoint({
          x: prevClosestHandle.x,
          y: prevClosestHandle.y
        }, transform3) : connectionPosition,
        connectionStatus: getConnectionStatus(!!prevClosestHandle, isValid),
        connectionEndHandle: result.endHandle
      });
      if (!prevClosestHandle && !isValid && !handleDomNode) {
        return resetRecentHandle(prevActiveHandle);
      }
      if (connection.source !== connection.target && handleDomNode) {
        resetRecentHandle(prevActiveHandle);
        prevActiveHandle = handleDomNode;
        handleDomNode.classList.add("connecting", "react-flow__handle-connecting");
        handleDomNode.classList.toggle("valid", isValid);
        handleDomNode.classList.toggle("react-flow__handle-valid", isValid);
      }
    }
    function onPointerUp(event2) {
      if ((prevClosestHandle || handleDomNode) && connection && isValid) {
        onConnect?.(connection);
      }
      getState().onConnectEnd?.(event2);
      if (edgeUpdaterType) {
        onEdgeUpdateEnd?.(event2);
      }
      resetRecentHandle(prevActiveHandle);
      cancelConnection();
      cancelAnimationFrame(autoPanId);
      autoPanStarted = false;
      isValid = false;
      connection = null;
      handleDomNode = null;
      doc2.removeEventListener("mousemove", onPointerMove);
      doc2.removeEventListener("mouseup", onPointerUp);
      doc2.removeEventListener("touchmove", onPointerMove);
      doc2.removeEventListener("touchend", onPointerUp);
    }
    doc2.addEventListener("mousemove", onPointerMove);
    doc2.addEventListener("mouseup", onPointerUp);
    doc2.addEventListener("touchmove", onPointerMove);
    doc2.addEventListener("touchend", onPointerUp);
  }
  var alwaysValid = () => true;
  var selector$f = (s4) => ({
    connectionStartHandle: s4.connectionStartHandle,
    connectOnClick: s4.connectOnClick,
    noPanClassName: s4.noPanClassName
  });
  var connectingSelector = (nodeId, handleId, type) => (state) => {
    const { connectionStartHandle: startHandle, connectionEndHandle: endHandle, connectionClickStartHandle: clickHandle } = state;
    return {
      connecting: startHandle?.nodeId === nodeId && startHandle?.handleId === handleId && startHandle?.type === type || endHandle?.nodeId === nodeId && endHandle?.handleId === handleId && endHandle?.type === type,
      clickConnecting: clickHandle?.nodeId === nodeId && clickHandle?.handleId === handleId && clickHandle?.type === type
    };
  };
  var Handle = (0, import_react33.forwardRef)(({ type = "source", position: position2 = Position.Top, isValidConnection, isConnectable = true, isConnectableStart = true, isConnectableEnd = true, id: id4, onConnect, children: children2, className, onMouseDown, onTouchStart, ...rest }, ref) => {
    const handleId = id4 || null;
    const isTarget = type === "target";
    const store = useStoreApi();
    const nodeId = useNodeId();
    const { connectOnClick, noPanClassName } = useStore2(selector$f, shallow);
    const { connecting, clickConnecting } = useStore2(connectingSelector(nodeId, handleId, type));
    if (!nodeId) {
      store.getState().onError?.("010", errorMessages["error010"]());
    }
    const onConnectExtended = (params) => {
      const { defaultEdgeOptions, onConnect: onConnectAction, hasDefaultEdges } = store.getState();
      const edgeParams = {
        ...defaultEdgeOptions,
        ...params
      };
      if (hasDefaultEdges) {
        const { edges, setEdges } = store.getState();
        setEdges(addEdge(edgeParams, edges));
      }
      onConnectAction?.(edgeParams);
      onConnect?.(edgeParams);
    };
    const onPointerDown = (event) => {
      if (!nodeId) {
        return;
      }
      const isMouseTriggered = isMouseEvent(event);
      if (isConnectableStart && (isMouseTriggered && event.button === 0 || !isMouseTriggered)) {
        handlePointerDown({
          event,
          handleId,
          nodeId,
          onConnect: onConnectExtended,
          isTarget,
          getState: store.getState,
          setState: store.setState,
          isValidConnection: isValidConnection || store.getState().isValidConnection || alwaysValid
        });
      }
      if (isMouseTriggered) {
        onMouseDown?.(event);
      } else {
        onTouchStart?.(event);
      }
    };
    const onClick = (event) => {
      const { onClickConnectStart, onClickConnectEnd, connectionClickStartHandle, connectionMode, isValidConnection: isValidConnectionStore } = store.getState();
      if (!nodeId || !connectionClickStartHandle && !isConnectableStart) {
        return;
      }
      if (!connectionClickStartHandle) {
        onClickConnectStart?.(event, { nodeId, handleId, handleType: type });
        store.setState({ connectionClickStartHandle: { nodeId, type, handleId } });
        return;
      }
      const doc2 = getHostForElement(event.target);
      const isValidConnectionHandler = isValidConnection || isValidConnectionStore || alwaysValid;
      const { connection, isValid } = isValidHandle(event, {
        nodeId,
        id: handleId,
        type
      }, connectionMode, connectionClickStartHandle.nodeId, connectionClickStartHandle.handleId || null, connectionClickStartHandle.type, isValidConnectionHandler, doc2);
      if (isValid) {
        onConnectExtended(connection);
      }
      onClickConnectEnd?.(event);
      store.setState({ connectionClickStartHandle: null });
    };
    return (0, import_jsx_runtime.jsx)("div", { "data-handleid": handleId, "data-nodeid": nodeId, "data-handlepos": position2, "data-id": `${nodeId}-${handleId}-${type}`, className: cc([
      "react-flow__handle",
      `react-flow__handle-${position2}`,
      "nodrag",
      noPanClassName,
      className,
      {
        source: !isTarget,
        target: isTarget,
        connectable: isConnectable,
        connectablestart: isConnectableStart,
        connectableend: isConnectableEnd,
        connecting: clickConnecting,
        // this class is used to style the handle when the user is connecting
        connectionindicator: isConnectable && (isConnectableStart && !connecting || isConnectableEnd && connecting)
      }
    ]), onMouseDown: onPointerDown, onTouchStart: onPointerDown, onClick: connectOnClick ? onClick : void 0, ref, ...rest, children: children2 });
  });
  Handle.displayName = "Handle";
  var Handle$1 = (0, import_react33.memo)(Handle);
  var DefaultNode = ({ data, isConnectable, targetPosition = Position.Top, sourcePosition = Position.Bottom }) => {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(Handle$1, { type: "target", position: targetPosition, isConnectable }), data?.label, (0, import_jsx_runtime.jsx)(Handle$1, { type: "source", position: sourcePosition, isConnectable })] });
  };
  DefaultNode.displayName = "DefaultNode";
  var DefaultNode$1 = (0, import_react33.memo)(DefaultNode);
  var InputNode = ({ data, isConnectable, sourcePosition = Position.Bottom }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [data?.label, (0, import_jsx_runtime.jsx)(Handle$1, { type: "source", position: sourcePosition, isConnectable })] });
  InputNode.displayName = "InputNode";
  var InputNode$1 = (0, import_react33.memo)(InputNode);
  var OutputNode = ({ data, isConnectable, targetPosition = Position.Top }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(Handle$1, { type: "target", position: targetPosition, isConnectable }), data?.label] });
  OutputNode.displayName = "OutputNode";
  var OutputNode$1 = (0, import_react33.memo)(OutputNode);
  var GroupNode = () => null;
  GroupNode.displayName = "GroupNode";
  var selector$e = (s4) => ({
    selectedNodes: s4.getNodes().filter((n5) => n5.selected),
    selectedEdges: s4.edges.filter((e3) => e3.selected)
  });
  var selectId = (obj) => obj.id;
  function areEqual(a4, b5) {
    return shallow(a4.selectedNodes.map(selectId), b5.selectedNodes.map(selectId)) && shallow(a4.selectedEdges.map(selectId), b5.selectedEdges.map(selectId));
  }
  var SelectionListener = (0, import_react33.memo)(({ onSelectionChange }) => {
    const store = useStoreApi();
    const { selectedNodes, selectedEdges } = useStore2(selector$e, areEqual);
    (0, import_react33.useEffect)(() => {
      const params = { nodes: selectedNodes, edges: selectedEdges };
      onSelectionChange?.(params);
      store.getState().onSelectionChange?.(params);
    }, [selectedNodes, selectedEdges, onSelectionChange]);
    return null;
  });
  SelectionListener.displayName = "SelectionListener";
  var changeSelector = (s4) => !!s4.onSelectionChange;
  function Wrapper$1({ onSelectionChange }) {
    const storeHasSelectionChange = useStore2(changeSelector);
    if (onSelectionChange || storeHasSelectionChange) {
      return (0, import_jsx_runtime.jsx)(SelectionListener, { onSelectionChange });
    }
    return null;
  }
  var selector$d = (s4) => ({
    setNodes: s4.setNodes,
    setEdges: s4.setEdges,
    setDefaultNodesAndEdges: s4.setDefaultNodesAndEdges,
    setMinZoom: s4.setMinZoom,
    setMaxZoom: s4.setMaxZoom,
    setTranslateExtent: s4.setTranslateExtent,
    setNodeExtent: s4.setNodeExtent,
    reset: s4.reset
  });
  function useStoreUpdater(value, setStoreState) {
    (0, import_react33.useEffect)(() => {
      if (typeof value !== "undefined") {
        setStoreState(value);
      }
    }, [value]);
  }
  function useDirectStoreUpdater(key, value, setState) {
    (0, import_react33.useEffect)(() => {
      if (typeof value !== "undefined") {
        setState({ [key]: value });
      }
    }, [value]);
  }
  var StoreUpdater = ({ nodes, edges, defaultNodes, defaultEdges, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, nodesDraggable, nodesConnectable, nodesFocusable, edgesFocusable, edgesUpdatable, elevateNodesOnSelect, minZoom, maxZoom, nodeExtent, onNodesChange, onEdgesChange, elementsSelectable, connectionMode, snapGrid, snapToGrid, translateExtent, connectOnClick, defaultEdgeOptions, fitView: fitView2, fitViewOptions, onNodesDelete, onEdgesDelete, onNodeDrag, onNodeDragStart, onNodeDragStop, onSelectionDrag, onSelectionDragStart, onSelectionDragStop, noPanClassName, nodeOrigin, rfId, autoPanOnConnect, autoPanOnNodeDrag, onError, connectionRadius, isValidConnection }) => {
    const { setNodes, setEdges, setDefaultNodesAndEdges, setMinZoom, setMaxZoom, setTranslateExtent, setNodeExtent, reset } = useStore2(selector$d, shallow);
    const store = useStoreApi();
    (0, import_react33.useEffect)(() => {
      const edgesWithDefaults = defaultEdges?.map((e3) => ({ ...e3, ...defaultEdgeOptions }));
      setDefaultNodesAndEdges(defaultNodes, edgesWithDefaults);
      return () => {
        reset();
      };
    }, []);
    useDirectStoreUpdater("defaultEdgeOptions", defaultEdgeOptions, store.setState);
    useDirectStoreUpdater("connectionMode", connectionMode, store.setState);
    useDirectStoreUpdater("onConnect", onConnect, store.setState);
    useDirectStoreUpdater("onConnectStart", onConnectStart, store.setState);
    useDirectStoreUpdater("onConnectEnd", onConnectEnd, store.setState);
    useDirectStoreUpdater("onClickConnectStart", onClickConnectStart, store.setState);
    useDirectStoreUpdater("onClickConnectEnd", onClickConnectEnd, store.setState);
    useDirectStoreUpdater("nodesDraggable", nodesDraggable, store.setState);
    useDirectStoreUpdater("nodesConnectable", nodesConnectable, store.setState);
    useDirectStoreUpdater("nodesFocusable", nodesFocusable, store.setState);
    useDirectStoreUpdater("edgesFocusable", edgesFocusable, store.setState);
    useDirectStoreUpdater("edgesUpdatable", edgesUpdatable, store.setState);
    useDirectStoreUpdater("elementsSelectable", elementsSelectable, store.setState);
    useDirectStoreUpdater("elevateNodesOnSelect", elevateNodesOnSelect, store.setState);
    useDirectStoreUpdater("snapToGrid", snapToGrid, store.setState);
    useDirectStoreUpdater("snapGrid", snapGrid, store.setState);
    useDirectStoreUpdater("onNodesChange", onNodesChange, store.setState);
    useDirectStoreUpdater("onEdgesChange", onEdgesChange, store.setState);
    useDirectStoreUpdater("connectOnClick", connectOnClick, store.setState);
    useDirectStoreUpdater("fitViewOnInit", fitView2, store.setState);
    useDirectStoreUpdater("fitViewOnInitOptions", fitViewOptions, store.setState);
    useDirectStoreUpdater("onNodesDelete", onNodesDelete, store.setState);
    useDirectStoreUpdater("onEdgesDelete", onEdgesDelete, store.setState);
    useDirectStoreUpdater("onNodeDrag", onNodeDrag, store.setState);
    useDirectStoreUpdater("onNodeDragStart", onNodeDragStart, store.setState);
    useDirectStoreUpdater("onNodeDragStop", onNodeDragStop, store.setState);
    useDirectStoreUpdater("onSelectionDrag", onSelectionDrag, store.setState);
    useDirectStoreUpdater("onSelectionDragStart", onSelectionDragStart, store.setState);
    useDirectStoreUpdater("onSelectionDragStop", onSelectionDragStop, store.setState);
    useDirectStoreUpdater("noPanClassName", noPanClassName, store.setState);
    useDirectStoreUpdater("nodeOrigin", nodeOrigin, store.setState);
    useDirectStoreUpdater("rfId", rfId, store.setState);
    useDirectStoreUpdater("autoPanOnConnect", autoPanOnConnect, store.setState);
    useDirectStoreUpdater("autoPanOnNodeDrag", autoPanOnNodeDrag, store.setState);
    useDirectStoreUpdater("onError", onError, store.setState);
    useDirectStoreUpdater("connectionRadius", connectionRadius, store.setState);
    useDirectStoreUpdater("isValidConnection", isValidConnection, store.setState);
    useStoreUpdater(nodes, setNodes);
    useStoreUpdater(edges, setEdges);
    useStoreUpdater(minZoom, setMinZoom);
    useStoreUpdater(maxZoom, setMaxZoom);
    useStoreUpdater(translateExtent, setTranslateExtent);
    useStoreUpdater(nodeExtent, setNodeExtent);
    return null;
  };
  var style = { display: "none" };
  var ariaLiveStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0px, 0px, 0px, 0px)",
    clipPath: "inset(100%)"
  };
  var ARIA_NODE_DESC_KEY = "react-flow__node-desc";
  var ARIA_EDGE_DESC_KEY = "react-flow__edge-desc";
  var ARIA_LIVE_MESSAGE = "react-flow__aria-live";
  var selector$c = (s4) => s4.ariaLiveMessage;
  function AriaLiveMessage({ rfId }) {
    const ariaLiveMessage = useStore2(selector$c);
    return (0, import_jsx_runtime.jsx)("div", { id: `${ARIA_LIVE_MESSAGE}-${rfId}`, "aria-live": "assertive", "aria-atomic": "true", style: ariaLiveStyle, children: ariaLiveMessage });
  }
  function A11yDescriptions({ rfId, disableKeyboardA11y }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsxs)("div", { id: `${ARIA_NODE_DESC_KEY}-${rfId}`, style, children: ["Press enter or space to select a node.", !disableKeyboardA11y && "You can then use the arrow keys to move the node around.", " Press delete to remove it and escape to cancel.", " "] }), (0, import_jsx_runtime.jsx)("div", { id: `${ARIA_EDGE_DESC_KEY}-${rfId}`, style, children: "Press enter or space to select an edge. You can then press delete to remove it or escape to cancel." }), !disableKeyboardA11y && (0, import_jsx_runtime.jsx)(AriaLiveMessage, { rfId })] });
  }
  var shiftX = (x3, shift2, position2) => {
    if (position2 === Position.Left)
      return x3 - shift2;
    if (position2 === Position.Right)
      return x3 + shift2;
    return x3;
  };
  var shiftY = (y4, shift2, position2) => {
    if (position2 === Position.Top)
      return y4 - shift2;
    if (position2 === Position.Bottom)
      return y4 + shift2;
    return y4;
  };
  var EdgeUpdaterClassName = "react-flow__edgeupdater";
  var EdgeAnchor = ({ position: position2, centerX, centerY, radius = 10, onMouseDown, onMouseEnter, onMouseOut, type }) => (0, import_jsx_runtime.jsx)("circle", { onMouseDown, onMouseEnter, onMouseOut, className: cc([EdgeUpdaterClassName, `${EdgeUpdaterClassName}-${type}`]), cx: shiftX(centerX, radius, position2), cy: shiftY(centerY, radius, position2), r: radius, stroke: "transparent", fill: "transparent" });
  var alwaysValidConnection = () => true;
  var wrapEdge = (EdgeComponent) => {
    const EdgeWrapper = ({ id: id4, className, type, data, onClick, onEdgeDoubleClick, selected, animated, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style2, source, target, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, elementsSelectable, hidden, sourceHandleId, targetHandleId, onContextMenu, onMouseEnter, onMouseMove, onMouseLeave, edgeUpdaterRadius, onEdgeUpdate, onEdgeUpdateStart, onEdgeUpdateEnd, markerEnd, markerStart, rfId, ariaLabel, isFocusable, isUpdatable, pathOptions, interactionWidth }) => {
      const edgeRef = (0, import_react33.useRef)(null);
      const [updateHover, setUpdateHover] = (0, import_react33.useState)(false);
      const [updating, setUpdating] = (0, import_react33.useState)(false);
      const store = useStoreApi();
      const markerStartUrl = (0, import_react33.useMemo)(() => `url(#${getMarkerId(markerStart, rfId)})`, [markerStart, rfId]);
      const markerEndUrl = (0, import_react33.useMemo)(() => `url(#${getMarkerId(markerEnd, rfId)})`, [markerEnd, rfId]);
      if (hidden) {
        return null;
      }
      const onEdgeClick = (event) => {
        const { edges, addSelectedEdges } = store.getState();
        if (elementsSelectable) {
          store.setState({ nodesSelectionActive: false });
          addSelectedEdges([id4]);
        }
        if (onClick) {
          const edge = edges.find((e3) => e3.id === id4);
          onClick(event, edge);
        }
      };
      const onEdgeDoubleClickHandler = getMouseHandler$1(id4, store.getState, onEdgeDoubleClick);
      const onEdgeContextMenu = getMouseHandler$1(id4, store.getState, onContextMenu);
      const onEdgeMouseEnter = getMouseHandler$1(id4, store.getState, onMouseEnter);
      const onEdgeMouseMove = getMouseHandler$1(id4, store.getState, onMouseMove);
      const onEdgeMouseLeave = getMouseHandler$1(id4, store.getState, onMouseLeave);
      const handleEdgeUpdater = (event, isSourceHandle) => {
        if (event.button !== 0) {
          return;
        }
        const { edges, isValidConnection: isValidConnectionStore } = store.getState();
        const nodeId = isSourceHandle ? target : source;
        const handleId = (isSourceHandle ? targetHandleId : sourceHandleId) || null;
        const handleType = isSourceHandle ? "target" : "source";
        const isValidConnection = isValidConnectionStore || alwaysValidConnection;
        const isTarget = isSourceHandle;
        const edge = edges.find((e3) => e3.id === id4);
        setUpdating(true);
        onEdgeUpdateStart?.(event, edge, handleType);
        const _onEdgeUpdateEnd = (evt) => {
          setUpdating(false);
          onEdgeUpdateEnd?.(evt, edge, handleType);
        };
        const onConnectEdge = (connection) => onEdgeUpdate?.(edge, connection);
        handlePointerDown({
          event,
          handleId,
          nodeId,
          onConnect: onConnectEdge,
          isTarget,
          getState: store.getState,
          setState: store.setState,
          isValidConnection,
          edgeUpdaterType: handleType,
          onEdgeUpdateEnd: _onEdgeUpdateEnd
        });
      };
      const onEdgeUpdaterSourceMouseDown = (event) => handleEdgeUpdater(event, true);
      const onEdgeUpdaterTargetMouseDown = (event) => handleEdgeUpdater(event, false);
      const onEdgeUpdaterMouseEnter = () => setUpdateHover(true);
      const onEdgeUpdaterMouseOut = () => setUpdateHover(false);
      const inactive = !elementsSelectable && !onClick;
      const onKeyDown = (event) => {
        if (elementSelectionKeys.includes(event.key) && elementsSelectable) {
          const { unselectNodesAndEdges, addSelectedEdges, edges } = store.getState();
          const unselect = event.key === "Escape";
          if (unselect) {
            edgeRef.current?.blur();
            unselectNodesAndEdges({ edges: [edges.find((e3) => e3.id === id4)] });
          } else {
            addSelectedEdges([id4]);
          }
        }
      };
      return (0, import_jsx_runtime.jsxs)("g", { className: cc([
        "react-flow__edge",
        `react-flow__edge-${type}`,
        className,
        { selected, animated, inactive, updating: updateHover }
      ]), onClick: onEdgeClick, onDoubleClick: onEdgeDoubleClickHandler, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onKeyDown: isFocusable ? onKeyDown : void 0, tabIndex: isFocusable ? 0 : void 0, role: isFocusable ? "button" : void 0, "data-testid": `rf__edge-${id4}`, "aria-label": ariaLabel === null ? void 0 : ariaLabel ? ariaLabel : `Edge from ${source} to ${target}`, "aria-describedby": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : void 0, ref: edgeRef, children: [!updating && (0, import_jsx_runtime.jsx)(EdgeComponent, { id: id4, source, target, selected, animated, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, data, style: style2, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, sourceHandleId, targetHandleId, markerStart: markerStartUrl, markerEnd: markerEndUrl, pathOptions, interactionWidth }), isUpdatable && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(isUpdatable === "source" || isUpdatable === true) && (0, import_jsx_runtime.jsx)(EdgeAnchor, { position: sourcePosition, centerX: sourceX, centerY: sourceY, radius: edgeUpdaterRadius, onMouseDown: onEdgeUpdaterSourceMouseDown, onMouseEnter: onEdgeUpdaterMouseEnter, onMouseOut: onEdgeUpdaterMouseOut, type: "source" }), (isUpdatable === "target" || isUpdatable === true) && (0, import_jsx_runtime.jsx)(EdgeAnchor, { position: targetPosition, centerX: targetX, centerY: targetY, radius: edgeUpdaterRadius, onMouseDown: onEdgeUpdaterTargetMouseDown, onMouseEnter: onEdgeUpdaterMouseEnter, onMouseOut: onEdgeUpdaterMouseOut, type: "target" })] })] });
    };
    EdgeWrapper.displayName = "EdgeWrapper";
    return (0, import_react33.memo)(EdgeWrapper);
  };
  function createEdgeTypes(edgeTypes) {
    const standardTypes = {
      default: wrapEdge(edgeTypes.default || BezierEdge),
      straight: wrapEdge(edgeTypes.bezier || StraightEdge),
      step: wrapEdge(edgeTypes.step || StepEdge),
      smoothstep: wrapEdge(edgeTypes.step || SmoothStepEdge),
      simplebezier: wrapEdge(edgeTypes.simplebezier || SimpleBezierEdge)
    };
    const wrappedTypes = {};
    const specialTypes = Object.keys(edgeTypes).filter((k2) => !["default", "bezier"].includes(k2)).reduce((res, key) => {
      res[key] = wrapEdge(edgeTypes[key] || BezierEdge);
      return res;
    }, wrappedTypes);
    return {
      ...standardTypes,
      ...specialTypes
    };
  }
  function getHandlePosition(position2, nodeRect, handle = null) {
    const x3 = (handle?.x || 0) + nodeRect.x;
    const y4 = (handle?.y || 0) + nodeRect.y;
    const width = handle?.width || nodeRect.width;
    const height = handle?.height || nodeRect.height;
    switch (position2) {
      case Position.Top:
        return {
          x: x3 + width / 2,
          y: y4
        };
      case Position.Right:
        return {
          x: x3 + width,
          y: y4 + height / 2
        };
      case Position.Bottom:
        return {
          x: x3 + width / 2,
          y: y4 + height
        };
      case Position.Left:
        return {
          x: x3,
          y: y4 + height / 2
        };
    }
  }
  function getHandle(bounds, handleId) {
    if (!bounds) {
      return null;
    }
    if (bounds.length === 1 || !handleId) {
      return bounds[0];
    } else if (handleId) {
      return bounds.find((d4) => d4.id === handleId) || null;
    }
    return null;
  }
  var getEdgePositions = (sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition) => {
    const sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);
    const targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);
    return {
      sourceX: sourceHandlePos.x,
      sourceY: sourceHandlePos.y,
      targetX: targetHandlePos.x,
      targetY: targetHandlePos.y
    };
  };
  function isEdgeVisible({ sourcePos, targetPos, sourceWidth, sourceHeight, targetWidth, targetHeight, width, height, transform: transform3 }) {
    const edgeBox = {
      x: Math.min(sourcePos.x, targetPos.x),
      y: Math.min(sourcePos.y, targetPos.y),
      x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),
      y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight)
    };
    if (edgeBox.x === edgeBox.x2) {
      edgeBox.x2 += 1;
    }
    if (edgeBox.y === edgeBox.y2) {
      edgeBox.y2 += 1;
    }
    const viewBox = rectToBox({
      x: (0 - transform3[0]) / transform3[2],
      y: (0 - transform3[1]) / transform3[2],
      width: width / transform3[2],
      height: height / transform3[2]
    });
    const xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));
    const yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));
    const overlappingArea = Math.ceil(xOverlap * yOverlap);
    return overlappingArea > 0;
  }
  function getNodeData(node2) {
    const handleBounds = node2?.[internalsSymbol]?.handleBounds || null;
    const isValid = handleBounds && node2?.width && node2?.height && typeof node2?.positionAbsolute?.x !== "undefined" && typeof node2?.positionAbsolute?.y !== "undefined";
    return [
      {
        x: node2?.positionAbsolute?.x || 0,
        y: node2?.positionAbsolute?.y || 0,
        width: node2?.width || 0,
        height: node2?.height || 0
      },
      handleBounds,
      !!isValid
    ];
  }
  function isParentSelected(node2, nodeInternals) {
    if (!node2.parentNode) {
      return false;
    }
    const parentNode = nodeInternals.get(node2.parentNode);
    if (!parentNode) {
      return false;
    }
    if (parentNode.selected) {
      return true;
    }
    return isParentSelected(parentNode, nodeInternals);
  }
  function hasSelector(target, selector2, nodeRef) {
    let current = target;
    do {
      if (current?.matches(selector2))
        return true;
      if (current === nodeRef.current)
        return false;
      current = current.parentElement;
    } while (current);
    return false;
  }
  function getDragItems(nodeInternals, nodesDraggable, mousePos, nodeId) {
    return Array.from(nodeInternals.values()).filter((n5) => (n5.selected || n5.id === nodeId) && (!n5.parentNode || !isParentSelected(n5, nodeInternals)) && (n5.draggable || nodesDraggable && typeof n5.draggable === "undefined")).map((n5) => ({
      id: n5.id,
      position: n5.position || { x: 0, y: 0 },
      positionAbsolute: n5.positionAbsolute || { x: 0, y: 0 },
      distance: {
        x: mousePos.x - (n5.positionAbsolute?.x ?? 0),
        y: mousePos.y - (n5.positionAbsolute?.y ?? 0)
      },
      delta: {
        x: 0,
        y: 0
      },
      extent: n5.extent,
      parentNode: n5.parentNode,
      width: n5.width,
      height: n5.height
    }));
  }
  function calcNextPosition(node2, nextPosition, nodeInternals, nodeExtent, nodeOrigin = [0, 0], onError) {
    let currentExtent = node2.extent || nodeExtent;
    if (node2.extent === "parent") {
      if (node2.parentNode && node2.width && node2.height) {
        const parent = nodeInternals.get(node2.parentNode);
        const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;
        currentExtent = parent && isNumeric(parentX) && isNumeric(parentY) && isNumeric(parent.width) && isNumeric(parent.height) ? [
          [parentX + node2.width * nodeOrigin[0], parentY + node2.height * nodeOrigin[1]],
          [
            parentX + parent.width - node2.width + node2.width * nodeOrigin[0],
            parentY + parent.height - node2.height + node2.height * nodeOrigin[1]
          ]
        ] : currentExtent;
      } else {
        onError?.("005", errorMessages["error005"]());
        currentExtent = nodeExtent;
      }
    } else if (node2.extent && node2.parentNode) {
      const parent = nodeInternals.get(node2.parentNode);
      const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;
      currentExtent = [
        [node2.extent[0][0] + parentX, node2.extent[0][1] + parentY],
        [node2.extent[1][0] + parentX, node2.extent[1][1] + parentY]
      ];
    }
    let parentPosition = { x: 0, y: 0 };
    if (node2.parentNode) {
      const parentNode = nodeInternals.get(node2.parentNode);
      parentPosition = getNodePositionWithOrigin(parentNode, nodeOrigin).positionAbsolute;
    }
    const positionAbsolute = currentExtent ? clampPosition(nextPosition, currentExtent) : nextPosition;
    return {
      position: {
        x: positionAbsolute.x - parentPosition.x,
        y: positionAbsolute.y - parentPosition.y
      },
      positionAbsolute
    };
  }
  function getEventHandlerParams({ nodeId, dragItems, nodeInternals }) {
    const extentedDragItems = dragItems.map((n5) => {
      const node2 = nodeInternals.get(n5.id);
      return {
        ...node2,
        position: n5.position,
        positionAbsolute: n5.positionAbsolute
      };
    });
    return [nodeId ? extentedDragItems.find((n5) => n5.id === nodeId) : extentedDragItems[0], extentedDragItems];
  }
  var getHandleBounds = (selector2, nodeElement, zoom, nodeOrigin) => {
    const handles = nodeElement.querySelectorAll(selector2);
    if (!handles || !handles.length) {
      return null;
    }
    const handlesArray = Array.from(handles);
    const nodeBounds = nodeElement.getBoundingClientRect();
    const nodeOffset = {
      x: nodeBounds.width * nodeOrigin[0],
      y: nodeBounds.height * nodeOrigin[1]
    };
    return handlesArray.map((handle) => {
      const handleBounds = handle.getBoundingClientRect();
      return {
        id: handle.getAttribute("data-handleid"),
        position: handle.getAttribute("data-handlepos"),
        x: (handleBounds.left - nodeBounds.left - nodeOffset.x) / zoom,
        y: (handleBounds.top - nodeBounds.top - nodeOffset.y) / zoom,
        ...getDimensions(handle)
      };
    });
  };
  function getMouseHandler(id4, getState, handler) {
    return handler === void 0 ? handler : (event) => {
      const node2 = getState().nodeInternals.get(id4);
      handler(event, { ...node2 });
    };
  }
  function handleNodeClick({ id: id4, store, unselect = false, nodeRef }) {
    const { addSelectedNodes, unselectNodesAndEdges, multiSelectionActive, nodeInternals } = store.getState();
    const node2 = nodeInternals.get(id4);
    store.setState({ nodesSelectionActive: false });
    if (!node2.selected) {
      addSelectedNodes([id4]);
    } else if (unselect || node2.selected && multiSelectionActive) {
      unselectNodesAndEdges({ nodes: [node2] });
      requestAnimationFrame(() => nodeRef?.current?.blur());
    }
  }
  function useGetPointerPosition() {
    const store = useStoreApi();
    const getPointerPosition = (0, import_react33.useCallback)(({ sourceEvent }) => {
      const { transform: transform3, snapGrid, snapToGrid } = store.getState();
      const x3 = sourceEvent.touches ? sourceEvent.touches[0].clientX : sourceEvent.clientX;
      const y4 = sourceEvent.touches ? sourceEvent.touches[0].clientY : sourceEvent.clientY;
      const pointerPos = {
        x: (x3 - transform3[0]) / transform3[2],
        y: (y4 - transform3[1]) / transform3[2]
      };
      return {
        xSnapped: snapToGrid ? snapGrid[0] * Math.round(pointerPos.x / snapGrid[0]) : pointerPos.x,
        ySnapped: snapToGrid ? snapGrid[1] * Math.round(pointerPos.y / snapGrid[1]) : pointerPos.y,
        ...pointerPos
      };
    }, []);
    return getPointerPosition;
  }
  function wrapSelectionDragFunc(selectionFunc) {
    return (event, _2, nodes) => selectionFunc?.(event, nodes);
  }
  function useDrag({ nodeRef, disabled = false, noDragClassName, handleSelector, nodeId, isSelectable, selectNodesOnDrag }) {
    const store = useStoreApi();
    const [dragging, setDragging] = (0, import_react33.useState)(false);
    const dragItems = (0, import_react33.useRef)([]);
    const lastPos = (0, import_react33.useRef)({ x: null, y: null });
    const autoPanId = (0, import_react33.useRef)(0);
    const containerBounds = (0, import_react33.useRef)(null);
    const mousePosition = (0, import_react33.useRef)({ x: 0, y: 0 });
    const dragEvent = (0, import_react33.useRef)(null);
    const autoPanStarted = (0, import_react33.useRef)(false);
    const getPointerPosition = useGetPointerPosition();
    (0, import_react33.useEffect)(() => {
      if (nodeRef?.current) {
        const selection2 = select_default2(nodeRef.current);
        const updateNodes = ({ x: x3, y: y4 }) => {
          const { nodeInternals, onNodeDrag, onSelectionDrag, updateNodePositions, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onError } = store.getState();
          lastPos.current = { x: x3, y: y4 };
          let hasChange = false;
          dragItems.current = dragItems.current.map((n5) => {
            const nextPosition = { x: x3 - n5.distance.x, y: y4 - n5.distance.y };
            if (snapToGrid) {
              nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);
              nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);
            }
            const updatedPos = calcNextPosition(n5, nextPosition, nodeInternals, nodeExtent, nodeOrigin, onError);
            hasChange = hasChange || n5.position.x !== updatedPos.position.x || n5.position.y !== updatedPos.position.y;
            n5.position = updatedPos.position;
            n5.positionAbsolute = updatedPos.positionAbsolute;
            return n5;
          });
          if (!hasChange) {
            return;
          }
          updateNodePositions(dragItems.current, true, true);
          setDragging(true);
          const onDrag = nodeId ? onNodeDrag : wrapSelectionDragFunc(onSelectionDrag);
          if (onDrag && dragEvent.current) {
            const [currentNode, nodes] = getEventHandlerParams({
              nodeId,
              dragItems: dragItems.current,
              nodeInternals
            });
            onDrag(dragEvent.current, currentNode, nodes);
          }
        };
        const autoPan = () => {
          if (!containerBounds.current) {
            return;
          }
          const [xMovement, yMovement] = calcAutoPan(mousePosition.current, containerBounds.current);
          if (xMovement !== 0 || yMovement !== 0) {
            const { transform: transform3, panBy } = store.getState();
            lastPos.current.x = (lastPos.current.x ?? 0) - xMovement / transform3[2];
            lastPos.current.y = (lastPos.current.y ?? 0) - yMovement / transform3[2];
            updateNodes(lastPos.current);
            panBy({ x: xMovement, y: yMovement });
          }
          autoPanId.current = requestAnimationFrame(autoPan);
        };
        if (disabled) {
          selection2.on(".drag", null);
        } else {
          const dragHandler = drag_default().on("start", (event) => {
            const { nodeInternals, multiSelectionActive, domNode, nodesDraggable, unselectNodesAndEdges, onNodeDragStart, onSelectionDragStart } = store.getState();
            const onStart = nodeId ? onNodeDragStart : wrapSelectionDragFunc(onSelectionDragStart);
            if (!selectNodesOnDrag && !multiSelectionActive && nodeId) {
              if (!nodeInternals.get(nodeId)?.selected) {
                unselectNodesAndEdges();
              }
            }
            if (nodeId && isSelectable && selectNodesOnDrag) {
              handleNodeClick({
                id: nodeId,
                store,
                nodeRef
              });
            }
            const pointerPos = getPointerPosition(event);
            lastPos.current = pointerPos;
            dragItems.current = getDragItems(nodeInternals, nodesDraggable, pointerPos, nodeId);
            if (onStart && dragItems.current) {
              const [currentNode, nodes] = getEventHandlerParams({
                nodeId,
                dragItems: dragItems.current,
                nodeInternals
              });
              onStart(event.sourceEvent, currentNode, nodes);
            }
            containerBounds.current = domNode?.getBoundingClientRect() || null;
            mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);
          }).on("drag", (event) => {
            const pointerPos = getPointerPosition(event);
            const { autoPanOnNodeDrag } = store.getState();
            if (!autoPanStarted.current && autoPanOnNodeDrag) {
              autoPanStarted.current = true;
              autoPan();
            }
            if ((lastPos.current.x !== pointerPos.xSnapped || lastPos.current.y !== pointerPos.ySnapped) && dragItems.current) {
              dragEvent.current = event.sourceEvent;
              mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);
              updateNodes(pointerPos);
            }
          }).on("end", (event) => {
            setDragging(false);
            autoPanStarted.current = false;
            cancelAnimationFrame(autoPanId.current);
            if (dragItems.current) {
              const { updateNodePositions, nodeInternals, onNodeDragStop, onSelectionDragStop } = store.getState();
              const onStop = nodeId ? onNodeDragStop : wrapSelectionDragFunc(onSelectionDragStop);
              updateNodePositions(dragItems.current, false, false);
              if (onStop) {
                const [currentNode, nodes] = getEventHandlerParams({
                  nodeId,
                  dragItems: dragItems.current,
                  nodeInternals
                });
                onStop(event.sourceEvent, currentNode, nodes);
              }
            }
          }).filter((event) => {
            const target = event.target;
            const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, nodeRef)) && (!handleSelector || hasSelector(target, handleSelector, nodeRef));
            return isDraggable;
          });
          selection2.call(dragHandler);
          return () => {
            selection2.on(".drag", null);
          };
        }
      }
    }, [
      nodeRef,
      disabled,
      noDragClassName,
      handleSelector,
      isSelectable,
      store,
      nodeId,
      selectNodesOnDrag,
      getPointerPosition
    ]);
    return dragging;
  }
  function useUpdateNodePositions() {
    const store = useStoreApi();
    const updatePositions = (0, import_react33.useCallback)((params) => {
      const { nodeInternals, nodeExtent, updateNodePositions, getNodes, snapToGrid, snapGrid, onError, nodesDraggable } = store.getState();
      const selectedNodes = getNodes().filter((n5) => n5.selected && (n5.draggable || nodesDraggable && typeof n5.draggable === "undefined"));
      const xVelo = snapToGrid ? snapGrid[0] : 5;
      const yVelo = snapToGrid ? snapGrid[1] : 5;
      const factor = params.isShiftPressed ? 4 : 1;
      const positionDiffX = params.x * xVelo * factor;
      const positionDiffY = params.y * yVelo * factor;
      const nodeUpdates = selectedNodes.map((n5) => {
        if (n5.positionAbsolute) {
          const nextPosition = { x: n5.positionAbsolute.x + positionDiffX, y: n5.positionAbsolute.y + positionDiffY };
          if (snapToGrid) {
            nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);
            nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);
          }
          const { positionAbsolute, position: position2 } = calcNextPosition(n5, nextPosition, nodeInternals, nodeExtent, void 0, onError);
          n5.position = position2;
          n5.positionAbsolute = positionAbsolute;
        }
        return n5;
      });
      updateNodePositions(nodeUpdates, true, false);
    }, []);
    return updatePositions;
  }
  var arrowKeyDiffs = {
    ArrowUp: { x: 0, y: -1 },
    ArrowDown: { x: 0, y: 1 },
    ArrowLeft: { x: -1, y: 0 },
    ArrowRight: { x: 1, y: 0 }
  };
  var wrapNode = (NodeComponent) => {
    const NodeWrapper = ({ id: id4, type, data, xPos, yPos, xPosOrigin, yPosOrigin, selected, onClick, onMouseEnter, onMouseMove, onMouseLeave, onContextMenu, onDoubleClick, style: style2, className, isDraggable, isSelectable, isConnectable, isFocusable, selectNodesOnDrag, sourcePosition, targetPosition, hidden, resizeObserver, dragHandle, zIndex, isParent, noDragClassName, noPanClassName, initialized, disableKeyboardA11y, ariaLabel, rfId }) => {
      const store = useStoreApi();
      const nodeRef = (0, import_react33.useRef)(null);
      const prevSourcePosition = (0, import_react33.useRef)(sourcePosition);
      const prevTargetPosition = (0, import_react33.useRef)(targetPosition);
      const prevType = (0, import_react33.useRef)(type);
      const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;
      const updatePositions = useUpdateNodePositions();
      const onMouseEnterHandler = getMouseHandler(id4, store.getState, onMouseEnter);
      const onMouseMoveHandler = getMouseHandler(id4, store.getState, onMouseMove);
      const onMouseLeaveHandler = getMouseHandler(id4, store.getState, onMouseLeave);
      const onContextMenuHandler = getMouseHandler(id4, store.getState, onContextMenu);
      const onDoubleClickHandler = getMouseHandler(id4, store.getState, onDoubleClick);
      const onSelectNodeHandler = (event) => {
        if (isSelectable && (!selectNodesOnDrag || !isDraggable)) {
          handleNodeClick({
            id: id4,
            store,
            nodeRef
          });
        }
        if (onClick) {
          const node2 = store.getState().nodeInternals.get(id4);
          onClick(event, { ...node2 });
        }
      };
      const onKeyDown = (event) => {
        if (isInputDOMNode(event)) {
          return;
        }
        if (elementSelectionKeys.includes(event.key) && isSelectable) {
          const unselect = event.key === "Escape";
          handleNodeClick({
            id: id4,
            store,
            unselect,
            nodeRef
          });
        } else if (!disableKeyboardA11y && isDraggable && selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
          store.setState({
            ariaLiveMessage: `Moved selected node ${event.key.replace("Arrow", "").toLowerCase()}. New position, x: ${~~xPos}, y: ${~~yPos}`
          });
          updatePositions({
            x: arrowKeyDiffs[event.key].x,
            y: arrowKeyDiffs[event.key].y,
            isShiftPressed: event.shiftKey
          });
        }
      };
      (0, import_react33.useEffect)(() => {
        if (nodeRef.current && !hidden) {
          const currNode = nodeRef.current;
          resizeObserver?.observe(currNode);
          return () => resizeObserver?.unobserve(currNode);
        }
      }, [hidden]);
      (0, import_react33.useEffect)(() => {
        const typeChanged = prevType.current !== type;
        const sourcePosChanged = prevSourcePosition.current !== sourcePosition;
        const targetPosChanged = prevTargetPosition.current !== targetPosition;
        if (nodeRef.current && (typeChanged || sourcePosChanged || targetPosChanged)) {
          if (typeChanged) {
            prevType.current = type;
          }
          if (sourcePosChanged) {
            prevSourcePosition.current = sourcePosition;
          }
          if (targetPosChanged) {
            prevTargetPosition.current = targetPosition;
          }
          store.getState().updateNodeDimensions([{ id: id4, nodeElement: nodeRef.current, forceUpdate: true }]);
        }
      }, [id4, type, sourcePosition, targetPosition]);
      const dragging = useDrag({
        nodeRef,
        disabled: hidden || !isDraggable,
        noDragClassName,
        handleSelector: dragHandle,
        nodeId: id4,
        isSelectable,
        selectNodesOnDrag
      });
      if (hidden) {
        return null;
      }
      return (0, import_jsx_runtime.jsx)("div", { className: cc([
        "react-flow__node",
        `react-flow__node-${type}`,
        {
          // this is overwritable by passing `nopan` as a class name
          [noPanClassName]: isDraggable
        },
        className,
        {
          selected,
          selectable: isSelectable,
          parent: isParent,
          dragging
        }
      ]), ref: nodeRef, style: {
        zIndex,
        transform: `translate(${xPosOrigin}px,${yPosOrigin}px)`,
        pointerEvents: hasPointerEvents ? "all" : "none",
        visibility: initialized ? "visible" : "hidden",
        ...style2
      }, "data-id": id4, "data-testid": `rf__node-${id4}`, onMouseEnter: onMouseEnterHandler, onMouseMove: onMouseMoveHandler, onMouseLeave: onMouseLeaveHandler, onContextMenu: onContextMenuHandler, onClick: onSelectNodeHandler, onDoubleClick: onDoubleClickHandler, onKeyDown: isFocusable ? onKeyDown : void 0, tabIndex: isFocusable ? 0 : void 0, role: isFocusable ? "button" : void 0, "aria-describedby": disableKeyboardA11y ? void 0 : `${ARIA_NODE_DESC_KEY}-${rfId}`, "aria-label": ariaLabel, children: (0, import_jsx_runtime.jsx)(Provider2, { value: id4, children: (0, import_jsx_runtime.jsx)(NodeComponent, { id: id4, data, type, xPos, yPos, selected, isConnectable, sourcePosition, targetPosition, dragging, dragHandle, zIndex }) }) });
    };
    NodeWrapper.displayName = "NodeWrapper";
    return (0, import_react33.memo)(NodeWrapper);
  };
  function createNodeTypes(nodeTypes) {
    const standardTypes = {
      input: wrapNode(nodeTypes.input || InputNode$1),
      default: wrapNode(nodeTypes.default || DefaultNode$1),
      output: wrapNode(nodeTypes.output || OutputNode$1),
      group: wrapNode(nodeTypes.group || GroupNode)
    };
    const wrappedTypes = {};
    const specialTypes = Object.keys(nodeTypes).filter((k2) => !["input", "default", "output", "group"].includes(k2)).reduce((res, key) => {
      res[key] = wrapNode(nodeTypes[key] || DefaultNode$1);
      return res;
    }, wrappedTypes);
    return {
      ...standardTypes,
      ...specialTypes
    };
  }
  var getPositionWithOrigin = ({ x: x3, y: y4, width, height, origin }) => {
    if (!width || !height) {
      return { x: x3, y: y4 };
    }
    if (origin[0] < 0 || origin[1] < 0 || origin[0] > 1 || origin[1] > 1) {
      return { x: x3, y: y4 };
    }
    return {
      x: x3 - width * origin[0],
      y: y4 - height * origin[1]
    };
  };
  var doc = typeof document !== "undefined" ? document : null;
  var useKeyPress = (keyCode = null, options = { target: doc }) => {
    const [keyPressed, setKeyPressed] = (0, import_react33.useState)(false);
    const modifierPressed = (0, import_react33.useRef)(false);
    const pressedKeys = (0, import_react33.useRef)(/* @__PURE__ */ new Set([]));
    const [keyCodes, keysToWatch] = (0, import_react33.useMemo)(() => {
      if (keyCode !== null) {
        const keyCodeArr = Array.isArray(keyCode) ? keyCode : [keyCode];
        const keys = keyCodeArr.filter((kc) => typeof kc === "string").map((kc) => kc.split("+"));
        const keysFlat = keys.reduce((res, item) => res.concat(...item), []);
        return [keys, keysFlat];
      }
      return [[], []];
    }, [keyCode]);
    (0, import_react33.useEffect)(() => {
      if (keyCode !== null) {
        const downHandler = (event) => {
          modifierPressed.current = event.ctrlKey || event.metaKey || event.shiftKey;
          if (!modifierPressed.current && isInputDOMNode(event)) {
            return false;
          }
          const keyOrCode = useKeyOrCode(event.code, keysToWatch);
          pressedKeys.current.add(event[keyOrCode]);
          if (isMatchingKey(keyCodes, pressedKeys.current, false)) {
            event.preventDefault();
            setKeyPressed(true);
          }
        };
        const upHandler = (event) => {
          if (!modifierPressed.current && isInputDOMNode(event)) {
            return false;
          }
          const keyOrCode = useKeyOrCode(event.code, keysToWatch);
          if (isMatchingKey(keyCodes, pressedKeys.current, true)) {
            setKeyPressed(false);
            pressedKeys.current.clear();
          } else {
            pressedKeys.current.delete(event[keyOrCode]);
          }
          modifierPressed.current = false;
        };
        const resetHandler = () => {
          pressedKeys.current.clear();
          setKeyPressed(false);
        };
        options?.target?.addEventListener("keydown", downHandler);
        options?.target?.addEventListener("keyup", upHandler);
        window.addEventListener("blur", resetHandler);
        return () => {
          options?.target?.removeEventListener("keydown", downHandler);
          options?.target?.removeEventListener("keyup", upHandler);
          window.removeEventListener("blur", resetHandler);
        };
      }
    }, [keyCode, setKeyPressed]);
    return keyPressed;
  };
  function isMatchingKey(keyCodes, pressedKeys, isUp) {
    return keyCodes.filter((keys) => isUp || keys.length === pressedKeys.size).some((keys) => keys.every((k2) => pressedKeys.has(k2)));
  }
  function useKeyOrCode(eventCode, keysToWatch) {
    return keysToWatch.includes(eventCode) ? "code" : "key";
  }
  function calculateXYZPosition(node2, nodeInternals, result, nodeOrigin) {
    if (!node2.parentNode) {
      return result;
    }
    const parentNode = nodeInternals.get(node2.parentNode);
    const parentNodePosition = getNodePositionWithOrigin(parentNode, nodeOrigin);
    return calculateXYZPosition(parentNode, nodeInternals, {
      x: (result.x ?? 0) + parentNodePosition.x,
      y: (result.y ?? 0) + parentNodePosition.y,
      z: (parentNode[internalsSymbol]?.z ?? 0) > (result.z ?? 0) ? parentNode[internalsSymbol]?.z ?? 0 : result.z ?? 0
    }, nodeOrigin);
  }
  function updateAbsoluteNodePositions(nodeInternals, nodeOrigin, parentNodes) {
    nodeInternals.forEach((node2) => {
      if (node2.parentNode && !nodeInternals.has(node2.parentNode)) {
        throw new Error(`Parent node ${node2.parentNode} not found`);
      }
      if (node2.parentNode || parentNodes?.[node2.id]) {
        const { x: x3, y: y4, z: z2 } = calculateXYZPosition(node2, nodeInternals, {
          ...node2.position,
          z: node2[internalsSymbol]?.z ?? 0
        }, nodeOrigin);
        node2.positionAbsolute = {
          x: x3,
          y: y4
        };
        node2[internalsSymbol].z = z2;
        if (parentNodes?.[node2.id]) {
          node2[internalsSymbol].isParent = true;
        }
      }
    });
  }
  function createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) {
    const nextNodeInternals = /* @__PURE__ */ new Map();
    const parentNodes = {};
    const selectedNodeZ = elevateNodesOnSelect ? 1e3 : 0;
    nodes.forEach((node2) => {
      const z2 = (isNumeric(node2.zIndex) ? node2.zIndex : 0) + (node2.selected ? selectedNodeZ : 0);
      const currInternals = nodeInternals.get(node2.id);
      const internals = {
        width: currInternals?.width,
        height: currInternals?.height,
        ...node2,
        positionAbsolute: {
          x: node2.position.x,
          y: node2.position.y
        }
      };
      if (node2.parentNode) {
        internals.parentNode = node2.parentNode;
        parentNodes[node2.parentNode] = true;
      }
      Object.defineProperty(internals, internalsSymbol, {
        enumerable: false,
        value: {
          handleBounds: currInternals?.[internalsSymbol]?.handleBounds,
          z: z2
        }
      });
      nextNodeInternals.set(node2.id, internals);
    });
    updateAbsoluteNodePositions(nextNodeInternals, nodeOrigin, parentNodes);
    return nextNodeInternals;
  }
  function fitView(get4, options = {}) {
    const { getNodes, width, height, minZoom, maxZoom, d3Zoom, d3Selection, fitViewOnInitDone, fitViewOnInit, nodeOrigin } = get4();
    const isInitialFitView = options.initial && !fitViewOnInitDone && fitViewOnInit;
    const d3initialized = d3Zoom && d3Selection;
    if (d3initialized && (isInitialFitView || !options.initial)) {
      const nodes = getNodes().filter((n5) => {
        const isVisible = options.includeHiddenNodes ? n5.width && n5.height : !n5.hidden;
        if (options.nodes?.length) {
          return isVisible && options.nodes.some((optionNode) => optionNode.id === n5.id);
        }
        return isVisible;
      });
      const nodesInitialized = nodes.every((n5) => n5.width && n5.height);
      if (nodes.length > 0 && nodesInitialized) {
        const bounds = getRectOfNodes(nodes, nodeOrigin);
        const [x3, y4, zoom] = getTransformForBounds(bounds, width, height, options.minZoom ?? minZoom, options.maxZoom ?? maxZoom, options.padding ?? 0.1);
        const nextTransform = identity2.translate(x3, y4).scale(zoom);
        if (typeof options.duration === "number" && options.duration > 0) {
          d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);
        } else {
          d3Zoom.transform(d3Selection, nextTransform);
        }
        return true;
      }
    }
    return false;
  }
  function handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {
    nodeChanges.forEach((change) => {
      const node2 = nodeInternals.get(change.id);
      if (node2) {
        nodeInternals.set(node2.id, {
          ...node2,
          [internalsSymbol]: node2[internalsSymbol],
          selected: change.selected
        });
      }
    });
    return new Map(nodeInternals);
  }
  function handleControlledEdgeSelectionChange(edgeChanges, edges) {
    return edges.map((e3) => {
      const change = edgeChanges.find((change2) => change2.id === e3.id);
      if (change) {
        e3.selected = change.selected;
      }
      return e3;
    });
  }
  function updateNodesAndEdgesSelections({ changedNodes, changedEdges, get: get4, set: set4 }) {
    const { nodeInternals, edges, onNodesChange, onEdgesChange, hasDefaultNodes, hasDefaultEdges } = get4();
    if (changedNodes?.length) {
      if (hasDefaultNodes) {
        set4({ nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals) });
      }
      onNodesChange?.(changedNodes);
    }
    if (changedEdges?.length) {
      if (hasDefaultEdges) {
        set4({ edges: handleControlledEdgeSelectionChange(changedEdges, edges) });
      }
      onEdgesChange?.(changedEdges);
    }
  }
  var noop3 = () => {
  };
  var initialViewportHelper = {
    zoomIn: noop3,
    zoomOut: noop3,
    zoomTo: noop3,
    getZoom: () => 1,
    setViewport: noop3,
    getViewport: () => ({ x: 0, y: 0, zoom: 1 }),
    fitView: () => false,
    setCenter: noop3,
    fitBounds: noop3,
    project: (position2) => position2,
    viewportInitialized: false
  };
  var selector$b = (s4) => ({
    d3Zoom: s4.d3Zoom,
    d3Selection: s4.d3Selection
  });
  var useViewportHelper = () => {
    const store = useStoreApi();
    const { d3Zoom, d3Selection } = useStore2(selector$b, shallow);
    const viewportHelperFunctions = (0, import_react33.useMemo)(() => {
      if (d3Selection && d3Zoom) {
        return {
          zoomIn: (options) => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1.2),
          zoomOut: (options) => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1 / 1.2),
          zoomTo: (zoomLevel, options) => d3Zoom.scaleTo(getD3Transition(d3Selection, options?.duration), zoomLevel),
          getZoom: () => store.getState().transform[2],
          setViewport: (transform3, options) => {
            const [x3, y4, zoom] = store.getState().transform;
            const nextTransform = identity2.translate(transform3.x ?? x3, transform3.y ?? y4).scale(transform3.zoom ?? zoom);
            d3Zoom.transform(getD3Transition(d3Selection, options?.duration), nextTransform);
          },
          getViewport: () => {
            const [x3, y4, zoom] = store.getState().transform;
            return { x: x3, y: y4, zoom };
          },
          fitView: (options) => fitView(store.getState, options),
          setCenter: (x3, y4, options) => {
            const { width, height, maxZoom } = store.getState();
            const nextZoom = typeof options?.zoom !== "undefined" ? options.zoom : maxZoom;
            const centerX = width / 2 - x3 * nextZoom;
            const centerY = height / 2 - y4 * nextZoom;
            const transform3 = identity2.translate(centerX, centerY).scale(nextZoom);
            d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform3);
          },
          fitBounds: (bounds, options) => {
            const { width, height, minZoom, maxZoom } = store.getState();
            const [x3, y4, zoom] = getTransformForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? 0.1);
            const transform3 = identity2.translate(x3, y4).scale(zoom);
            d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform3);
          },
          project: (position2) => {
            const { transform: transform3, snapToGrid, snapGrid } = store.getState();
            return pointToRendererPoint(position2, transform3, snapToGrid, snapGrid);
          },
          viewportInitialized: true
        };
      }
      return initialViewportHelper;
    }, [d3Zoom, d3Selection]);
    return viewportHelperFunctions;
  };
  function useReactFlow() {
    const viewportHelper = useViewportHelper();
    const store = useStoreApi();
    const getNodes = (0, import_react33.useCallback)(() => {
      return store.getState().getNodes().map((n5) => ({ ...n5 }));
    }, []);
    const getNode = (0, import_react33.useCallback)((id4) => {
      return store.getState().nodeInternals.get(id4);
    }, []);
    const getEdges = (0, import_react33.useCallback)(() => {
      const { edges = [] } = store.getState();
      return edges.map((e3) => ({ ...e3 }));
    }, []);
    const getEdge = (0, import_react33.useCallback)((id4) => {
      const { edges = [] } = store.getState();
      return edges.find((e3) => e3.id === id4);
    }, []);
    const setNodes = (0, import_react33.useCallback)((payload) => {
      const { getNodes: getNodes2, setNodes: setNodes2, hasDefaultNodes, onNodesChange } = store.getState();
      const nodes = getNodes2();
      const nextNodes = typeof payload === "function" ? payload(nodes) : payload;
      if (hasDefaultNodes) {
        setNodes2(nextNodes);
      } else if (onNodesChange) {
        const changes = nextNodes.length === 0 ? nodes.map((node2) => ({ type: "remove", id: node2.id })) : nextNodes.map((node2) => ({ item: node2, type: "reset" }));
        onNodesChange(changes);
      }
    }, []);
    const setEdges = (0, import_react33.useCallback)((payload) => {
      const { edges = [], setEdges: setEdges2, hasDefaultEdges, onEdgesChange } = store.getState();
      const nextEdges = typeof payload === "function" ? payload(edges) : payload;
      if (hasDefaultEdges) {
        setEdges2(nextEdges);
      } else if (onEdgesChange) {
        const changes = nextEdges.length === 0 ? edges.map((edge) => ({ type: "remove", id: edge.id })) : nextEdges.map((edge) => ({ item: edge, type: "reset" }));
        onEdgesChange(changes);
      }
    }, []);
    const addNodes = (0, import_react33.useCallback)((payload) => {
      const nodes = Array.isArray(payload) ? payload : [payload];
      const { getNodes: getNodes2, setNodes: setNodes2, hasDefaultNodes, onNodesChange } = store.getState();
      if (hasDefaultNodes) {
        const currentNodes = getNodes2();
        const nextNodes = [...currentNodes, ...nodes];
        setNodes2(nextNodes);
      } else if (onNodesChange) {
        const changes = nodes.map((node2) => ({ item: node2, type: "add" }));
        onNodesChange(changes);
      }
    }, []);
    const addEdges = (0, import_react33.useCallback)((payload) => {
      const nextEdges = Array.isArray(payload) ? payload : [payload];
      const { edges = [], setEdges: setEdges2, hasDefaultEdges, onEdgesChange } = store.getState();
      if (hasDefaultEdges) {
        setEdges2([...edges, ...nextEdges]);
      } else if (onEdgesChange) {
        const changes = nextEdges.map((edge) => ({ item: edge, type: "add" }));
        onEdgesChange(changes);
      }
    }, []);
    const toObject = (0, import_react33.useCallback)(() => {
      const { getNodes: getNodes2, edges = [], transform: transform3 } = store.getState();
      const [x3, y4, zoom] = transform3;
      return {
        nodes: getNodes2().map((n5) => ({ ...n5 })),
        edges: edges.map((e3) => ({ ...e3 })),
        viewport: {
          x: x3,
          y: y4,
          zoom
        }
      };
    }, []);
    const deleteElements = (0, import_react33.useCallback)(({ nodes: nodesDeleted, edges: edgesDeleted }) => {
      const { nodeInternals, getNodes: getNodes2, edges, hasDefaultNodes, hasDefaultEdges, onNodesDelete, onEdgesDelete, onNodesChange, onEdgesChange } = store.getState();
      const nodeIds = (nodesDeleted || []).map((node2) => node2.id);
      const edgeIds = (edgesDeleted || []).map((edge) => edge.id);
      const nodesToRemove = getNodes2().reduce((res, node2) => {
        const parentHit = !nodeIds.includes(node2.id) && node2.parentNode && res.find((n5) => n5.id === node2.parentNode);
        const deletable = typeof node2.deletable === "boolean" ? node2.deletable : true;
        if (deletable && (nodeIds.includes(node2.id) || parentHit)) {
          res.push(node2);
        }
        return res;
      }, []);
      const deletableEdges = edges.filter((e3) => typeof e3.deletable === "boolean" ? e3.deletable : true);
      const initialHitEdges = deletableEdges.filter((e3) => edgeIds.includes(e3.id));
      if (nodesToRemove || initialHitEdges) {
        const connectedEdges = getConnectedEdges(nodesToRemove, deletableEdges);
        const edgesToRemove = [...initialHitEdges, ...connectedEdges];
        const edgeIdsToRemove = edgesToRemove.reduce((res, edge) => {
          if (!res.includes(edge.id)) {
            res.push(edge.id);
          }
          return res;
        }, []);
        if (hasDefaultEdges || hasDefaultNodes) {
          if (hasDefaultEdges) {
            store.setState({
              edges: edges.filter((e3) => !edgeIdsToRemove.includes(e3.id))
            });
          }
          if (hasDefaultNodes) {
            nodesToRemove.forEach((node2) => {
              nodeInternals.delete(node2.id);
            });
            store.setState({
              nodeInternals: new Map(nodeInternals)
            });
          }
        }
        if (edgeIdsToRemove.length > 0) {
          onEdgesDelete?.(edgesToRemove);
          if (onEdgesChange) {
            onEdgesChange(edgeIdsToRemove.map((id4) => ({
              id: id4,
              type: "remove"
            })));
          }
        }
        if (nodesToRemove.length > 0) {
          onNodesDelete?.(nodesToRemove);
          if (onNodesChange) {
            const nodeChanges = nodesToRemove.map((n5) => ({ id: n5.id, type: "remove" }));
            onNodesChange(nodeChanges);
          }
        }
      }
    }, []);
    const getNodeRect = (0, import_react33.useCallback)((nodeOrRect) => {
      const isRect = isRectObject(nodeOrRect);
      const node2 = isRect ? null : store.getState().nodeInternals.get(nodeOrRect.id);
      const nodeRect = isRect ? nodeOrRect : nodeToRect(node2);
      return [nodeRect, node2, isRect];
    }, []);
    const getIntersectingNodes = (0, import_react33.useCallback)((nodeOrRect, partially = true, nodes) => {
      const [nodeRect, node2, isRect] = getNodeRect(nodeOrRect);
      if (!nodeRect) {
        return [];
      }
      return (nodes || store.getState().getNodes()).filter((n5) => {
        if (!isRect && (n5.id === node2.id || !n5.positionAbsolute)) {
          return false;
        }
        const currNodeRect = nodeToRect(n5);
        const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);
        const partiallyVisible = partially && overlappingArea > 0;
        return partiallyVisible || overlappingArea >= nodeOrRect.width * nodeOrRect.height;
      });
    }, []);
    const isNodeIntersecting = (0, import_react33.useCallback)((nodeOrRect, area, partially = true) => {
      const [nodeRect] = getNodeRect(nodeOrRect);
      if (!nodeRect) {
        return false;
      }
      const overlappingArea = getOverlappingArea(nodeRect, area);
      const partiallyVisible = partially && overlappingArea > 0;
      return partiallyVisible || overlappingArea >= nodeOrRect.width * nodeOrRect.height;
    }, []);
    return (0, import_react33.useMemo)(() => {
      return {
        ...viewportHelper,
        getNodes,
        getNode,
        getEdges,
        getEdge,
        setNodes,
        setEdges,
        addNodes,
        addEdges,
        toObject,
        deleteElements,
        getIntersectingNodes,
        isNodeIntersecting
      };
    }, [
      viewportHelper,
      getNodes,
      getNode,
      getEdges,
      getEdge,
      setNodes,
      setEdges,
      addNodes,
      addEdges,
      toObject,
      deleteElements,
      getIntersectingNodes,
      isNodeIntersecting
    ]);
  }
  var useGlobalKeyHandler = ({ deleteKeyCode, multiSelectionKeyCode }) => {
    const store = useStoreApi();
    const { deleteElements } = useReactFlow();
    const deleteKeyPressed = useKeyPress(deleteKeyCode);
    const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);
    (0, import_react33.useEffect)(() => {
      if (deleteKeyPressed) {
        const { edges, getNodes } = store.getState();
        const selectedNodes = getNodes().filter((node2) => node2.selected);
        const selectedEdges = edges.filter((edge) => edge.selected);
        deleteElements({ nodes: selectedNodes, edges: selectedEdges });
        store.setState({ nodesSelectionActive: false });
      }
    }, [deleteKeyPressed]);
    (0, import_react33.useEffect)(() => {
      store.setState({ multiSelectionActive: multiSelectionKeyPressed });
    }, [multiSelectionKeyPressed]);
  };
  function useResizeHandler(rendererNode) {
    const store = useStoreApi();
    (0, import_react33.useEffect)(() => {
      let resizeObserver;
      const updateDimensions = () => {
        if (!rendererNode.current) {
          return;
        }
        const size = getDimensions(rendererNode.current);
        if (size.height === 0 || size.width === 0) {
          store.getState().onError?.("004", errorMessages["error004"]());
        }
        store.setState({ width: size.width || 500, height: size.height || 500 });
      };
      updateDimensions();
      window.addEventListener("resize", updateDimensions);
      if (rendererNode.current) {
        resizeObserver = new ResizeObserver(() => updateDimensions());
        resizeObserver.observe(rendererNode.current);
      }
      return () => {
        window.removeEventListener("resize", updateDimensions);
        if (resizeObserver && rendererNode.current) {
          resizeObserver.unobserve(rendererNode.current);
        }
      };
    }, []);
  }
  var containerStyle = {
    position: "absolute",
    width: "100%",
    height: "100%",
    top: 0,
    left: 0
  };
  var viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;
  var eventToFlowTransform = (eventViewport) => ({
    x: eventViewport.x,
    y: eventViewport.y,
    zoom: eventViewport.k
  });
  var isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);
  var isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);
  var selector$a = (s4) => ({
    d3Zoom: s4.d3Zoom,
    d3Selection: s4.d3Selection,
    d3ZoomHandler: s4.d3ZoomHandler,
    userSelectionActive: s4.userSelectionActive
  });
  var ZoomPane = ({ onMove, onMoveStart, onMoveEnd, onPaneContextMenu, zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, elementsSelectable, panOnDrag = true, defaultViewport, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling = true, children: children2, noWheelClassName, noPanClassName }) => {
    const timerId = (0, import_react33.useRef)();
    const store = useStoreApi();
    const isZoomingOrPanning = (0, import_react33.useRef)(false);
    const zoomedWithRightMouseButton = (0, import_react33.useRef)(false);
    const zoomPane = (0, import_react33.useRef)(null);
    const prevTransform = (0, import_react33.useRef)({ x: 0, y: 0, zoom: 0 });
    const { d3Zoom, d3Selection, d3ZoomHandler, userSelectionActive } = useStore2(selector$a, shallow);
    const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);
    const mouseButton = (0, import_react33.useRef)(0);
    useResizeHandler(zoomPane);
    (0, import_react33.useEffect)(() => {
      if (zoomPane.current) {
        const bbox = zoomPane.current.getBoundingClientRect();
        const d3ZoomInstance = zoom_default2().scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);
        const selection2 = select_default2(zoomPane.current).call(d3ZoomInstance);
        const updatedTransform = identity2.translate(defaultViewport.x, defaultViewport.y).scale(clamp2(defaultViewport.zoom, minZoom, maxZoom));
        const extent = [
          [0, 0],
          [bbox.width, bbox.height]
        ];
        const constrainedTransform = d3ZoomInstance.constrain()(updatedTransform, extent, translateExtent);
        d3ZoomInstance.transform(selection2, constrainedTransform);
        store.setState({
          d3Zoom: d3ZoomInstance,
          d3Selection: selection2,
          d3ZoomHandler: selection2.on("wheel.zoom"),
          // we need to pass transform because zoom handler is not registered when we set the initial transform
          transform: [constrainedTransform.x, constrainedTransform.y, constrainedTransform.k],
          domNode: zoomPane.current.closest(".react-flow")
        });
      }
    }, []);
    (0, import_react33.useEffect)(() => {
      if (d3Selection && d3Zoom) {
        if (panOnScroll && !zoomActivationKeyPressed && !userSelectionActive) {
          d3Selection.on("wheel.zoom", (event) => {
            if (isWrappedWithClass(event, noWheelClassName)) {
              return false;
            }
            event.preventDefault();
            event.stopImmediatePropagation();
            const currentZoom = d3Selection.property("__zoom").k || 1;
            if (event.ctrlKey && zoomOnPinch) {
              const point = pointer_default(event);
              const pinchDelta = -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * 10;
              const zoom = currentZoom * Math.pow(2, pinchDelta);
              d3Zoom.scaleTo(d3Selection, zoom, point);
              return;
            }
            const deltaNormalize = event.deltaMode === 1 ? 20 : 1;
            const deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;
            const deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;
            d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed);
          }, { passive: false });
        } else if (typeof d3ZoomHandler !== "undefined") {
          d3Selection.on("wheel.zoom", function(event, d4) {
            if (!preventScrolling || isWrappedWithClass(event, noWheelClassName)) {
              return null;
            }
            event.preventDefault();
            d3ZoomHandler.call(this, event, d4);
          }, { passive: false });
        }
      }
    }, [
      userSelectionActive,
      panOnScroll,
      panOnScrollMode,
      d3Selection,
      d3Zoom,
      d3ZoomHandler,
      zoomActivationKeyPressed,
      zoomOnPinch,
      preventScrolling,
      noWheelClassName
    ]);
    (0, import_react33.useEffect)(() => {
      if (d3Zoom) {
        d3Zoom.on("start", (event) => {
          if (!event.sourceEvent) {
            return null;
          }
          mouseButton.current = event.sourceEvent.button;
          const { onViewportChangeStart } = store.getState();
          isZoomingOrPanning.current = true;
          if (event.sourceEvent?.type === "mousedown") {
            store.setState({ paneDragging: true });
          }
          if (onMoveStart || onViewportChangeStart) {
            const flowTransform = eventToFlowTransform(event.transform);
            prevTransform.current = flowTransform;
            onViewportChangeStart?.(flowTransform);
            onMoveStart?.(event.sourceEvent, flowTransform);
          }
        });
      }
    }, [d3Zoom, onMoveStart]);
    (0, import_react33.useEffect)(() => {
      if (d3Zoom) {
        if (userSelectionActive && !isZoomingOrPanning.current) {
          d3Zoom.on("zoom", null);
        } else if (!userSelectionActive) {
          d3Zoom.on("zoom", (event) => {
            const { onViewportChange } = store.getState();
            store.setState({ transform: [event.transform.x, event.transform.y, event.transform.k] });
            zoomedWithRightMouseButton.current = !!(onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0));
            if (onMove || onViewportChange) {
              const flowTransform = eventToFlowTransform(event.transform);
              onViewportChange?.(flowTransform);
              onMove?.(event.sourceEvent, flowTransform);
            }
          });
        }
      }
    }, [userSelectionActive, d3Zoom, onMove, panOnDrag, onPaneContextMenu]);
    (0, import_react33.useEffect)(() => {
      if (d3Zoom) {
        d3Zoom.on("end", (event) => {
          if (!event.sourceEvent) {
            return null;
          }
          const { onViewportChangeEnd } = store.getState();
          isZoomingOrPanning.current = false;
          store.setState({ paneDragging: false });
          if (onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0) && !zoomedWithRightMouseButton.current) {
            onPaneContextMenu(event.sourceEvent);
          }
          zoomedWithRightMouseButton.current = false;
          if ((onMoveEnd || onViewportChangeEnd) && viewChanged(prevTransform.current, event.transform)) {
            const flowTransform = eventToFlowTransform(event.transform);
            prevTransform.current = flowTransform;
            clearTimeout(timerId.current);
            timerId.current = setTimeout(() => {
              onViewportChangeEnd?.(flowTransform);
              onMoveEnd?.(event.sourceEvent, flowTransform);
            }, panOnScroll ? 150 : 0);
          }
        });
      }
    }, [d3Zoom, panOnScroll, panOnDrag, onMoveEnd, onPaneContextMenu]);
    (0, import_react33.useEffect)(() => {
      if (d3Zoom) {
        d3Zoom.filter((event) => {
          const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;
          const pinchZoom = zoomOnPinch && event.ctrlKey;
          if (event.button === 1 && event.type === "mousedown" && (isWrappedWithClass(event, "react-flow__node") || isWrappedWithClass(event, "react-flow__edge"))) {
            return true;
          }
          if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {
            return false;
          }
          if (userSelectionActive) {
            return false;
          }
          if (!zoomOnDoubleClick && event.type === "dblclick") {
            return false;
          }
          if (isWrappedWithClass(event, noWheelClassName) && event.type === "wheel") {
            return false;
          }
          if (isWrappedWithClass(event, noPanClassName) && event.type !== "wheel") {
            return false;
          }
          if (!zoomOnPinch && event.ctrlKey && event.type === "wheel") {
            return false;
          }
          if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === "wheel") {
            return false;
          }
          if (!panOnDrag && (event.type === "mousedown" || event.type === "touchstart")) {
            return false;
          }
          if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && (event.type === "mousedown" || event.type === "touchstart")) {
            return false;
          }
          const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;
          return (!event.ctrlKey || event.type === "wheel") && buttonAllowed;
        });
      }
    }, [
      userSelectionActive,
      d3Zoom,
      zoomOnScroll,
      zoomOnPinch,
      panOnScroll,
      zoomOnDoubleClick,
      panOnDrag,
      elementsSelectable,
      zoomActivationKeyPressed
    ]);
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__renderer", ref: zoomPane, style: containerStyle, children: children2 });
  };
  var selector$9 = (s4) => ({
    userSelectionActive: s4.userSelectionActive,
    userSelectionRect: s4.userSelectionRect
  });
  function UserSelection() {
    const { userSelectionActive, userSelectionRect } = useStore2(selector$9, shallow);
    const isActive = userSelectionActive && userSelectionRect;
    if (!isActive) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__selection react-flow__container", style: {
      width: userSelectionRect.width,
      height: userSelectionRect.height,
      transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`
    } });
  }
  function handleParentExpand(res, updateItem) {
    const parent = res.find((e3) => e3.id === updateItem.parentNode);
    if (parent) {
      const extendWidth = updateItem.position.x + updateItem.width - parent.width;
      const extendHeight = updateItem.position.y + updateItem.height - parent.height;
      if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {
        parent.style = { ...parent.style };
        parent.style.width = parent.style.width ?? parent.width;
        parent.style.height = parent.style.height ?? parent.height;
        if (extendWidth > 0) {
          parent.style.width += extendWidth;
        }
        if (extendHeight > 0) {
          parent.style.height += extendHeight;
        }
        if (updateItem.position.x < 0) {
          const xDiff = Math.abs(updateItem.position.x);
          parent.position.x = parent.position.x - xDiff;
          parent.style.width += xDiff;
          updateItem.position.x = 0;
        }
        if (updateItem.position.y < 0) {
          const yDiff = Math.abs(updateItem.position.y);
          parent.position.y = parent.position.y - yDiff;
          parent.style.height += yDiff;
          updateItem.position.y = 0;
        }
        parent.width = parent.style.width;
        parent.height = parent.style.height;
      }
    }
  }
  function applyChanges(changes, elements) {
    if (changes.some((c4) => c4.type === "reset")) {
      return changes.filter((c4) => c4.type === "reset").map((c4) => c4.item);
    }
    const initElements = changes.filter((c4) => c4.type === "add").map((c4) => c4.item);
    return elements.reduce((res, item) => {
      const currentChanges = changes.filter((c4) => c4.id === item.id);
      if (currentChanges.length === 0) {
        res.push(item);
        return res;
      }
      const updateItem = { ...item };
      for (const currentChange of currentChanges) {
        if (currentChange) {
          switch (currentChange.type) {
            case "select": {
              updateItem.selected = currentChange.selected;
              break;
            }
            case "position": {
              if (typeof currentChange.position !== "undefined") {
                updateItem.position = currentChange.position;
              }
              if (typeof currentChange.positionAbsolute !== "undefined") {
                updateItem.positionAbsolute = currentChange.positionAbsolute;
              }
              if (typeof currentChange.dragging !== "undefined") {
                updateItem.dragging = currentChange.dragging;
              }
              if (updateItem.expandParent) {
                handleParentExpand(res, updateItem);
              }
              break;
            }
            case "dimensions": {
              if (typeof currentChange.dimensions !== "undefined") {
                updateItem.width = currentChange.dimensions.width;
                updateItem.height = currentChange.dimensions.height;
              }
              if (typeof currentChange.updateStyle !== "undefined") {
                updateItem.style = { ...updateItem.style || {}, ...currentChange.dimensions };
              }
              if (typeof currentChange.resizing === "boolean") {
                updateItem.resizing = currentChange.resizing;
              }
              if (updateItem.expandParent) {
                handleParentExpand(res, updateItem);
              }
              break;
            }
            case "remove": {
              return res;
            }
          }
        }
      }
      res.push(updateItem);
      return res;
    }, initElements);
  }
  function applyNodeChanges(changes, nodes) {
    return applyChanges(changes, nodes);
  }
  function applyEdgeChanges(changes, edges) {
    return applyChanges(changes, edges);
  }
  var createSelectionChange = (id4, selected) => ({
    id: id4,
    type: "select",
    selected
  });
  function getSelectionChanges(items, selectedIds) {
    return items.reduce((res, item) => {
      const willBeSelected = selectedIds.includes(item.id);
      if (!item.selected && willBeSelected) {
        item.selected = true;
        res.push(createSelectionChange(item.id, true));
      } else if (item.selected && !willBeSelected) {
        item.selected = false;
        res.push(createSelectionChange(item.id, false));
      }
      return res;
    }, []);
  }
  var wrapHandler = (handler, containerRef) => {
    return (event) => {
      if (event.target !== containerRef.current) {
        return;
      }
      handler?.(event);
    };
  };
  var selector$8 = (s4) => ({
    userSelectionActive: s4.userSelectionActive,
    elementsSelectable: s4.elementsSelectable,
    dragging: s4.paneDragging
  });
  var Pane = (0, import_react33.memo)(({ isSelecting, selectionMode = SelectionMode.Full, panOnDrag, onSelectionStart, onSelectionEnd, onPaneClick, onPaneContextMenu, onPaneScroll, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, children: children2 }) => {
    const container = (0, import_react33.useRef)(null);
    const store = useStoreApi();
    const prevSelectedNodesCount = (0, import_react33.useRef)(0);
    const prevSelectedEdgesCount = (0, import_react33.useRef)(0);
    const containerBounds = (0, import_react33.useRef)();
    const { userSelectionActive, elementsSelectable, dragging } = useStore2(selector$8, shallow);
    const resetUserSelection = () => {
      store.setState({ userSelectionActive: false, userSelectionRect: null });
      prevSelectedNodesCount.current = 0;
      prevSelectedEdgesCount.current = 0;
    };
    const onClick = (event) => {
      onPaneClick?.(event);
      store.getState().resetSelectedElements();
      store.setState({ nodesSelectionActive: false });
    };
    const onContextMenu = (event) => {
      if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {
        event.preventDefault();
        return;
      }
      onPaneContextMenu?.(event);
    };
    const onWheel = onPaneScroll ? (event) => onPaneScroll(event) : void 0;
    const onMouseDown = (event) => {
      const { resetSelectedElements, domNode } = store.getState();
      containerBounds.current = domNode?.getBoundingClientRect();
      if (!elementsSelectable || !isSelecting || event.button !== 0 || event.target !== container.current || !containerBounds.current) {
        return;
      }
      const { x: x3, y: y4 } = getEventPosition(event, containerBounds.current);
      resetSelectedElements();
      store.setState({
        userSelectionRect: {
          width: 0,
          height: 0,
          startX: x3,
          startY: y4,
          x: x3,
          y: y4
        }
      });
      onSelectionStart?.(event);
    };
    const onMouseMove = (event) => {
      const { userSelectionRect, nodeInternals, edges, transform: transform3, onNodesChange, onEdgesChange, nodeOrigin, getNodes } = store.getState();
      if (!isSelecting || !containerBounds.current || !userSelectionRect) {
        return;
      }
      store.setState({ userSelectionActive: true, nodesSelectionActive: false });
      const mousePos = getEventPosition(event, containerBounds.current);
      const startX = userSelectionRect.startX ?? 0;
      const startY = userSelectionRect.startY ?? 0;
      const nextUserSelectRect = {
        ...userSelectionRect,
        x: mousePos.x < startX ? mousePos.x : startX,
        y: mousePos.y < startY ? mousePos.y : startY,
        width: Math.abs(mousePos.x - startX),
        height: Math.abs(mousePos.y - startY)
      };
      const nodes = getNodes();
      const selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform3, selectionMode === SelectionMode.Partial, true, nodeOrigin);
      const selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map((e3) => e3.id);
      const selectedNodeIds = selectedNodes.map((n5) => n5.id);
      if (prevSelectedNodesCount.current !== selectedNodeIds.length) {
        prevSelectedNodesCount.current = selectedNodeIds.length;
        const changes = getSelectionChanges(nodes, selectedNodeIds);
        if (changes.length) {
          onNodesChange?.(changes);
        }
      }
      if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {
        prevSelectedEdgesCount.current = selectedEdgeIds.length;
        const changes = getSelectionChanges(edges, selectedEdgeIds);
        if (changes.length) {
          onEdgesChange?.(changes);
        }
      }
      store.setState({
        userSelectionRect: nextUserSelectRect
      });
    };
    const onMouseUp = (event) => {
      if (event.button !== 0) {
        return;
      }
      const { userSelectionRect } = store.getState();
      if (!userSelectionActive && userSelectionRect && event.target === container.current) {
        onClick?.(event);
      }
      store.setState({ nodesSelectionActive: prevSelectedNodesCount.current > 0 });
      resetUserSelection();
      onSelectionEnd?.(event);
    };
    const onMouseLeave = (event) => {
      if (userSelectionActive) {
        store.setState({ nodesSelectionActive: prevSelectedNodesCount.current > 0 });
        onSelectionEnd?.(event);
      }
      resetUserSelection();
    };
    const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);
    return (0, import_jsx_runtime.jsxs)("div", { className: cc(["react-flow__pane", { dragging, selection: isSelecting }]), onClick: hasActiveSelection ? void 0 : wrapHandler(onClick, container), onContextMenu: wrapHandler(onContextMenu, container), onWheel: wrapHandler(onWheel, container), onMouseEnter: hasActiveSelection ? void 0 : onPaneMouseEnter, onMouseDown: hasActiveSelection ? onMouseDown : void 0, onMouseMove: hasActiveSelection ? onMouseMove : onPaneMouseMove, onMouseUp: hasActiveSelection ? onMouseUp : void 0, onMouseLeave: hasActiveSelection ? onMouseLeave : onPaneMouseLeave, ref: container, style: containerStyle, children: [children2, (0, import_jsx_runtime.jsx)(UserSelection, {})] });
  });
  Pane.displayName = "Pane";
  var selector$7 = (s4) => {
    const selectedNodes = s4.getNodes().filter((n5) => n5.selected);
    return {
      ...getRectOfNodes(selectedNodes, s4.nodeOrigin),
      transformString: `translate(${s4.transform[0]}px,${s4.transform[1]}px) scale(${s4.transform[2]})`,
      userSelectionActive: s4.userSelectionActive
    };
  };
  function NodesSelection({ onSelectionContextMenu, noPanClassName, disableKeyboardA11y }) {
    const store = useStoreApi();
    const { width, height, x: left, y: top, transformString, userSelectionActive } = useStore2(selector$7, shallow);
    const updatePositions = useUpdateNodePositions();
    const nodeRef = (0, import_react33.useRef)(null);
    (0, import_react33.useEffect)(() => {
      if (!disableKeyboardA11y) {
        nodeRef.current?.focus({
          preventScroll: true
        });
      }
    }, [disableKeyboardA11y]);
    useDrag({
      nodeRef
    });
    if (userSelectionActive || !width || !height) {
      return null;
    }
    const onContextMenu = onSelectionContextMenu ? (event) => {
      const selectedNodes = store.getState().getNodes().filter((n5) => n5.selected);
      onSelectionContextMenu(event, selectedNodes);
    } : void 0;
    const onKeyDown = (event) => {
      if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
        updatePositions({
          x: arrowKeyDiffs[event.key].x,
          y: arrowKeyDiffs[event.key].y,
          isShiftPressed: event.shiftKey
        });
      }
    };
    return (0, import_jsx_runtime.jsx)("div", { className: cc(["react-flow__nodesselection", "react-flow__container", noPanClassName]), style: {
      transform: transformString
    }, children: (0, import_jsx_runtime.jsx)("div", { ref: nodeRef, className: "react-flow__nodesselection-rect", onContextMenu, tabIndex: disableKeyboardA11y ? void 0 : -1, onKeyDown: disableKeyboardA11y ? void 0 : onKeyDown, style: {
      width,
      height,
      top,
      left
    } }) });
  }
  var NodesSelection$1 = (0, import_react33.memo)(NodesSelection);
  var selector$6 = (s4) => s4.nodesSelectionActive;
  var FlowRenderer = ({ children: children2, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, deleteKeyCode, onMove, onMoveStart, onMoveEnd, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: _panOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, onSelectionContextMenu, noWheelClassName, noPanClassName, disableKeyboardA11y }) => {
    const nodesSelectionActive = useStore2(selector$6);
    const selectionKeyPressed = useKeyPress(selectionKeyCode);
    const panActivationKeyPressed = useKeyPress(panActivationKeyCode);
    const panOnDrag = panActivationKeyPressed || _panOnDrag;
    const isSelecting = selectionKeyPressed || selectionOnDrag && panOnDrag !== true;
    useGlobalKeyHandler({ deleteKeyCode, multiSelectionKeyCode });
    return (0, import_jsx_runtime.jsx)(ZoomPane, { onMove, onMoveStart, onMoveEnd, onPaneContextMenu, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: !selectionKeyPressed && panOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling, noWheelClassName, noPanClassName, children: (0, import_jsx_runtime.jsxs)(Pane, { onSelectionStart, onSelectionEnd, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, panOnDrag, isSelecting: !!isSelecting, selectionMode, children: [children2, nodesSelectionActive && (0, import_jsx_runtime.jsx)(NodesSelection$1, { onSelectionContextMenu, noPanClassName, disableKeyboardA11y })] }) });
  };
  FlowRenderer.displayName = "FlowRenderer";
  var FlowRenderer$1 = (0, import_react33.memo)(FlowRenderer);
  function useVisibleNodes(onlyRenderVisible) {
    const nodes = useStore2((0, import_react33.useCallback)((s4) => onlyRenderVisible ? getNodesInside(s4.nodeInternals, { x: 0, y: 0, width: s4.width, height: s4.height }, s4.transform, true) : s4.getNodes(), [onlyRenderVisible]));
    return nodes;
  }
  var selector$5 = (s4) => ({
    nodesDraggable: s4.nodesDraggable,
    nodesConnectable: s4.nodesConnectable,
    nodesFocusable: s4.nodesFocusable,
    elementsSelectable: s4.elementsSelectable,
    updateNodeDimensions: s4.updateNodeDimensions,
    onError: s4.onError
  });
  var NodeRenderer = (props) => {
    const { nodesDraggable, nodesConnectable, nodesFocusable, elementsSelectable, updateNodeDimensions, onError } = useStore2(selector$5, shallow);
    const nodes = useVisibleNodes(props.onlyRenderVisibleElements);
    const resizeObserverRef = (0, import_react33.useRef)();
    const resizeObserver = (0, import_react33.useMemo)(() => {
      if (typeof ResizeObserver === "undefined") {
        return null;
      }
      const observer = new ResizeObserver((entries) => {
        const updates = entries.map((entry) => ({
          id: entry.target.getAttribute("data-id"),
          nodeElement: entry.target,
          forceUpdate: true
        }));
        updateNodeDimensions(updates);
      });
      resizeObserverRef.current = observer;
      return observer;
    }, []);
    (0, import_react33.useEffect)(() => {
      return () => {
        resizeObserverRef?.current?.disconnect();
      };
    }, []);
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__nodes", style: containerStyle, children: nodes.map((node2) => {
      let nodeType = node2.type || "default";
      if (!props.nodeTypes[nodeType]) {
        onError?.("003", errorMessages["error003"](nodeType));
        nodeType = "default";
      }
      const NodeComponent = props.nodeTypes[nodeType] || props.nodeTypes.default;
      const isDraggable = !!(node2.draggable || nodesDraggable && typeof node2.draggable === "undefined");
      const isSelectable = !!(node2.selectable || elementsSelectable && typeof node2.selectable === "undefined");
      const isConnectable = !!(node2.connectable || nodesConnectable && typeof node2.connectable === "undefined");
      const isFocusable = !!(node2.focusable || nodesFocusable && typeof node2.focusable === "undefined");
      const clampedPosition = props.nodeExtent ? clampPosition(node2.positionAbsolute, props.nodeExtent) : node2.positionAbsolute;
      const posX = clampedPosition?.x ?? 0;
      const posY = clampedPosition?.y ?? 0;
      const posOrigin = getPositionWithOrigin({
        x: posX,
        y: posY,
        width: node2.width ?? 0,
        height: node2.height ?? 0,
        origin: props.nodeOrigin
      });
      return (0, import_jsx_runtime.jsx)(NodeComponent, { id: node2.id, className: node2.className, style: node2.style, type: nodeType, data: node2.data, sourcePosition: node2.sourcePosition || Position.Bottom, targetPosition: node2.targetPosition || Position.Top, hidden: node2.hidden, xPos: posX, yPos: posY, xPosOrigin: posOrigin.x, yPosOrigin: posOrigin.y, selectNodesOnDrag: props.selectNodesOnDrag, onClick: props.onNodeClick, onMouseEnter: props.onNodeMouseEnter, onMouseMove: props.onNodeMouseMove, onMouseLeave: props.onNodeMouseLeave, onContextMenu: props.onNodeContextMenu, onDoubleClick: props.onNodeDoubleClick, selected: !!node2.selected, isDraggable, isSelectable, isConnectable, isFocusable, resizeObserver, dragHandle: node2.dragHandle, zIndex: node2[internalsSymbol]?.z ?? 0, isParent: !!node2[internalsSymbol]?.isParent, noDragClassName: props.noDragClassName, noPanClassName: props.noPanClassName, initialized: !!node2.width && !!node2.height, rfId: props.rfId, disableKeyboardA11y: props.disableKeyboardA11y, ariaLabel: node2.ariaLabel }, node2.id);
    }) });
  };
  NodeRenderer.displayName = "NodeRenderer";
  var NodeRenderer$1 = (0, import_react33.memo)(NodeRenderer);
  var defaultEdgeTree = [{ level: 0, isMaxLevel: true, edges: [] }];
  function groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect = false) {
    let maxLevel = -1;
    const levelLookup = edges.reduce((tree, edge) => {
      const hasZIndex = isNumeric(edge.zIndex);
      let z2 = hasZIndex ? edge.zIndex : 0;
      if (elevateEdgesOnSelect) {
        z2 = hasZIndex ? edge.zIndex : Math.max(nodeInternals.get(edge.source)?.[internalsSymbol]?.z || 0, nodeInternals.get(edge.target)?.[internalsSymbol]?.z || 0);
      }
      if (tree[z2]) {
        tree[z2].push(edge);
      } else {
        tree[z2] = [edge];
      }
      maxLevel = z2 > maxLevel ? z2 : maxLevel;
      return tree;
    }, {});
    const edgeTree = Object.entries(levelLookup).map(([key, edges2]) => {
      const level = +key;
      return {
        edges: edges2,
        level,
        isMaxLevel: level === maxLevel
      };
    });
    if (edgeTree.length === 0) {
      return defaultEdgeTree;
    }
    return edgeTree;
  }
  function useVisibleEdges(onlyRenderVisible, nodeInternals, elevateEdgesOnSelect) {
    const edges = useStore2((0, import_react33.useCallback)((s4) => {
      if (!onlyRenderVisible) {
        return s4.edges;
      }
      return s4.edges.filter((e3) => {
        const sourceNode = nodeInternals.get(e3.source);
        const targetNode = nodeInternals.get(e3.target);
        return sourceNode?.width && sourceNode?.height && targetNode?.width && targetNode?.height && isEdgeVisible({
          sourcePos: sourceNode.positionAbsolute || { x: 0, y: 0 },
          targetPos: targetNode.positionAbsolute || { x: 0, y: 0 },
          sourceWidth: sourceNode.width,
          sourceHeight: sourceNode.height,
          targetWidth: targetNode.width,
          targetHeight: targetNode.height,
          width: s4.width,
          height: s4.height,
          transform: s4.transform
        });
      });
    }, [onlyRenderVisible, nodeInternals]));
    return groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect);
  }
  var ArrowSymbol = ({ color: color3 = "none", strokeWidth = 1 }) => {
    return (0, import_jsx_runtime.jsx)("polyline", { stroke: color3, strokeLinecap: "round", strokeLinejoin: "round", strokeWidth, fill: "none", points: "-5,-4 0,0 -5,4" });
  };
  var ArrowClosedSymbol = ({ color: color3 = "none", strokeWidth = 1 }) => {
    return (0, import_jsx_runtime.jsx)("polyline", { stroke: color3, strokeLinecap: "round", strokeLinejoin: "round", strokeWidth, fill: color3, points: "-5,-4 0,0 -5,4 -5,-4" });
  };
  var MarkerSymbols = {
    [MarkerType.Arrow]: ArrowSymbol,
    [MarkerType.ArrowClosed]: ArrowClosedSymbol
  };
  function useMarkerSymbol(type) {
    const store = useStoreApi();
    const symbol = (0, import_react33.useMemo)(() => {
      const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);
      if (!symbolExists) {
        store.getState().onError?.("009", errorMessages["error009"](type));
        return null;
      }
      return MarkerSymbols[type];
    }, [type]);
    return symbol;
  }
  var Marker = ({ id: id4, type, color: color3, width = 12.5, height = 12.5, markerUnits = "strokeWidth", strokeWidth, orient = "auto-start-reverse" }) => {
    const Symbol3 = useMarkerSymbol(type);
    if (!Symbol3) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("marker", { className: "react-flow__arrowhead", id: id4, markerWidth: `${width}`, markerHeight: `${height}`, viewBox: "-10 -10 20 20", markerUnits, orient, refX: "0", refY: "0", children: (0, import_jsx_runtime.jsx)(Symbol3, { color: color3, strokeWidth }) });
  };
  var markerSelector = ({ defaultColor: defaultColor2, rfId }) => (s4) => {
    const ids = [];
    return s4.edges.reduce((markers, edge) => {
      [edge.markerStart, edge.markerEnd].forEach((marker) => {
        if (marker && typeof marker === "object") {
          const markerId = getMarkerId(marker, rfId);
          if (!ids.includes(markerId)) {
            markers.push({ id: markerId, color: marker.color || defaultColor2, ...marker });
            ids.push(markerId);
          }
        }
      });
      return markers;
    }, []).sort((a4, b5) => a4.id.localeCompare(b5.id));
  };
  var MarkerDefinitions = ({ defaultColor: defaultColor2, rfId }) => {
    const markers = useStore2(
      (0, import_react33.useCallback)(markerSelector({ defaultColor: defaultColor2, rfId }), [defaultColor2, rfId]),
      // the id includes all marker options, so we just need to look at that part of the marker
      (a4, b5) => !(a4.length !== b5.length || a4.some((m5, i4) => m5.id !== b5[i4].id))
    );
    return (0, import_jsx_runtime.jsx)("defs", { children: markers.map((marker) => (0, import_jsx_runtime.jsx)(Marker, { id: marker.id, type: marker.type, color: marker.color, width: marker.width, height: marker.height, markerUnits: marker.markerUnits, strokeWidth: marker.strokeWidth, orient: marker.orient }, marker.id)) });
  };
  MarkerDefinitions.displayName = "MarkerDefinitions";
  var MarkerDefinitions$1 = (0, import_react33.memo)(MarkerDefinitions);
  var selector$4 = (s4) => ({
    nodesConnectable: s4.nodesConnectable,
    edgesFocusable: s4.edgesFocusable,
    edgesUpdatable: s4.edgesUpdatable,
    elementsSelectable: s4.elementsSelectable,
    width: s4.width,
    height: s4.height,
    connectionMode: s4.connectionMode,
    nodeInternals: s4.nodeInternals,
    onError: s4.onError
  });
  var EdgeRenderer = ({ defaultMarkerColor, onlyRenderVisibleElements, elevateEdgesOnSelect, rfId, edgeTypes, noPanClassName, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeClick, edgeUpdaterRadius, onEdgeDoubleClick, onEdgeUpdateStart, onEdgeUpdateEnd, children: children2 }) => {
    const { edgesFocusable, edgesUpdatable, elementsSelectable, width, height, connectionMode, nodeInternals, onError } = useStore2(selector$4, shallow);
    const edgeTree = useVisibleEdges(onlyRenderVisibleElements, nodeInternals, elevateEdgesOnSelect);
    if (!width) {
      return null;
    }
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [edgeTree.map(({ level, edges, isMaxLevel }) => (0, import_jsx_runtime.jsxs)("svg", { style: { zIndex: level }, width, height, className: "react-flow__edges react-flow__container", children: [isMaxLevel && (0, import_jsx_runtime.jsx)(MarkerDefinitions$1, { defaultColor: defaultMarkerColor, rfId }), (0, import_jsx_runtime.jsx)("g", { children: edges.map((edge) => {
      const [sourceNodeRect, sourceHandleBounds, sourceIsValid] = getNodeData(nodeInternals.get(edge.source));
      const [targetNodeRect, targetHandleBounds, targetIsValid] = getNodeData(nodeInternals.get(edge.target));
      if (!sourceIsValid || !targetIsValid) {
        return null;
      }
      let edgeType = edge.type || "default";
      if (!edgeTypes[edgeType]) {
        onError?.("011", errorMessages["error011"](edgeType));
        edgeType = "default";
      }
      const EdgeComponent = edgeTypes[edgeType] || edgeTypes.default;
      const targetNodeHandles = connectionMode === ConnectionMode.Strict ? targetHandleBounds.target : (targetHandleBounds.target ?? []).concat(targetHandleBounds.source ?? []);
      const sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle);
      const targetHandle = getHandle(targetNodeHandles, edge.targetHandle);
      const sourcePosition = sourceHandle?.position || Position.Bottom;
      const targetPosition = targetHandle?.position || Position.Top;
      const isFocusable = !!(edge.focusable || edgesFocusable && typeof edge.focusable === "undefined");
      const isUpdatable = typeof onEdgeUpdate !== "undefined" && (edge.updatable || edgesUpdatable && typeof edge.updatable === "undefined");
      if (!sourceHandle || !targetHandle) {
        onError?.("008", errorMessages["error008"](sourceHandle, edge));
        return null;
      }
      const { sourceX, sourceY, targetX, targetY } = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition);
      return (0, import_jsx_runtime.jsx)(EdgeComponent, { id: edge.id, className: cc([edge.className, noPanClassName]), type: edgeType, data: edge.data, selected: !!edge.selected, animated: !!edge.animated, hidden: !!edge.hidden, label: edge.label, labelStyle: edge.labelStyle, labelShowBg: edge.labelShowBg, labelBgStyle: edge.labelBgStyle, labelBgPadding: edge.labelBgPadding, labelBgBorderRadius: edge.labelBgBorderRadius, style: edge.style, source: edge.source, target: edge.target, sourceHandleId: edge.sourceHandle, targetHandleId: edge.targetHandle, markerEnd: edge.markerEnd, markerStart: edge.markerStart, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, elementsSelectable, onEdgeUpdate, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onClick: onEdgeClick, edgeUpdaterRadius, onEdgeDoubleClick, onEdgeUpdateStart, onEdgeUpdateEnd, rfId, ariaLabel: edge.ariaLabel, isFocusable, isUpdatable, pathOptions: "pathOptions" in edge ? edge.pathOptions : void 0, interactionWidth: edge.interactionWidth }, edge.id);
    }) })] }, level)), children2] });
  };
  EdgeRenderer.displayName = "EdgeRenderer";
  var EdgeRenderer$1 = (0, import_react33.memo)(EdgeRenderer);
  var selector$3 = (s4) => `translate(${s4.transform[0]}px,${s4.transform[1]}px) scale(${s4.transform[2]})`;
  function Viewport({ children: children2 }) {
    const transform3 = useStore2(selector$3);
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__viewport react-flow__container", style: { transform: transform3 }, children: children2 });
  }
  function useOnInitHandler(onInit) {
    const rfInstance = useReactFlow();
    const isInitialized = (0, import_react33.useRef)(false);
    (0, import_react33.useEffect)(() => {
      if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {
        setTimeout(() => onInit(rfInstance), 1);
        isInitialized.current = true;
      }
    }, [onInit, rfInstance.viewportInitialized]);
  }
  var oppositePosition = {
    [Position.Left]: Position.Right,
    [Position.Right]: Position.Left,
    [Position.Top]: Position.Bottom,
    [Position.Bottom]: Position.Top
  };
  var ConnectionLine = ({ nodeId, handleType, style: style2, type = ConnectionLineType.Bezier, CustomComponent, connectionStatus }) => {
    const { fromNode, handleId, toX, toY, connectionMode } = useStore2((0, import_react33.useCallback)((s4) => ({
      fromNode: s4.nodeInternals.get(nodeId),
      handleId: s4.connectionHandleId,
      toX: (s4.connectionPosition.x - s4.transform[0]) / s4.transform[2],
      toY: (s4.connectionPosition.y - s4.transform[1]) / s4.transform[2],
      connectionMode: s4.connectionMode
    }), [nodeId]), shallow);
    const fromHandleBounds = fromNode?.[internalsSymbol]?.handleBounds;
    let handleBounds = fromHandleBounds?.[handleType];
    if (connectionMode === ConnectionMode.Loose) {
      handleBounds = handleBounds ? handleBounds : fromHandleBounds?.[handleType === "source" ? "target" : "source"];
    }
    if (!fromNode || !handleBounds) {
      return null;
    }
    const fromHandle = handleId ? handleBounds.find((d4) => d4.id === handleId) : handleBounds[0];
    const fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : (fromNode.width ?? 0) / 2;
    const fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : fromNode.height ?? 0;
    const fromX = (fromNode.positionAbsolute?.x ?? 0) + fromHandleX;
    const fromY = (fromNode.positionAbsolute?.y ?? 0) + fromHandleY;
    const fromPosition = fromHandle?.position;
    const toPosition = fromPosition ? oppositePosition[fromPosition] : null;
    if (!fromPosition || !toPosition) {
      return null;
    }
    if (CustomComponent) {
      return (0, import_jsx_runtime.jsx)(CustomComponent, { connectionLineType: type, connectionLineStyle: style2, fromNode, fromHandle, fromX, fromY, toX, toY, fromPosition, toPosition, connectionStatus });
    }
    let dAttr = "";
    const pathParams = {
      sourceX: fromX,
      sourceY: fromY,
      sourcePosition: fromPosition,
      targetX: toX,
      targetY: toY,
      targetPosition: toPosition
    };
    if (type === ConnectionLineType.Bezier) {
      [dAttr] = getBezierPath(pathParams);
    } else if (type === ConnectionLineType.Step) {
      [dAttr] = getSmoothStepPath({
        ...pathParams,
        borderRadius: 0
      });
    } else if (type === ConnectionLineType.SmoothStep) {
      [dAttr] = getSmoothStepPath(pathParams);
    } else if (type === ConnectionLineType.SimpleBezier) {
      [dAttr] = getSimpleBezierPath(pathParams);
    } else {
      dAttr = `M${fromX},${fromY} ${toX},${toY}`;
    }
    return (0, import_jsx_runtime.jsx)("path", { d: dAttr, fill: "none", className: "react-flow__connection-path", style: style2 });
  };
  ConnectionLine.displayName = "ConnectionLine";
  var selector$2 = (s4) => ({
    nodeId: s4.connectionNodeId,
    handleType: s4.connectionHandleType,
    nodesConnectable: s4.nodesConnectable,
    connectionStatus: s4.connectionStatus,
    width: s4.width,
    height: s4.height
  });
  function ConnectionLineWrapper({ containerStyle: containerStyle2, style: style2, type, component }) {
    const { nodeId, handleType, nodesConnectable, width, height, connectionStatus } = useStore2(selector$2, shallow);
    const isValid = !!(nodeId && handleType && width && nodesConnectable);
    if (!isValid) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("svg", { style: containerStyle2, width, height, className: "react-flow__edges react-flow__connectionline react-flow__container", children: (0, import_jsx_runtime.jsx)("g", { className: cc(["react-flow__connection", connectionStatus]), children: (0, import_jsx_runtime.jsx)(ConnectionLine, { nodeId, handleType, style: style2, type, CustomComponent: component, connectionStatus }) }) });
  }
  var GraphView = ({ nodeTypes, edgeTypes, onMove, onMoveStart, onMoveEnd, onInit, onNodeClick, onEdgeClick, onNodeDoubleClick, onEdgeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, deleteKeyCode, onlyRenderVisibleElements, elementsSelectable, selectNodesOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, defaultMarkerColor, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, edgeUpdaterRadius, onEdgeUpdateStart, onEdgeUpdateEnd, noDragClassName, noWheelClassName, noPanClassName, elevateEdgesOnSelect, disableKeyboardA11y, nodeOrigin, nodeExtent, rfId }) => {
    useOnInitHandler(onInit);
    return (0, import_jsx_runtime.jsx)(FlowRenderer$1, { onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, deleteKeyCode, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, onMove, onMoveStart, onMoveEnd, zoomOnScroll, zoomOnPinch, zoomOnDoubleClick, panOnScroll, panOnScrollSpeed, panOnScrollMode, panOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, onSelectionContextMenu, preventScrolling, noDragClassName, noWheelClassName, noPanClassName, disableKeyboardA11y, children: (0, import_jsx_runtime.jsxs)(Viewport, { children: [(0, import_jsx_runtime.jsx)(EdgeRenderer$1, { edgeTypes, onEdgeClick, onEdgeDoubleClick, onEdgeUpdate, onlyRenderVisibleElements, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeUpdateStart, onEdgeUpdateEnd, edgeUpdaterRadius, defaultMarkerColor, noPanClassName, elevateEdgesOnSelect: !!elevateEdgesOnSelect, disableKeyboardA11y, rfId, children: (0, import_jsx_runtime.jsx)(ConnectionLineWrapper, { style: connectionLineStyle, type: connectionLineType, component: connectionLineComponent, containerStyle: connectionLineContainerStyle }) }), (0, import_jsx_runtime.jsx)("div", { className: "react-flow__edgelabel-renderer" }), (0, import_jsx_runtime.jsx)(NodeRenderer$1, { nodeTypes, onNodeClick, onNodeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, selectNodesOnDrag, onlyRenderVisibleElements, noPanClassName, noDragClassName, disableKeyboardA11y, nodeOrigin, nodeExtent, rfId })] }) });
  };
  GraphView.displayName = "GraphView";
  var GraphView$1 = (0, import_react33.memo)(GraphView);
  var infiniteExtent = [
    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],
    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]
  ];
  var initialState = {
    rfId: "1",
    width: 0,
    height: 0,
    transform: [0, 0, 1],
    nodeInternals: /* @__PURE__ */ new Map(),
    edges: [],
    onNodesChange: null,
    onEdgesChange: null,
    hasDefaultNodes: false,
    hasDefaultEdges: false,
    d3Zoom: null,
    d3Selection: null,
    d3ZoomHandler: void 0,
    minZoom: 0.5,
    maxZoom: 2,
    translateExtent: infiniteExtent,
    nodeExtent: infiniteExtent,
    nodesSelectionActive: false,
    userSelectionActive: false,
    userSelectionRect: null,
    connectionNodeId: null,
    connectionHandleId: null,
    connectionHandleType: "source",
    connectionPosition: { x: 0, y: 0 },
    connectionStatus: null,
    connectionMode: ConnectionMode.Strict,
    domNode: null,
    paneDragging: false,
    noPanClassName: "nopan",
    nodeOrigin: [0, 0],
    snapGrid: [15, 15],
    snapToGrid: false,
    nodesDraggable: true,
    nodesConnectable: true,
    nodesFocusable: true,
    edgesFocusable: true,
    edgesUpdatable: true,
    elementsSelectable: true,
    elevateNodesOnSelect: true,
    fitViewOnInit: false,
    fitViewOnInitDone: false,
    fitViewOnInitOptions: void 0,
    multiSelectionActive: false,
    connectionStartHandle: null,
    connectionEndHandle: null,
    connectionClickStartHandle: null,
    connectOnClick: true,
    ariaLiveMessage: "",
    autoPanOnConnect: true,
    autoPanOnNodeDrag: true,
    connectionRadius: 20,
    onError: devWarn,
    isValidConnection: void 0
  };
  var createRFStore = () => createStore((set4, get4) => ({
    ...initialState,
    setNodes: (nodes) => {
      const { nodeInternals, nodeOrigin, elevateNodesOnSelect } = get4();
      set4({ nodeInternals: createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) });
    },
    getNodes: () => {
      return Array.from(get4().nodeInternals.values());
    },
    setEdges: (edges) => {
      const { defaultEdgeOptions = {} } = get4();
      set4({ edges: edges.map((e3) => ({ ...defaultEdgeOptions, ...e3 })) });
    },
    setDefaultNodesAndEdges: (nodes, edges) => {
      const hasDefaultNodes = typeof nodes !== "undefined";
      const hasDefaultEdges = typeof edges !== "undefined";
      const nodeInternals = hasDefaultNodes ? createNodeInternals(nodes, /* @__PURE__ */ new Map(), get4().nodeOrigin, get4().elevateNodesOnSelect) : /* @__PURE__ */ new Map();
      const nextEdges = hasDefaultEdges ? edges : [];
      set4({ nodeInternals, edges: nextEdges, hasDefaultNodes, hasDefaultEdges });
    },
    updateNodeDimensions: (updates) => {
      const { onNodesChange, nodeInternals, fitViewOnInit, fitViewOnInitDone, fitViewOnInitOptions, domNode, nodeOrigin } = get4();
      const viewportNode = domNode?.querySelector(".react-flow__viewport");
      if (!viewportNode) {
        return;
      }
      const style2 = window.getComputedStyle(viewportNode);
      const { m22: zoom } = new window.DOMMatrixReadOnly(style2.transform);
      const changes = updates.reduce((res, update) => {
        const node2 = nodeInternals.get(update.id);
        if (node2) {
          const dimensions = getDimensions(update.nodeElement);
          const doUpdate = !!(dimensions.width && dimensions.height && (node2.width !== dimensions.width || node2.height !== dimensions.height || update.forceUpdate));
          if (doUpdate) {
            nodeInternals.set(node2.id, {
              ...node2,
              [internalsSymbol]: {
                ...node2[internalsSymbol],
                handleBounds: {
                  source: getHandleBounds(".source", update.nodeElement, zoom, nodeOrigin),
                  target: getHandleBounds(".target", update.nodeElement, zoom, nodeOrigin)
                }
              },
              ...dimensions
            });
            res.push({
              id: node2.id,
              type: "dimensions",
              dimensions
            });
          }
        }
        return res;
      }, []);
      updateAbsoluteNodePositions(nodeInternals, nodeOrigin);
      const nextFitViewOnInitDone = fitViewOnInitDone || fitViewOnInit && !fitViewOnInitDone && fitView(get4, { initial: true, ...fitViewOnInitOptions });
      set4({ nodeInternals: new Map(nodeInternals), fitViewOnInitDone: nextFitViewOnInitDone });
      if (changes?.length > 0) {
        onNodesChange?.(changes);
      }
    },
    updateNodePositions: (nodeDragItems, positionChanged = true, dragging = false) => {
      const { triggerNodeChanges } = get4();
      const changes = nodeDragItems.map((node2) => {
        const change = {
          id: node2.id,
          type: "position",
          dragging
        };
        if (positionChanged) {
          change.positionAbsolute = node2.positionAbsolute;
          change.position = node2.position;
        }
        return change;
      });
      triggerNodeChanges(changes);
    },
    triggerNodeChanges: (changes) => {
      const { onNodesChange, nodeInternals, hasDefaultNodes, nodeOrigin, getNodes, elevateNodesOnSelect } = get4();
      if (changes?.length) {
        if (hasDefaultNodes) {
          const nodes = applyNodeChanges(changes, getNodes());
          const nextNodeInternals = createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect);
          set4({ nodeInternals: nextNodeInternals });
        }
        onNodesChange?.(changes);
      }
    },
    addSelectedNodes: (selectedNodeIds) => {
      const { multiSelectionActive, edges, getNodes } = get4();
      let changedNodes;
      let changedEdges = null;
      if (multiSelectionActive) {
        changedNodes = selectedNodeIds.map((nodeId) => createSelectionChange(nodeId, true));
      } else {
        changedNodes = getSelectionChanges(getNodes(), selectedNodeIds);
        changedEdges = getSelectionChanges(edges, []);
      }
      updateNodesAndEdgesSelections({
        changedNodes,
        changedEdges,
        get: get4,
        set: set4
      });
    },
    addSelectedEdges: (selectedEdgeIds) => {
      const { multiSelectionActive, edges, getNodes } = get4();
      let changedEdges;
      let changedNodes = null;
      if (multiSelectionActive) {
        changedEdges = selectedEdgeIds.map((edgeId) => createSelectionChange(edgeId, true));
      } else {
        changedEdges = getSelectionChanges(edges, selectedEdgeIds);
        changedNodes = getSelectionChanges(getNodes(), []);
      }
      updateNodesAndEdgesSelections({
        changedNodes,
        changedEdges,
        get: get4,
        set: set4
      });
    },
    unselectNodesAndEdges: ({ nodes, edges } = {}) => {
      const { edges: storeEdges, getNodes } = get4();
      const nodesToUnselect = nodes ? nodes : getNodes();
      const edgesToUnselect = edges ? edges : storeEdges;
      const changedNodes = nodesToUnselect.map((n5) => {
        n5.selected = false;
        return createSelectionChange(n5.id, false);
      });
      const changedEdges = edgesToUnselect.map((edge) => createSelectionChange(edge.id, false));
      updateNodesAndEdgesSelections({
        changedNodes,
        changedEdges,
        get: get4,
        set: set4
      });
    },
    setMinZoom: (minZoom) => {
      const { d3Zoom, maxZoom } = get4();
      d3Zoom?.scaleExtent([minZoom, maxZoom]);
      set4({ minZoom });
    },
    setMaxZoom: (maxZoom) => {
      const { d3Zoom, minZoom } = get4();
      d3Zoom?.scaleExtent([minZoom, maxZoom]);
      set4({ maxZoom });
    },
    setTranslateExtent: (translateExtent) => {
      get4().d3Zoom?.translateExtent(translateExtent);
      set4({ translateExtent });
    },
    resetSelectedElements: () => {
      const { edges, getNodes } = get4();
      const nodes = getNodes();
      const nodesToUnselect = nodes.filter((e3) => e3.selected).map((n5) => createSelectionChange(n5.id, false));
      const edgesToUnselect = edges.filter((e3) => e3.selected).map((e3) => createSelectionChange(e3.id, false));
      updateNodesAndEdgesSelections({
        changedNodes: nodesToUnselect,
        changedEdges: edgesToUnselect,
        get: get4,
        set: set4
      });
    },
    setNodeExtent: (nodeExtent) => {
      const { nodeInternals } = get4();
      nodeInternals.forEach((node2) => {
        node2.positionAbsolute = clampPosition(node2.position, nodeExtent);
      });
      set4({
        nodeExtent,
        nodeInternals: new Map(nodeInternals)
      });
    },
    panBy: (delta) => {
      const { transform: transform3, width, height, d3Zoom, d3Selection, translateExtent } = get4();
      if (!d3Zoom || !d3Selection || !delta.x && !delta.y) {
        return;
      }
      const nextTransform = identity2.translate(transform3[0] + delta.x, transform3[1] + delta.y).scale(transform3[2]);
      const extent = [
        [0, 0],
        [width, height]
      ];
      const constrainedTransform = d3Zoom?.constrain()(nextTransform, extent, translateExtent);
      d3Zoom.transform(d3Selection, constrainedTransform);
    },
    cancelConnection: () => set4({
      connectionNodeId: initialState.connectionNodeId,
      connectionHandleId: initialState.connectionHandleId,
      connectionHandleType: initialState.connectionHandleType,
      connectionStatus: initialState.connectionStatus,
      connectionStartHandle: initialState.connectionStartHandle,
      connectionEndHandle: initialState.connectionEndHandle
    }),
    reset: () => set4({ ...initialState })
  }));
  var ReactFlowProvider = ({ children: children2 }) => {
    const storeRef = (0, import_react33.useRef)(null);
    if (!storeRef.current) {
      storeRef.current = createRFStore();
    }
    return (0, import_jsx_runtime.jsx)(Provider$1, { value: storeRef.current, children: children2 });
  };
  ReactFlowProvider.displayName = "ReactFlowProvider";
  var Wrapper = ({ children: children2 }) => {
    const isWrapped = (0, import_react33.useContext)(StoreContext);
    if (isWrapped) {
      return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: children2 });
    }
    return (0, import_jsx_runtime.jsx)(ReactFlowProvider, { children: children2 });
  };
  Wrapper.displayName = "ReactFlowWrapper";
  function useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {
    const typesKeysRef = (0, import_react33.useRef)(null);
    const typesParsed = (0, import_react33.useMemo)(() => {
      if (true) {
        const typeKeys = Object.keys(nodeOrEdgeTypes);
        if (shallow(typesKeysRef.current, typeKeys)) {
          devWarn("002", errorMessages["error002"]());
        }
        typesKeysRef.current = typeKeys;
      }
      return createTypes(nodeOrEdgeTypes);
    }, [nodeOrEdgeTypes]);
    return typesParsed;
  }
  var defaultNodeTypes = {
    input: InputNode$1,
    default: DefaultNode$1,
    output: OutputNode$1,
    group: GroupNode
  };
  var defaultEdgeTypes = {
    default: BezierEdge,
    straight: StraightEdge,
    step: StepEdge,
    smoothstep: SmoothStepEdge,
    simplebezier: SimpleBezierEdge
  };
  var initNodeOrigin = [0, 0];
  var initSnapGrid = [15, 15];
  var initDefaultViewport = { x: 0, y: 0, zoom: 1 };
  var wrapperStyle = {
    width: "100%",
    height: "100%",
    overflow: "hidden",
    position: "relative",
    zIndex: 0
  };
  var ReactFlow = (0, import_react33.forwardRef)(({ nodes, edges, defaultNodes, defaultEdges, className, nodeTypes = defaultNodeTypes, edgeTypes = defaultEdgeTypes, onNodeClick, onEdgeClick, onInit, onMove, onMoveStart, onMoveEnd, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, onNodeDragStart, onNodeDrag, onNodeDragStop, onNodesDelete, onEdgesDelete, onSelectionChange, onSelectionDragStart, onSelectionDrag, onSelectionDragStop, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionMode = ConnectionMode.Strict, connectionLineType = ConnectionLineType.Bezier, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, deleteKeyCode = "Backspace", selectionKeyCode = "Shift", selectionOnDrag = false, selectionMode = SelectionMode.Full, panActivationKeyCode = "Space", multiSelectionKeyCode = "Meta", zoomActivationKeyCode = "Meta", snapToGrid = false, snapGrid = initSnapGrid, onlyRenderVisibleElements = false, selectNodesOnDrag = true, nodesDraggable, nodesConnectable, nodesFocusable, nodeOrigin = initNodeOrigin, edgesFocusable, edgesUpdatable, elementsSelectable, defaultViewport = initDefaultViewport, minZoom = 0.5, maxZoom = 2, translateExtent = infiniteExtent, preventScrolling = true, nodeExtent, defaultMarkerColor = "#b1b1b7", zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, panOnDrag = true, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, children: children2, onEdgeUpdate, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeUpdateStart, onEdgeUpdateEnd, edgeUpdaterRadius = 10, onNodesChange, onEdgesChange, noDragClassName = "nodrag", noWheelClassName = "nowheel", noPanClassName = "nopan", fitView: fitView2 = false, fitViewOptions, connectOnClick = true, attributionPosition, proOptions, defaultEdgeOptions, elevateNodesOnSelect = true, elevateEdgesOnSelect = false, disableKeyboardA11y = false, autoPanOnConnect = true, autoPanOnNodeDrag = true, connectionRadius = 20, isValidConnection, onError, style: style2, id: id4, ...rest }, ref) => {
    const nodeTypesWrapped = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);
    const edgeTypesWrapped = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);
    const rfId = id4 || "1";
    return (0, import_jsx_runtime.jsx)("div", { ...rest, style: { ...style2, ...wrapperStyle }, ref, className: cc(["react-flow", className]), "data-testid": "rf__wrapper", id: id4, children: (0, import_jsx_runtime.jsxs)(Wrapper, { children: [(0, import_jsx_runtime.jsx)(GraphView$1, { onInit, onMove, onMoveStart, onMoveEnd, onNodeClick, onEdgeClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, nodeTypes: nodeTypesWrapped, edgeTypes: edgeTypesWrapped, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, deleteKeyCode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, onlyRenderVisibleElements, selectNodesOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, zoomOnScroll, zoomOnPinch, zoomOnDoubleClick, panOnScroll, panOnScrollSpeed, panOnScrollMode, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, onSelectionContextMenu, onSelectionStart, onSelectionEnd, onEdgeUpdate, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeUpdateStart, onEdgeUpdateEnd, edgeUpdaterRadius, defaultMarkerColor, noDragClassName, noWheelClassName, noPanClassName, elevateEdgesOnSelect, rfId, disableKeyboardA11y, nodeOrigin, nodeExtent }), (0, import_jsx_runtime.jsx)(StoreUpdater, { nodes, edges, defaultNodes, defaultEdges, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, nodesDraggable, nodesConnectable, nodesFocusable, edgesFocusable, edgesUpdatable, elementsSelectable, elevateNodesOnSelect, minZoom, maxZoom, nodeExtent, onNodesChange, onEdgesChange, snapToGrid, snapGrid, connectionMode, translateExtent, connectOnClick, defaultEdgeOptions, fitView: fitView2, fitViewOptions, onNodesDelete, onEdgesDelete, onNodeDragStart, onNodeDrag, onNodeDragStop, onSelectionDrag, onSelectionDragStart, onSelectionDragStop, noPanClassName, nodeOrigin, rfId, autoPanOnConnect, autoPanOnNodeDrag, onError, connectionRadius, isValidConnection }), (0, import_jsx_runtime.jsx)(Wrapper$1, { onSelectionChange }), children2, (0, import_jsx_runtime.jsx)(Attribution, { proOptions, position: attributionPosition }), (0, import_jsx_runtime.jsx)(A11yDescriptions, { rfId, disableKeyboardA11y })] }) });
  });
  ReactFlow.displayName = "ReactFlow";
  function createUseItemsState(applyChanges2) {
    return (initialItems) => {
      const [items, setItems] = (0, import_react33.useState)(initialItems);
      const onItemsChange = (0, import_react33.useCallback)((changes) => setItems((items2) => applyChanges2(changes, items2)), []);
      return [items, setItems, onItemsChange];
    };
  }
  var useNodesState = createUseItemsState(applyNodeChanges);
  var useEdgesState = createUseItemsState(applyEdgeChanges);
  function useOnSelectionChange({ onChange }) {
    const store = useStoreApi();
    (0, import_react33.useEffect)(() => {
      store.setState({ onSelectionChange: onChange });
    }, [onChange]);
  }

  // node_modules/.pnpm/@reactflow+background@11.2.0_react-dom@18.2.0_react@18.2.0/node_modules/@reactflow/background/dist/esm/index.js
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var import_react34 = __toESM(require_react());
  var BackgroundVariant;
  (function(BackgroundVariant2) {
    BackgroundVariant2["Lines"] = "lines";
    BackgroundVariant2["Dots"] = "dots";
    BackgroundVariant2["Cross"] = "cross";
  })(BackgroundVariant || (BackgroundVariant = {}));
  function LinePattern({ color: color3, dimensions, lineWidth }) {
    return (0, import_jsx_runtime2.jsx)("path", { stroke: color3, strokeWidth: lineWidth, d: `M${dimensions[0] / 2} 0 V${dimensions[1]} M0 ${dimensions[1] / 2} H${dimensions[0]}` });
  }
  function DotPattern({ color: color3, radius }) {
    return (0, import_jsx_runtime2.jsx)("circle", { cx: radius, cy: radius, r: radius, fill: color3 });
  }
  var defaultColor = {
    [BackgroundVariant.Dots]: "#91919a",
    [BackgroundVariant.Lines]: "#eee",
    [BackgroundVariant.Cross]: "#e2e2e2"
  };
  var defaultSize = {
    [BackgroundVariant.Dots]: 1,
    [BackgroundVariant.Lines]: 1,
    [BackgroundVariant.Cross]: 6
  };
  var selector = (s4) => ({ transform: s4.transform, patternId: `pattern-${s4.rfId}` });
  function Background({
    id: id4,
    variant = BackgroundVariant.Dots,
    // only used for dots and cross
    gap: gap2 = 20,
    // only used for lines and cross
    size,
    lineWidth = 1,
    offset: offset2 = 2,
    color: color3,
    style: style2,
    className
  }) {
    const ref = (0, import_react34.useRef)(null);
    const { transform: transform3, patternId } = useStore2(selector, shallow);
    const patternColor = color3 || defaultColor[variant];
    const patternSize = size || defaultSize[variant];
    const isDots = variant === BackgroundVariant.Dots;
    const isCross = variant === BackgroundVariant.Cross;
    const gapXY = Array.isArray(gap2) ? gap2 : [gap2, gap2];
    const scaledGap = [gapXY[0] * transform3[2] || 1, gapXY[1] * transform3[2] || 1];
    const scaledSize = patternSize * transform3[2];
    const patternDimensions = isCross ? [scaledSize, scaledSize] : scaledGap;
    const patternOffset = isDots ? [scaledSize / offset2, scaledSize / offset2] : [patternDimensions[0] / offset2, patternDimensions[1] / offset2];
    return (0, import_jsx_runtime2.jsxs)("svg", { className: cc(["react-flow__background", className]), style: {
      ...style2,
      position: "absolute",
      width: "100%",
      height: "100%",
      top: 0,
      left: 0
    }, ref, "data-testid": "rf__background", children: [(0, import_jsx_runtime2.jsx)("pattern", { id: patternId + id4, x: transform3[0] % scaledGap[0], y: transform3[1] % scaledGap[1], width: scaledGap[0], height: scaledGap[1], patternUnits: "userSpaceOnUse", patternTransform: `translate(-${patternOffset[0]},-${patternOffset[1]})`, children: isDots ? (0, import_jsx_runtime2.jsx)(DotPattern, { color: patternColor, radius: scaledSize / offset2 }) : (0, import_jsx_runtime2.jsx)(LinePattern, { dimensions: patternDimensions, color: patternColor, lineWidth }) }), (0, import_jsx_runtime2.jsx)("rect", { x: "0", y: "0", width: "100%", height: "100%", fill: `url(#${patternId + id4})` })] });
  }
  Background.displayName = "Background";
  var Background$1 = (0, import_react34.memo)(Background);

  // node_modules/.pnpm/react-hotkeys-hook@4.4.0_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  init_define_process();
  init_define_process_env();
  var import_react36 = __toESM(require_react());

  // node_modules/.pnpm/react-hotkeys-hook@4.4.0_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/src/BoundHotkeysProxyProvider.tsx
  init_define_process();
  init_define_process_env();
  var import_react35 = __toESM(require_react());
  var BoundHotkeysProxyProvider = (0, import_react35.createContext)(void 0);
  function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children: children2 }) {
    return /* @__PURE__ */ React.createElement(BoundHotkeysProxyProvider.Provider, { value: { addHotkey, removeHotkey } }, children2);
  }

  // node_modules/.pnpm/react-hotkeys-hook@4.4.0_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/src/deepEqual.ts
  init_define_process();
  init_define_process_env();
  function deepEqual(x3, y4) {
    return x3 && y4 && typeof x3 === "object" && typeof y4 === "object" ? Object.keys(x3).length === Object.keys(y4).length && //@ts-ignore
    Object.keys(x3).reduce((isEqual, key) => isEqual && deepEqual(x3[key], y4[key]), true) : x3 === y4;
  }

  // node_modules/.pnpm/react-hotkeys-hook@4.4.0_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  var HotkeysContext = (0, import_react36.createContext)({
    hotkeys: [],
    enabledScopes: [],
    // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
    toggleScope: () => {
    },
    enableScope: () => {
    },
    disableScope: () => {
    }
  });
  var HotkeysProvider = ({ initiallyActiveScopes = ["*"], children: children2 }) => {
    const [internalActiveScopes, setInternalActiveScopes] = (0, import_react36.useState)(
      initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ["*"]
    );
    const [boundHotkeys, setBoundHotkeys] = (0, import_react36.useState)([]);
    const enableScope2 = (0, import_react36.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes("*")) {
          return [scope];
        }
        return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
      });
    }, []);
    const disableScope2 = (0, import_react36.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.filter((s4) => s4 !== scope).length === 0) {
          return ["*"];
        } else {
          return prev2.filter((s4) => s4 !== scope);
        }
      });
    }, []);
    const toggleScope2 = (0, import_react36.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes(scope)) {
          if (prev2.filter((s4) => s4 !== scope).length === 0) {
            return ["*"];
          } else {
            return prev2.filter((s4) => s4 !== scope);
          }
        } else {
          if (prev2.includes("*")) {
            return [scope];
          }
          return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
        }
      });
    }, []);
    const addBoundHotkey = (0, import_react36.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => [...prev2, hotkey]);
    }, []);
    const removeBoundHotkey = (0, import_react36.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => prev2.filter((h5) => !deepEqual(h5, hotkey)));
    }, []);
    return /* @__PURE__ */ React.createElement(
      HotkeysContext.Provider,
      {
        value: { enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope: enableScope2, disableScope: disableScope2, toggleScope: toggleScope2 }
      },
      /* @__PURE__ */ React.createElement(BoundHotkeysProxyProviderProvider, { addHotkey: addBoundHotkey, removeHotkey: removeBoundHotkey }, children2)
    );
  };

  // src/providers/ProjectProvider.tsx
  init_define_process();
  init_define_process_env();

  // src/hooks/useDefaultProject.ts
  init_define_process();
  init_define_process_env();
  var import_react37 = __toESM(require_react(), 1);

  // src/lib/api.ts
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect-web@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect-web/dist/esm/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect-web@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/proto3.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js
  init_define_process();
  init_define_process_env();
  function assert(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  }
  var FLOAT32_MAX = 34028234663852886e22;
  var FLOAT32_MIN = -34028234663852886e22;
  var UINT32_MAX = 4294967295;
  var INT32_MAX = 2147483647;
  var INT32_MIN = -2147483648;
  function assertInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
      throw new Error("invalid int 32: " + arg);
  }
  function assertUInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
      throw new Error("invalid uint 32: " + arg);
  }
  function assertFloat32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
      return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
      throw new Error("invalid float 32: " + arg);
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js
  var enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
  function getEnumType(enumObject) {
    const t3 = enumObject[enumTypeSymbol];
    assert(t3, "missing enum type on enum object");
    return t3;
  }
  function setEnumType(enumObject, typeName, values, opt) {
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v5) => ({
      no: v5.no,
      name: v5.name,
      localName: enumObject[v5.no]
    })), opt);
  }
  function makeEnumType(typeName, values, _opt) {
    const names = /* @__PURE__ */ Object.create(null);
    const numbers = /* @__PURE__ */ Object.create(null);
    const normalValues = [];
    for (const value of values) {
      const n5 = normalizeEnumValue(value);
      normalValues.push(n5);
      names[value.name] = n5;
      numbers[value.no] = n5;
    }
    return {
      typeName,
      values: normalValues,
      // We do not surface options at this time
      // options: opt?.options ?? Object.create(null),
      findName(name) {
        return names[name];
      },
      findNumber(no) {
        return numbers[no];
      }
    };
  }
  function makeEnum(typeName, values, opt) {
    const enumObject = {};
    for (const value of values) {
      const n5 = normalizeEnumValue(value);
      enumObject[n5.localName] = n5.no;
      enumObject[n5.no] = n5.localName;
    }
    setEnumType(enumObject, typeName, values, opt);
    return enumObject;
  }
  function normalizeEnumValue(value) {
    if ("localName" in value) {
      return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/message.js
  init_define_process();
  init_define_process_env();
  var Message = class {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
      return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
      return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
      const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);
      format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
      return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
      const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);
      format.readMessage(type, jsonValue, opt, this);
      return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
      let json2;
      try {
        json2 = JSON.parse(jsonString);
      } catch (e3) {
        throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e3 instanceof Error ? e3.message : String(e3)}`);
      }
      return this.fromJson(json2, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
      const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
      bin.writeMessage(this, writer, opt);
      return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
      const type = this.getType(), json2 = type.runtime.json, opt = json2.makeWriteOptions(options);
      return json2.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
      var _a;
      const value = this.toJson(options);
      return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
      return this.toJson({
        emitDefaultValues: true
      });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
      return Object.getPrototypeOf(this).constructor;
    }
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js
  function makeMessageType(runtime, typeName, fields, opt) {
    var _a;
    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
      [localName]: function(data) {
        runtime.util.initFields(this);
        runtime.util.initPartial(data, this);
      }
    }[localName];
    Object.setPrototypeOf(type.prototype, new Message());
    Object.assign(type, {
      runtime,
      typeName,
      fields: runtime.util.newFieldList(fields),
      fromBinary(bytes, options) {
        return new type().fromBinary(bytes, options);
      },
      fromJson(jsonValue, options) {
        return new type().fromJson(jsonValue, options);
      },
      fromJsonString(jsonString, options) {
        return new type().fromJsonString(jsonString, options);
      },
      equals(a4, b5) {
        return runtime.util.equals(type, a4, b5);
      }
    });
    return type;
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js
  function makeProtoRuntime(syntax, json2, bin, util) {
    return {
      syntax,
      json: json2,
      bin,
      util,
      makeMessageType(typeName, fields, opt) {
        return makeMessageType(this, typeName, fields, opt);
      },
      makeEnum,
      makeEnumType,
      getEnumType
    };
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/field.js
  init_define_process();
  init_define_process_env();
  var ScalarType;
  (function(ScalarType2) {
    ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
    ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
    ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
    ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
    ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
    ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
    ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
    ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
    ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
    ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
    ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
    ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
    ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
    ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
    ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
  })(ScalarType || (ScalarType = {}));

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js
  init_define_process();
  init_define_process_env();
  function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift2 = 0; shift2 < 28; shift2 += 7) {
      let b5 = this.buf[this.pos++];
      lowBits |= (b5 & 127) << shift2;
      if ((b5 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
    for (let shift2 = 3; shift2 <= 31; shift2 += 7) {
      let b5 = this.buf[this.pos++];
      highBits |= (b5 & 127) << shift2;
      if ((b5 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    throw new Error("invalid varint");
  }
  function varint64write(lo, hi, bytes) {
    for (let i4 = 0; i4 < 28; i4 = i4 + 7) {
      const shift2 = lo >>> i4;
      const hasNext = !(shift2 >>> 7 == 0 && hi == 0);
      const byte = (hasNext ? shift2 | 128 : shift2) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
      return;
    }
    for (let i4 = 3; i4 < 31; i4 = i4 + 7) {
      const shift2 = hi >>> i4;
      const hasNext = !(shift2 >>> 7 == 0);
      const byte = (hasNext ? shift2 | 128 : shift2) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    bytes.push(hi >>> 31 & 1);
  }
  var TWO_PWR_32_DBL = 4294967296;
  function int64FromString(dec) {
    const minus = dec[0] === "-";
    if (minus) {
      dec = dec.slice(1);
    }
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
      const digit1e6 = Number(dec.slice(begin, end));
      highBits *= base;
      lowBits = lowBits * base + digit1e6;
      if (lowBits >= TWO_PWR_32_DBL) {
        highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
        lowBits = lowBits % TWO_PWR_32_DBL;
      }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
  }
  function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    const negative = bits.hi & 2147483648;
    if (negative) {
      bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
  }
  function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    if (hi <= 2097151) {
      return String(TWO_PWR_32_DBL * hi + lo);
    }
    const low = lo & 16777215;
    const mid = (lo >>> 24 | hi << 8) & 16777215;
    const high = hi >> 16 & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    const base = 1e7;
    if (digitA >= base) {
      digitB += Math.floor(digitA / base);
      digitA %= base;
    }
    if (digitB >= base) {
      digitC += Math.floor(digitB / base);
      digitB %= base;
    }
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
  }
  function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
  }
  function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
  }
  function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
      lowBits = ~lowBits + 1;
    } else {
      highBits += 1;
    }
    return newBits(lowBits, highBits);
  }
  var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
  };
  function varint32write(value, bytes) {
    if (value >= 0) {
      while (value > 127) {
        bytes.push(value & 127 | 128);
        value = value >>> 7;
      }
      bytes.push(value);
    } else {
      for (let i4 = 0; i4 < 9; i4++) {
        bytes.push(value & 127 | 128);
        value = value >> 7;
      }
      bytes.push(1);
    }
  }
  function varint32read() {
    let b5 = this.buf[this.pos++];
    let result = b5 & 127;
    if ((b5 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b5 = this.buf[this.pos++];
    result |= (b5 & 127) << 7;
    if ((b5 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b5 = this.buf[this.pos++];
    result |= (b5 & 127) << 14;
    if ((b5 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b5 = this.buf[this.pos++];
    result |= (b5 & 127) << 21;
    if ((b5 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b5 = this.buf[this.pos++];
    result |= (b5 & 15) << 28;
    for (let readBytes = 5; (b5 & 128) !== 0 && readBytes < 10; readBytes++)
      b5 = this.buf[this.pos++];
    if ((b5 & 128) != 0)
      throw new Error("invalid varint");
    this.assertBounds();
    return result >>> 0;
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
  init_define_process();
  init_define_process_env();
  function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok = globalThis.BigInt !== void 0 && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof define_process_default != "object" || typeof define_process_env_default != "object" || define_process_env_default.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
      const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
      return {
        zero: BigInt(0),
        supported: true,
        parse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > MAX || bi < MIN) {
            throw new Error(`int64 invalid: ${value}`);
          }
          return bi;
        },
        uParse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > UMAX || bi < UMIN) {
            throw new Error(`uint64 invalid: ${value}`);
          }
          return bi;
        },
        enc(value) {
          dv.setBigInt64(0, this.parse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        uEnc(value) {
          dv.setBigInt64(0, this.uParse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        dec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigInt64(0, true);
        },
        uDec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigUint64(0, true);
        }
      };
    }
    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
      zero: "0",
      supported: false,
      parse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return value;
      },
      uParse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return value;
      },
      enc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return int64FromString(value);
      },
      uEnc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return int64FromString(value);
      },
      dec(lo, hi) {
        return int64ToString(lo, hi);
      },
      uDec(lo, hi) {
        return uInt64ToString(lo, hi);
      }
    };
  }
  var protoInt64 = makeInt64Support();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js
  var WireType;
  (function(WireType2) {
    WireType2[WireType2["Varint"] = 0] = "Varint";
    WireType2[WireType2["Bit64"] = 1] = "Bit64";
    WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
    WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
    WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
    WireType2[WireType2["Bit32"] = 5] = "Bit32";
  })(WireType || (WireType = {}));
  var BinaryWriter = class {
    constructor(textEncoder) {
      this.stack = [];
      this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
      this.chunks = [];
      this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
      this.chunks.push(new Uint8Array(this.buf));
      let len = 0;
      for (let i4 = 0; i4 < this.chunks.length; i4++)
        len += this.chunks[i4].length;
      let bytes = new Uint8Array(len);
      let offset2 = 0;
      for (let i4 = 0; i4 < this.chunks.length; i4++) {
        bytes.set(this.chunks[i4], offset2);
        offset2 += this.chunks[i4].length;
      }
      this.chunks = [];
      return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
      this.stack.push({ chunks: this.chunks, buf: this.buf });
      this.chunks = [];
      this.buf = [];
      return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
      let chunk = this.finish();
      let prev2 = this.stack.pop();
      if (!prev2)
        throw new Error("invalid state, fork stack empty");
      this.chunks = prev2.chunks;
      this.buf = prev2.buf;
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
      return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
      if (this.buf.length) {
        this.chunks.push(new Uint8Array(this.buf));
        this.buf = [];
      }
      this.chunks.push(chunk);
      return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
      assertUInt32(value);
      while (value > 127) {
        this.buf.push(value & 127 | 128);
        value = value >>> 7;
      }
      this.buf.push(value);
      return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
      assertInt32(value);
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
      this.buf.push(value ? 1 : 0);
      return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
      this.uint32(value.byteLength);
      return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
      let chunk = this.textEncoder.encode(value);
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
      assertFloat32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setFloat32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
      let chunk = new Uint8Array(8);
      new DataView(chunk.buffer).setFloat64(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
      assertUInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setUint32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
      assertInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setInt32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
      assertInt32(value);
      value = (value << 1 ^ value >> 31) >>> 0;
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
      let tc = protoInt64.enc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
      let tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
      varint64write(lo, hi, this.buf);
      return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
      let tc = protoInt64.uEnc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
  };
  var BinaryReader = class {
    constructor(buf, textDecoder) {
      this.varint64 = varint64read;
      this.uint32 = varint32read;
      this.buf = buf;
      this.len = buf.length;
      this.pos = 0;
      this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
      this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
      let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
      if (fieldNo <= 0 || wireType < 0 || wireType > 5)
        throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
      return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
      let start2 = this.pos;
      switch (wireType) {
        case WireType.Varint:
          while (this.buf[this.pos++] & 128) {
          }
          break;
        case WireType.Bit64:
          this.pos += 4;
        case WireType.Bit32:
          this.pos += 4;
          break;
        case WireType.LengthDelimited:
          let len = this.uint32();
          this.pos += len;
          break;
        case WireType.StartGroup:
          let t3;
          while ((t3 = this.tag()[1]) !== WireType.EndGroup) {
            this.skip(t3);
          }
          break;
        default:
          throw new Error("cant skip wire type " + wireType);
      }
      this.assertBounds();
      return this.buf.subarray(start2, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
      if (this.pos > this.len)
        throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
      return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
      let zze = this.uint32();
      return zze >>> 1 ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
      return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
      return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
      let [lo, hi] = this.varint64();
      let s4 = -(lo & 1);
      lo = (lo >>> 1 | (hi & 1) << 31) ^ s4;
      hi = hi >>> 1 ^ s4;
      return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
      let [lo, hi] = this.varint64();
      return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
      return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
      return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
      return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
      return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
      return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
      return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
      let len = this.uint32(), start2 = this.pos;
      this.pos += len;
      this.assertBounds();
      return this.buf.subarray(start2, start2 + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
      return this.textDecoder.decode(this.bytes());
    }
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js
  init_define_process();
  init_define_process_env();
  function wrapField(type, value) {
    if (value instanceof Message || !type.fieldWrapper) {
      return value;
    }
    return type.fieldWrapper.wrapField(value);
  }
  var wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": ScalarType.DOUBLE,
    "google.protobuf.FloatValue": ScalarType.FLOAT,
    "google.protobuf.Int64Value": ScalarType.INT64,
    "google.protobuf.UInt64Value": ScalarType.UINT64,
    "google.protobuf.Int32Value": ScalarType.INT32,
    "google.protobuf.UInt32Value": ScalarType.UINT32,
    "google.protobuf.BoolValue": ScalarType.BOOL,
    "google.protobuf.StringValue": ScalarType.STRING,
    "google.protobuf.BytesValue": ScalarType.BYTES
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js
  init_define_process();
  init_define_process_env();
  function scalarEquals(type, a4, b5) {
    if (a4 === b5) {
      return true;
    }
    if (type == ScalarType.BYTES) {
      if (!(a4 instanceof Uint8Array) || !(b5 instanceof Uint8Array)) {
        return false;
      }
      if (a4.length !== b5.length) {
        return false;
      }
      for (let i4 = 0; i4 < a4.length; i4++) {
        if (a4[i4] !== b5[i4]) {
          return false;
        }
      }
      return true;
    }
    switch (type) {
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return a4 == b5;
    }
    return false;
  }
  function scalarDefaultValue(type) {
    switch (type) {
      case ScalarType.BOOL:
        return false;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return protoInt64.zero;
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        return 0;
      case ScalarType.BYTES:
        return new Uint8Array(0);
      case ScalarType.STRING:
        return "";
      default:
        return 0;
    }
  }
  function scalarTypeInfo(type, value) {
    const isUndefined2 = value === void 0;
    let wireType = WireType.Varint;
    let isIntrinsicDefault = value === 0;
    switch (type) {
      case ScalarType.STRING:
        isIntrinsicDefault = isUndefined2 || !value.length;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.BOOL:
        isIntrinsicDefault = value === false;
        break;
      case ScalarType.DOUBLE:
        wireType = WireType.Bit64;
        break;
      case ScalarType.FLOAT:
        wireType = WireType.Bit32;
        break;
      case ScalarType.INT64:
        isIntrinsicDefault = isUndefined2 || value == 0;
        break;
      case ScalarType.UINT64:
        isIntrinsicDefault = isUndefined2 || value == 0;
        break;
      case ScalarType.FIXED64:
        isIntrinsicDefault = isUndefined2 || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.BYTES:
        isIntrinsicDefault = isUndefined2 || !value.byteLength;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.FIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED64:
        isIntrinsicDefault = isUndefined2 || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.SINT64:
        isIntrinsicDefault = isUndefined2 || value == 0;
        break;
    }
    const method = ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined2 || isIntrinsicDefault];
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js
  var unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
  var readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new BinaryReader(bytes)
  };
  var writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new BinaryWriter()
  };
  function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
  }
  function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
  }
  function makeBinaryFormatCommon() {
    return {
      makeReadOptions,
      makeWriteOptions,
      listUnknownFields(message) {
        var _a;
        return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];
      },
      discardUnknownFields(message) {
        delete message[unknownFieldsSymbol];
      },
      writeUnknownFields(message, writer) {
        const m5 = message;
        const c4 = m5[unknownFieldsSymbol];
        if (c4) {
          for (const f5 of c4) {
            writer.tag(f5.no, f5.wireType).raw(f5.data);
          }
        }
      },
      onUnknownField(message, no, wireType, data) {
        const m5 = message;
        if (!Array.isArray(m5[unknownFieldsSymbol])) {
          m5[unknownFieldsSymbol] = [];
        }
        m5[unknownFieldsSymbol].push({ no, wireType, data });
      },
      readMessage(message, reader, length2, options) {
        const type = message.getType();
        const end = length2 === void 0 ? reader.len : reader.pos + length2;
        while (reader.pos < end) {
          const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);
          if (!field) {
            const data = reader.skip(wireType);
            if (options.readUnknownFields) {
              this.onUnknownField(message, fieldNo, wireType, data);
            }
            continue;
          }
          let target = message, repeated = field.repeated, localName = field.localName;
          if (field.oneof) {
            target = target[field.oneof.localName];
            if (target.case != localName) {
              delete target.value;
            }
            target.case = localName;
            localName = "value";
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              const scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
              if (repeated) {
                let arr = target[localName];
                if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {
                  let e3 = reader.uint32() + reader.pos;
                  while (reader.pos < e3) {
                    arr.push(readScalar(reader, scalarType));
                  }
                } else {
                  arr.push(readScalar(reader, scalarType));
                }
              } else {
                target[localName] = readScalar(reader, scalarType);
              }
              break;
            case "message":
              const messageType = field.T;
              if (repeated) {
                target[localName].push(messageType.fromBinary(reader.bytes(), options));
              } else {
                if (target[localName] instanceof Message) {
                  target[localName].fromBinary(reader.bytes(), options);
                } else {
                  target[localName] = messageType.fromBinary(reader.bytes(), options);
                  if (messageType.fieldWrapper && !field.oneof && !field.repeated) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
              }
              break;
            case "map":
              let [mapKey2, mapVal] = readMapEntry(field, reader, options);
              target[localName][mapKey2] = mapVal;
              break;
          }
        }
      }
    };
  }
  function readMapEntry(field, reader, options) {
    const length2 = reader.uint32(), end = reader.pos + length2;
    let key, val;
    while (reader.pos < end) {
      let [fieldNo] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = readScalar(reader, field.K);
          break;
        case 2:
          switch (field.V.kind) {
            case "scalar":
              val = readScalar(reader, field.V.T);
              break;
            case "enum":
              val = reader.int32();
              break;
            case "message":
              val = field.V.T.fromBinary(reader.bytes(), options);
              break;
          }
          break;
      }
    }
    if (key === void 0) {
      let keyRaw = scalarDefaultValue(field.K);
      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
      key = key.toString();
    }
    if (val === void 0) {
      switch (field.V.kind) {
        case "scalar":
          val = scalarDefaultValue(field.V.T);
          break;
        case "enum":
          val = 0;
          break;
        case "message":
          val = new field.V.T();
          break;
      }
    }
    return [key, val];
  }
  function readScalar(reader, type) {
    let [, method] = scalarTypeInfo(type);
    return reader[method]();
  }
  function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, WireType.LengthDelimited);
    writer.fork();
    let keyValue = key;
    switch (field.K) {
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        keyValue = Number.parseInt(key);
        break;
      case ScalarType.BOOL:
        assert(key == "true" || key == "false");
        keyValue = key == "true";
        break;
    }
    writeScalar(writer, field.K, 1, keyValue, true);
    switch (field.V.kind) {
      case "scalar":
        writeScalar(writer, field.V.T, 2, value, true);
        break;
      case "enum":
        writeScalar(writer, ScalarType.INT32, 2, value, true);
        break;
      case "message":
        writeMessageField(writer, options, field.V.T, 2, value);
        break;
    }
    writer.join();
  }
  function writeMessageField(writer, options, type, fieldNo, value) {
    if (value !== void 0) {
      const message = wrapField(type, value);
      writer.tag(fieldNo, WireType.LengthDelimited).bytes(message.toBinary(options));
    }
  }
  function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
      writer.tag(fieldNo, wireType)[method](value);
    }
  }
  function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
      return;
    }
    writer.tag(fieldNo, WireType.LengthDelimited).fork();
    let [, method] = scalarTypeInfo(type);
    for (let i4 = 0; i4 < value.length; i4++) {
      writer[method](value[i4]);
    }
    writer.join();
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js
  function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {
      const type = message.getType();
      for (const field of type.fields.byNumber()) {
        let value, repeated = field.repeated, localName = field.localName;
        if (field.oneof) {
          const oneof = message[field.oneof.localName];
          if (oneof.case !== localName) {
            continue;
          }
          value = oneof.value;
        } else {
          value = message[localName];
        }
        switch (field.kind) {
          case "scalar":
          case "enum":
            let scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
            if (repeated) {
              if (field.packed) {
                writePacked(writer, scalarType, field.no, value);
              } else {
                for (const item of value) {
                  writeScalar(writer, scalarType, field.no, item, true);
                }
              }
            } else {
              if (value !== void 0) {
                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);
              }
            }
            break;
          case "message":
            if (repeated) {
              for (const item of value) {
                writeMessageField(writer, options, field.T, field.no, item);
              }
            } else {
              writeMessageField(writer, options, field.T, field.no, value);
            }
            break;
          case "map":
            for (const [key, val] of Object.entries(value)) {
              writeMapEntry(writer, options, field, key, val);
            }
            break;
        }
      }
      if (options.writeUnknownFields) {
        this.writeUnknownFields(message, writer);
      }
      return writer;
    } });
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js
  init_define_process();
  init_define_process_env();
  var encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  var decTable = [];
  for (let i4 = 0; i4 < encTable.length; i4++)
    decTable[encTable[i4].charCodeAt(0)] = i4;
  decTable["-".charCodeAt(0)] = encTable.indexOf("+");
  decTable["_".charCodeAt(0)] = encTable.indexOf("/");
  var protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
      let es = base64Str.length * 3 / 4;
      if (base64Str[base64Str.length - 2] == "=")
        es -= 2;
      else if (base64Str[base64Str.length - 1] == "=")
        es -= 1;
      let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b5, p4 = 0;
      for (let i4 = 0; i4 < base64Str.length; i4++) {
        b5 = decTable[base64Str.charCodeAt(i4)];
        if (b5 === void 0) {
          switch (base64Str[i4]) {
            case "=":
              groupPos = 0;
            case "\n":
            case "\r":
            case "	":
            case " ":
              continue;
            default:
              throw Error("invalid base64 string.");
          }
        }
        switch (groupPos) {
          case 0:
            p4 = b5;
            groupPos = 1;
            break;
          case 1:
            bytes[bytePos++] = p4 << 2 | (b5 & 48) >> 4;
            p4 = b5;
            groupPos = 2;
            break;
          case 2:
            bytes[bytePos++] = (p4 & 15) << 4 | (b5 & 60) >> 2;
            p4 = b5;
            groupPos = 3;
            break;
          case 3:
            bytes[bytePos++] = (p4 & 3) << 6 | b5;
            groupPos = 0;
            break;
        }
      }
      if (groupPos == 1)
        throw Error("invalid base64 string.");
      return bytes.subarray(0, bytePos);
    },
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    enc(bytes) {
      let base64 = "", groupPos = 0, b5, p4 = 0;
      for (let i4 = 0; i4 < bytes.length; i4++) {
        b5 = bytes[i4];
        switch (groupPos) {
          case 0:
            base64 += encTable[b5 >> 2];
            p4 = (b5 & 3) << 4;
            groupPos = 1;
            break;
          case 1:
            base64 += encTable[p4 | b5 >> 4];
            p4 = (b5 & 15) << 2;
            groupPos = 2;
            break;
          case 2:
            base64 += encTable[p4 | b5 >> 6];
            base64 += encTable[b5 & 63];
            groupPos = 0;
            break;
        }
      }
      if (groupPos) {
        base64 += encTable[p4];
        base64 += "=";
        if (groupPos == 1)
          base64 += "=";
      }
      return base64;
    }
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js
  var jsonReadDefaults = {
    ignoreUnknownFields: false
  };
  var jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0
  };
  function makeReadOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
  }
  function makeWriteOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
  }
  function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar2);
    return {
      makeReadOptions: makeReadOptions2,
      makeWriteOptions: makeWriteOptions2,
      readMessage(type, json2, options, message) {
        if (json2 == null || Array.isArray(json2) || typeof json2 != "object") {
          throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json2)}`);
        }
        message = message !== null && message !== void 0 ? message : new type();
        const oneofSeen = {};
        for (const [jsonKey, jsonValue] of Object.entries(json2)) {
          const field = type.fields.findJsonName(jsonKey);
          if (!field) {
            if (!options.ignoreUnknownFields) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
            }
            continue;
          }
          let localName = field.localName;
          let target = message;
          if (field.oneof) {
            if (jsonValue === null && field.kind == "scalar") {
              continue;
            }
            const seen = oneofSeen[field.oneof.localName];
            if (seen) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
            }
            oneofSeen[field.oneof.localName] = jsonKey;
            target = target[field.oneof.localName] = { case: localName };
            localName = "value";
          }
          if (field.repeated) {
            if (jsonValue === null) {
              continue;
            }
            if (!Array.isArray(jsonValue)) {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetArray = target[localName];
            for (const jsonItem of jsonValue) {
              if (jsonItem === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
              }
              let val;
              switch (field.kind) {
                case "message":
                  val = field.T.fromJson(jsonItem, options);
                  break;
                case "enum":
                  val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.T, jsonItem);
                  } catch (e3) {
                    let m5 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                    if (e3 instanceof Error && e3.message.length > 0) {
                      m5 += `: ${e3.message}`;
                    }
                    throw new Error(m5);
                  }
                  break;
              }
              targetArray.push(val);
            }
          } else if (field.kind == "map") {
            if (jsonValue === null) {
              continue;
            }
            if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetMap = target[localName];
            for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
              if (jsonMapValue === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
              }
              let val;
              switch (field.V.kind) {
                case "message":
                  val = field.V.T.fromJson(jsonMapValue, options);
                  break;
                case "enum":
                  val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.V.T, jsonMapValue);
                  } catch (e3) {
                    let m5 = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                    if (e3 instanceof Error && e3.message.length > 0) {
                      m5 += `: ${e3.message}`;
                    }
                    throw new Error(m5);
                  }
                  break;
              }
              try {
                targetMap[readScalar2(field.K, field.K == ScalarType.BOOL ? jsonMapKey == "true" ? true : jsonMapKey == "false" ? false : jsonMapKey : jsonMapKey).toString()] = val;
              } catch (e3) {
                let m5 = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                if (e3 instanceof Error && e3.message.length > 0) {
                  m5 += `: ${e3.message}`;
                }
                throw new Error(m5);
              }
            }
          } else {
            switch (field.kind) {
              case "message":
                const messageType = field.T;
                if (jsonValue === null && messageType.typeName != "google.protobuf.Value") {
                  if (field.oneof) {
                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                  }
                  continue;
                }
                if (target[localName] instanceof Message) {
                  target[localName].fromJson(jsonValue, options);
                } else {
                  target[localName] = messageType.fromJson(jsonValue, options);
                  if (messageType.fieldWrapper && !field.oneof) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
                break;
              case "enum":
                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                if (enumValue !== void 0) {
                  target[localName] = enumValue;
                }
                break;
              case "scalar":
                try {
                  target[localName] = readScalar2(field.T, jsonValue);
                } catch (e3) {
                  let m5 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                  if (e3 instanceof Error && e3.message.length > 0) {
                    m5 += `: ${e3.message}`;
                  }
                  throw new Error(m5);
                }
                break;
            }
          }
        }
        return message;
      },
      writeMessage(message, options) {
        const type = message.getType();
        const json2 = {};
        let field;
        try {
          for (const member of type.fields.byMember()) {
            let jsonValue;
            if (member.kind == "oneof") {
              const oneof = message[member.localName];
              if (oneof.value === void 0) {
                continue;
              }
              field = member.findField(oneof.case);
              if (!field) {
                throw "oneof case not found: " + oneof.case;
              }
              jsonValue = writeField(field, oneof.value, options);
            } else {
              field = member;
              jsonValue = writeField(field, message[field.localName], options);
            }
            if (jsonValue !== void 0) {
              json2[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
            }
          }
        } catch (e3) {
          const m5 = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;
          const r3 = e3 instanceof Error ? e3.message : String(e3);
          throw new Error(m5 + (r3.length > 0 ? `: ${r3}` : ""));
        }
        return json2;
      },
      readScalar: readScalar2,
      writeScalar: writeScalar2,
      debug: debugJsonValue
    };
  }
  function debugJsonValue(json2) {
    if (json2 === null) {
      return "null";
    }
    switch (typeof json2) {
      case "object":
        return Array.isArray(json2) ? "array" : "object";
      case "string":
        return json2.length > 100 ? "string" : `"${json2.split('"').join('\\"')}"`;
      default:
        return json2.toString();
    }
  }
  function readScalar2(type, json2) {
    switch (type) {
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        if (json2 === null)
          return 0;
        if (json2 === "NaN")
          return Number.NaN;
        if (json2 === "Infinity")
          return Number.POSITIVE_INFINITY;
        if (json2 === "-Infinity")
          return Number.NEGATIVE_INFINITY;
        if (json2 === "") {
          break;
        }
        if (typeof json2 == "string" && json2.trim().length !== json2.length) {
          break;
        }
        if (typeof json2 != "string" && typeof json2 != "number") {
          break;
        }
        const float = Number(json2);
        if (Number.isNaN(float)) {
          break;
        }
        if (!Number.isFinite(float)) {
          break;
        }
        if (type == ScalarType.FLOAT)
          assertFloat32(float);
        return float;
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.UINT32:
        if (json2 === null)
          return 0;
        let int32;
        if (typeof json2 == "number")
          int32 = json2;
        else if (typeof json2 == "string" && json2.length > 0) {
          if (json2.trim().length === json2.length)
            int32 = Number(json2);
        }
        if (int32 === void 0)
          break;
        if (type == ScalarType.UINT32)
          assertUInt32(int32);
        else
          assertInt32(int32);
        return int32;
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.parse(json2);
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.uParse(json2);
      case ScalarType.BOOL:
        if (json2 === null)
          return false;
        if (typeof json2 !== "boolean")
          break;
        return json2;
      case ScalarType.STRING:
        if (json2 === null)
          return "";
        if (typeof json2 !== "string") {
          break;
        }
        try {
          encodeURIComponent(json2);
        } catch (e3) {
          throw new Error("invalid UTF8");
        }
        return json2;
      case ScalarType.BYTES:
        if (json2 === null || json2 === "")
          return new Uint8Array(0);
        if (typeof json2 !== "string")
          break;
        return protoBase64.dec(json2);
    }
    throw new Error();
  }
  function readEnum(type, json2, ignoreUnknownFields) {
    if (json2 === null) {
      return 0;
    }
    switch (typeof json2) {
      case "number":
        if (Number.isInteger(json2)) {
          return json2;
        }
        break;
      case "string":
        const value = type.findName(json2);
        if (value || ignoreUnknownFields) {
          return value === null || value === void 0 ? void 0 : value.no;
        }
        break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json2)}`);
  }
  function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a;
    if (value === void 0) {
      return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
      return void 0;
    }
    if (enumAsInteger) {
      return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
      return null;
    }
    const val = type.findNumber(value);
    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value;
  }
  function writeScalar2(type, value, emitIntrinsicDefault) {
    if (value === void 0) {
      return void 0;
    }
    switch (type) {
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        assert(typeof value == "number");
        return value != 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.FLOAT:
      case ScalarType.DOUBLE:
        assert(typeof value == "number");
        if (Number.isNaN(value))
          return "NaN";
        if (value === Number.POSITIVE_INFINITY)
          return "Infinity";
        if (value === Number.NEGATIVE_INFINITY)
          return "-Infinity";
        return value !== 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.STRING:
        assert(typeof value == "string");
        return value.length > 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.BOOL:
        assert(typeof value == "boolean");
        return value || emitIntrinsicDefault ? value : void 0;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        assert(typeof value == "bigint" || typeof value == "string" || typeof value == "number");
        return emitIntrinsicDefault || value != 0 ? value.toString(10) : void 0;
      case ScalarType.BYTES:
        assert(value instanceof Uint8Array);
        return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : void 0;
    }
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js
  function makeJsonFormatProto3() {
    return makeJsonFormatCommon((writeEnum2, writeScalar3) => {
      return function writeField(field, value, options) {
        if (field.kind == "map") {
          const jsonObj = {};
          switch (field.V.kind) {
            case "scalar":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = writeScalar3(field.V.T, entryValue, true);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "message":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                jsonObj[entryKey.toString()] = entryValue.toJson(options);
              }
              break;
            case "enum":
              const enumType = field.V.T;
              for (const [entryKey, entryValue] of Object.entries(value)) {
                assert(entryValue === void 0 || typeof entryValue == "number");
                const val = writeEnum2(enumType, entryValue, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
          }
          return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : void 0;
        } else if (field.repeated) {
          const jsonArr = [];
          switch (field.kind) {
            case "scalar":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(writeScalar3(field.T, value[i4], true));
              }
              break;
            case "enum":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(writeEnum2(field.T, value[i4], true, options.enumAsInteger));
              }
              break;
            case "message":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(wrapField(field.T, value[i4]).toJson(options));
              }
              break;
          }
          return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : void 0;
        } else {
          switch (field.kind) {
            case "scalar":
              return writeScalar3(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
            case "enum":
              return writeEnum2(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
            case "message":
              return value !== void 0 ? wrapField(field.T, value).toJson(options) : void 0;
          }
        }
      };
    });
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js
  init_define_process();
  init_define_process_env();
  function makeUtilCommon() {
    return {
      setEnumType,
      initPartial(source, target) {
        if (source === void 0) {
          return;
        }
        const type = target.getType();
        for (const member of type.fields.byMember()) {
          const localName = member.localName, t3 = target, s4 = source;
          if (s4[localName] === void 0) {
            continue;
          }
          switch (member.kind) {
            case "oneof":
              const sk = s4[localName].case;
              if (sk === void 0) {
                continue;
              }
              const sourceField = member.findField(sk);
              let val = s4[localName].value;
              if (sourceField && sourceField.kind == "message" && !(val instanceof sourceField.T)) {
                val = new sourceField.T(val);
              }
              t3[localName] = { case: sk, value: val };
              break;
            case "scalar":
            case "enum":
              t3[localName] = s4[localName];
              break;
            case "map":
              switch (member.V.kind) {
                case "scalar":
                case "enum":
                  Object.assign(t3[localName], s4[localName]);
                  break;
                case "message":
                  const messageType = member.V.T;
                  for (const k2 of Object.keys(s4[localName])) {
                    let val2 = s4[localName][k2];
                    if (!messageType.fieldWrapper) {
                      val2 = new messageType(val2);
                    }
                    t3[localName][k2] = val2;
                  }
                  break;
              }
              break;
            case "message":
              const mt = member.T;
              if (member.repeated) {
                t3[localName] = s4[localName].map((val2) => val2 instanceof mt ? val2 : new mt(val2));
              } else if (s4[localName] !== void 0) {
                const val2 = s4[localName];
                if (mt.fieldWrapper) {
                  t3[localName] = val2;
                } else {
                  t3[localName] = val2 instanceof mt ? val2 : new mt(val2);
                }
              }
              break;
          }
        }
      },
      equals(type, a4, b5) {
        if (a4 === b5) {
          return true;
        }
        if (!a4 || !b5) {
          return false;
        }
        return type.fields.byMember().every((m5) => {
          const va = a4[m5.localName];
          const vb = b5[m5.localName];
          if (m5.repeated) {
            if (va.length !== vb.length) {
              return false;
            }
            switch (m5.kind) {
              case "message":
                return va.every((a5, i4) => m5.T.equals(a5, vb[i4]));
              case "scalar":
                return va.every((a5, i4) => scalarEquals(m5.T, a5, vb[i4]));
              case "enum":
                return va.every((a5, i4) => scalarEquals(ScalarType.INT32, a5, vb[i4]));
            }
            throw new Error(`repeated cannot contain ${m5.kind}`);
          }
          switch (m5.kind) {
            case "message":
              return m5.T.equals(va, vb);
            case "enum":
              return scalarEquals(ScalarType.INT32, va, vb);
            case "scalar":
              return scalarEquals(m5.T, va, vb);
            case "oneof":
              if (va.case !== vb.case) {
                return false;
              }
              const s4 = m5.findField(va.case);
              if (s4 === void 0) {
                return true;
              }
              switch (s4.kind) {
                case "message":
                  return s4.T.equals(va.value, vb.value);
                case "enum":
                  return scalarEquals(ScalarType.INT32, va.value, vb.value);
                case "scalar":
                  return scalarEquals(s4.T, va.value, vb.value);
              }
              throw new Error(`oneof cannot contain ${s4.kind}`);
            case "map":
              const keys = Object.keys(va).concat(Object.keys(vb));
              switch (m5.V.kind) {
                case "message":
                  const messageType = m5.V.T;
                  return keys.every((k2) => messageType.equals(va[k2], vb[k2]));
                case "enum":
                  return keys.every((k2) => scalarEquals(ScalarType.INT32, va[k2], vb[k2]));
                case "scalar":
                  const scalarType = m5.V.T;
                  return keys.every((k2) => scalarEquals(scalarType, va[k2], vb[k2]));
              }
              break;
          }
        });
      },
      clone(message) {
        const type = message.getType(), target = new type(), any = target;
        for (const member of type.fields.byMember()) {
          const source = message[member.localName];
          let copy2;
          if (member.repeated) {
            copy2 = source.map((e3) => cloneSingularField(member, e3));
          } else if (member.kind == "map") {
            copy2 = any[member.localName];
            for (const [key, v5] of Object.entries(source)) {
              copy2[key] = cloneSingularField(member.V, v5);
            }
          } else if (member.kind == "oneof") {
            const f5 = member.findField(source.case);
            copy2 = f5 ? { case: source.case, value: cloneSingularField(f5, source.value) } : { case: void 0 };
          } else {
            copy2 = cloneSingularField(member, source);
          }
          any[member.localName] = copy2;
        }
        return target;
      }
    };
  }
  function cloneSingularField(field, value) {
    if (value === void 0) {
      return value;
    }
    if (value instanceof Message) {
      return value.clone();
    }
    if (value instanceof Uint8Array) {
      const c4 = new Uint8Array(value.byteLength);
      c4.set(value);
      return c4;
    }
    return value;
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js
  init_define_process();
  init_define_process_env();
  var InternalFieldList = class {
    constructor(fields, normalizer) {
      this._fields = fields;
      this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
      if (!this.jsonNames) {
        const t3 = {};
        for (const f5 of this.list()) {
          t3[f5.jsonName] = t3[f5.name] = f5;
        }
        this.jsonNames = t3;
      }
      return this.jsonNames[jsonName];
    }
    find(fieldNo) {
      if (!this.numbers) {
        const t3 = {};
        for (const f5 of this.list()) {
          t3[f5.no] = f5;
        }
        this.numbers = t3;
      }
      return this.numbers[fieldNo];
    }
    list() {
      if (!this.all) {
        this.all = this._normalizer(this._fields);
      }
      return this.all;
    }
    byNumber() {
      if (!this.numbersAsc) {
        this.numbersAsc = this.list().concat().sort((a4, b5) => a4.no - b5.no);
      }
      return this.numbersAsc;
    }
    byMember() {
      if (!this.members) {
        this.members = [];
        const a4 = this.members;
        let o4;
        for (const f5 of this.list()) {
          if (f5.oneof) {
            if (f5.oneof !== o4) {
              o4 = f5.oneof;
              a4.push(o4);
            }
          } else {
            a4.push(f5);
          }
        }
      }
      return this.members;
    }
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/field.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/names.js
  init_define_process();
  init_define_process_env();
  function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
      return name;
    }
    return safeObjectProperty(safeMessageProperty(name));
  }
  function localOneofName(protoName) {
    return localFieldName(protoName, false);
  }
  var fieldJsonName = protoCamelCase;
  function protoCamelCase(snakeCase) {
    let capNext = false;
    const b5 = [];
    for (let i4 = 0; i4 < snakeCase.length; i4++) {
      let c4 = snakeCase.charAt(i4);
      switch (c4) {
        case "_":
          capNext = true;
          break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          b5.push(c4);
          capNext = false;
          break;
        default:
          if (capNext) {
            capNext = false;
            c4 = c4.toUpperCase();
          }
          b5.push(c4);
          break;
      }
    }
    return b5.join("");
  }
  var reservedObjectProperties = /* @__PURE__ */ new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf"
  ]);
  var reservedMessageProperties = /* @__PURE__ */ new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject"
  ]);
  var fallback = (name) => `${name}$`;
  var safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };
  var safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/private/field.js
  var InternalOneofInfo = class {
    constructor(name) {
      this.kind = "oneof";
      this.repeated = false;
      this.packed = false;
      this.opt = false;
      this.default = void 0;
      this.fields = [];
      this.name = name;
      this.localName = localOneofName(name);
    }
    addField(field) {
      assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);
      this.fields.push(field);
    }
    findField(localName) {
      if (!this._lookup) {
        this._lookup = /* @__PURE__ */ Object.create(null);
        for (let i4 = 0; i4 < this.fields.length; i4++) {
          this._lookup[this.fields[i4].localName] = this.fields[i4];
        }
      }
      return this._lookup[localName];
    }
  };

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/proto3.js
  var proto3 = makeProtoRuntime("proto3", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {
    newFieldList(fields) {
      return new InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
      for (const member of target.getType().fields.byMember()) {
        if (member.opt) {
          continue;
        }
        const name = member.localName, t3 = target;
        if (member.repeated) {
          t3[name] = [];
          continue;
        }
        switch (member.kind) {
          case "oneof":
            t3[name] = { case: void 0 };
            break;
          case "enum":
            t3[name] = 0;
            break;
          case "map":
            t3[name] = {};
            break;
          case "scalar":
            t3[name] = scalarDefaultValue(member.T);
            break;
          case "message":
            break;
        }
      }
    }
  }));
  function normalizeFieldInfosProto3(fieldInfos) {
    var _a, _b, _c;
    const r3 = [];
    let o4;
    for (const field of typeof fieldInfos == "function" ? fieldInfos() : fieldInfos) {
      const f5 = field;
      f5.localName = localFieldName(field.name, field.oneof !== void 0);
      f5.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);
      f5.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
      f5.packed = (_c = field.packed) !== null && _c !== void 0 ? _c : field.kind == "enum" || field.kind == "scalar" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;
      if (field.oneof !== void 0) {
        const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
        if (!o4 || o4.name != ooname) {
          o4 = new InternalOneofInfo(ooname);
        }
        f5.oneof = o4;
        o4.addField(f5);
      }
      r3.push(f5);
    }
    return r3;
  }

  // node_modules/.pnpm/@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/protobuf/dist/esm/service-type.js
  init_define_process();
  init_define_process_env();
  var MethodKind;
  (function(MethodKind2) {
    MethodKind2[MethodKind2["Unary"] = 0] = "Unary";
    MethodKind2[MethodKind2["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind2[MethodKind2["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind2[MethodKind2["BiDiStreaming"] = 3] = "BiDiStreaming";
  })(MethodKind || (MethodKind = {}));
  var MethodIdempotency;
  (function(MethodIdempotency2) {
    MethodIdempotency2[MethodIdempotency2["NoSideEffects"] = 1] = "NoSideEffects";
    MethodIdempotency2[MethodIdempotency2["Idempotent"] = 2] = "Idempotent";
  })(MethodIdempotency || (MethodIdempotency = {}));

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/connect-error.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/code.js
  init_define_process();
  init_define_process_env();
  var Code;
  (function(Code2) {
    Code2[Code2["Canceled"] = 1] = "Canceled";
    Code2[Code2["Unknown"] = 2] = "Unknown";
    Code2[Code2["InvalidArgument"] = 3] = "InvalidArgument";
    Code2[Code2["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code2[Code2["NotFound"] = 5] = "NotFound";
    Code2[Code2["AlreadyExists"] = 6] = "AlreadyExists";
    Code2[Code2["PermissionDenied"] = 7] = "PermissionDenied";
    Code2[Code2["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code2[Code2["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code2[Code2["Aborted"] = 10] = "Aborted";
    Code2[Code2["OutOfRange"] = 11] = "OutOfRange";
    Code2[Code2["Unimplemented"] = 12] = "Unimplemented";
    Code2[Code2["Internal"] = 13] = "Internal";
    Code2[Code2["Unavailable"] = 14] = "Unavailable";
    Code2[Code2["DataLoss"] = 15] = "DataLoss";
    Code2[Code2["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code || (Code = {}));

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js
  init_define_process();
  init_define_process_env();
  function createMethodUrl(baseUrl, service, method) {
    const s4 = typeof service == "string" ? service : service.typeName;
    const m5 = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s4}/${m5}`);
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js
  init_define_process();
  init_define_process_env();
  function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer = new Uint8Array(0);
    function append2(chunk) {
      const n5 = new Uint8Array(buffer.length + chunk.length);
      n5.set(buffer);
      n5.set(chunk, buffer.length);
      buffer = n5;
    }
    return new ReadableStream({
      start() {
        reader = stream.getReader();
      },
      async pull(controller) {
        let header = void 0;
        for (; ; ) {
          if (header === void 0 && buffer.byteLength >= 5) {
            let length2 = 0;
            for (let i4 = 1; i4 < 5; i4++) {
              length2 = (length2 << 8) + buffer[i4];
            }
            header = { flags: buffer[0], length: length2 };
          }
          if (header !== void 0 && buffer.byteLength >= header.length + 5) {
            break;
          }
          const result = await reader.read();
          if (result.done) {
            break;
          }
          append2(result.value);
        }
        if (header === void 0) {
          if (buffer.byteLength == 0) {
            controller.close();
            return;
          }
          controller.error(new ConnectError("premature end of stream", Code.DataLoss));
          return;
        }
        const data = buffer.subarray(5, 5 + header.length);
        buffer = buffer.subarray(5 + header.length);
        controller.enqueue({
          flags: header.flags,
          data
        });
      }
    });
  }
  function encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v5 = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v5.setUint8(0, flags);
    v5.setUint32(1, data.length);
    return bytes;
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
  var __asyncValues = function(o4) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m5 = o4[Symbol.asyncIterator], i4;
    return m5 ? m5.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n5) {
      i4[n5] = o4[n5] && function(v5) {
        return new Promise(function(resolve, reject) {
          v5 = o4[n5](v5), settle(resolve, reject, v5.done, v5.value);
        });
      };
    }
    function settle(resolve, reject, d4, v5) {
      Promise.resolve(v5).then(function(v6) {
        resolve({ value: v6, done: d4 });
      }, reject);
    }
  };
  var __await = function(v5) {
    return this instanceof __await ? (this.v = v5, this) : new __await(v5);
  };
  var __asyncGenerator = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g4 = generator.apply(thisArg, _arguments || []), i4, q = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n5) {
      if (g4[n5])
        i4[n5] = function(v5) {
          return new Promise(function(a4, b5) {
            q.push([n5, v5, a4, b5]) > 1 || resume(n5, v5);
          });
        };
    }
    function resume(n5, v5) {
      try {
        step(g4[n5](v5));
      } catch (e3) {
        settle(q[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f5, v5) {
      if (f5(v5), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  var __asyncDelegator = function(o4) {
    var i4, p4;
    return i4 = {}, verb("next"), verb("throw", function(e3) {
      throw e3;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n5, f5) {
      i4[n5] = o4[n5] ? function(v5) {
        return (p4 = !p4) ? { value: __await(o4[n5](v5)), done: false } : f5 ? f5(v5) : v5;
      } : f5;
    }
  };
  function createAsyncIterable(items) {
    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {
      yield __await(yield* __asyncDelegator(__asyncValues(items)));
    });
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js
  init_define_process();
  init_define_process_env();
  function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    function normalize(input2) {
      return input2 instanceof method.I ? input2 : new method.I(input2);
    }
    const input = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);
    return { normalize, parse: output.parse, serialize: input.serialize };
  }
  function createBinarySerialization(messageType, options) {
    return {
      parse(data) {
        try {
          return messageType.fromBinary(data, options);
        } catch (e3) {
          const m5 = e3 instanceof Error ? e3.message : String(e3);
          throw new ConnectError(`parse binary: ${m5}`, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          return data.toBinary(options);
        } catch (e3) {
          const m5 = e3 instanceof Error ? e3.message : String(e3);
          throw new ConnectError(`serialize binary: ${m5}`, Code.Internal);
        }
      }
    };
  }
  function createJsonSerialization(messageType, options) {
    var _a, _b;
    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();
    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();
    return {
      parse(data) {
        try {
          const json2 = textDecoder.decode(data);
          return messageType.fromJsonString(json2, options);
        } catch (e3) {
          throw connectErrorFromReason(e3, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          const json2 = data.toJsonString(options);
          return textEncoder.encode(json2);
        } catch (e3) {
          throw connectErrorFromReason(e3, Code.Internal);
        }
      }
    };
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js
  init_define_process();
  init_define_process_env();
  var contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
  var contentTypeUnaryProto = "application/proto";
  var contentTypeUnaryJson = "application/json";
  var contentTypeStreamProto = "application/connect+proto";
  var contentTypeStreamJson = "application/connect+json";
  function parseContentType(contentType) {
    const match2 = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);
    if (!match2) {
      return void 0;
    }
    const stream = !!match2[1];
    const binary = !!match2[3];
    return { stream, binary };
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
  init_define_process();
  init_define_process_env();
  function codeToString(value) {
    const name = Code[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c4) => "_" + c4.toLowerCase());
  }
  var stringToCode;
  function codeFromString(value) {
    if (!stringToCode) {
      stringToCode = {};
      for (const value2 of Object.values(Code)) {
        if (typeof value2 == "string") {
          continue;
        }
        stringToCode[codeToString(value2)] = value2;
      }
    }
    return stringToCode[value];
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
  function errorFromJson(jsonValue, metadata, fallback2) {
    if (metadata) {
      new Headers(metadata).forEach((value, key) => fallback2.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" || jsonValue == null || Array.isArray(jsonValue) || !("code" in jsonValue) || typeof jsonValue.code !== "string") {
      throw fallback2;
    }
    const code = codeFromString(jsonValue.code);
    if (code === void 0) {
      throw fallback2;
    }
    const message = jsonValue.message;
    if (message != null && typeof message !== "string") {
      throw fallback2;
    }
    const error = new ConnectError(message !== null && message !== void 0 ? message : "", code, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
      for (const detail of jsonValue.details) {
        if (detail === null || typeof detail != "object" || Array.isArray(detail) || typeof detail.type != "string" || typeof detail.value != "string" || "debug" in detail && typeof detail.debug != "object") {
          throw fallback2;
        }
        try {
          error.details.push({
            type: detail.type,
            value: protoBase64.dec(detail.value),
            debug: detail.debug
          });
        } catch (e3) {
          throw fallback2;
        }
      }
    }
    return error;
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/http-headers.js
  init_define_process();
  init_define_process_env();
  function appendHeaders(...headers) {
    const h5 = new Headers();
    for (const e3 of headers) {
      e3.forEach((value, key) => {
        h5.append(key, value);
      });
    }
    return h5;
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
  var endStreamFlag = 2;
  function endStreamFromJson(data) {
    const parseErr = new ConnectError("invalid end stream", Code.InvalidArgument);
    let jsonValue;
    try {
      jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    } catch (e3) {
      throw parseErr;
    }
    if (typeof jsonValue != "object" || jsonValue == null || Array.isArray(jsonValue)) {
      throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
      if (typeof jsonValue.metadata != "object" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {
        throw parseErr;
      }
      for (const [key, values] of Object.entries(jsonValue.metadata)) {
        if (!Array.isArray(values) || values.some((value) => typeof value != "string")) {
          throw parseErr;
        }
        for (const value of values) {
          metadata.append(key, value);
        }
      }
    }
    const error = "error" in jsonValue ? errorFromJson(jsonValue.error, metadata, parseErr) : void 0;
    return { metadata, error };
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js
  init_define_process();
  init_define_process_env();
  var headerContentType = "Content-Type";
  var headerTimeout = "Connect-Timeout-Ms";
  var headerProtocolVersion = "Connect-Protocol-Version";

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js
  init_define_process();
  init_define_process_env();
  function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
      case 400:
        return Code.InvalidArgument;
      case 401:
        return Code.Unauthenticated;
      case 403:
        return Code.PermissionDenied;
      case 404:
        return Code.Unimplemented;
      case 408:
        return Code.DeadlineExceeded;
      case 409:
        return Code.Aborted;
      case 412:
        return Code.FailedPrecondition;
      case 413:
        return Code.ResourceExhausted;
      case 415:
        return Code.Internal;
      case 429:
        return Code.Unavailable;
      case 431:
        return Code.ResourceExhausted;
      case 502:
        return Code.Unavailable;
      case 503:
        return Code.Unavailable;
      case 504:
        return Code.Unavailable;
      default:
        return Code.Unknown;
    }
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js
  init_define_process();
  init_define_process_env();
  function trailerDemux(header) {
    const h5 = new Headers(), t3 = new Headers();
    header.forEach((value, key) => {
      if (key.toLowerCase().startsWith("trailer-")) {
        t3.set(key.substring(8), value);
      } else {
        h5.set(key, value);
      }
    });
    return [h5, t3];
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js
  init_define_process();
  init_define_process_env();
  var protocolVersion = "1";

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js
  init_define_process();
  init_define_process_env();
  function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== void 0) {
      result.set(headerTimeout, `${timeoutMs}`);
    }
    result.set(headerContentType, methodKind == MethodKind.Unary ? useBinaryFormat ? contentTypeUnaryProto : contentTypeUnaryJson : useBinaryFormat ? contentTypeStreamProto : contentTypeStreamJson);
    result.set(headerProtocolVersion, protocolVersion);
    return result;
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js
  init_define_process();
  init_define_process_env();
  function validateResponse(methodKind, useBinaryFormat, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = parseContentType(mimeType);
    if (status !== 200) {
      const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status));
      if (methodKind == MethodKind.Unary && parsedType && !parsedType.stream && !parsedType.binary) {
        return { isUnaryError: true, unaryError: errorFromStatus };
      }
      throw errorFromStatus;
    }
    const isStream = methodKind != MethodKind.Unary;
    if (!parsedType || parsedType.binary != useBinaryFormat || parsedType.stream != isStream) {
      throw new ConnectError(`unexpected response content type "${mimeType !== null && mimeType !== void 0 ? mimeType : "?"}"`, Code.InvalidArgument);
    }
    return { isUnaryError: false };
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/connect-error.js
  var ConnectError = class extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage(message, code));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message;
      this.code = code;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
  };
  function createMessage(message, code) {
    return message.length ? `[${codeToString(code)}] ${message}` : `[${codeToString(code)}]`;
  }
  function connectErrorFromReason(reason, code = Code.Unknown) {
    if (reason instanceof ConnectError) {
      return reason;
    }
    if (reason instanceof Error) {
      if (reason.name == "AbortError") {
        return new ConnectError(reason.message, Code.Canceled);
      }
      return new ConnectError(reason.message, code);
    }
    return new ConnectError(String(reason), code);
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/any-client.js
  init_define_process();
  init_define_process_env();
  function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
      const method = createMethod(Object.assign(Object.assign({}, methodInfo), {
        localName,
        service
      }));
      if (method != null) {
        client[localName] = method;
      }
    }
    return client;
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/promise-client.js
  init_define_process();
  init_define_process_env();
  var __await2 = function(v5) {
    return this instanceof __await2 ? (this.v = v5, this) : new __await2(v5);
  };
  var __asyncValues2 = function(o4) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m5 = o4[Symbol.asyncIterator], i4;
    return m5 ? m5.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n5) {
      i4[n5] = o4[n5] && function(v5) {
        return new Promise(function(resolve, reject) {
          v5 = o4[n5](v5), settle(resolve, reject, v5.done, v5.value);
        });
      };
    }
    function settle(resolve, reject, d4, v5) {
      Promise.resolve(v5).then(function(v6) {
        resolve({ value: v6, done: d4 });
      }, reject);
    }
  };
  var __asyncDelegator2 = function(o4) {
    var i4, p4;
    return i4 = {}, verb("next"), verb("throw", function(e3) {
      throw e3;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n5, f5) {
      i4[n5] = o4[n5] ? function(v5) {
        return (p4 = !p4) ? { value: __await2(o4[n5](v5)), done: false } : f5 ? f5(v5) : v5;
      } : f5;
    }
  };
  var __asyncGenerator2 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g4 = generator.apply(thisArg, _arguments || []), i4, q = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n5) {
      if (g4[n5])
        i4[n5] = function(v5) {
          return new Promise(function(a4, b5) {
            q.push([n5, v5, a4, b5]) > 1 || resume(n5, v5);
          });
        };
    }
    function resume(n5, v5) {
      try {
        step(g4[n5](v5));
      } catch (e3) {
        settle(q[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f5, v5) {
      if (f5(v5), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createPromiseClient(service, transport2) {
    return makeAnyClient(service, (method) => {
      switch (method.kind) {
        case MethodKind.Unary:
          return createUnaryFn(transport2, service, method);
        case MethodKind.ServerStreaming:
          return createServerStreamingFn(transport2, service, method);
        case MethodKind.ClientStreaming:
          return createClientStreamingFn(transport2, service, method);
        case MethodKind.BiDiStreaming:
          return createBiDiStreamingFn(transport2, service, method);
        default:
          return null;
      }
    });
  }
  function createUnaryFn(transport2, service, method) {
    return async function(input, options) {
      var _a, _b;
      const response = await transport2.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input);
      (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
      (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      return response.message;
    };
  }
  function createServerStreamingFn(transport2, service, method) {
    return function(input, options) {
      var _a, _b;
      return __asyncGenerator2(this, arguments, function* () {
        const inputMessage = input instanceof method.I ? input : new method.I(input);
        const response = yield __await2(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([inputMessage])));
        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
        yield __await2(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      });
    };
  }
  function createClientStreamingFn(transport2, service, method) {
    return async function(request, options) {
      var _a, e_1, _b, _c;
      var _d, _e;
      function input() {
        return __asyncGenerator2(this, arguments, function* input_1() {
          var _a2, e_2, _b2, _c2;
          try {
            for (var _d2 = true, request_1 = __asyncValues2(request), request_1_1; request_1_1 = yield __await2(request_1.next()), _a2 = request_1_1.done, !_a2; ) {
              _c2 = request_1_1.value;
              _d2 = false;
              try {
                const partial = _c2;
                yield yield __await2(partial instanceof method.I ? partial : new method.I(partial));
              } finally {
                _d2 = true;
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (!_d2 && !_a2 && (_b2 = request_1.return))
                yield __await2(_b2.call(request_1));
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        });
      }
      const response = await transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input());
      (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
      let singleMessage;
      try {
        for (var _f = true, _g = __asyncValues2(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; ) {
          _c = _h.value;
          _f = false;
          try {
            const message = _c;
            singleMessage = message;
          } finally {
            _f = true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_f && !_a && (_b = _g.return))
            await _b.call(_g);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (!singleMessage) {
        throw new ConnectError("protocol error: missing response message", Code.Internal);
      }
      (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
      return singleMessage;
    };
  }
  function createBiDiStreamingFn(transport2, service, method) {
    return function(request, options) {
      var _a, _b;
      return __asyncGenerator2(this, arguments, function* () {
        function input() {
          return __asyncGenerator2(this, arguments, function* input_2() {
            var _a2, e_3, _b2, _c;
            try {
              for (var _d = true, request_2 = __asyncValues2(request), request_2_1; request_2_1 = yield __await2(request_2.next()), _a2 = request_2_1.done, !_a2; ) {
                _c = request_2_1.value;
                _d = false;
                try {
                  const partial = _c;
                  yield yield __await2(partial instanceof method.I ? partial : new method.I(partial));
                } finally {
                  _d = true;
                }
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (!_d && !_a2 && (_b2 = request_2.return))
                  yield __await2(_b2.call(request_2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          });
        }
        const response = yield __await2(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input()));
        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
        yield __await2(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      });
    };
  }

  // node_modules/.pnpm/@bufbuild+connect@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect/dist/esm/interceptor.js
  init_define_process();
  init_define_process_env();
  function applyInterceptors(next2, interceptors) {
    return interceptors.concat().reverse().reduce(
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      (n5, i4) => i4(n5),
      next2
      // eslint-disable-line @typescript-eslint/no-explicit-any
    );
  }
  function runUnary(req, next2, interceptors) {
    if (interceptors) {
      next2 = applyInterceptors(next2, interceptors);
    }
    return next2(req);
  }
  function runStreaming(req, next2, interceptors) {
    if (interceptors) {
      next2 = applyInterceptors(next2, interceptors);
    }
    return next2(req);
  }

  // node_modules/.pnpm/@bufbuild+connect-web@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js
  init_define_process();
  init_define_process_env();
  function assertFetchApi() {
    try {
      new Headers();
    } catch (_2) {
      throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
  }

  // node_modules/.pnpm/@bufbuild+connect-web@0.8.6_@bufbuild+protobuf@1.2.0/node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
  var __await3 = function(v5) {
    return this instanceof __await3 ? (this.v = v5, this) : new __await3(v5);
  };
  var __asyncGenerator3 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g4 = generator.apply(thisArg, _arguments || []), i4, q = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n5) {
      if (g4[n5])
        i4[n5] = function(v5) {
          return new Promise(function(a4, b5) {
            q.push([n5, v5, a4, b5]) > 1 || resume(n5, v5);
          });
        };
    }
    function resume(n5, v5) {
      try {
        step(g4[n5](v5));
      } catch (e3) {
        settle(q[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await3 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f5, v5) {
      if (f5(v5), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createConnectTransport(options) {
    var _a;
    assertFetchApi();
    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;
    return {
      async unary(service, method, signal, timeoutMs, header, message) {
        var _a2;
        const { normalize, serialize: serialize2, parse: parse2 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        try {
          return await runUnary({
            stream: false,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a2 = options.credentials) !== null && _a2 !== void 0 ? _a2 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
            message: normalize(message),
            signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal
          }, async (req) => {
            const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: serialize2(req.message) }));
            const { isUnaryError, unaryError } = validateResponse(method.kind, useBinaryFormat, response.status, response.headers);
            if (isUnaryError) {
              throw errorFromJson(await response.json(), appendHeaders(...trailerDemux(response.headers)), unaryError);
            }
            const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);
            return {
              stream: false,
              service,
              method,
              header: demuxedHeader,
              message: parse2(new Uint8Array(await response.arrayBuffer())),
              trailer: demuxedTrailer
            };
          }, options.interceptors);
        } catch (e3) {
          throw connectErrorFromReason(e3, Code.Internal);
        }
      },
      async stream(service, method, signal, timeoutMs, header, input) {
        var _a2;
        const { serialize: serialize2, parse: parse2 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        function parseResponseBody(body, trailerTarget) {
          return __asyncGenerator3(this, arguments, function* parseResponseBody_1() {
            const reader = createEnvelopeReadableStream(body).getReader();
            try {
              let endStreamReceived = false;
              for (; ; ) {
                const result = yield __await3(reader.read());
                if (result.done) {
                  break;
                }
                const { flags, data } = result.value;
                if ((flags & endStreamFlag) === endStreamFlag) {
                  endStreamReceived = true;
                  const endStream = endStreamFromJson(data);
                  if (endStream.error) {
                    throw endStream.error;
                  }
                  endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                  continue;
                }
                yield yield __await3(parse2(data));
              }
              if (!endStreamReceived) {
                throw "missing EndStreamResponse";
              }
            } catch (e3) {
              throw connectErrorFromReason(e3);
            }
          });
        }
        async function createRequestBody(input2) {
          if (method.kind != MethodKind.ServerStreaming) {
            throw "The fetch API does not support streaming request bodies";
          }
          const r3 = await input2[Symbol.asyncIterator]().next();
          if (r3.done == true) {
            throw "missing request message";
          }
          return encodeEnvelope(0, serialize2(r3.value));
        }
        return runStreaming({
          stream: true,
          service,
          method,
          url: createMethodUrl(options.baseUrl, service, method),
          init: {
            method: "POST",
            credentials: (_a2 = options.credentials) !== null && _a2 !== void 0 ? _a2 : "same-origin",
            redirect: "error",
            mode: "cors"
          },
          signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
          header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
          message: input
        }, async (req) => {
          try {
            const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
            validateResponse(method.kind, useBinaryFormat, fRes.status, fRes.headers);
            if (fRes.body === null) {
              throw "missing response body";
            }
            const trailer = new Headers();
            const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });
            return res;
          } catch (e3) {
            throw connectErrorFromReason(e3, Code.Internal);
          }
        }, options.interceptors).catch((e3) => Promise.reject(connectErrorFromReason(e3)));
      }
    };
  }

  // rpc/generate_connect.ts
  init_define_process();
  init_define_process_env();

  // rpc/generate_pb.ts
  init_define_process();
  init_define_process_env();
  var _GenerateRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GenerateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GenerateRequest, a4, b5);
    }
  };
  var GenerateRequest = _GenerateRequest;
  __publicField(GenerateRequest, "runtime", proto3);
  __publicField(GenerateRequest, "typeName", "generate.GenerateRequest");
  __publicField(GenerateRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GenerateResponse = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GenerateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GenerateResponse, a4, b5);
    }
  };
  var GenerateResponse = _GenerateResponse;
  __publicField(GenerateResponse, "runtime", proto3);
  __publicField(GenerateResponse, "typeName", "generate.GenerateResponse");
  __publicField(GenerateResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));

  // rpc/generate_connect.ts
  var GenerateService = {
    typeName: "generate.GenerateService",
    methods: {
      /**
       * @generated from rpc generate.GenerateService.Generate
       */
      generate: {
        name: "Generate",
        I: GenerateRequest,
        O: GenerateResponse,
        kind: MethodKind.Unary
      }
    }
  };

  // rpc/project_connect.ts
  init_define_process();
  init_define_process_env();

  // rpc/project_pb.ts
  init_define_process();
  init_define_process_env();

  // rpc/graph_pb.ts
  init_define_process();
  init_define_process_env();

  // rpc/block_pb.ts
  init_define_process();
  init_define_process_env();
  var FieldType = /* @__PURE__ */ ((FieldType2) => {
    FieldType2[FieldType2["STRING"] = 0] = "STRING";
    FieldType2[FieldType2["INTEGER"] = 1] = "INTEGER";
    FieldType2[FieldType2["BOOLEAN"] = 2] = "BOOLEAN";
    return FieldType2;
  })(FieldType || {});
  proto3.util.setEnumType(FieldType, "block.FieldType", [
    { no: 0, name: "STRING" },
    { no: 1, name: "INTEGER" },
    { no: 2, name: "BOOLEAN" }
  ]);
  var _Block = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: string version = 3;
     */
    version = "";
    /**
     * @generated from oneof block.Block.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Block().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Block().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Block().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Block, a4, b5);
    }
  };
  var Block = _Block;
  __publicField(Block, "runtime", proto3);
  __publicField(Block, "typeName", "block.Block");
  __publicField(Block, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "version",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 4, name: "rest", kind: "message", T: REST, oneof: "type" },
    { no: 5, name: "grpc", kind: "message", T: GRPC, oneof: "type" },
    { no: 6, name: "collection", kind: "message", T: Collection, oneof: "type" },
    { no: 7, name: "input", kind: "message", T: Input2, oneof: "type" },
    { no: 8, name: "bucket", kind: "message", T: Bucket, oneof: "type" },
    { no: 9, name: "function", kind: "message", T: Function2, oneof: "type" },
    { no: 10, name: "query", kind: "message", T: Query, oneof: "type" }
  ]));
  var _Input = class extends Message {
    /**
     * @generated from field: repeated block.FieldDefinition fields = 1;
     */
    fields = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Input().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Input().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Input().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Input, a4, b5);
    }
  };
  var Input2 = _Input;
  __publicField(Input2, "runtime", proto3);
  __publicField(Input2, "typeName", "block.Input");
  __publicField(Input2, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: FieldDefinition, repeated: true }
  ]));
  var _Collection = class extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Collection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Collection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Collection().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Collection, a4, b5);
    }
  };
  var Collection = _Collection;
  __publicField(Collection, "runtime", proto3);
  __publicField(Collection, "typeName", "block.Collection");
  __publicField(Collection, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Bucket = class extends Message {
    /**
     * @generated from field: string path = 1;
     */
    path = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Bucket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Bucket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Bucket().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Bucket, a4, b5);
    }
  };
  var Bucket = _Bucket;
  __publicField(Bucket, "runtime", proto3);
  __publicField(Bucket, "typeName", "block.Bucket");
  __publicField(Bucket, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "path",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Function = class extends Message {
    /**
     * @generated from field: string runtime = 1;
     */
    runtime = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Function().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Function().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Function().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Function, a4, b5);
    }
  };
  var Function2 = _Function;
  __publicField(Function2, "runtime", proto3);
  __publicField(Function2, "typeName", "block.Function");
  __publicField(Function2, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "runtime",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Query = class extends Message {
    /**
     * @generated from field: string collection = 1;
     */
    collection = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Query().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Query, a4, b5);
    }
  };
  var Query = _Query;
  __publicField(Query, "runtime", proto3);
  __publicField(Query, "typeName", "block.Query");
  __publicField(Query, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "collection",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Result = class extends Message {
    /**
     * @generated from field: bytes data = 1;
     */
    data = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Result().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Result().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Result().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Result, a4, b5);
    }
  };
  var Result = _Result;
  __publicField(Result, "runtime", proto3);
  __publicField(Result, "typeName", "block.Result");
  __publicField(Result, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 12
      /* ScalarType.BYTES */
    }
  ]));
  var _FieldDefinition = class extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: block.FieldType type = 2;
     */
    type = 0 /* STRING */;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _FieldDefinition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _FieldDefinition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _FieldDefinition().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_FieldDefinition, a4, b5);
    }
  };
  var FieldDefinition = _FieldDefinition;
  __publicField(FieldDefinition, "runtime", proto3);
  __publicField(FieldDefinition, "typeName", "block.FieldDefinition");
  __publicField(FieldDefinition, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(FieldType) }
  ]));
  var _REST = class extends Message {
    /**
     * @generated from field: string path = 1;
     */
    path = "";
    /**
     * @generated from field: string method = 2;
     */
    method = "";
    /**
     * @generated from field: map<string, string> headers = 3;
     */
    headers = {};
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _REST().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _REST().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _REST().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_REST, a4, b5);
    }
  };
  var REST = _REST;
  __publicField(REST, "runtime", proto3);
  __publicField(REST, "typeName", "block.REST");
  __publicField(REST, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "path",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "method",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "headers", kind: "map", K: 9, V: {
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    } }
  ]));
  var _GRPC = class extends Message {
    /**
     * @generated from field: string package = 1;
     */
    package = "";
    /**
     * @generated from field: string service = 2;
     */
    service = "";
    /**
     * @generated from field: string method = 3;
     */
    method = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GRPC().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GRPC().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GRPC().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GRPC, a4, b5);
    }
  };
  var GRPC = _GRPC;
  __publicField(GRPC, "runtime", proto3);
  __publicField(GRPC, "typeName", "block.GRPC");
  __publicField(GRPC, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "package",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "service",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "method",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));

  // rpc/graph_pb.ts
  var _Graph = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated graph.Node nodes = 3;
     */
    nodes = [];
    /**
     * @generated from field: repeated graph.Edge edges = 4;
     */
    edges = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Graph().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Graph().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Graph().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Graph, a4, b5);
    }
  };
  var Graph = _Graph;
  __publicField(Graph, "runtime", proto3);
  __publicField(Graph, "typeName", "graph.Graph");
  __publicField(Graph, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "nodes", kind: "message", T: Node2, repeated: true },
    { no: 4, name: "edges", kind: "message", T: Edge, repeated: true }
  ]));
  var _Node = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: string block_id = 3;
     */
    blockId = "";
    /**
     * @generated from field: float x = 4;
     */
    x = 0;
    /**
     * @generated from field: float y = 5;
     */
    y = 0;
    /**
     * @generated from field: repeated string resource_ids = 6;
     */
    resourceIds = [];
    /**
     * @generated from oneof graph.Node.config
     */
    config = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Node().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Node().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Node().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Node, a4, b5);
    }
  };
  var Node2 = _Node;
  __publicField(Node2, "runtime", proto3);
  __publicField(Node2, "typeName", "graph.Node");
  __publicField(Node2, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "block_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 4,
      name: "x",
      kind: "scalar",
      T: 2
      /* ScalarType.FLOAT */
    },
    {
      no: 5,
      name: "y",
      kind: "scalar",
      T: 2
      /* ScalarType.FLOAT */
    },
    { no: 6, name: "resource_ids", kind: "scalar", T: 9, repeated: true },
    { no: 7, name: "rest", kind: "message", T: REST, oneof: "config" },
    { no: 8, name: "grpc", kind: "message", T: GRPC, oneof: "config" },
    { no: 9, name: "collection", kind: "message", T: Collection, oneof: "config" },
    { no: 10, name: "bucket", kind: "message", T: Bucket, oneof: "config" },
    { no: 11, name: "input", kind: "message", T: Input2, oneof: "config" },
    { no: 12, name: "function", kind: "message", T: Function2, oneof: "config" },
    { no: 13, name: "query", kind: "message", T: Query, oneof: "config" }
  ]));
  var _Edge = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string from = 2;
     */
    from = "";
    /**
     * @generated from field: string to = 3;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Edge().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Edge().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Edge().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Edge, a4, b5);
    }
  };
  var Edge = _Edge;
  __publicField(Edge, "runtime", proto3);
  __publicField(Edge, "typeName", "graph.Edge");
  __publicField(Edge, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "from",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "to",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));

  // rpc/resource_pb.ts
  init_define_process();
  init_define_process_env();
  var Runtime = /* @__PURE__ */ ((Runtime2) => {
    Runtime2[Runtime2["NODE"] = 0] = "NODE";
    Runtime2[Runtime2["GO"] = 1] = "GO";
    Runtime2[Runtime2["PYTHON"] = 2] = "PYTHON";
    return Runtime2;
  })(Runtime || {});
  proto3.util.setEnumType(Runtime, "resource.Runtime", [
    { no: 0, name: "NODE" },
    { no: 1, name: "GO" },
    { no: 2, name: "PYTHON" }
  ]);
  var _Resource = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from oneof resource.Resource.type
     */
    type = { case: void 0 };
    /**
     * @generated from field: repeated block.Block blocks = 8;
     */
    blocks = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Resource().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Resource().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Resource().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Resource, a4, b5);
    }
  };
  var Resource = _Resource;
  __publicField(Resource, "runtime", proto3);
  __publicField(Resource, "typeName", "resource.Resource");
  __publicField(Resource, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "grpc_service", kind: "message", T: GRPCService, oneof: "type" },
    { no: 4, name: "rest_service", kind: "message", T: RESTService, oneof: "type" },
    { no: 5, name: "docstore", kind: "message", T: Docstore, oneof: "type" },
    { no: 6, name: "blobstore", kind: "message", T: Blobstore, oneof: "type" },
    { no: 7, name: "language_service", kind: "message", T: LanguageService, oneof: "type" },
    { no: 8, name: "blocks", kind: "message", T: Block, repeated: true }
  ]));
  var _LanguageService = class extends Message {
    /**
     * @generated from field: string host = 1;
     */
    host = "";
    /**
     * @generated from field: resource.Runtime runtime = 2;
     */
    runtime = 0 /* NODE */;
    /**
     * @generated from field: bool close_on_cleanup = 3;
     */
    closeOnCleanup = false;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _LanguageService().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _LanguageService().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _LanguageService().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_LanguageService, a4, b5);
    }
  };
  var LanguageService = _LanguageService;
  __publicField(LanguageService, "runtime", proto3);
  __publicField(LanguageService, "typeName", "resource.LanguageService");
  __publicField(LanguageService, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "host",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "runtime", kind: "enum", T: proto3.getEnumType(Runtime) },
    {
      no: 3,
      name: "close_on_cleanup",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    }
  ]));
  var _GRPCService = class extends Message {
    /**
     * @generated from field: string host = 1;
     */
    host = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GRPCService().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GRPCService().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GRPCService().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GRPCService, a4, b5);
    }
  };
  var GRPCService = _GRPCService;
  __publicField(GRPCService, "runtime", proto3);
  __publicField(GRPCService, "typeName", "resource.GRPCService");
  __publicField(GRPCService, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "host",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _RESTService = class extends Message {
    /**
     * @generated from field: string base_url = 1;
     */
    baseUrl = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _RESTService().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RESTService().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RESTService().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_RESTService, a4, b5);
    }
  };
  var RESTService = _RESTService;
  __publicField(RESTService, "runtime", proto3);
  __publicField(RESTService, "typeName", "resource.RESTService");
  __publicField(RESTService, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "base_url",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Docstore = class extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Docstore().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Docstore().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Docstore().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Docstore, a4, b5);
    }
  };
  var Docstore = _Docstore;
  __publicField(Docstore, "runtime", proto3);
  __publicField(Docstore, "typeName", "resource.Docstore");
  __publicField(Docstore, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "url",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Blobstore = class extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Blobstore().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Blobstore().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Blobstore().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Blobstore, a4, b5);
    }
  };
  var Blobstore = _Blobstore;
  __publicField(Blobstore, "runtime", proto3);
  __publicField(Blobstore, "typeName", "resource.Blobstore");
  __publicField(Blobstore, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "url",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));

  // rpc/project_pb.ts
  var _RunWorkflowRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    /**
     * @generated from field: string node_id = 2;
     */
    nodeId = "";
    /**
     * @generated from field: string input = 3;
     */
    input = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _RunWorkflowRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RunWorkflowRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RunWorkflowRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_RunWorkflowRequest, a4, b5);
    }
  };
  var RunWorkflowRequest = _RunWorkflowRequest;
  __publicField(RunWorkflowRequest, "runtime", proto3);
  __publicField(RunWorkflowRequest, "typeName", "project.RunWorkflowRequest");
  __publicField(RunWorkflowRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "node_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "input",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _RunNodeRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    /**
     * @generated from field: string node_id = 2;
     */
    nodeId = "";
    /**
     * @generated from field: string input = 3;
     */
    input = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _RunNodeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RunNodeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RunNodeRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_RunNodeRequest, a4, b5);
    }
  };
  var RunNodeRequest = _RunNodeRequest;
  __publicField(RunNodeRequest, "runtime", proto3);
  __publicField(RunNodeRequest, "typeName", "project.RunNodeRequest");
  __publicField(RunNodeRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "node_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "input",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Data = class extends Message {
    /**
     * @generated from field: string value = 1;
     */
    value = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Data().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Data, a4, b5);
    }
  };
  var Data = _Data;
  __publicField(Data, "runtime", proto3);
  __publicField(Data, "typeName", "project.Data");
  __publicField(Data, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "value",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _RunOutput = class extends Message {
    /**
     * @generated from field: string output = 1;
     */
    output = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _RunOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RunOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RunOutput().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_RunOutput, a4, b5);
    }
  };
  var RunOutput = _RunOutput;
  __publicField(RunOutput, "runtime", proto3);
  __publicField(RunOutput, "typeName", "project.RunOutput");
  __publicField(RunOutput, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "output",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Project = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: string description = 3;
     */
    description = "";
    /**
     * @generated from field: string owner = 4;
     */
    owner = "";
    /**
     * @generated from field: string created_at = 5;
     */
    createdAt = "";
    /**
     * @generated from field: string updated_at = 6;
     */
    updatedAt = "";
    /**
     * @generated from field: graph.Graph graph = 7;
     */
    graph;
    /**
     * @generated from field: repeated resource.Resource resources = 8;
     */
    resources = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Project().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Project().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Project().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_Project, a4, b5);
    }
  };
  var Project = _Project;
  __publicField(Project, "runtime", proto3);
  __publicField(Project, "typeName", "project.Project");
  __publicField(Project, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "description",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 4,
      name: "owner",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 5,
      name: "created_at",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 6,
      name: "updated_at",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 7, name: "graph", kind: "message", T: Graph },
    { no: 8, name: "resources", kind: "message", T: Resource, repeated: true }
  ]));
  var _CreateResourceRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    /**
     * @generated from field: resource.Resource resource = 2;
     */
    resource;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _CreateResourceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _CreateResourceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _CreateResourceRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_CreateResourceRequest, a4, b5);
    }
  };
  var CreateResourceRequest = _CreateResourceRequest;
  __publicField(CreateResourceRequest, "runtime", proto3);
  __publicField(CreateResourceRequest, "typeName", "project.CreateResourceRequest");
  __publicField(CreateResourceRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "resource", kind: "message", T: Resource }
  ]));
  var _CreateResourceResponse = class extends Message {
    /**
     * @generated from field: string resource_id = 1;
     */
    resourceId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _CreateResourceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _CreateResourceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _CreateResourceResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_CreateResourceResponse, a4, b5);
    }
  };
  var CreateResourceResponse = _CreateResourceResponse;
  __publicField(CreateResourceResponse, "runtime", proto3);
  __publicField(CreateResourceResponse, "typeName", "project.CreateResourceResponse");
  __publicField(CreateResourceResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "resource_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetProjectRequest = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetProjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetProjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetProjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetProjectRequest, a4, b5);
    }
  };
  var GetProjectRequest = _GetProjectRequest;
  __publicField(GetProjectRequest, "runtime", proto3);
  __publicField(GetProjectRequest, "typeName", "project.GetProjectRequest");
  __publicField(GetProjectRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetProjectResponse = class extends Message {
    /**
     * @generated from field: project.Project project = 1;
     */
    project;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetProjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetProjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetProjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetProjectResponse, a4, b5);
    }
  };
  var GetProjectResponse = _GetProjectResponse;
  __publicField(GetProjectResponse, "runtime", proto3);
  __publicField(GetProjectResponse, "typeName", "project.GetProjectResponse");
  __publicField(GetProjectResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project }
  ]));
  var _GetProjectsRequest = class extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetProjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetProjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetProjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetProjectsRequest, a4, b5);
    }
  };
  var GetProjectsRequest = _GetProjectsRequest;
  __publicField(GetProjectsRequest, "runtime", proto3);
  __publicField(GetProjectsRequest, "typeName", "project.GetProjectsRequest");
  __publicField(GetProjectsRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetProjectsResponse = class extends Message {
    /**
     * @generated from field: repeated project.Project projects = 1;
     */
    projects = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetProjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetProjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetProjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetProjectsResponse, a4, b5);
    }
  };
  var GetProjectsResponse = _GetProjectsResponse;
  __publicField(GetProjectsResponse, "runtime", proto3);
  __publicField(GetProjectsResponse, "typeName", "project.GetProjectsResponse");
  __publicField(GetProjectsResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true }
  ]));
  var _CreateProjectRequest = class extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _CreateProjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _CreateProjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _CreateProjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_CreateProjectRequest, a4, b5);
    }
  };
  var CreateProjectRequest = _CreateProjectRequest;
  __publicField(CreateProjectRequest, "runtime", proto3);
  __publicField(CreateProjectRequest, "typeName", "project.CreateProjectRequest");
  __publicField(CreateProjectRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _CreateProjectResponse = class extends Message {
    /**
     * @generated from field: project.Project project = 1;
     */
    project;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _CreateProjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _CreateProjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _CreateProjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_CreateProjectResponse, a4, b5);
    }
  };
  var CreateProjectResponse = _CreateProjectResponse;
  __publicField(CreateProjectResponse, "runtime", proto3);
  __publicField(CreateProjectResponse, "typeName", "project.CreateProjectResponse");
  __publicField(CreateProjectResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project }
  ]));
  var _DeleteProjectRequest = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _DeleteProjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _DeleteProjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _DeleteProjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_DeleteProjectRequest, a4, b5);
    }
  };
  var DeleteProjectRequest = _DeleteProjectRequest;
  __publicField(DeleteProjectRequest, "runtime", proto3);
  __publicField(DeleteProjectRequest, "typeName", "project.DeleteProjectRequest");
  __publicField(DeleteProjectRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _DeleteProjectResponse = class extends Message {
    /**
     * @generated from field: project.Project project = 1;
     */
    project;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _DeleteProjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _DeleteProjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _DeleteProjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_DeleteProjectResponse, a4, b5);
    }
  };
  var DeleteProjectResponse = _DeleteProjectResponse;
  __publicField(DeleteProjectResponse, "runtime", proto3);
  __publicField(DeleteProjectResponse, "typeName", "project.DeleteProjectResponse");
  __publicField(DeleteProjectResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project }
  ]));
  var _GetResourcesRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetResourcesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetResourcesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetResourcesRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetResourcesRequest, a4, b5);
    }
  };
  var GetResourcesRequest = _GetResourcesRequest;
  __publicField(GetResourcesRequest, "runtime", proto3);
  __publicField(GetResourcesRequest, "typeName", "project.GetResourcesRequest");
  __publicField(GetResourcesRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetResourcesResponse = class extends Message {
    /**
     * @generated from field: repeated resource.Resource resources = 1;
     */
    resources = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetResourcesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetResourcesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetResourcesResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_GetResourcesResponse, a4, b5);
    }
  };
  var GetResourcesResponse = _GetResourcesResponse;
  __publicField(GetResourcesResponse, "runtime", proto3);
  __publicField(GetResourcesResponse, "typeName", "project.GetResourcesResponse");
  __publicField(GetResourcesResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true }
  ]));
  var _SaveProjectRequest = class extends Message {
    /**
     * @generated from field: string project_id = 1;
     */
    projectId = "";
    /**
     * @generated from field: graph.Graph graph = 2;
     */
    graph;
    /**
     * @generated from field: repeated resource.Resource resources = 3;
     */
    resources = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _SaveProjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _SaveProjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _SaveProjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_SaveProjectRequest, a4, b5);
    }
  };
  var SaveProjectRequest = _SaveProjectRequest;
  __publicField(SaveProjectRequest, "runtime", proto3);
  __publicField(SaveProjectRequest, "typeName", "project.SaveProjectRequest");
  __publicField(SaveProjectRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "project_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "graph", kind: "message", T: Graph },
    { no: 3, name: "resources", kind: "message", T: Resource, repeated: true }
  ]));
  var _SaveProjectResponse = class extends Message {
    /**
     * @generated from field: project.Project project = 1;
     */
    project;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _SaveProjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _SaveProjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _SaveProjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a4, b5) {
      return proto3.util.equals(_SaveProjectResponse, a4, b5);
    }
  };
  var SaveProjectResponse = _SaveProjectResponse;
  __publicField(SaveProjectResponse, "runtime", proto3);
  __publicField(SaveProjectResponse, "typeName", "project.SaveProjectResponse");
  __publicField(SaveProjectResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project }
  ]));

  // rpc/project_connect.ts
  var ProjectService = {
    typeName: "project.ProjectService",
    methods: {
      /**
       * @generated from rpc project.ProjectService.GetProject
       */
      getProject: {
        name: "GetProject",
        I: GetProjectRequest,
        O: GetProjectResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.GetProjects
       */
      getProjects: {
        name: "GetProjects",
        I: GetProjectsRequest,
        O: GetProjectsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.CreateProject
       */
      createProject: {
        name: "CreateProject",
        I: CreateProjectRequest,
        O: CreateProjectResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.DeleteProject
       */
      deleteProject: {
        name: "DeleteProject",
        I: DeleteProjectRequest,
        O: DeleteProjectResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.GetResources
       */
      getResources: {
        name: "GetResources",
        I: GetResourcesRequest,
        O: GetResourcesResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.SaveProject
       */
      saveProject: {
        name: "SaveProject",
        I: SaveProjectRequest,
        O: SaveProjectResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.CreateResource
       */
      createResource: {
        name: "CreateResource",
        I: CreateResourceRequest,
        O: CreateResourceResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.RunWorklow
       */
      runWorklow: {
        name: "RunWorklow",
        I: RunWorkflowRequest,
        O: RunOutput,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc project.ProjectService.RunNode
       */
      runNode: {
        name: "RunNode",
        I: RunNodeRequest,
        O: RunOutput,
        kind: MethodKind.Unary
      }
    }
  };

  // src/lib/api.ts
  var transport = createConnectTransport({
    baseUrl: "/api"
  });
  var projectService = createPromiseClient(ProjectService, transport);
  var generateService = createPromiseClient(GenerateService, transport);

  // src/hooks/useDefaultProject.ts
  function useDefaultProject() {
    const [loading, setLoading] = (0, import_react37.useState)(true);
    const [project, setProject] = (0, import_react37.useState)();
    const loadProject = async () => {
      try {
        const { projects } = await projectService.getProjects({});
        const defaultProject = projects.find((p4) => p4.name === "local");
        if (!defaultProject) {
          throw new Error("No default project found");
        }
        setProject(defaultProject);
      } catch (e3) {
      }
      setTimeout(() => {
        setLoading(false);
      }, 1);
    };
    const createDefault = async () => {
      const { project: project2 } = await projectService.createProject({
        name: "local"
      });
      setProject(project2);
    };
    (0, import_react37.useEffect)(() => {
      loadProject();
    }, []);
    return {
      loading,
      project,
      createDefault
    };
  }

  // src/providers/ProjectProvider.tsx
  var import_react40 = __toESM(require_react(), 1);

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/hi2/index.esm.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/lib/esm/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/lib/esm/iconsManifest.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/lib/esm/iconBase.js
  init_define_process();
  init_define_process_env();
  var import_react39 = __toESM(require_react());

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/lib/esm/iconContext.js
  init_define_process();
  init_define_process_env();
  var import_react38 = __toESM(require_react());
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react38.default.createContext && import_react38.default.createContext(DefaultContext);

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/lib/esm/iconBase.js
  var __assign = function() {
    __assign = Object.assign || function(t3) {
      for (var s4, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
        s4 = arguments[i4];
        for (var p4 in s4)
          if (Object.prototype.hasOwnProperty.call(s4, p4))
            t3[p4] = s4[p4];
      }
      return t3;
    };
    return __assign.apply(this, arguments);
  };
  var __rest = function(s4, e3) {
    var t3 = {};
    for (var p4 in s4)
      if (Object.prototype.hasOwnProperty.call(s4, p4) && e3.indexOf(p4) < 0)
        t3[p4] = s4[p4];
    if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i4 = 0, p4 = Object.getOwnPropertySymbols(s4); i4 < p4.length; i4++) {
        if (e3.indexOf(p4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p4[i4]))
          t3[p4[i4]] = s4[p4[i4]];
      }
    return t3;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node2, i4) {
      return import_react39.default.createElement(node2.tag, __assign({
        key: i4
      }, node2.attr), Tree2Element(node2.child));
    });
  }
  function GenIcon(data) {
    return function(props) {
      return import_react39.default.createElement(IconBase, __assign({
        attr: __assign({}, data.attr)
      }, props), Tree2Element(data.child));
    };
  }
  function IconBase(props) {
    var elem = function(conf) {
      var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
      var computedSize = size || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props.className)
        className = (className ? className + " " : "") + props.className;
      return import_react39.default.createElement("svg", __assign({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: __assign(__assign({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && import_react39.default.createElement("title", null, title), props.children);
    };
    return IconContext !== void 0 ? import_react39.default.createElement(IconContext.Consumer, null, function(conf) {
      return elem(conf);
    }) : elem(DefaultContext);
  }

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/hi2/index.esm.js
  function HiCircleStack(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M21 6.375c0 2.692-4.03 4.875-9 4.875S3 9.067 3 6.375 7.03 1.5 12 1.5s9 2.183 9 4.875z" } }, { "tag": "path", "attr": { "d": "M12 12.75c2.685 0 5.19-.586 7.078-1.609a8.283 8.283 0 001.897-1.384c.016.121.025.244.025.368C21 12.817 16.97 15 12 15s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.285 8.285 0 001.897 1.384C6.809 12.164 9.315 12.75 12 12.75z" } }, { "tag": "path", "attr": { "d": "M12 16.5c2.685 0 5.19-.586 7.078-1.609a8.282 8.282 0 001.897-1.384c.016.121.025.244.025.368 0 2.692-4.03 4.875-9 4.875s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.284 8.284 0 001.897 1.384C6.809 15.914 9.315 16.5 12 16.5z" } }, { "tag": "path", "attr": { "d": "M12 20.25c2.685 0 5.19-.586 7.078-1.609a8.282 8.282 0 001.897-1.384c.016.121.025.244.025.368 0 2.692-4.03 4.875-9 4.875s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.284 8.284 0 001.897 1.384C6.809 19.664 9.315 20.25 12 20.25z" } }] })(props);
  }
  function HiCodeBracket(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M14.447 3.027a.75.75 0 01.527.92l-4.5 16.5a.75.75 0 01-1.448-.394l4.5-16.5a.75.75 0 01.921-.526zM16.72 6.22a.75.75 0 011.06 0l5.25 5.25a.75.75 0 010 1.06l-5.25 5.25a.75.75 0 11-1.06-1.06L21.44 12l-4.72-4.72a.75.75 0 010-1.06zm-9.44 0a.75.75 0 010 1.06L2.56 12l4.72 4.72a.75.75 0 11-1.06 1.06L.97 12.53a.75.75 0 010-1.06l5.25-5.25a.75.75 0 011.06 0z", "clipRule": "evenodd" } }] })(props);
  }
  function HiExclamationCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z", "clipRule": "evenodd" } }] })(props);
  }
  function HiPencilSquare(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M21.731 2.269a2.625 2.625 0 00-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 000-3.712zM19.513 8.199l-3.712-3.712-8.4 8.4a5.25 5.25 0 00-1.32 2.214l-.8 2.685a.75.75 0 00.933.933l2.685-.8a5.25 5.25 0 002.214-1.32l8.4-8.4z" } }, { "tag": "path", "attr": { "d": "M5.25 5.25a3 3 0 00-3 3v10.5a3 3 0 003 3h10.5a3 3 0 003-3V13.5a.75.75 0 00-1.5 0v5.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5V8.25a1.5 1.5 0 011.5-1.5h5.25a.75.75 0 000-1.5H5.25z" } }] })(props);
  }
  function HiPlus(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5h-6.75v6.75a.75.75 0 01-1.5 0v-6.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z", "clipRule": "evenodd" } }] })(props);
  }
  function HiOutlineMagnifyingGlass(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "1.5", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" } }] })(props);
  }
  function HiOutlineTrash(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "1.5", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" } }] })(props);
  }

  // src/providers/ProjectProvider.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var ProjectContext = (0, import_react40.createContext)({});
  var useProjectContext = () => (0, import_react40.useContext)(ProjectContext);
  function ProjectProvider({ children: children2 }) {
    const { project, loading, createDefault } = useDefaultProject();
    const [output, setOutput] = (0, import_react40.useState)(null);
    const resetOutput = (0, import_react40.useCallback)(() => {
      setOutput(null);
    }, []);
    const saveProject = (0, import_react40.useCallback)(async () => {
      if (!project)
        return;
      await projectService.saveProject(project);
    }, [project]);
    const runWorkflow = (0, import_react40.useCallback)(
      async (node2) => {
        if (!project)
          return;
        const res = await projectService.runWorklow({
          nodeId: node2.id,
          projectId: project.id,
          input: localStorage.getItem(`${node2.data.name}-sampleData`) || ""
        });
        setOutput(res.output);
      },
      [project]
    );
    if (loading) {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex items-center justify-center h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Spinner, { label: "Loading project..." }) });
    }
    if (!project) {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex items-center justify-center h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(Card, { className: "max-w-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          CardHeader,
          {
            image: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(HiExclamationCircle, { className: "text-blue-600 w-8 h-8" }),
            header: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Title3, { children: "No default project" }),
            description: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Caption1, { children: "A default project could not be found. Use the button below to create one." })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Button, { icon: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(HiPlus, {}), onClick: createDefault, children: "Create Default" })
      ] }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      ProjectContext.Provider,
      {
        value: { project, output, resetOutput, runWorkflow, saveProject },
        children: children2
      }
    );
  }

  // src/providers/EditorProvider.tsx
  init_define_process();
  init_define_process_env();

  // src/hooks/useBlockTypes.ts
  init_define_process();
  init_define_process_env();

  // src/components/blocks/BucketBlock.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/tb/index.esm.js
  init_define_process();
  init_define_process_env();
  function TbBucket(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "fill": "none", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "stroke": "none", "d": "M0 0h24v24H0z", "fill": "none" } }, { "tag": "path", "attr": { "d": "M12 7m-8 0a8 4 0 1 0 16 0a8 4 0 1 0 -16 0" } }, { "tag": "path", "attr": { "d": "M4 7c0 .664 .088 1.324 .263 1.965l2.737 10.035c.5 1.5 2.239 2 5 2s4.5 -.5 5 -2c.333 -1 1.246 -4.345 2.737 -10.035a7.45 7.45 0 0 0 .263 -1.965" } }] })(props);
  }
  function TbFileText(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "fill": "none", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "stroke": "none", "d": "M0 0h24v24H0z", "fill": "none" } }, { "tag": "path", "attr": { "d": "M14 3v4a1 1 0 0 0 1 1h4" } }, { "tag": "path", "attr": { "d": "M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z" } }, { "tag": "path", "attr": { "d": "M9 9l1 0" } }, { "tag": "path", "attr": { "d": "M9 13l6 0" } }, { "tag": "path", "attr": { "d": "M9 17l6 0" } }] })(props);
  }

  // src/components/blocks/BlockCard.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var useOverrides2 = makeStyles2({
    card: {
      ...shorthands.border("1px", "solid", tokens.colorNeutralBackground1)
    },
    selected: {
      ...shorthands.border(
        "1px",
        "solid",
        tokens.colorNeutralForeground2BrandSelected
      )
    }
  });
  function BlockCard({ selected, ...props }) {
    const overrides = useOverrides2();
    const classes = mergeClasses(overrides.card, selected && overrides.selected);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Card, { ...props, className: classes });
  }

  // src/components/blocks/BucketBlock.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  function BucketBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(TbBucket, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Text, { weight: "semibold", children: data.name || "Untitled Bucket" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Caption1, { children: "Bucket" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/components/blocks/CollectionBlock.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  function CollectionBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(HiCircleStack, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Text, { weight: "semibold", children: data.name || "Untitled Collection" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Caption1, { children: "Collection" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/components/blocks/FunctionBlock.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  function FunctionBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(HiCodeBracket, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Text, { weight: "semibold", children: data.name || "Untitled Function" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Caption1, { children: "Function" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/components/blocks/InputBlock.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  function InputBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(HiPencilSquare, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Text, { weight: "semibold", children: data.name || "UntitledInput" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Caption1, { children: "Input" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Handle$1, { type: "source", position: Position.Bottom }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Handle$1, { type: "source", position: Position.Bottom, id: "b" })
    ] });
  }

  // src/components/blocks/QueryBlock.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  function QueryBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(HiOutlineMagnifyingGlass, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Text, { weight: "semibold", children: data.name || "Untitled Query" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Caption1, { children: "Query" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/components/blocks/QueueBlock.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/ai/index.esm.js
  init_define_process();
  init_define_process_env();
  function AiOutlineMail(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 110.8V792H136V270.8l-27.6-21.5 39.3-50.5 42.8 33.3h643.1l42.8-33.3 39.3 50.5-27.7 21.5zM833.6 232L512 482 190.4 232l-42.8-33.3-39.3 50.5 27.6 21.5 341.6 265.6a55.99 55.99 0 0 0 68.7 0L888 270.8l27.6-21.5-39.3-50.5-42.7 33.2z" } }] })(props);
  }

  // src/components/blocks/QueueBlock.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  function QueueBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(AiOutlineMail, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Text, { weight: "semibold", children: data.name || "Untitled Queue" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Caption1, { children: "Queue" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/components/blocks/RESTBlock.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-icons@4.8.0_react@18.2.0/node_modules/react-icons/md/index.esm.js
  init_define_process();
  init_define_process_env();
  function MdHttp(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z" } }, { "tag": "path", "attr": { "fill": "none", "d": "M24 24H0V0h24v24z" } }] })(props);
  }

  // src/components/blocks/RESTBlock.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  function RESTBlock(props) {
    const { data, selected } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(BlockCard, { selected, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        CardHeader,
        {
          image: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(MdHttp, { className: "h-5 w-5 bg-gray-800" }),
          header: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Text, { weight: "semibold", children: data.name || "Untitled REST" }),
          description: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Caption1, { children: "REST" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Handle$1, { type: "source", position: Position.Bottom, className: "z-10" }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Handle$1, { type: "target", position: Position.Top, className: "z-10" })
    ] });
  }

  // src/hooks/useBlockTypes.ts
  var import_react41 = __toESM(require_react(), 1);
  function useBlockTypes() {
    const nodeTypes = (0, import_react41.useMemo)(
      () => ({
        "protoflow.collection": CollectionBlock,
        "protoflow.function": FunctionBlock,
        "protoflow.input": InputBlock,
        "protoflow.query": QueryBlock,
        "protoflow.queue": QueueBlock,
        "protoflow.bucket": BucketBlock,
        "protoflow.rest": RESTBlock
      }),
      []
    );
    return { nodeTypes };
  }

  // src/lib/configTypes.ts
  init_define_process();
  init_define_process_env();
  var configTypes = Node2.fields.list().filter((f5) => f5.oneof?.name === "config") || [];

  // src/providers/EditorProvider.tsx
  var import_react42 = __toESM(require_react(), 1);

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/index.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js
  init_define_process();
  init_define_process_env();
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js
  init_define_process();
  init_define_process_env();
  var byteToHex = [];
  for (let i4 = 0; i4 < 256; ++i4) {
    byteToHex.push((i4 + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset2 = 0) {
    return (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
  }

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js
  init_define_process();
  init_define_process_env();
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset2) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset2 = offset2 || 0;
      for (let i4 = 0; i4 < 16; ++i4) {
        buf[offset2 + i4] = rnds[i4];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var v4_default = v4;

  // src/providers/EditorProvider.tsx
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var EditorContext = (0, import_react42.createContext)({});
  var useEditorContext = () => (0, import_react42.useContext)(EditorContext);
  var useEditorMode = () => useEditorContext().mode;
  function EditorProvider({ children: children2 }) {
    const [instance, setInstance] = (0, import_react42.useState)();
    const [mode, setMode] = (0, import_react42.useState)("editor");
    const props = useEditorProps(instance);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(EditorContext.Provider, { value: { props, mode, setMode, setInstance }, children: children2 });
  }
  var useEditorProps = (reactFlowInstance) => {
    const { project } = useProjectContext();
    const [nodes, setNodes] = (0, import_react42.useState)(
      project?.graph?.nodes.map((n5) => {
        const config = configTypes.find((c4) => n5.config?.case === c4.name);
        return {
          id: n5.id,
          data: {
            name: n5.name,
            config: {
              [config.name]: n5.config?.value?.toJson() || n5.config?.value || n5.config || {}
            }
          },
          position: { x: n5.x, y: n5.y },
          type: `protoflow.${config?.name}`
        };
      }) || []
    );
    const [edges, setEdges] = (0, import_react42.useState)(
      project?.graph?.edges?.map((e3) => ({
        id: e3.id,
        source: e3.from,
        target: e3.to
      })) || []
    );
    const { nodeTypes } = useBlockTypes();
    const onConnect = (0, import_react42.useCallback)((params) => {
      if (!params.source || !params.target)
        return;
      setEdges((eds) => addEdge({ ...params, id: v4_default() }, eds));
    }, []);
    const onDragOver = (0, import_react42.useCallback)((e3) => {
      e3.preventDefault();
      e3.dataTransfer.dropEffect = "move";
    }, []);
    const onDrop = (0, import_react42.useCallback)(
      (e3) => {
        e3.preventDefault();
        const type = e3.dataTransfer.getData("application/reactflow");
        const position2 = reactFlowInstance.project({
          x: e3.clientX,
          y: e3.clientY
        });
        const newNode = {
          id: v4_default(),
          type,
          position: position2,
          data: { name: "", config: {} }
        };
        setNodes((nds) => [...nds, newNode]);
      },
      [reactFlowInstance]
    );
    const onEdgesChange = (0, import_react42.useCallback)((changes) => {
      setEdges((eds) => applyEdgeChanges(changes, eds));
    }, []);
    const onNodesChange = (0, import_react42.useCallback)((changes) => {
      setNodes((nds) => applyNodeChanges(changes, nds));
    }, []);
    return {
      edges,
      nodes,
      nodeTypes,
      onConnect,
      onDragOver,
      onDrop,
      onNodesChange,
      onEdgesChange
    };
  };

  // src/components/Toolbar.tsx
  init_define_process();
  init_define_process_env();

  // src/hooks/useSelectedNodes.ts
  init_define_process();
  init_define_process_env();
  var selectSelectedNodes = (state) => state.getNodes().filter((node2) => node2.selected);
  var useSelectedNodes = () => {
    const selectedNodes = useStore2(selectSelectedNodes);
    return { selectedNodes };
  };

  // src/lib/checkIsApple.ts
  init_define_process();
  init_define_process_env();
  var checkIsApple = () => {
    if (typeof window === `undefined` || typeof navigator === `undefined`)
      return false;
    if (/Mac/.test(navigator.userAgent))
      return true;
    return /iPhone|iPad|iPod/i.test(navigator.userAgent);
  };

  // src/lib/project.tsx
  init_define_process();
  init_define_process_env();
  function getUpdatedProject({
    project,
    nodes,
    edges
  }) {
    return {
      projectId: project.id,
      graph: {
        id: project.graph?.id || project.id,
        name: project.graph?.name || project.name,
        edges: edges.map((edge) => ({
          id: edge.id,
          from: edge.source,
          to: edge.target
        })),
        nodes: nodes.map((node2) => {
          const blockType = node2.type?.split(".").pop();
          return {
            id: node2.id,
            name: node2.data.name,
            x: node2.position.x,
            y: node2.position.y,
            config: {
              case: blockType,
              value: node2.data.config[blockType] || node2.data.config
            }
          };
        })
      }
    };
  }

  // src/components/Toolbar.tsx
  var import_react46 = __toESM(require_react(), 1);

  // node_modules/.pnpm/react-hot-toast@2.4.0_csstype@3.1.2_react-dom@18.2.0_react@18.2.0/node_modules/react-hot-toast/dist/index.mjs
  init_define_process();
  init_define_process_env();
  var import_react43 = __toESM(require_react(), 1);
  var import_react44 = __toESM(require_react(), 1);
  var l4 = __toESM(require_react(), 1);

  // node_modules/.pnpm/goober@2.1.13_csstype@3.1.2/node_modules/goober/dist/goober.modern.js
  init_define_process();
  init_define_process_env();
  var e2 = { data: "" };
  var t2 = (t3) => "object" == typeof window ? ((t3 ? t3.querySelector("#_goober") : window._goober) || Object.assign((t3 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t3 || e2;
  var l3 = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a3 = /\/\*[^]*?\*\/|  +/g;
  var n3 = /\n+/g;
  var o3 = (e3, t3) => {
    let r3 = "", l5 = "", a4 = "";
    for (let n5 in e3) {
      let c4 = e3[n5];
      "@" == n5[0] ? "i" == n5[1] ? r3 = n5 + " " + c4 + ";" : l5 += "f" == n5[1] ? o3(c4, n5) : n5 + "{" + o3(c4, "k" == n5[1] ? "" : t3) + "}" : "object" == typeof c4 ? l5 += o3(c4, t3 ? t3.replace(/([^,])+/g, (e4) => n5.replace(/(^:.*)|([^,])+/g, (t4) => /&/.test(t4) ? t4.replace(/&/g, e4) : e4 ? e4 + " " + t4 : t4)) : n5) : null != c4 && (n5 = /^--/.test(n5) ? n5 : n5.replace(/[A-Z]/g, "-$&").toLowerCase(), a4 += o3.p ? o3.p(n5, c4) : n5 + ":" + c4 + ";");
    }
    return r3 + (t3 && a4 ? t3 + "{" + a4 + "}" : a4) + l5;
  };
  var c3 = {};
  var s3 = (e3) => {
    if ("object" == typeof e3) {
      let t3 = "";
      for (let r3 in e3)
        t3 += r3 + s3(e3[r3]);
      return t3;
    }
    return e3;
  };
  var i3 = (e3, t3, r3, i4, p4) => {
    let u5 = s3(e3), d4 = c3[u5] || (c3[u5] = ((e4) => {
      let t4 = 0, r4 = 11;
      for (; t4 < e4.length; )
        r4 = 101 * r4 + e4.charCodeAt(t4++) >>> 0;
      return "go" + r4;
    })(u5));
    if (!c3[d4]) {
      let t4 = u5 !== e3 ? e3 : ((e4) => {
        let t5, r4, o4 = [{}];
        for (; t5 = l3.exec(e4.replace(a3, "")); )
          t5[4] ? o4.shift() : t5[3] ? (r4 = t5[3].replace(n3, " ").trim(), o4.unshift(o4[0][r4] = o4[0][r4] || {})) : o4[0][t5[1]] = t5[2].replace(n3, " ").trim();
        return o4[0];
      })(e3);
      c3[d4] = o3(p4 ? { ["@keyframes " + d4]: t4 } : t4, r3 ? "" : "." + d4);
    }
    let f5 = r3 && c3.g ? c3.g : null;
    return r3 && (c3.g = c3[d4]), ((e4, t4, r4, l5) => {
      l5 ? t4.data = t4.data.replace(l5, e4) : -1 === t4.data.indexOf(e4) && (t4.data = r4 ? e4 + t4.data : t4.data + e4);
    })(c3[d4], t3, i4, f5), d4;
  };
  var p3 = (e3, t3, r3) => e3.reduce((e4, l5, a4) => {
    let n5 = t3[a4];
    if (n5 && n5.call) {
      let e5 = n5(r3), t4 = e5 && e5.props && e5.props.className || /^go/.test(e5) && e5;
      n5 = t4 ? "." + t4 : e5 && "object" == typeof e5 ? e5.props ? "" : o3(e5, "") : false === e5 ? "" : e5;
    }
    return e4 + l5 + (null == n5 ? "" : n5);
  }, "");
  function u3(e3) {
    let r3 = this || {}, l5 = e3.call ? e3(r3.p) : e3;
    return i3(l5.unshift ? l5.raw ? p3(l5, [].slice.call(arguments, 1), r3.p) : l5.reduce((e4, t3) => Object.assign(e4, t3 && t3.call ? t3(r3.p) : t3), {}) : l5, t2(r3.target), r3.g, r3.o, r3.k);
  }
  var d3;
  var f3;
  var g3;
  var b3 = u3.bind({ g: 1 });
  var h3 = u3.bind({ k: 1 });
  function m3(e3, t3, r3, l5) {
    o3.p = t3, d3 = e3, f3 = r3, g3 = l5;
  }
  function j(e3, t3) {
    let r3 = this || {};
    return function() {
      let l5 = arguments;
      function a4(n5, o4) {
        let c4 = Object.assign({}, n5), s4 = c4.className || a4.className;
        r3.p = Object.assign({ theme: f3 && f3() }, c4), r3.o = / *go\d+/.test(s4), c4.className = u3.apply(r3, l5) + (s4 ? " " + s4 : ""), t3 && (c4.ref = o4);
        let i4 = e3;
        return e3[0] && (i4 = c4.as || e3, delete c4.as), g3 && i4[0] && g3(c4), d3(i4, c4);
      }
      return t3 ? t3(a4) : a4;
    };
  }

  // node_modules/.pnpm/react-hot-toast@2.4.0_csstype@3.1.2_react-dom@18.2.0_react@18.2.0/node_modules/react-hot-toast/dist/index.mjs
  var y3 = __toESM(require_react(), 1);
  var f4 = __toESM(require_react(), 1);
  var W2 = (e3) => typeof e3 == "function";
  var T3 = (e3, t3) => W2(e3) ? e3(t3) : e3;
  var U = (() => {
    let e3 = 0;
    return () => (++e3).toString();
  })();
  var b4 = (() => {
    let e3;
    return () => {
      if (e3 === void 0 && typeof window < "u") {
        let t3 = matchMedia("(prefers-reduced-motion: reduce)");
        e3 = !t3 || t3.matches;
      }
      return e3;
    };
  })();
  var Q = 20;
  var S2 = /* @__PURE__ */ new Map();
  var X = 1e3;
  var $ = (e3) => {
    if (S2.has(e3))
      return;
    let t3 = setTimeout(() => {
      S2.delete(e3), u4({ type: 4, toastId: e3 });
    }, X);
    S2.set(e3, t3);
  };
  var J = (e3) => {
    let t3 = S2.get(e3);
    t3 && clearTimeout(t3);
  };
  var v3 = (e3, t3) => {
    switch (t3.type) {
      case 0:
        return { ...e3, toasts: [t3.toast, ...e3.toasts].slice(0, Q) };
      case 1:
        return t3.toast.id && J(t3.toast.id), { ...e3, toasts: e3.toasts.map((r3) => r3.id === t3.toast.id ? { ...r3, ...t3.toast } : r3) };
      case 2:
        let { toast: o4 } = t3;
        return e3.toasts.find((r3) => r3.id === o4.id) ? v3(e3, { type: 1, toast: o4 }) : v3(e3, { type: 0, toast: o4 });
      case 3:
        let { toastId: s4 } = t3;
        return s4 ? $(s4) : e3.toasts.forEach((r3) => {
          $(r3.id);
        }), { ...e3, toasts: e3.toasts.map((r3) => r3.id === s4 || s4 === void 0 ? { ...r3, visible: false } : r3) };
      case 4:
        return t3.toastId === void 0 ? { ...e3, toasts: [] } : { ...e3, toasts: e3.toasts.filter((r3) => r3.id !== t3.toastId) };
      case 5:
        return { ...e3, pausedAt: t3.time };
      case 6:
        let a4 = t3.time - (e3.pausedAt || 0);
        return { ...e3, pausedAt: void 0, toasts: e3.toasts.map((r3) => ({ ...r3, pauseDuration: r3.pauseDuration + a4 })) };
    }
  };
  var A3 = [];
  var P2 = { toasts: [], pausedAt: void 0 };
  var u4 = (e3) => {
    P2 = v3(P2, e3), A3.forEach((t3) => {
      t3(P2);
    });
  };
  var Y = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var I = (e3 = {}) => {
    let [t3, o4] = (0, import_react43.useState)(P2);
    (0, import_react43.useEffect)(() => (A3.push(o4), () => {
      let a4 = A3.indexOf(o4);
      a4 > -1 && A3.splice(a4, 1);
    }), [t3]);
    let s4 = t3.toasts.map((a4) => {
      var r3, c4;
      return { ...e3, ...e3[a4.type], ...a4, duration: a4.duration || ((r3 = e3[a4.type]) == null ? void 0 : r3.duration) || (e3 == null ? void 0 : e3.duration) || Y[a4.type], style: { ...e3.style, ...(c4 = e3[a4.type]) == null ? void 0 : c4.style, ...a4.style } };
    });
    return { ...t3, toasts: s4 };
  };
  var G = (e3, t3 = "blank", o4) => ({ createdAt: Date.now(), visible: true, type: t3, ariaProps: { role: "status", "aria-live": "polite" }, message: e3, pauseDuration: 0, ...o4, id: (o4 == null ? void 0 : o4.id) || U() });
  var h4 = (e3) => (t3, o4) => {
    let s4 = G(t3, e3, o4);
    return u4({ type: 2, toast: s4 }), s4.id;
  };
  var n4 = (e3, t3) => h4("blank")(e3, t3);
  n4.error = h4("error");
  n4.success = h4("success");
  n4.loading = h4("loading");
  n4.custom = h4("custom");
  n4.dismiss = (e3) => {
    u4({ type: 3, toastId: e3 });
  };
  n4.remove = (e3) => u4({ type: 4, toastId: e3 });
  n4.promise = (e3, t3, o4) => {
    let s4 = n4.loading(t3.loading, { ...o4, ...o4 == null ? void 0 : o4.loading });
    return e3.then((a4) => (n4.success(T3(t3.success, a4), { id: s4, ...o4, ...o4 == null ? void 0 : o4.success }), a4)).catch((a4) => {
      n4.error(T3(t3.error, a4), { id: s4, ...o4, ...o4 == null ? void 0 : o4.error });
    }), e3;
  };
  var Z = (e3, t3) => {
    u4({ type: 1, toast: { id: e3, height: t3 } });
  };
  var ee = () => {
    u4({ type: 5, time: Date.now() });
  };
  var D3 = (e3) => {
    let { toasts: t3, pausedAt: o4 } = I(e3);
    (0, import_react44.useEffect)(() => {
      if (o4)
        return;
      let r3 = Date.now(), c4 = t3.map((i4) => {
        if (i4.duration === 1 / 0)
          return;
        let d4 = (i4.duration || 0) + i4.pauseDuration - (r3 - i4.createdAt);
        if (d4 < 0) {
          i4.visible && n4.dismiss(i4.id);
          return;
        }
        return setTimeout(() => n4.dismiss(i4.id), d4);
      });
      return () => {
        c4.forEach((i4) => i4 && clearTimeout(i4));
      };
    }, [t3, o4]);
    let s4 = (0, import_react44.useCallback)(() => {
      o4 && u4({ type: 6, time: Date.now() });
    }, [o4]), a4 = (0, import_react44.useCallback)((r3, c4) => {
      let { reverseOrder: i4 = false, gutter: d4 = 8, defaultPosition: p4 } = c4 || {}, g4 = t3.filter((m5) => (m5.position || p4) === (r3.position || p4) && m5.height), E2 = g4.findIndex((m5) => m5.id === r3.id), x3 = g4.filter((m5, R3) => R3 < E2 && m5.visible).length;
      return g4.filter((m5) => m5.visible).slice(...i4 ? [x3 + 1] : [0, x3]).reduce((m5, R3) => m5 + (R3.height || 0) + d4, 0);
    }, [t3]);
    return { toasts: t3, handlers: { updateHeight: Z, startPause: ee, endPause: s4, calculateOffset: a4 } };
  };
  var oe = h3`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var re = h3`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var se = h3`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e3) => e3.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var ne = h3`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V2 = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e3) => e3.secondary || "#e0e0e0"};
  border-right-color: ${(e3) => e3.primary || "#616161"};
  animation: ${ne} 1s linear infinite;
`;
  var pe = h3`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var de = h3`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var w3 = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e3) => e3.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var ue = j("div")`
  position: absolute;
`;
  var le = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var Te = h3`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var fe = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${Te} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e3 }) => {
    let { icon: t3, type: o4, iconTheme: s4 } = e3;
    return t3 !== void 0 ? typeof t3 == "string" ? y3.createElement(fe, null, t3) : t3 : o4 === "blank" ? null : y3.createElement(le, null, y3.createElement(V2, { ...s4 }), o4 !== "loading" && y3.createElement(ue, null, o4 === "error" ? y3.createElement(_, { ...s4 }) : y3.createElement(w3, { ...s4 })));
  };
  var ye = (e3) => `
0% {transform: translate3d(0,${e3 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var ge = (e3) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e3 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var he = "0%{opacity:0;} 100%{opacity:1;}";
  var xe = "0%{opacity:1;} 100%{opacity:0;}";
  var be = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var Se = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var Ae = (e3, t3) => {
    let s4 = e3.includes("top") ? 1 : -1, [a4, r3] = b4() ? [he, xe] : [ye(s4), ge(s4)];
    return { animation: t3 ? `${h3(a4)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h3(r3)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var F13 = l4.memo(({ toast: e3, position: t3, style: o4, children: s4 }) => {
    let a4 = e3.height ? Ae(e3.position || t3 || "top-center", e3.visible) : { opacity: 0 }, r3 = l4.createElement(M, { toast: e3 }), c4 = l4.createElement(Se, { ...e3.ariaProps }, T3(e3.message, e3));
    return l4.createElement(be, { className: e3.className, style: { ...a4, ...o4, ...e3.style } }, typeof s4 == "function" ? s4({ icon: r3, message: c4 }) : l4.createElement(l4.Fragment, null, r3, c4));
  });
  m3(f4.createElement);
  var Ee = ({ id: e3, className: t3, style: o4, onHeightUpdate: s4, children: a4 }) => {
    let r3 = f4.useCallback((c4) => {
      if (c4) {
        let i4 = () => {
          let d4 = c4.getBoundingClientRect().height;
          s4(e3, d4);
        };
        i4(), new MutationObserver(i4).observe(c4, { subtree: true, childList: true, characterData: true });
      }
    }, [e3, s4]);
    return f4.createElement("div", { ref: r3, className: t3, style: o4 }, a4);
  };
  var Re = (e3, t3) => {
    let o4 = e3.includes("top"), s4 = o4 ? { top: 0 } : { bottom: 0 }, a4 = e3.includes("center") ? { justifyContent: "center" } : e3.includes("right") ? { justifyContent: "flex-end" } : {};
    return { left: 0, right: 0, display: "flex", position: "absolute", transition: b4() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t3 * (o4 ? 1 : -1)}px)`, ...s4, ...a4 };
  };
  var ve = u3`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O3 = 16;
  var Ie = ({ reverseOrder: e3, position: t3 = "top-center", toastOptions: o4, gutter: s4, children: a4, containerStyle: r3, containerClassName: c4 }) => {
    let { toasts: i4, handlers: d4 } = D3(o4);
    return f4.createElement("div", { style: { position: "fixed", zIndex: 9999, top: O3, left: O3, right: O3, bottom: O3, pointerEvents: "none", ...r3 }, className: c4, onMouseEnter: d4.startPause, onMouseLeave: d4.endPause }, i4.map((p4) => {
      let g4 = p4.position || t3, E2 = d4.calculateOffset(p4, { reverseOrder: e3, gutter: s4, defaultPosition: t3 }), x3 = Re(g4, E2);
      return f4.createElement(Ee, { id: p4.id, key: p4.id, onHeightUpdate: d4.updateHeight, className: p4.visible ? ve : "", style: x3 }, p4.type === "custom" ? T3(p4.message, p4) : a4 ? a4(p4) : f4.createElement(F13, { toast: p4, position: g4 }));
    }));
  };

  // node_modules/.pnpm/react-hotkeys-hook@4.4.0_react-dom@18.2.0_react@18.2.0/node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js
  init_define_process();
  init_define_process_env();
  var import_react45 = __toESM(require_react());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var reservedModifierKeywords = ["shift", "alt", "meta", "mod", "ctrl"];
  var mappedKeys = {
    esc: "escape",
    "return": "enter",
    ".": "period",
    ",": "comma",
    "-": "slash",
    " ": "space",
    "`": "backquote",
    "#": "backslash",
    "+": "bracketright",
    ShiftLeft: "shift",
    ShiftRight: "shift",
    AltLeft: "alt",
    AltRight: "alt",
    MetaLeft: "meta",
    MetaRight: "meta",
    OSLeft: "meta",
    OSRight: "meta",
    ControlLeft: "ctrl",
    ControlRight: "ctrl"
  };
  function mapKey(key) {
    return (mappedKeys[key] || key).trim().toLowerCase().replace(/key|digit|numpad|arrow/, "");
  }
  function isHotkeyModifier(key) {
    return reservedModifierKeywords.includes(key);
  }
  function parseKeysHookInput(keys, splitKey) {
    if (splitKey === void 0) {
      splitKey = ",";
    }
    return keys.split(splitKey);
  }
  function parseHotkey(hotkey, combinationKey, description) {
    if (combinationKey === void 0) {
      combinationKey = "+";
    }
    var keys = hotkey.toLocaleLowerCase().split(combinationKey).map(function(k2) {
      return mapKey(k2);
    });
    var modifiers = {
      alt: keys.includes("alt"),
      ctrl: keys.includes("ctrl") || keys.includes("control"),
      shift: keys.includes("shift"),
      meta: keys.includes("meta"),
      mod: keys.includes("mod")
    };
    var singleCharKeys = keys.filter(function(k2) {
      return !reservedModifierKeywords.includes(k2);
    });
    return _extends({}, modifiers, {
      keys: singleCharKeys,
      description
    });
  }
  (function() {
    if (typeof document !== "undefined") {
      document.addEventListener("keydown", function(e3) {
        if (e3.key === void 0) {
          return;
        }
        pushToCurrentlyPressedKeys([mapKey(e3.key), mapKey(e3.code)]);
      });
      document.addEventListener("keyup", function(e3) {
        if (e3.key === void 0) {
          return;
        }
        removeFromCurrentlyPressedKeys([mapKey(e3.key), mapKey(e3.code)]);
      });
    }
    if (typeof window !== "undefined") {
      window.addEventListener("blur", function() {
        currentlyPressedKeys.clear();
      });
    }
  })();
  var currentlyPressedKeys = /* @__PURE__ */ new Set();
  function isHotkeyPressed(key, splitKey) {
    if (splitKey === void 0) {
      splitKey = ",";
    }
    var hotkeyArray = Array.isArray(key) ? key : key.split(splitKey);
    return hotkeyArray.every(function(hotkey) {
      return currentlyPressedKeys.has(hotkey.trim().toLowerCase());
    });
  }
  function pushToCurrentlyPressedKeys(key) {
    var hotkeyArray = Array.isArray(key) ? key : [key];
    if (currentlyPressedKeys.has("meta")) {
      currentlyPressedKeys.forEach(function(key2) {
        return !isHotkeyModifier(key2) && currentlyPressedKeys["delete"](key2.toLowerCase());
      });
    }
    hotkeyArray.forEach(function(hotkey) {
      return currentlyPressedKeys.add(hotkey.toLowerCase());
    });
  }
  function removeFromCurrentlyPressedKeys(key) {
    var hotkeyArray = Array.isArray(key) ? key : [key];
    if (key === "meta") {
      currentlyPressedKeys.clear();
    } else {
      hotkeyArray.forEach(function(hotkey) {
        return currentlyPressedKeys["delete"](hotkey.toLowerCase());
      });
    }
  }
  function maybePreventDefault(e3, hotkey, preventDefault) {
    if (typeof preventDefault === "function" && preventDefault(e3, hotkey) || preventDefault === true) {
      e3.preventDefault();
    }
  }
  function isHotkeyEnabled(e3, hotkey, enabled) {
    if (typeof enabled === "function") {
      return enabled(e3, hotkey);
    }
    return enabled === true || enabled === void 0;
  }
  function isKeyboardEventTriggeredByInput(ev) {
    return isHotkeyEnabledOnTag(ev, ["input", "textarea", "select"]);
  }
  function isHotkeyEnabledOnTag(_ref, enabledOnTags) {
    var target = _ref.target;
    if (enabledOnTags === void 0) {
      enabledOnTags = false;
    }
    var targetTagName = target && target.tagName;
    if (enabledOnTags instanceof Array) {
      return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(function(tag) {
        return tag.toLowerCase() === targetTagName.toLowerCase();
      }));
    }
    return Boolean(targetTagName && enabledOnTags && enabledOnTags === true);
  }
  function isScopeActive(activeScopes, scopes) {
    if (activeScopes.length === 0 && scopes) {
      console.warn('A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>');
      return true;
    }
    if (!scopes) {
      return true;
    }
    return activeScopes.some(function(scope) {
      return scopes.includes(scope);
    }) || activeScopes.includes("*");
  }
  var isHotkeyMatchingKeyboardEvent = function isHotkeyMatchingKeyboardEvent2(e3, hotkey, ignoreModifiers) {
    if (ignoreModifiers === void 0) {
      ignoreModifiers = false;
    }
    var alt = hotkey.alt, meta = hotkey.meta, mod = hotkey.mod, shift2 = hotkey.shift, ctrl = hotkey.ctrl, keys = hotkey.keys;
    var pressedKeyUppercase = e3.key, code = e3.code, ctrlKey = e3.ctrlKey, metaKey = e3.metaKey, shiftKey = e3.shiftKey, altKey = e3.altKey;
    var keyCode = mapKey(code);
    var pressedKey = pressedKeyUppercase.toLowerCase();
    if (!ignoreModifiers) {
      if (alt === !altKey && pressedKey !== "alt") {
        return false;
      }
      if (shift2 === !shiftKey && pressedKey !== "shift") {
        return false;
      }
      if (mod) {
        if (!metaKey && !ctrlKey) {
          return false;
        }
      } else {
        if (meta === !metaKey && pressedKey !== "meta" && pressedKey !== "os") {
          return false;
        }
        if (ctrl === !ctrlKey && pressedKey !== "ctrl" && pressedKey !== "control") {
          return false;
        }
      }
    }
    if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
      return true;
    } else if (keys) {
      return isHotkeyPressed(keys);
    } else if (!keys) {
      return true;
    }
    return false;
  };
  var BoundHotkeysProxyProvider2 = /* @__PURE__ */ (0, import_react45.createContext)(void 0);
  var useBoundHotkeysProxy = function useBoundHotkeysProxy2() {
    return (0, import_react45.useContext)(BoundHotkeysProxyProvider2);
  };
  function deepEqual2(x3, y4) {
    return x3 && y4 && typeof x3 === "object" && typeof y4 === "object" ? Object.keys(x3).length === Object.keys(y4).length && //@ts-ignore
    Object.keys(x3).reduce(function(isEqual, key) {
      return isEqual && deepEqual2(x3[key], y4[key]);
    }, true) : x3 === y4;
  }
  var HotkeysContext2 = /* @__PURE__ */ (0, import_react45.createContext)({
    hotkeys: [],
    enabledScopes: [],
    toggleScope: function toggleScope() {
    },
    enableScope: function enableScope() {
    },
    disableScope: function disableScope() {
    }
  });
  var useHotkeysContext = function useHotkeysContext2() {
    return (0, import_react45.useContext)(HotkeysContext2);
  };
  function useDeepEqualMemo(value) {
    var ref = (0, import_react45.useRef)(void 0);
    if (!deepEqual2(ref.current, value)) {
      ref.current = value;
    }
    return ref.current;
  }
  var stopPropagation = function stopPropagation2(e3) {
    e3.stopPropagation();
    e3.preventDefault();
    e3.stopImmediatePropagation();
  };
  var useSafeLayoutEffect = typeof window !== "undefined" ? import_react45.useLayoutEffect : import_react45.useEffect;
  function useHotkeys(keys, callback, options, dependencies) {
    var ref = (0, import_react45.useRef)(null);
    var hasTriggeredRef = (0, import_react45.useRef)(false);
    var _options = !(options instanceof Array) ? options : !(dependencies instanceof Array) ? dependencies : void 0;
    var _keys = keys instanceof Array ? keys.join(_options == null ? void 0 : _options.splitKey) : keys;
    var _deps = options instanceof Array ? options : dependencies instanceof Array ? dependencies : void 0;
    var memoisedCB = (0, import_react45.useCallback)(callback, _deps != null ? _deps : []);
    var cbRef = (0, import_react45.useRef)(memoisedCB);
    if (_deps) {
      cbRef.current = memoisedCB;
    } else {
      cbRef.current = callback;
    }
    var memoisedOptions = useDeepEqualMemo(_options);
    var _useHotkeysContext = useHotkeysContext(), enabledScopes = _useHotkeysContext.enabledScopes;
    var proxy = useBoundHotkeysProxy();
    useSafeLayoutEffect(function() {
      if ((memoisedOptions == null ? void 0 : memoisedOptions.enabled) === false || !isScopeActive(enabledScopes, memoisedOptions == null ? void 0 : memoisedOptions.scopes)) {
        return;
      }
      var listener = function listener2(e3, isKeyUp) {
        var _e$target;
        if (isKeyUp === void 0) {
          isKeyUp = false;
        }
        if (isKeyboardEventTriggeredByInput(e3) && !isHotkeyEnabledOnTag(e3, memoisedOptions == null ? void 0 : memoisedOptions.enableOnFormTags)) {
          return;
        }
        if (memoisedOptions != null && memoisedOptions.ignoreEventWhen != null && memoisedOptions.ignoreEventWhen(e3)) {
          return;
        }
        if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {
          stopPropagation(e3);
          return;
        }
        if ((_e$target = e3.target) != null && _e$target.isContentEditable && !(memoisedOptions != null && memoisedOptions.enableOnContentEditable)) {
          return;
        }
        parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {
          var _hotkey$keys;
          var hotkey = parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey);
          if (isHotkeyMatchingKeyboardEvent(e3, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.ignoreModifiers) || (_hotkey$keys = hotkey.keys) != null && _hotkey$keys.includes("*")) {
            if (isKeyUp && hasTriggeredRef.current) {
              return;
            }
            maybePreventDefault(e3, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.preventDefault);
            if (!isHotkeyEnabled(e3, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.enabled)) {
              stopPropagation(e3);
              return;
            }
            cbRef.current(e3, hotkey);
            if (!isKeyUp) {
              hasTriggeredRef.current = true;
            }
          }
        });
      };
      var handleKeyDown = function handleKeyDown2(event) {
        if (event.key === void 0) {
          return;
        }
        pushToCurrentlyPressedKeys(mapKey(event.code));
        if ((memoisedOptions == null ? void 0 : memoisedOptions.keydown) === void 0 && (memoisedOptions == null ? void 0 : memoisedOptions.keyup) !== true || memoisedOptions != null && memoisedOptions.keydown) {
          listener(event);
        }
      };
      var handleKeyUp = function handleKeyUp2(event) {
        if (event.key === void 0) {
          return;
        }
        removeFromCurrentlyPressedKeys(mapKey(event.code));
        hasTriggeredRef.current = false;
        if (memoisedOptions != null && memoisedOptions.keyup) {
          listener(event, true);
        }
      };
      var domNode = ref.current || (_options == null ? void 0 : _options.document) || document;
      domNode.addEventListener("keyup", handleKeyUp);
      domNode.addEventListener("keydown", handleKeyDown);
      if (proxy) {
        parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {
          return proxy.addHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));
        });
      }
      return function() {
        domNode.removeEventListener("keyup", handleKeyUp);
        domNode.removeEventListener("keydown", handleKeyDown);
        if (proxy) {
          parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {
            return proxy.removeHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));
          });
        }
      };
    }, [_keys, memoisedOptions, enabledScopes]);
    return ref;
  }

  // src/components/Toolbar.tsx
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  function Toolbar() {
    const isApple = checkIsApple();
    const { project, runWorkflow } = useProjectContext();
    const { props } = useEditorContext();
    const { selectedNodes } = useSelectedNodes();
    const prevNodeLength = (0, import_react46.useRef)(0);
    useHotkeys(isApple ? "meta+s" : "ctrl+s", (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
      onSave();
    });
    useHotkeys(isApple ? "meta+b" : "ctrl+b", (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
      onBuild();
    });
    useHotkeys("shift+enter", (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
      onRun();
    });
    const onSave = (0, import_react46.useCallback)(async () => {
      if (!project)
        return;
      const updatedProject = getUpdatedProject({
        project,
        nodes: props.nodes,
        edges: props.edges
      });
      for (const node2 of updatedProject.graph?.nodes || []) {
        if (!node2.name) {
          n4.error("Please name all nodes before exporting");
          return;
        }
      }
      await projectService.saveProject(updatedProject);
      n4.success("Project saved");
    }, [project, props.nodes, props.edges]);
    const onBuild = async () => {
      await onSave();
      generateService.generate({ projectId: project?.id });
      n4.success("Project built");
    };
    const onRun = async () => {
      if (selectedNodes.length !== 1) {
        n4.error("Please select a node to run");
        return;
      }
      const selectedNode = selectedNodes[0];
      runWorkflow(selectedNode);
    };
    (0, import_react46.useEffect)(() => {
      if (selectedNodes.length === 0 && selectedNodes.length !== prevNodeLength.current) {
        onSave();
      }
      prevNodeLength.current = selectedNodes.length;
    }, [selectedNodes, onSave]);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "px-1 py-1 absolute z-10 top-0", children: [
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(Menu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button, { appearance: "subtle", size: "small", children: "File" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(MenuList, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuItem, { secondaryContent: "Ctrl+S", onClick: onSave, children: "Save" }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuItem, { secondaryContent: "Ctrl+Shift+E", children: "Export" })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button, { appearance: "subtle", size: "small", children: "Edit" }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button, { appearance: "subtle", size: "small", children: "View" }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(Menu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button, { appearance: "subtle", size: "small", children: "Build" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuList, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuItem, { secondaryContent: "Ctrl+B", onClick: onBuild, children: "Build" }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(Menu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button, { appearance: "subtle", size: "small", children: "Run" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(MenuList, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
            MenuItem,
            {
              secondaryContent: "Ctrl+R",
              disabled: selectedNodes.length !== 1,
              onClick: onRun,
              children: "Run Workflow"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuItem, { secondaryContent: "Ctrl+B", children: "Execute Block" })
        ] }) })
      ] })
    ] });
  }

  // src/routes.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-router-dom@6.11.0_react-dom@18.2.0_react@18.2.0/node_modules/react-router-dom/dist/index.js
  init_define_process();
  init_define_process_env();
  var React114 = __toESM(require_react());

  // node_modules/.pnpm/react-router@6.11.0_react@18.2.0/node_modules/react-router/dist/index.js
  init_define_process();
  init_define_process_env();
  var React113 = __toESM(require_react());

  // node_modules/.pnpm/@remix-run+router@1.6.0/node_modules/@remix-run/router/dist/router.js
  init_define_process();
  init_define_process_env();
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search,
        hash: hash2
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e3) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location2, index) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = _extends2({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location2;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = _ref;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash2 && hash2 !== "#")
      pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState(_extends2({}, globalHistory.state, {
        idx: index
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index;
      index = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex();
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n5) {
        return globalHistory.go(n5);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i4 = 0; matches == null && i4 < branches.length; ++i4) {
      matches = matchRouteBranch(
        branches[i4],
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        safelyDecodeURI(pathname)
      );
    }
    return matches;
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a4, b5) => a4.score !== b5.score ? b5.score - a4.score : compareIndexes(a4.routesMeta.map((meta) => meta.childrenIndex), b5.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:\w+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s4) => s4 === "*";
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s4) => !isSplat(s4)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a4, b5) {
    let siblings = a4.length === b5.length && a4.slice(0, -1).every((n5, i4) => n5 === b5[i4]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a4[a4.length - 1] - b5[b5.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i4 = 0; i4 < routesMeta.length; ++i4) {
      let meta = routesMeta[i4];
      let end = i4 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = paramNames.reduce((memo4, paramName, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      memo4[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
      return memo4;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_2, paramName) => {
      paramNames.push(paramName);
      return "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
      paramNames.push("*");
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, paramNames];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error) {
      warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends2({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (isPathRelative || toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // node_modules/.pnpm/react-router@6.11.0_react@18.2.0/node_modules/react-router/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React113.createContext({
    outlet: null,
    matches: []
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React113.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React113.useContext(NavigationContext);
    let {
      hash: hash2,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash: hash2
    });
  }
  function useInRouterContext() {
    return React113.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React113.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect2(cb) {
    let isStatic = React113.useContext(NavigationContext).static;
    if (!isStatic) {
      React113.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let isDataRouter = React113.useContext(DataRouterContext) != null;
    return isDataRouter ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React113.useContext(NavigationContext);
    let {
      matches
    } = React113.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    let activeRef = React113.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React113.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname]);
    return navigate;
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      matches
    } = React113.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    return React113.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React113.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React113.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React113.createElement(LocationContext.Provider, {
        value: {
          location: _extends3({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location2),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React113.createElement(React113.Fragment, null, /* @__PURE__ */ React113.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React113.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React113.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React113.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React113.createElement(React113.Fragment, null, /* @__PURE__ */ React113.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React113.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React113.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React113.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React113.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error || state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error ? /* @__PURE__ */ React113.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React113.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children: children2
    } = _ref;
    let dataRouterContext = React113.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React113.createElement(RouteContext.Provider, {
      value: routeContext
    }, children2);
  }
  function _renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (matches == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m5) => m5.route.id && (errors == null ? void 0 : errors[m5.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match2, index) => {
      let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
      let errorElement = null;
      if (dataRouterState) {
        errorElement = match2.route.errorElement || defaultErrorElement;
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children2;
        if (error) {
          children2 = errorElement;
        } else if (match2.route.element) {
          children2 = match2.route.element;
        } else {
          children2 = outlet;
        }
        return /* @__PURE__ */ React113.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2
          },
          children: children2
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? /* @__PURE__ */ React113.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches2
        }
      }) : getChildren();
    }, null);
  }
  var DataRouterHook;
  (function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
  })(DataRouterHook || (DataRouterHook = {}));
  var DataRouterStateHook;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
  })(DataRouterStateHook || (DataRouterStateHook = {}));
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React113.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React113.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React113.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React113.useMemo(() => matches.map((match2) => {
      let {
        pathname,
        params
      } = match2;
      return {
        id: match2.route.id,
        pathname,
        params,
        data: loaderData[match2.route.id],
        handle: match2.route.handle
      };
    }), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React113.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id4 = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React113.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React113.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends3({
          fromRouteId: id4
        }, options));
      }
    }, [router, id4]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning(false, message) : void 0;
    }
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children: children2 = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React113.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp
    }), [basename, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash: hash2 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React113.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash: hash2,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash2, state, key, navigationType]);
    true ? warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React113.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React113.createElement(LocationContext.Provider, {
      children: children2,
      value: locationContext
    }));
  }
  var AwaitRenderStatus;
  (function(AwaitRenderStatus2) {
    AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
    AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
    AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
  })(AwaitRenderStatus || (AwaitRenderStatus = {}));
  var neverSettledPromise = new Promise(() => {
  });

  // node_modules/.pnpm/react-router-dom@6.11.0_react-dom@18.2.0_react@18.2.0/node_modules/react-router-dom/dist/index.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i4;
    for (i4 = 0; i4 < sourceKeys.length; i4++) {
      key = sourceKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  function getFormSubmissionInfo(target, options, basename) {
    let method;
    let action = null;
    let encType;
    let formData;
    if (isFormElement(target)) {
      let submissionTrigger = options.submissionTrigger;
      if (options.action) {
        action = options.action;
      } else {
        let attr = target.getAttribute("action");
        action = attr ? stripBasename(attr, basename) : null;
      }
      method = options.method || target.getAttribute("method") || defaultMethod;
      encType = options.encType || target.getAttribute("enctype") || defaultEncType;
      formData = new FormData(target);
      if (submissionTrigger && submissionTrigger.name) {
        formData.append(submissionTrigger.name, submissionTrigger.value);
      }
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      if (options.action) {
        action = options.action;
      } else {
        let attr = target.getAttribute("formaction") || form.getAttribute("action");
        action = attr ? stripBasename(attr, basename) : null;
      }
      method = options.method || target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = options.encType || target.getAttribute("formenctype") || form.getAttribute("enctype") || defaultEncType;
      formData = new FormData(form);
      if (target.name) {
        formData.append(target.name, target.value);
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = options.method || defaultMethod;
      action = options.action || null;
      encType = options.encType || defaultEncType;
      if (target instanceof FormData) {
        formData = target;
      } else {
        formData = new FormData();
        if (target instanceof URLSearchParams) {
          for (let [name, value] of target) {
            formData.append(name, value);
          }
        } else if (target != null) {
          for (let name of Object.keys(target)) {
            formData.append(name, target[name]);
          }
        }
      }
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData
    };
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
  var _excluded3 = ["reloadDocument", "replace", "method", "action", "onSubmit", "fetcherKey", "routeId", "relative", "preventScrollReset"];
  function BrowserRouter(_ref) {
    let {
      basename,
      children: children2,
      window: window2
    } = _ref;
    let historyRef = React114.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setState] = React114.useState({
      action: history.action,
      location: history.location
    });
    React114.useLayoutEffect(() => history.listen(setState), [history]);
    return /* @__PURE__ */ React114.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  function HistoryRouter(_ref3) {
    let {
      basename,
      children: children2,
      history
    } = _ref3;
    const [state, setState] = React114.useState({
      action: history.action,
      location: history.location
    });
    React114.useLayoutEffect(() => history.listen(setState), [history]);
    return /* @__PURE__ */ React114.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link2 = /* @__PURE__ */ React114.forwardRef(function LinkWithRef(_ref4, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset
    } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded);
    let {
      basename
    } = React114.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser2) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e3) {
          true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React114.createElement("a", _extends4({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (true) {
    Link2.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React114.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      children: children2
    } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);
    let path = useResolvedPath(to, {
      relative: rest.relative
    });
    let location2 = useLocation();
    let routerState = React114.useContext(DataRouterStateContext);
    let {
      navigator: navigator2
    } = React114.useContext(NavigationContext);
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp({
        isActive,
        isPending
      });
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
    }
    let style2 = typeof styleProp === "function" ? styleProp({
      isActive,
      isPending
    }) : styleProp;
    return /* @__PURE__ */ React114.createElement(Link2, _extends4({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style: style2,
      to
    }), typeof children2 === "function" ? children2({
      isActive,
      isPending
    }) : children2);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React114.forwardRef((props, ref) => {
    return /* @__PURE__ */ React114.createElement(FormImpl, _extends4({}, props, {
      ref
    }));
  });
  if (true) {
    Form.displayName = "Form";
  }
  var FormImpl = /* @__PURE__ */ React114.forwardRef((_ref6, forwardedRef) => {
    let {
      reloadDocument,
      replace: replace2,
      method = defaultMethod,
      action,
      onSubmit,
      fetcherKey,
      routeId,
      relative,
      preventScrollReset
    } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3);
    let submit = useSubmitImpl(fetcherKey, routeId);
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let formAction = useFormAction(action, {
      relative
    });
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        method: submitMethod,
        replace: replace2,
        relative,
        preventScrollReset
      });
    };
    return /* @__PURE__ */ React114.createElement("form", _extends4({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    FormImpl.displayName = "FormImpl";
  }
  function ScrollRestoration(_ref7) {
    let {
      getKey,
      storageKey
    } = _ref7;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmitImpl"] = "useSubmitImpl";
    DataRouterHook3["UseFetcher"] = "useFetcher";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React114.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React114.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location2 = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React114.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative
        });
      }
    }, [location2, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);
  }
  function useSubmitImpl(fetcherKey, fetcherRouteId) {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmitImpl);
    let {
      basename
    } = React114.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React114.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      if (typeof document === "undefined") {
        throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
      }
      let {
        action,
        method,
        encType,
        formData
      } = getFormSubmissionInfo(target, options, basename);
      let opts = {
        preventScrollReset: options.preventScrollReset,
        formData,
        formMethod: method,
        formEncType: encType
      };
      if (fetcherKey) {
        !(fetcherRouteId != null) ? true ? invariant(false, "No routeId available for useFetcher()") : invariant(false) : void 0;
        router.fetch(fetcherKey, fetcherRouteId, action, opts);
      } else {
        router.navigate(action, _extends4({}, opts, {
          replace: options.replace,
          fromRouteId: currentRouteId
        }));
      }
    }, [router, basename, fetcherKey, fetcherRouteId, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React114.useContext(NavigationContext);
    let routeContext = React114.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path = _extends4({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location2 = useLocation();
    if (action == null) {
      path.search = location2.search;
      path.hash = location2.hash;
      if (match2.route.index) {
        let params = new URLSearchParams(path.search);
        params.delete("index");
        path.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp3) {
    let {
      getKey,
      storageKey
    } = _temp3 === void 0 ? {} : _temp3;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let location2 = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React114.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React114.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location2, matches) : null) || location2.key;
        savedScrollPositions[key] = window.scrollY;
      }
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location2, matches]));
    if (typeof document !== "undefined") {
      React114.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e3) {
        }
      }, [storageKey]);
      React114.useLayoutEffect(() => {
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, getKey]);
      React114.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(location2.hash.slice(1));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React114.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }

  // src/pages/index.tsx
  init_define_process();
  init_define_process_env();

  // src/components/ActionBar.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/index.mjs
  init_define_process();
  init_define_process_env();
  var React115 = __toESM(require_react(), 1);
  var import_react58 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  init_define_process();
  init_define_process_env();
  var import_react47 = __toESM(require_react(), 1);
  var MotionConfigContext = (0, import_react47.createContext)({
    transformPagePoint: (p4) => p4,
    isStatic: false,
    reducedMotion: "never"
  });

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  init_define_process();
  init_define_process_env();
  var import_react48 = __toESM(require_react(), 1);
  var MotionContext = (0, import_react48.createContext)({});

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  init_define_process();
  init_define_process_env();
  var import_react52 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  init_define_process();
  init_define_process_env();
  var import_react49 = __toESM(require_react(), 1);
  var PresenceContext = (0, import_react49.createContext)(null);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  init_define_process();
  init_define_process_env();
  var import_react50 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-browser.mjs
  init_define_process();
  init_define_process_env();
  var isBrowser3 = typeof document !== "undefined";

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var useIsomorphicLayoutEffect3 = isBrowser3 ? import_react50.useLayoutEffect : import_react50.useEffect;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LazyContext.mjs
  init_define_process();
  init_define_process_env();
  var import_react51 = __toESM(require_react(), 1);
  var LazyContext = (0, import_react51.createContext)({ strict: false });

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  function useVisualElement(Component3, visualState, props, createVisualElement) {
    const { visualElement: parent } = (0, import_react52.useContext)(MotionContext);
    const lazyContext = (0, import_react52.useContext)(LazyContext);
    const presenceContext = (0, import_react52.useContext)(PresenceContext);
    const reducedMotionConfig = (0, import_react52.useContext)(MotionConfigContext).reducedMotion;
    const visualElementRef = (0, import_react52.useRef)();
    createVisualElement = createVisualElement || lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component3, {
        visualState,
        parent,
        props,
        presenceContext,
        blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
        reducedMotionConfig
      });
    }
    const visualElement = visualElementRef.current;
    (0, import_react52.useInsertionEffect)(() => {
      visualElement && visualElement.update(props, presenceContext);
    });
    useIsomorphicLayoutEffect3(() => {
      visualElement && visualElement.render();
    });
    (0, import_react52.useEffect)(() => {
      visualElement && visualElement.updateFeatures();
    });
    const useAnimateChangesEffect = window.HandoffAppearAnimations ? useIsomorphicLayoutEffect3 : import_react52.useEffect;
    useAnimateChangesEffect(() => {
      if (visualElement && visualElement.animationState) {
        visualElement.animationState.animateChanges();
      }
    });
    return visualElement;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  init_define_process();
  init_define_process_env();
  var import_react53 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  init_define_process();
  init_define_process_env();
  function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  function useMotionRef(visualState, visualElement, externalRef) {
    return (0, import_react53.useCallback)(
      (instance) => {
        instance && visualState.mount && visualState.mount(instance);
        if (visualElement) {
          instance ? visualElement.mount(instance) : visualElement.unmount();
        }
        if (externalRef) {
          if (typeof externalRef === "function") {
            externalRef(instance);
          } else if (isRefObject(externalRef)) {
            externalRef.current = instance;
          }
        }
      },
      /**
       * Only pass a new ref callback to React if we've received a visual element
       * factory. Otherwise we'll be mounting/remounting every time externalRef
       * or other dependencies change.
       */
      [visualElement]
    );
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  init_define_process();
  init_define_process_env();
  var import_react54 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
  init_define_process();
  init_define_process_env();
  function isVariantLabel(v5) {
    return typeof v5 === "string" || Array.isArray(v5);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  init_define_process();
  init_define_process_env();
  function isAnimationControls(v5) {
    return typeof v5 === "object" && typeof v5.start === "function";
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
  init_define_process();
  init_define_process_env();
  var variantPriorityOrder = [
    "animate",
    "whileInView",
    "whileFocus",
    "whileHover",
    "whileTap",
    "whileDrag",
    "exit"
  ];
  var variantProps = ["initial", ...variantPriorityOrder];

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
  function isControllingVariants(props) {
    return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
  }
  function isVariantNode(props) {
    return Boolean(isControllingVariants(props) || props.variants);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  function getCurrentTreeVariants(props, context) {
    if (isControllingVariants(props)) {
      const { initial, animate } = props;
      return {
        initial: initial === false || isVariantLabel(initial) ? initial : void 0,
        animate: isVariantLabel(animate) ? animate : void 0
      };
    }
    return props.inherit !== false ? context : {};
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  function useCreateMotionContext(props) {
    const { initial, animate } = getCurrentTreeVariants(props, (0, import_react54.useContext)(MotionContext));
    return (0, import_react54.useMemo)(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
  }
  function variantLabelsAsDependency(prop) {
    return Array.isArray(prop) ? prop.join(" ") : prop;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/load-features.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  init_define_process();
  init_define_process_env();
  var featureProps = {
    animation: [
      "animate",
      "variants",
      "whileHover",
      "whileTap",
      "exit",
      "whileInView",
      "whileFocus",
      "whileDrag"
    ],
    exit: ["exit"],
    drag: ["drag", "dragControls"],
    focus: ["whileFocus"],
    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
    layout: ["layout", "layoutId"]
  };
  var featureDefinitions = {};
  for (const key in featureProps) {
    featureDefinitions[key] = {
      isEnabled: (props) => featureProps[key].some((name) => !!props[name])
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/load-features.mjs
  function loadFeatures(features) {
    for (const key in features) {
      featureDefinitions[key] = {
        ...featureDefinitions[key],
        ...features[key]
      };
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/id.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-constant.mjs
  init_define_process();
  init_define_process_env();
  var import_react55 = __toESM(require_react(), 1);
  function useConstant(init2) {
    const ref = (0, import_react55.useRef)(null);
    if (ref.current === null) {
      ref.current = init2();
    }
    return ref.current;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/state.mjs
  init_define_process();
  init_define_process_env();
  var globalProjectionState = {
    /**
     * Global flag as to whether the tree has animated since the last time
     * we resized the window
     */
    hasAnimatedSinceResize: true,
    /**
     * We set this to true once, on the first update. Any nodes added to the tree beyond that
     * update will be given a `data-projection-id` attribute.
     */
    hasEverUpdated: false
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/node/id.mjs
  var id2 = 1;
  function useProjectionId() {
    return useConstant(() => {
      if (globalProjectionState.hasEverUpdated) {
        return id2++;
      }
    });
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  init_define_process();
  init_define_process_env();
  var import_react56 = __toESM(require_react(), 1);
  var LayoutGroupContext = (0, import_react56.createContext)({});

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  init_define_process();
  init_define_process_env();
  var import_react57 = __toESM(require_react(), 1);
  var SwitchLayoutGroupContext = (0, import_react57.createContext)({});

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
  init_define_process();
  init_define_process_env();
  var motionComponentSymbol = Symbol.for("motionComponentSymbol");

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/index.mjs
  function createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component: Component3 }) {
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
      let MeasureLayout;
      const configAndProps = {
        ...(0, import_react58.useContext)(MotionConfigContext),
        ...props,
        layoutId: useLayoutId(props)
      };
      const { isStatic } = configAndProps;
      const context = useCreateMotionContext(props);
      const projectionId = isStatic ? void 0 : useProjectionId();
      const visualState = useVisualState(props, isStatic);
      if (!isStatic && isBrowser3) {
        context.visualElement = useVisualElement(Component3, visualState, configAndProps, createVisualElement);
        const initialLayoutGroupConfig = (0, import_react58.useContext)(SwitchLayoutGroupContext);
        const isStrict = (0, import_react58.useContext)(LazyContext).strict;
        if (context.visualElement) {
          MeasureLayout = context.visualElement.loadFeatures(
            // Note: Pass the full new combined props to correctly re-render dynamic feature components.
            configAndProps,
            isStrict,
            preloadedFeatures,
            projectionId,
            initialLayoutGroupConfig
          );
        }
      }
      return React115.createElement(
        MotionContext.Provider,
        { value: context },
        MeasureLayout && context.visualElement ? React115.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps }) : null,
        useRender(Component3, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
      );
    }
    const ForwardRefComponent = (0, import_react58.forwardRef)(MotionComponent);
    ForwardRefComponent[motionComponentSymbol] = Component3;
    return ForwardRefComponent;
  }
  function useLayoutId({ layoutId }) {
    const layoutGroupId = (0, import_react58.useContext)(LayoutGroupContext).id;
    return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
  init_define_process();
  init_define_process_env();
  function createMotionProxy(createConfig) {
    function custom(Component3, customMotionComponentConfig = {}) {
      return createMotionComponent(createConfig(Component3, customMotionComponentConfig));
    }
    if (typeof Proxy === "undefined") {
      return custom;
    }
    const componentCache = /* @__PURE__ */ new Map();
    return new Proxy(custom, {
      /**
       * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
       * The prop name is passed through as `key` and we can use that to generate a `motion`
       * DOM component with that name.
       */
      get: (_target, key) => {
        if (!componentCache.has(key)) {
          componentCache.set(key, custom(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  init_define_process();
  init_define_process_env();
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "switch",
    "symbol",
    "svg",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  function isSVGComponent(Component3) {
    if (
      /**
       * If it's not a string, it's a custom React component. Currently we only support
       * HTML custom React components.
       */
      typeof Component3 !== "string" || /**
       * If it contains a dash, the element is a custom HTML webcomponent.
       */
      Component3.includes("-")
    ) {
      return false;
    } else if (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      lowercaseSVGElements.indexOf(Component3) > -1 || /**
       * If it contains a capital letter, it's an SVG component
       */
      /[A-Z]/.test(Component3)
    ) {
      return true;
    }
    return false;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  init_define_process();
  init_define_process_env();
  var import_react61 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/use-props.mjs
  init_define_process();
  init_define_process_env();
  var import_react59 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  init_define_process();
  init_define_process_env();
  var scaleCorrectors = {};

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
  init_define_process();
  init_define_process_env();
  var transformPropOrder = [
    "transformPerspective",
    "x",
    "y",
    "z",
    "translateX",
    "translateY",
    "translateZ",
    "scale",
    "scaleX",
    "scaleY",
    "rotate",
    "rotateX",
    "rotateY",
    "rotateZ",
    "skew",
    "skewX",
    "skewY"
  ];
  var transformProps = new Set(transformPropOrder);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  function isForcedMotionValue(key, { layout, layoutId }) {
    return transformProps.has(key) || key.startsWith("origin") || (layout || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  init_define_process();
  init_define_process_env();
  var isMotionValue = (value) => Boolean(value && value.getVelocity);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  init_define_process();
  init_define_process_env();
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  var numTransforms = transformPropOrder.length;
  function buildTransform(transform3, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {
    let transformString = "";
    for (let i4 = 0; i4 < numTransforms; i4++) {
      const key = transformPropOrder[i4];
      if (transform3[key] !== void 0) {
        const transformName = translateAlias[key] || key;
        transformString += `${transformName}(${transform3[key]}) `;
      }
    }
    if (enableHardwareAcceleration && !transform3.z) {
      transformString += "translateZ(0)";
    }
    transformString = transformString.trim();
    if (transformTemplate) {
      transformString = transformTemplate(transform3, transformIsDefault ? "" : transformString);
    } else if (allowTransformNone && transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  init_define_process();
  init_define_process_env();
  var checkStringStartsWith = (token2) => (key) => typeof key === "string" && key.startsWith(token2);
  var isCSSVariableName = checkStringStartsWith("--");
  var isCSSVariableToken = checkStringStartsWith("var(--");
  var cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  init_define_process();
  init_define_process_env();
  var getValueAsType = (value, type) => {
    return type && typeof value === "number" ? type.transform(value) : value;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/clamp.mjs
  init_define_process();
  init_define_process_env();
  var clamp3 = (min, max, v5) => Math.min(Math.max(v5, min), max);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
  var number = {
    test: (v5) => typeof v5 === "number",
    parse: parseFloat,
    transform: (v5) => v5
  };
  var alpha = {
    ...number,
    transform: (v5) => clamp3(0, 1, v5)
  };
  var scale = {
    ...number,
    default: 1
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/utils.mjs
  init_define_process();
  init_define_process_env();
  var sanitize = (v5) => Math.round(v5 * 1e5) / 1e5;
  var floatRegex = /(-)?([\d]*\.?[\d])+/g;
  var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
  var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
  function isString2(v5) {
    return typeof v5 === "string";
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
  var createUnitType = (unit) => ({
    test: (v5) => isString2(v5) && v5.endsWith(unit) && v5.split(" ").length === 1,
    parse: parseFloat,
    transform: (v5) => `${v5}${unit}`
  });
  var degrees2 = createUnitType("deg");
  var percent = createUnitType("%");
  var px = createUnitType("px");
  var vh = createUnitType("vh");
  var vw = createUnitType("vw");
  var progressPercentage = {
    ...percent,
    parse: (v5) => percent.parse(v5) / 100,
    transform: (v5) => percent.transform(v5 * 100)
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  init_define_process();
  init_define_process_env();
  var int = {
    ...number,
    transform: Math.round
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  var numberValueTypes = {
    // Border props
    borderWidth: px,
    borderTopWidth: px,
    borderRightWidth: px,
    borderBottomWidth: px,
    borderLeftWidth: px,
    borderRadius: px,
    radius: px,
    borderTopLeftRadius: px,
    borderTopRightRadius: px,
    borderBottomRightRadius: px,
    borderBottomLeftRadius: px,
    // Positioning props
    width: px,
    maxWidth: px,
    height: px,
    maxHeight: px,
    size: px,
    top: px,
    right: px,
    bottom: px,
    left: px,
    // Spacing props
    padding: px,
    paddingTop: px,
    paddingRight: px,
    paddingBottom: px,
    paddingLeft: px,
    margin: px,
    marginTop: px,
    marginRight: px,
    marginBottom: px,
    marginLeft: px,
    // Transform props
    rotate: degrees2,
    rotateX: degrees2,
    rotateY: degrees2,
    rotateZ: degrees2,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees2,
    skewX: degrees2,
    skewY: degrees2,
    distance: px,
    translateX: px,
    translateY: px,
    translateZ: px,
    x: px,
    y: px,
    z: px,
    perspective: px,
    transformPerspective: px,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px,
    // Misc
    zIndex: int,
    // SVG
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  function buildHTMLStyles(state, latestValues, options, transformTemplate) {
    const { style: style2, vars, transform: transform3, transformOrigin } = state;
    let hasTransform = false;
    let hasTransformOrigin = false;
    let transformIsNone = true;
    for (const key in latestValues) {
      const value = latestValues[key];
      if (isCSSVariableName(key)) {
        vars[key] = value;
        continue;
      }
      const valueType = numberValueTypes[key];
      const valueAsType = getValueAsType(value, valueType);
      if (transformProps.has(key)) {
        hasTransform = true;
        transform3[key] = valueAsType;
        if (!transformIsNone)
          continue;
        if (value !== (valueType.default || 0))
          transformIsNone = false;
      } else if (key.startsWith("origin")) {
        hasTransformOrigin = true;
        transformOrigin[key] = valueAsType;
      } else {
        style2[key] = valueAsType;
      }
    }
    if (!latestValues.transform) {
      if (hasTransform || transformTemplate) {
        style2.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);
      } else if (style2.transform) {
        style2.transform = "none";
      }
    }
    if (hasTransformOrigin) {
      const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
      style2.transformOrigin = `${originX} ${originY} ${originZ}`;
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  init_define_process();
  init_define_process_env();
  var createHtmlRenderState = () => ({
    style: {},
    transform: {},
    transformOrigin: {},
    vars: {}
  });

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/use-props.mjs
  function copyRawValuesOnly(target, source, props) {
    for (const key in source) {
      if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
        target[key] = source[key];
      }
    }
  }
  function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
    return (0, import_react59.useMemo)(() => {
      const state = createHtmlRenderState();
      buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
      return Object.assign({}, state.vars, state.style);
    }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
    const styleProp = props.style || {};
    const style2 = {};
    copyRawValuesOnly(style2, styleProp, props);
    Object.assign(style2, useInitialMotionValues(props, visualState, isStatic));
    return props.transformValues ? props.transformValues(style2) : style2;
  }
  function useHTMLProps(props, visualState, isStatic) {
    const htmlProps = {};
    const style2 = useStyle(props, visualState, isStatic);
    if (props.drag && props.dragListener !== false) {
      htmlProps.draggable = false;
      style2.userSelect = style2.WebkitUserSelect = style2.WebkitTouchCallout = "none";
      style2.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
    }
    if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
      htmlProps.tabIndex = 0;
    }
    htmlProps.style = style2;
    return htmlProps;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  init_define_process();
  init_define_process_env();
  var validMotionProps = /* @__PURE__ */ new Set([
    "animate",
    "exit",
    "variants",
    "initial",
    "style",
    "values",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "onLayoutAnimationStart",
    "onLayoutAnimationComplete",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "_dragX",
    "_dragY",
    "onHoverStart",
    "onHoverEnd",
    "onViewportEnter",
    "onViewportLeave",
    "ignoreStrict",
    "viewport"
  ]);
  function isValidMotionProp(key) {
    return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  var shouldForward = (key) => !isValidMotionProp(key);
  function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp)
      return;
    shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  }
  try {
    loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default);
  } catch (_a) {
  }
  function filterProps(props, isDom, forwardMotionProps) {
    const filteredProps = {};
    for (const key in props) {
      if (key === "values" && typeof props.values === "object")
        continue;
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
      props["draggable"] && key.startsWith("onDrag")) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  init_define_process();
  init_define_process_env();
  var import_react60 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  init_define_process();
  init_define_process_env();
  function calcOrigin(origin, offset2, size) {
    return typeof origin === "string" ? origin : px.transform(offset2 + size * origin);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return `${pxOriginX} ${pxOriginY}`;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  init_define_process();
  init_define_process_env();
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs, length2, spacing = 1, offset2 = 0, useDashCase = true) {
    attrs.pathLength = 1;
    const keys = useDashCase ? dashKeys : camelKeys;
    attrs[keys.offset] = px.transform(-offset2);
    const pathLength = px.transform(length2);
    const pathSpacing = px.transform(spacing);
    attrs[keys.array] = `${pathLength} ${pathSpacing}`;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  function buildSVGAttrs(state, {
    attrX,
    attrY,
    attrScale,
    originX,
    originY,
    pathLength,
    pathSpacing = 1,
    pathOffset = 0,
    // This is object creation, which we try to avoid per-frame.
    ...latest
  }, options, isSVGTag2, transformTemplate) {
    buildHTMLStyles(state, latest, options, transformTemplate);
    if (isSVGTag2) {
      if (state.style.viewBox) {
        state.attrs.viewBox = state.style.viewBox;
      }
      return;
    }
    state.attrs = state.style;
    state.style = {};
    const { attrs, style: style2, dimensions } = state;
    if (attrs.transform) {
      if (dimensions)
        style2.transform = attrs.transform;
      delete attrs.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style2.transform)) {
      style2.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs.x = attrX;
    if (attrY !== void 0)
      attrs.y = attrY;
    if (attrScale !== void 0)
      attrs.scale = attrScale;
    if (pathLength !== void 0) {
      buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  init_define_process();
  init_define_process_env();
  var createSvgRenderState = () => ({
    ...createHtmlRenderState(),
    attrs: {}
  });

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
  init_define_process();
  init_define_process_env();
  var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  function useSVGProps(props, visualState, _isStatic, Component3) {
    const visualProps = (0, import_react60.useMemo)(() => {
      const state = createSvgRenderState();
      buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component3), props.transformTemplate);
      return {
        ...state.attrs,
        style: { ...state.style }
      };
    }, [visualState]);
    if (props.style) {
      const rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = { ...rawStyles, ...visualProps.style };
    }
    return visualProps;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  function createUseRender(forwardMotionProps = false) {
    const useRender = (Component3, props, projectionId, ref, { latestValues }, isStatic) => {
      const useVisualProps = isSVGComponent(Component3) ? useSVGProps : useHTMLProps;
      const visualProps = useVisualProps(props, latestValues, isStatic, Component3);
      const filteredProps = filterProps(props, typeof Component3 === "string", forwardMotionProps);
      const elementProps = {
        ...filteredProps,
        ...visualProps,
        ref
      };
      const { children: children2 } = props;
      const renderedChildren = (0, import_react61.useMemo)(() => isMotionValue(children2) ? children2.get() : children2, [children2]);
      if (projectionId) {
        elementProps["data-projection-id"] = projectionId;
      }
      return (0, import_react61.createElement)(Component3, {
        ...elementProps,
        children: renderedChildren
      });
    };
    return useRender;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  init_define_process();
  init_define_process_env();
  var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  init_define_process();
  init_define_process_env();
  function renderHTML(element, { style: style2, vars }, styleProp, projection) {
    Object.assign(element.style, style2, projection && projection.getProjectionStyles(styleProp));
    for (const key in vars) {
      element.style.setProperty(key, vars[key]);
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  init_define_process();
  init_define_process_env();
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength",
    "startOffset",
    "textLength",
    "lengthAdjust"
  ]);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  function renderSVG(element, renderState, _styleProp, projection) {
    renderHTML(element, renderState, void 0, projection);
    for (const key in renderState.attrs) {
      element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  init_define_process();
  init_define_process_env();
  function scrapeMotionValuesFromProps(props, prevProps) {
    const { style: style2 } = props;
    const newValues = {};
    for (const key in style2) {
      if (isMotionValue(style2[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) {
        newValues[key] = style2[key];
      }
    }
    return newValues;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps2(props, prevProps) {
    const newValues = scrapeMotionValuesFromProps(props, prevProps);
    for (const key in props) {
      if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
        const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  init_define_process();
  init_define_process_env();
  var import_react62 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
  init_define_process();
  init_define_process_env();
  function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
    if (typeof definition === "function") {
      definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    if (typeof definition === "string") {
      definition = props.variants && props.variants[definition];
    }
    if (typeof definition === "function") {
      definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    return definition;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  init_define_process();
  init_define_process_env();
  var isKeyframesTarget = (v5) => {
    return Array.isArray(v5);
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  var isCustomValue = (v5) => {
    return Boolean(v5 && typeof v5 === "object" && v5.mix && v5.toValue);
  };
  var resolveFinalValueInKeyframes = (v5) => {
    return isKeyframesTarget(v5) ? v5[v5.length - 1] || 0 : v5;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  function resolveMotionValue(value) {
    const unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
    const state = {
      latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onMount) {
      state.mount = (instance) => onMount(props, instance, state);
    }
    return state;
  }
  var makeUseVisualState = (config) => (props, isStatic) => {
    const context = (0, import_react62.useContext)(MotionContext);
    const presenceContext = (0, import_react62.useContext)(PresenceContext);
    const make = () => makeState(config, props, context, presenceContext);
    return isStatic ? make() : useConstant(make);
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    const values = {};
    const motionValues = scrapeMotionValues(props, {});
    for (const key in motionValues) {
      values[key] = resolveMotionValue(motionValues[key]);
    }
    let { initial, animate } = props;
    const isControllingVariants$1 = isControllingVariants(props);
    const isVariantNode$1 = isVariantNode(props);
    if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
      if (initial === void 0)
        initial = context.initial;
      if (animate === void 0)
        animate = context.animate;
    }
    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
    const variantToSet = isInitialAnimationBlocked ? animate : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      list.forEach((definition) => {
        const resolved = resolveVariantFromProps(props, definition);
        if (!resolved)
          return;
        const { transitionEnd, transition: transition4, ...target } = resolved;
        for (const key in target) {
          let valueTarget = target[key];
          if (Array.isArray(valueTarget)) {
            const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index];
          }
          if (valueTarget !== null) {
            values[key] = valueTarget;
          }
        }
        for (const key in transitionEnd)
          values[key] = transitionEnd[key];
      });
    }
    return values;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onMount: (props, instance, { renderState, latestValues }) => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e3) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
        renderSVG(instance, renderState);
      }
    })
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  init_define_process();
  init_define_process_env();
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  function createDomMotionConfig(Component3, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {
    const baseConfig = isSVGComponent(Component3) ? svgMotionConfig : htmlMotionConfig;
    return {
      ...baseConfig,
      preloadedFeatures,
      useRender: createUseRender(forwardMotionProps),
      createVisualElement,
      Component: Component3
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/hover.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-dom-event.mjs
  init_define_process();
  init_define_process_env();
  function addDomEvent(target, eventName, handler, options = { passive: true }) {
    target.addEventListener(eventName, handler, options);
    return () => target.removeEventListener(eventName, handler);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/event-info.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
  init_define_process();
  init_define_process_env();
  var isPrimaryPointer = (event) => {
    if (event.pointerType === "mouse") {
      return typeof event.button !== "number" || event.button <= 0;
    } else {
      return event.isPrimary !== false;
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/event-info.mjs
  function extractEventInfo(event, pointType = "page") {
    return {
      point: {
        x: event[pointType + "X"],
        y: event[pointType + "Y"]
      }
    };
  }
  var addPointerInfo = (handler) => {
    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
  function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, eventName, addPointerInfo(handler), options);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/pipe.mjs
  init_define_process();
  init_define_process_env();
  var combineFunctions = (a4, b5) => (v5) => b5(a4(v5));
  var pipe2 = (...transformers) => transformers.reduce(combineFunctions);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
  init_define_process();
  init_define_process_env();
  function createLock(name) {
    let lock = null;
    return () => {
      const openLock = () => {
        lock = null;
      };
      if (lock === null) {
        lock = name;
        return openLock;
      }
      return false;
    };
  }
  var globalHorizontalLock = createLock("dragHorizontal");
  var globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag) {
    let lock = false;
    if (drag === "y") {
      lock = globalVerticalLock();
    } else if (drag === "x") {
      lock = globalHorizontalLock();
    } else {
      const openHorizontal = globalHorizontalLock();
      const openVertical = globalVerticalLock();
      if (openHorizontal && openVertical) {
        lock = () => {
          openHorizontal();
          openVertical();
        };
      } else {
        if (openHorizontal)
          openHorizontal();
        if (openVertical)
          openVertical();
      }
    }
    return lock;
  }
  function isDragActive() {
    const openGestureLock = getGlobalLock(true);
    if (!openGestureLock)
      return true;
    openGestureLock();
    return false;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/Feature.mjs
  init_define_process();
  init_define_process_env();
  var Feature = class {
    constructor(node2) {
      this.isMounted = false;
      this.node = node2;
    }
    update() {
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs
  init_define_process();
  init_define_process_env();
  function createRenderStep(runNextFrame2) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    const step = {
      /**
       * Schedule a process to run on the next frame.
       */
      schedule: (callback, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing;
        const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (buffer.indexOf(callback) === -1) {
          buffer.push(callback);
          if (addToCurrentFrame && isProcessing)
            numToRun = toRun.length;
        }
        return callback;
      },
      /**
       * Cancel the provided callback from running on the next frame.
       */
      cancel: (callback) => {
        const index = toRunNextFrame.indexOf(callback);
        if (index !== -1)
          toRunNextFrame.splice(index, 1);
        toKeepAlive.delete(callback);
      },
      /**
       * Execute all schedule callbacks.
       */
      process: (frameData2) => {
        if (isProcessing) {
          flushNextFrame = true;
          return;
        }
        isProcessing = true;
        [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (let i4 = 0; i4 < numToRun; i4++) {
            const callback = toRun[i4];
            callback(frameData2);
            if (toKeepAlive.has(callback)) {
              step.schedule(callback);
              runNextFrame2();
            }
          }
        }
        isProcessing = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step.process(frameData2);
        }
      }
    };
    return step;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/data.mjs
  init_define_process();
  init_define_process_env();
  var frameData = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/frameloop/index.mjs
  var maxElapsed = 40;
  var useDefaultElapsed = true;
  var runNextFrame = false;
  var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
  ];
  var steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  var processStep = (stepId) => steps[stepId].process(frameData);
  var processFrame = (timestamp) => {
    runNextFrame = false;
    frameData.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);
    frameData.timestamp = timestamp;
    frameData.isProcessing = true;
    stepsOrder.forEach(processStep);
    frameData.isProcessing = false;
    if (runNextFrame) {
      useDefaultElapsed = false;
      requestAnimationFrame(processFrame);
    }
  };
  var startLoop = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!frameData.isProcessing)
      requestAnimationFrame(processFrame);
  };
  var frame2 = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        startLoop();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  function cancelFrame(process2) {
    stepsOrder.forEach((key) => steps[key].cancel(process2));
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/hover.mjs
  function addHoverEvent(node2, isActive) {
    const eventName = "pointer" + (isActive ? "enter" : "leave");
    const callbackName = "onHover" + (isActive ? "Start" : "End");
    const handleEvent = (event, info) => {
      if (event.type === "touch" || isDragActive())
        return;
      const props = node2.getProps();
      if (node2.animationState && props.whileHover) {
        node2.animationState.setActive("whileHover", isActive);
      }
      if (props[callbackName]) {
        frame2.update(() => props[callbackName](event, info));
      }
    };
    return addPointerEvent(node2.current, eventName, handleEvent, {
      passive: !node2.getProps()[callbackName]
    });
  }
  var HoverGesture = class extends Feature {
    mount() {
      this.unmount = pipe2(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
    }
    unmount() {
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/focus.mjs
  init_define_process();
  init_define_process_env();
  var FocusGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.isActive = false;
    }
    onFocus() {
      let isFocusVisible = false;
      try {
        isFocusVisible = this.node.current.matches(":focus-visible");
      } catch (e3) {
        isFocusVisible = true;
      }
      if (!isFocusVisible || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", true);
      this.isActive = true;
    }
    onBlur() {
      if (!this.isActive || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", false);
      this.isActive = false;
    }
    mount() {
      this.unmount = pipe2(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
    }
    unmount() {
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/press.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
  init_define_process();
  init_define_process_env();
  var isNodeOrChild = (parent, child) => {
    if (!child) {
      return false;
    } else if (parent === child) {
      return true;
    } else {
      return isNodeOrChild(parent, child.parentElement);
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/noop.mjs
  init_define_process();
  init_define_process_env();
  var noop4 = (any) => any;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/gestures/press.mjs
  function fireSyntheticPointerEvent(name, handler) {
    if (!handler)
      return;
    const syntheticPointerEvent = new PointerEvent("pointer" + name);
    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
  }
  var PressGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.removeStartListeners = noop4;
      this.removeEndListeners = noop4;
      this.removeAccessibleListeners = noop4;
      this.startPointerPress = (startEvent, startInfo) => {
        this.removeEndListeners();
        if (this.isPressing)
          return;
        const props = this.node.getProps();
        const endPointerPress = (endEvent, endInfo) => {
          if (!this.checkPressEnd())
            return;
          const { onTap, onTapCancel } = this.node.getProps();
          frame2.update(() => {
            !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
          });
        };
        const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
        const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
        this.removeEndListeners = pipe2(removePointerUpListener, removePointerCancelListener);
        this.startPress(startEvent, startInfo);
      };
      this.startAccessiblePress = () => {
        const handleKeydown = (keydownEvent) => {
          if (keydownEvent.key !== "Enter" || this.isPressing)
            return;
          const handleKeyup = (keyupEvent) => {
            if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
              return;
            fireSyntheticPointerEvent("up", (event, info) => {
              const { onTap } = this.node.getProps();
              if (onTap) {
                frame2.update(() => onTap(event, info));
              }
            });
          };
          this.removeEndListeners();
          this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
          fireSyntheticPointerEvent("down", (event, info) => {
            this.startPress(event, info);
          });
        };
        const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
        const handleBlur = () => {
          if (!this.isPressing)
            return;
          fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
        };
        const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
        this.removeAccessibleListeners = pipe2(removeKeydownListener, removeBlurListener);
      };
    }
    startPress(event, info) {
      this.isPressing = true;
      const { onTapStart, whileTap } = this.node.getProps();
      if (whileTap && this.node.animationState) {
        this.node.animationState.setActive("whileTap", true);
      }
      if (onTapStart) {
        frame2.update(() => onTapStart(event, info));
      }
    }
    checkPressEnd() {
      this.removeEndListeners();
      this.isPressing = false;
      const props = this.node.getProps();
      if (props.whileTap && this.node.animationState) {
        this.node.animationState.setActive("whileTap", false);
      }
      return !isDragActive();
    }
    cancelPress(event, info) {
      if (!this.checkPressEnd())
        return;
      const { onTapCancel } = this.node.getProps();
      if (onTapCancel) {
        frame2.update(() => onTapCancel(event, info));
      }
    }
    mount() {
      const props = this.node.getProps();
      const removePointerListener = addPointerEvent(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
      const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
      this.removeStartListeners = pipe2(removePointerListener, removeFocusListener);
    }
    unmount() {
      this.removeStartListeners();
      this.removeEndListeners();
      this.removeAccessibleListeners();
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  init_define_process();
  init_define_process_env();
  var observerCallbacks = /* @__PURE__ */ new WeakMap();
  var observers = /* @__PURE__ */ new WeakMap();
  var fireObserverCallback = (entry) => {
    const callback = observerCallbacks.get(entry.target);
    callback && callback(entry);
  };
  var fireAllObserverCallbacks = (entries) => {
    entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver({ root: root3, ...options }) {
    const lookupRoot = root3 || document;
    if (!observers.has(lookupRoot)) {
      observers.set(lookupRoot, {});
    }
    const rootObservers = observers.get(lookupRoot);
    const key = JSON.stringify(options);
    if (!rootObservers[key]) {
      rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root: root3, ...options });
    }
    return rootObservers[key];
  }
  function observeIntersection(element, options, callback) {
    const rootInteresectionObserver = initIntersectionObserver(options);
    observerCallbacks.set(element, callback);
    rootInteresectionObserver.observe(element);
    return () => {
      observerCallbacks.delete(element);
      rootInteresectionObserver.unobserve(element);
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
  var thresholdNames = {
    some: 0,
    all: 1
  };
  var InViewFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.hasEnteredView = false;
      this.isInView = false;
    }
    startObserver() {
      this.unmount();
      const { viewport = {} } = this.node.getProps();
      const { root: root3, margin: rootMargin, amount = "some", once } = viewport;
      const options = {
        root: root3 ? root3.current : void 0,
        rootMargin,
        threshold: typeof amount === "number" ? amount : thresholdNames[amount]
      };
      const onIntersectionUpdate = (entry) => {
        const { isIntersecting } = entry;
        if (this.isInView === isIntersecting)
          return;
        this.isInView = isIntersecting;
        if (once && !isIntersecting && this.hasEnteredView) {
          return;
        } else if (isIntersecting) {
          this.hasEnteredView = true;
        }
        if (this.node.animationState) {
          this.node.animationState.setActive("whileInView", isIntersecting);
        }
        const { onViewportEnter, onViewportLeave } = this.node.getProps();
        const callback = isIntersecting ? onViewportEnter : onViewportLeave;
        callback && callback(entry);
      };
      return observeIntersection(this.node.current, options, onIntersectionUpdate);
    }
    mount() {
      this.startObserver();
    }
    update() {
      if (typeof IntersectionObserver === "undefined")
        return;
      const { props, prevProps } = this.node;
      const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
      if (hasOptionsChanged) {
        this.startObserver();
      }
    }
    unmount() {
    }
  };
  function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
    return (name) => viewport[name] !== prevViewport[name];
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  var gestureAnimations = {
    inView: {
      Feature: InViewFeature
    },
    tap: {
      Feature: PressGesture
    },
    focus: {
      Feature: FocusGesture
    },
    hover: {
      Feature: HoverGesture
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animations.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  init_define_process();
  init_define_process_env();
  function shallowCompare(next2, prev2) {
    if (!Array.isArray(prev2))
      return false;
    const prevLength = prev2.length;
    if (prevLength !== next2.length)
      return false;
    for (let i4 = 0; i4 < prevLength; i4++) {
      if (prev2[i4] !== next2[i4])
        return false;
    }
    return true;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
  init_define_process();
  init_define_process_env();
  function getCurrent(visualElement) {
    const current = {};
    visualElement.values.forEach((value, key) => current[key] = value.get());
    return current;
  }
  function getVelocity(visualElement) {
    const velocity = {};
    visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity());
    return velocity;
  }
  function resolveVariant(visualElement, definition, custom) {
    const props = visualElement.getProps();
    return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
  init_define_process();
  init_define_process_env();
  var optimizedAppearDataId = "framerAppearId";
  var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/errors.mjs
  init_define_process();
  init_define_process_env();
  var warning2 = noop4;
  var invariant2 = noop4;
  if (true) {
    warning2 = (check, message) => {
      if (!check && typeof console !== "undefined") {
        console.warn(message);
      }
    };
    invariant2 = (check, message) => {
      if (!check) {
        throw new Error(message);
      }
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/time-conversion.mjs
  init_define_process();
  init_define_process_env();
  var secondsToMilliseconds = (seconds) => seconds * 1e3;
  var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  init_define_process();
  init_define_process_env();
  var instantAnimationState = {
    current: false
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
  init_define_process();
  init_define_process_env();
  var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
  function isWaapiSupportedEasing(easing) {
    return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
  }
  var cubicBezierAsString = ([a4, b5, c4, d4]) => `cubic-bezier(${a4}, ${b5}, ${c4}, ${d4})`;
  var supportedWaapiEasing = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
  };
  function mapEasingToNativeEasing(easing) {
    if (!easing)
      return void 0;
    return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
  function animateStyle(element, valueName, keyframes2, { delay = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
    const keyframeOptions = { [valueName]: keyframes2 };
    if (times)
      keyframeOptions.offset = times;
    const easing = mapEasingToNativeEasing(ease2);
    if (Array.isArray(easing))
      keyframeOptions.easing = easing;
    return element.animate(keyframeOptions, {
      delay,
      duration,
      easing: !Array.isArray(easing) ? easing : "linear",
      fill: "both",
      iterations: repeat + 1,
      direction: repeatType === "reverse" ? "alternate" : "normal"
    });
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs
  init_define_process();
  init_define_process_env();
  var featureTests = {
    waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate")
  };
  var results = {};
  var supports = {};
  for (const key in featureTests) {
    supports[key] = () => {
      if (results[key] === void 0)
        results[key] = featureTests[key]();
      return results[key];
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
  init_define_process();
  init_define_process_env();
  function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }) {
    const index = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes2.length - 1;
    return keyframes2[index];
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/ease.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
  init_define_process();
  init_define_process_env();
  var calcBezier = (t3, a1, a22) => (((1 - 3 * a22 + 3 * a1) * t3 + (3 * a22 - 6 * a1)) * t3 + 3 * a1) * t3;
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 12;
  function binarySubdivide(x3, lowerBound, upperBound, mX1, mX2) {
    let currentX;
    let currentT;
    let i4 = 0;
    do {
      currentT = lowerBound + (upperBound - lowerBound) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - x3;
      if (currentX > 0) {
        upperBound = currentT;
      } else {
        lowerBound = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i4 < subdivisionMaxIterations);
    return currentT;
  }
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return noop4;
    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
    return (t3) => t3 === 0 || t3 === 1 ? t3 : calcBezier(getTForX(t3), mY1, mY2);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/ease.mjs
  var easeIn = cubicBezier(0.42, 0, 1, 1);
  var easeOut = cubicBezier(0, 0, 0.58, 1);
  var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
  init_define_process();
  init_define_process_env();
  var isEasingArray = (ease2) => {
    return Array.isArray(ease2) && typeof ease2[0] !== "number";
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/map.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/circ.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
  init_define_process();
  init_define_process_env();
  var mirrorEasing = (easing) => (p4) => p4 <= 0.5 ? easing(2 * p4) / 2 : (2 - easing(2 * (1 - p4))) / 2;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
  init_define_process();
  init_define_process_env();
  var reverseEasing = (easing) => (p4) => 1 - easing(1 - p4);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/circ.mjs
  var circIn = (p4) => 1 - Math.sin(Math.acos(p4));
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circOut);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/back.mjs
  init_define_process();
  init_define_process_env();
  var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
  var backIn = reverseEasing(backOut);
  var backInOut = mirrorEasing(backIn);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/anticipate.mjs
  init_define_process();
  init_define_process_env();
  var anticipate = (p4) => (p4 *= 2) < 1 ? 0.5 * backIn(p4) : 0.5 * (2 - Math.pow(2, -10 * (p4 - 1)));

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/map.mjs
  var easingLookup = {
    linear: noop4,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate
  };
  var easingDefinitionToFunction = (definition) => {
    if (Array.isArray(definition)) {
      invariant2(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
      const [x1, y1, x22, y22] = definition;
      return cubicBezier(x1, y1, x22, y22);
    } else if (typeof definition === "string") {
      invariant2(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
      return easingLookup[definition];
    }
    return definition;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/interpolate.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hex.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/utils.mjs
  init_define_process();
  init_define_process_env();
  var isColorString = (type, testProp) => (v5) => {
    return Boolean(isString2(v5) && singleColorRegex.test(v5) && v5.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v5, testProp));
  };
  var splitColor = (aName, bName, cName) => (v5) => {
    if (!isString2(v5))
      return v5;
    const [a4, b5, c4, alpha2] = v5.match(floatRegex);
    return {
      [aName]: parseFloat(a4),
      [bName]: parseFloat(b5),
      [cName]: parseFloat(c4),
      alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
    };
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
  var clampRgbUnit = (v5) => clamp3(0, 255, v5);
  var rgbUnit = {
    ...number,
    transform: (v5) => Math.round(clampRgbUnit(v5))
  };
  var rgba2 = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: ({ red: red2, green: green2, blue: blue2, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red2) + ", " + rgbUnit.transform(green2) + ", " + rgbUnit.transform(blue2) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hex.mjs
  function parseHex(v5) {
    let r3 = "";
    let g4 = "";
    let b5 = "";
    let a4 = "";
    if (v5.length > 5) {
      r3 = v5.substring(1, 3);
      g4 = v5.substring(3, 5);
      b5 = v5.substring(5, 7);
      a4 = v5.substring(7, 9);
    } else {
      r3 = v5.substring(1, 2);
      g4 = v5.substring(2, 3);
      b5 = v5.substring(3, 4);
      a4 = v5.substring(4, 5);
      r3 += r3;
      g4 += g4;
      b5 += b5;
      a4 += a4;
    }
    return {
      red: parseInt(r3, 16),
      green: parseInt(g4, 16),
      blue: parseInt(b5, 16),
      alpha: a4 ? parseInt(a4, 16) / 255 : 1
    };
  }
  var hex2 = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba2.transform
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
  init_define_process();
  init_define_process_env();
  var hsla2 = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
      return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/index.mjs
  var color2 = {
    test: (v5) => rgba2.test(v5) || hex2.test(v5) || hsla2.test(v5),
    parse: (v5) => {
      if (rgba2.test(v5)) {
        return rgba2.parse(v5);
      } else if (hsla2.test(v5)) {
        return hsla2.parse(v5);
      } else {
        return hex2.parse(v5);
      }
    },
    transform: (v5) => {
      return isString2(v5) ? v5 : v5.hasOwnProperty("red") ? rgba2.transform(v5) : hsla2.transform(v5);
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix.mjs
  init_define_process();
  init_define_process_env();
  var mix = (from2, to, progress2) => -progress2 * from2 + progress2 * to + from2;

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix-color.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
  init_define_process();
  init_define_process_env();
  function hueToRgb(p4, q, t3) {
    if (t3 < 0)
      t3 += 1;
    if (t3 > 1)
      t3 -= 1;
    if (t3 < 1 / 6)
      return p4 + (q - p4) * 6 * t3;
    if (t3 < 1 / 2)
      return q;
    if (t3 < 2 / 3)
      return p4 + (q - p4) * (2 / 3 - t3) * 6;
    return p4;
  }
  function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
    hue /= 360;
    saturation /= 100;
    lightness /= 100;
    let red2 = 0;
    let green2 = 0;
    let blue2 = 0;
    if (!saturation) {
      red2 = green2 = blue2 = lightness;
    } else {
      const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
      const p4 = 2 * lightness - q;
      red2 = hueToRgb(p4, q, hue + 1 / 3);
      green2 = hueToRgb(p4, q, hue);
      blue2 = hueToRgb(p4, q, hue - 1 / 3);
    }
    return {
      red: Math.round(red2 * 255),
      green: Math.round(green2 * 255),
      blue: Math.round(blue2 * 255),
      alpha: alpha2
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix-color.mjs
  var mixLinearColor = (from2, to, v5) => {
    const fromExpo = from2 * from2;
    return Math.sqrt(Math.max(0, v5 * (to * to - fromExpo) + fromExpo));
  };
  var colorTypes = [hex2, rgba2, hsla2];
  var getColorType = (v5) => colorTypes.find((type) => type.test(v5));
  function asRGBA(color3) {
    const type = getColorType(color3);
    invariant2(Boolean(type), `'${color3}' is not an animatable color. Use the equivalent color code instead.`);
    let model = type.parse(color3);
    if (type === hsla2) {
      model = hslaToRgba(model);
    }
    return model;
  }
  var mixColor = (from2, to) => {
    const fromRGBA = asRGBA(from2);
    const toRGBA = asRGBA(to);
    const blended = { ...fromRGBA };
    return (v5) => {
      blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v5);
      blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v5);
      blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v5);
      blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v5);
      return rgba2.transform(blended);
    };
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix-complex.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/index.mjs
  init_define_process();
  init_define_process_env();
  function test(v5) {
    var _a, _b;
    return isNaN(v5) && isString2(v5) && (((_a = v5.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v5.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
  }
  var cssVarTokeniser = {
    regex: cssVariableRegex,
    countKey: "Vars",
    token: "${v}",
    parse: noop4
  };
  var colorTokeniser = {
    regex: colorRegex,
    countKey: "Colors",
    token: "${c}",
    parse: color2.parse
  };
  var numberTokeniser = {
    regex: floatRegex,
    countKey: "Numbers",
    token: "${n}",
    parse: number.parse
  };
  function tokenise(info, { regex: regex2, countKey, token: token2, parse: parse2 }) {
    const matches = info.tokenised.match(regex2);
    if (!matches)
      return;
    info["num" + countKey] = matches.length;
    info.tokenised = info.tokenised.replace(regex2, token2);
    info.values.push(...matches.map(parse2));
  }
  function analyseComplexValue(value) {
    const originalValue = value.toString();
    const info = {
      value: originalValue,
      tokenised: originalValue,
      values: [],
      numVars: 0,
      numColors: 0,
      numNumbers: 0
    };
    if (info.value.includes("var(--"))
      tokenise(info, cssVarTokeniser);
    tokenise(info, colorTokeniser);
    tokenise(info, numberTokeniser);
    return info;
  }
  function parseComplexValue(v5) {
    return analyseComplexValue(v5).values;
  }
  function createTransformer(source) {
    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
    const numValues = values.length;
    return (v5) => {
      let output = tokenised;
      for (let i4 = 0; i4 < numValues; i4++) {
        if (i4 < numVars) {
          output = output.replace(cssVarTokeniser.token, v5[i4]);
        } else if (i4 < numVars + numColors) {
          output = output.replace(colorTokeniser.token, color2.transform(v5[i4]));
        } else {
          output = output.replace(numberTokeniser.token, sanitize(v5[i4]));
        }
      }
      return output;
    };
  }
  var convertNumbersToZero = (v5) => typeof v5 === "number" ? 0 : v5;
  function getAnimatableNone(v5) {
    const parsed = parseComplexValue(v5);
    const transformer = createTransformer(v5);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = {
    test,
    parse: parseComplexValue,
    createTransformer,
    getAnimatableNone
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/mix-complex.mjs
  var mixImmediate = (origin, target) => (p4) => `${p4 > 0 ? target : origin}`;
  function getMixer(origin, target) {
    if (typeof origin === "number") {
      return (v5) => mix(origin, target, v5);
    } else if (color2.test(origin)) {
      return mixColor(origin, target);
    } else {
      return origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
    }
  }
  var mixArray = (from2, to) => {
    const output = [...from2];
    const numValues = output.length;
    const blendValue = from2.map((fromThis, i4) => getMixer(fromThis, to[i4]));
    return (v5) => {
      for (let i4 = 0; i4 < numValues; i4++) {
        output[i4] = blendValue[i4](v5);
      }
      return output;
    };
  };
  var mixObject = (origin, target) => {
    const output = { ...origin, ...target };
    const blendValue = {};
    for (const key in output) {
      if (origin[key] !== void 0 && target[key] !== void 0) {
        blendValue[key] = getMixer(origin[key], target[key]);
      }
    }
    return (v5) => {
      for (const key in blendValue) {
        output[key] = blendValue[key](v5);
      }
      return output;
    };
  };
  var mixComplex = (origin, target) => {
    const template = complex.createTransformer(target);
    const originStats = analyseComplexValue(origin);
    const targetStats = analyseComplexValue(target);
    const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
    if (canInterpolate) {
      return pipe2(mixArray(originStats.values, targetStats.values), template);
    } else {
      warning2(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
      return mixImmediate(origin, target);
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/progress.mjs
  init_define_process();
  init_define_process_env();
  var progress = (from2, to, value) => {
    const toFromDifference = to - from2;
    return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/interpolate.mjs
  var mixNumber = (from2, to) => (p4) => mix(from2, to, p4);
  function detectMixerFactory(v5) {
    if (typeof v5 === "number") {
      return mixNumber;
    } else if (typeof v5 === "string") {
      return color2.test(v5) ? mixColor : mixComplex;
    } else if (Array.isArray(v5)) {
      return mixArray;
    } else if (typeof v5 === "object") {
      return mixObject;
    }
    return mixNumber;
  }
  function createMixers(output, ease2, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || detectMixerFactory(output[0]);
    const numMixers = output.length - 1;
    for (let i4 = 0; i4 < numMixers; i4++) {
      let mixer = mixerFactory(output[i4], output[i4 + 1]);
      if (ease2) {
        const easingFunction = Array.isArray(ease2) ? ease2[i4] || noop4 : ease2;
        mixer = pipe2(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
    const inputLength = input.length;
    invariant2(inputLength === output.length, "Both input and output ranges must be the same length");
    if (inputLength === 1)
      return () => output[0];
    if (input[0] > input[inputLength - 1]) {
      input = [...input].reverse();
      output = [...output].reverse();
    }
    const mixers = createMixers(output, ease2, mixer);
    const numMixers = mixers.length;
    const interpolator = (v5) => {
      let i4 = 0;
      if (numMixers > 1) {
        for (; i4 < input.length - 2; i4++) {
          if (v5 < input[i4 + 1])
            break;
        }
      }
      const progressInRange = progress(input[i4], input[i4 + 1], v5);
      return mixers[i4](progressInRange);
    };
    return isClamp ? (v5) => interpolator(clamp3(input[0], input[inputLength - 1], v5)) : interpolator;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/default.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
  init_define_process();
  init_define_process_env();
  function fillOffset(offset2, remaining) {
    const min = offset2[offset2.length - 1];
    for (let i4 = 1; i4 <= remaining; i4++) {
      const offsetProgress = progress(0, remaining, i4);
      offset2.push(mix(min, 1, offsetProgress));
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/default.mjs
  function defaultOffset(arr) {
    const offset2 = [0];
    fillOffset(offset2, arr.length - 1);
    return offset2;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/time.mjs
  init_define_process();
  init_define_process_env();
  function convertOffsetToTimes(offset2, duration) {
    return offset2.map((o4) => o4 * duration);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
  function defaultEasing(values, easing) {
    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
  }
  function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
    const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
    const state = {
      done: false,
      value: keyframeValues[0]
    };
    const absoluteTimes = convertOffsetToTimes(
      // Only use the provided offsets if they're the correct length
      // TODO Maybe we should warn here if there's a length mismatch
      times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
      duration
    );
    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
    });
    return {
      calculatedDuration: duration,
      next: (t3) => {
        state.value = mapTimeToKeyframe(t3);
        state.done = t3 >= duration;
        return state;
      }
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
  init_define_process();
  init_define_process_env();
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
  var velocitySampleDuration = 5;
  function calcGeneratorVelocity(resolveValue, t3, current) {
    const prevT = Math.max(t3 - velocitySampleDuration, 0);
    return velocityPerSecond(current - resolveValue(prevT), t3 - prevT);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
  init_define_process();
  init_define_process_env();
  var safeMin = 1e-3;
  var minDuration = 0.01;
  var maxDuration = 10;
  var minDamping = 0.05;
  var maxDamping = 1;
  function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
    let envelope;
    let derivative;
    warning2(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    dampingRatio = clamp3(minDamping, maxDamping, dampingRatio);
    duration = clamp3(minDuration, maxDuration, millisecondsToSeconds(duration));
    if (dampingRatio < 1) {
      envelope = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const a4 = exponentialDecay - velocity;
        const b5 = calcAngularFreq(undampedFreq2, dampingRatio);
        const c4 = Math.exp(-delta);
        return safeMin - a4 / b5 * c4;
      };
      derivative = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const d4 = delta * velocity + velocity;
        const e3 = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
        const f5 = Math.exp(-delta);
        const g4 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d4 - e3) * f5) / g4;
      };
    } else {
      envelope = (undampedFreq2) => {
        const a4 = Math.exp(-undampedFreq2 * duration);
        const b5 = (undampedFreq2 - velocity) * duration + 1;
        return -safeMin + a4 * b5;
      };
      derivative = (undampedFreq2) => {
        const a4 = Math.exp(-undampedFreq2 * duration);
        const b5 = (velocity - undampedFreq2) * (duration * duration);
        return a4 * b5;
      };
    }
    const initialGuess = 5 / duration;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = secondsToMilliseconds(duration);
    if (isNaN(undampedFreq)) {
      return {
        stiffness: 100,
        damping: 10,
        duration
      };
    } else {
      const stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for (let i4 = 1; i4 < rootIterations; i4++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys) {
    return keys.some((key) => options[key] !== void 0);
  }
  function getSpringOptions(options) {
    let springOptions = {
      velocity: 0,
      stiffness: 100,
      damping: 10,
      mass: 1,
      isResolvedFromDuration: false,
      ...options
    };
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
      const derived = findSpring(options);
      springOptions = {
        ...springOptions,
        ...derived,
        velocity: 0,
        mass: 1
      };
      springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
  }
  function spring({ keyframes: keyframes2, restDelta, restSpeed, ...options }) {
    const origin = keyframes2[0];
    const target = keyframes2[keyframes2.length - 1];
    const state = { done: false, value: origin };
    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const initialDelta = target - origin;
    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
    const isGranularScale = Math.abs(initialDelta) < 5;
    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
    restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
    let resolveSpring;
    if (dampingRatio < 1) {
      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = (t3) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t3) + initialDelta * Math.cos(angularFreq * t3));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = (t3) => target - Math.exp(-undampedAngularFreq * t3) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t3);
    } else {
      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = (t3) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
        const freqForT = Math.min(dampedAngularFreq * t3, 300);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
      };
    }
    return {
      calculatedDuration: isResolvedFromDuration ? duration || null : null,
      next: (t3) => {
        const current = resolveSpring(t3);
        if (!isResolvedFromDuration) {
          let currentVelocity = initialVelocity;
          if (t3 !== 0) {
            if (dampingRatio < 1) {
              currentVelocity = calcGeneratorVelocity(resolveSpring, t3, current);
            } else {
              currentVelocity = 0;
            }
          }
          const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
          state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state.done = t3 >= duration;
        }
        state.value = state.done ? target : current;
        return state;
      }
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
  init_define_process();
  init_define_process_env();
  function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
    const origin = keyframes2[0];
    const state = {
      done: false,
      value: origin
    };
    const isOutOfBounds = (v5) => min !== void 0 && v5 < min || max !== void 0 && v5 > max;
    const nearestBoundary = (v5) => {
      if (min === void 0)
        return max;
      if (max === void 0)
        return min;
      return Math.abs(min - v5) < Math.abs(max - v5) ? min : max;
    };
    let amplitude = power * velocity;
    const ideal = origin + amplitude;
    const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target !== ideal)
      amplitude = target - origin;
    const calcDelta = (t3) => -amplitude * Math.exp(-t3 / timeConstant);
    const calcLatest = (t3) => target + calcDelta(t3);
    const applyFriction = (t3) => {
      const delta = calcDelta(t3);
      const latest = calcLatest(t3);
      state.done = Math.abs(delta) <= restDelta;
      state.value = state.done ? target : latest;
    };
    let timeReachedBoundary;
    let spring$1;
    const checkCatchBoundary = (t3) => {
      if (!isOutOfBounds(state.value))
        return;
      timeReachedBoundary = t3;
      spring$1 = spring({
        keyframes: [state.value, nearestBoundary(state.value)],
        velocity: calcGeneratorVelocity(calcLatest, t3, state.value),
        damping: bounceDamping,
        stiffness: bounceStiffness,
        restDelta,
        restSpeed
      });
    };
    checkCatchBoundary(0);
    return {
      calculatedDuration: null,
      next: (t3) => {
        let hasUpdatedFrame = false;
        if (!spring$1 && timeReachedBoundary === void 0) {
          hasUpdatedFrame = true;
          applyFriction(t3);
          checkCatchBoundary(t3);
        }
        if (timeReachedBoundary !== void 0 && t3 > timeReachedBoundary) {
          return spring$1.next(t3 - timeReachedBoundary);
        } else {
          !hasUpdatedFrame && applyFriction(t3);
          return state;
        }
      }
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
  init_define_process();
  init_define_process_env();
  var frameloopDriver = (update) => {
    const passTimestamp = ({ timestamp }) => update(timestamp);
    return {
      start: () => frame2.update(passTimestamp, true),
      stop: () => cancelFrame(passTimestamp),
      /**
       * If we're processing this frame we can use the
       * framelocked timestamp to keep things in sync.
       */
      now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
    };
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
  init_define_process();
  init_define_process_env();
  var maxGeneratorDuration = 2e4;
  function calcGeneratorDuration(generator) {
    let duration = 0;
    const timeStep = 50;
    let state = generator.next(duration);
    while (!state.done && duration < maxGeneratorDuration) {
      duration += timeStep;
      state = generator.next(duration);
    }
    return duration >= maxGeneratorDuration ? Infinity : duration;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
  var types = {
    decay: inertia,
    inertia,
    tween: keyframes,
    keyframes,
    spring
  };
  function animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
    let speed = 1;
    let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    const updateFinishedPromise = () => {
      resolveFinishedPromise && resolveFinishedPromise();
      currentFinishedPromise = new Promise((resolve) => {
        resolveFinishedPromise = resolve;
      });
    };
    updateFinishedPromise();
    let animationDriver;
    const generatorFactory = types[type] || keyframes;
    let mapNumbersToKeyframes;
    if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
      mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
        clamp: false
      });
      keyframes$1 = [0, 100];
    }
    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
    let mirroredGenerator;
    if (repeatType === "mirror") {
      mirroredGenerator = generatorFactory({
        ...options,
        keyframes: [...keyframes$1].reverse(),
        velocity: -(options.velocity || 0)
      });
    }
    let playState = "idle";
    let holdTime = null;
    let startTime = null;
    let cancelTime = null;
    if (generator.calculatedDuration === null && repeat) {
      generator.calculatedDuration = calcGeneratorDuration(generator);
    }
    const { calculatedDuration } = generator;
    let resolvedDuration = Infinity;
    let totalDuration = Infinity;
    if (calculatedDuration !== null) {
      resolvedDuration = calculatedDuration + repeatDelay;
      totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
    }
    let currentTime = 0;
    const tick = (timestamp) => {
      if (startTime === null)
        return;
      if (speed > 0)
        startTime = Math.min(startTime, timestamp);
      if (holdTime !== null) {
        currentTime = holdTime;
      } else {
        currentTime = (timestamp - startTime) * speed;
      }
      const timeWithoutDelay = currentTime - delay;
      const isInDelayPhase = timeWithoutDelay < 0;
      currentTime = Math.max(timeWithoutDelay, 0);
      if (playState === "finished" && holdTime === null) {
        currentTime = totalDuration;
      }
      let elapsed = currentTime;
      let frameGenerator = generator;
      if (repeat) {
        const progress2 = currentTime / resolvedDuration;
        let currentIteration = Math.floor(progress2);
        let iterationProgress = progress2 % 1;
        if (!iterationProgress && progress2 >= 1) {
          iterationProgress = 1;
        }
        iterationProgress === 1 && currentIteration--;
        currentIteration = Math.min(currentIteration, repeat + 1);
        const iterationIsOdd = Boolean(currentIteration % 2);
        if (iterationIsOdd) {
          if (repeatType === "reverse") {
            iterationProgress = 1 - iterationProgress;
            if (repeatDelay) {
              iterationProgress -= repeatDelay / resolvedDuration;
            }
          } else if (repeatType === "mirror") {
            frameGenerator = mirroredGenerator;
          }
        }
        let p4 = clamp3(0, 1, iterationProgress);
        if (currentTime > totalDuration) {
          p4 = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
        }
        elapsed = p4 * resolvedDuration;
      }
      const state = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
      if (mapNumbersToKeyframes) {
        state.value = mapNumbersToKeyframes(state.value);
      }
      let { done } = state;
      if (!isInDelayPhase && calculatedDuration !== null) {
        done = currentTime >= totalDuration;
      }
      const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done || speed < 0 && currentTime <= 0);
      if (onUpdate) {
        onUpdate(state.value);
      }
      if (isAnimationFinished) {
        finish();
      }
      return state;
    };
    const stopAnimationDriver = () => {
      animationDriver && animationDriver.stop();
      animationDriver = void 0;
    };
    const cancel = () => {
      playState = "idle";
      stopAnimationDriver();
      updateFinishedPromise();
      startTime = cancelTime = null;
    };
    const finish = () => {
      playState = "finished";
      onComplete && onComplete();
      stopAnimationDriver();
      updateFinishedPromise();
    };
    const play = () => {
      if (hasStopped)
        return;
      if (!animationDriver)
        animationDriver = driver(tick);
      const now2 = animationDriver.now();
      onPlay && onPlay();
      if (holdTime !== null) {
        startTime = now2 - holdTime;
      } else if (!startTime || playState === "finished") {
        startTime = now2;
      }
      cancelTime = startTime;
      holdTime = null;
      playState = "running";
      animationDriver.start();
    };
    if (autoplay) {
      play();
    }
    const controls = {
      then(resolve, reject) {
        return currentFinishedPromise.then(resolve, reject);
      },
      get time() {
        return millisecondsToSeconds(currentTime);
      },
      set time(newTime) {
        newTime = secondsToMilliseconds(newTime);
        currentTime = newTime;
        if (holdTime !== null || !animationDriver || speed === 0) {
          holdTime = newTime;
        } else {
          startTime = animationDriver.now() - newTime / speed;
        }
      },
      get duration() {
        const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
        return millisecondsToSeconds(duration);
      },
      get speed() {
        return speed;
      },
      set speed(newSpeed) {
        if (newSpeed === speed || !animationDriver)
          return;
        speed = newSpeed;
        controls.time = millisecondsToSeconds(currentTime);
      },
      get state() {
        return playState;
      },
      play,
      pause: () => {
        playState = "paused";
        holdTime = currentTime;
      },
      stop: () => {
        hasStopped = true;
        if (playState === "idle")
          return;
        playState = "idle";
        onStop && onStop();
        cancel();
      },
      cancel: () => {
        if (cancelTime !== null)
          tick(cancelTime);
        cancel();
      },
      complete: () => {
        playState = "finished";
      },
      sample: (elapsed) => {
        startTime = 0;
        return tick(elapsed);
      }
    };
    return controls;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
  var acceleratedValues = /* @__PURE__ */ new Set([
    "opacity",
    "clipPath",
    "filter",
    "transform",
    "backgroundColor"
  ]);
  var sampleDelta = 10;
  var maxDuration2 = 2e4;
  var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
  function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
    const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
    if (!canAccelerateAnimation)
      return false;
    let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    const updateFinishedPromise = () => {
      currentFinishedPromise = new Promise((resolve) => {
        resolveFinishedPromise = resolve;
      });
    };
    updateFinishedPromise();
    let { keyframes: keyframes2, duration = 300, ease: ease2, times } = options;
    if (requiresPregeneratedKeyframes(valueName, options)) {
      const sampleAnimation = animateValue({
        ...options,
        repeat: 0,
        delay: 0
      });
      let state = { done: false, value: keyframes2[0] };
      const pregeneratedKeyframes = [];
      let t3 = 0;
      while (!state.done && t3 < maxDuration2) {
        state = sampleAnimation.sample(t3);
        pregeneratedKeyframes.push(state.value);
        t3 += sampleDelta;
      }
      times = void 0;
      keyframes2 = pregeneratedKeyframes;
      duration = t3 - sampleDelta;
      ease2 = "linear";
    }
    const animation = animateStyle(value.owner.current, valueName, keyframes2, {
      ...options,
      duration,
      /**
       * This function is currently not called if ease is provided
       * as a function so the cast is safe.
       *
       * However it would be possible for a future refinement to port
       * in easing pregeneration from Motion One for browsers that
       * support the upcoming `linear()` easing function.
       */
      ease: ease2,
      times
    });
    const cancelAnimation = () => animation.cancel();
    const safeCancel = () => {
      frame2.update(cancelAnimation);
      resolveFinishedPromise();
      updateFinishedPromise();
    };
    animation.onfinish = () => {
      value.set(getFinalKeyframe(keyframes2, options));
      onComplete && onComplete();
      safeCancel();
    };
    return {
      then(resolve, reject) {
        return currentFinishedPromise.then(resolve, reject);
      },
      get time() {
        return millisecondsToSeconds(animation.currentTime || 0);
      },
      set time(newTime) {
        animation.currentTime = secondsToMilliseconds(newTime);
      },
      get speed() {
        return animation.playbackRate;
      },
      set speed(newSpeed) {
        animation.playbackRate = newSpeed;
      },
      get duration() {
        return millisecondsToSeconds(duration);
      },
      play: () => {
        if (hasStopped)
          return;
        animation.play();
        cancelFrame(cancelAnimation);
      },
      pause: () => animation.pause(),
      stop: () => {
        hasStopped = true;
        if (animation.playState === "idle")
          return;
        const { currentTime } = animation;
        if (currentTime) {
          const sampleAnimation = animateValue({
            ...options,
            autoplay: false
          });
          value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
        }
        safeCancel();
      },
      complete: () => animation.finish(),
      cancel: safeCancel
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/instant.mjs
  init_define_process();
  init_define_process_env();
  function createInstantAnimation({ keyframes: keyframes2, delay, onUpdate, onComplete }) {
    const setValue = () => {
      onUpdate && onUpdate(keyframes2[keyframes2.length - 1]);
      onComplete && onComplete();
      return {
        time: 0,
        speed: 1,
        duration: 0,
        play: noop4,
        pause: noop4,
        stop: noop4,
        then: (resolve) => {
          resolve();
          return Promise.resolve();
        },
        cancel: noop4,
        complete: noop4
      };
    };
    return delay ? animateValue({
      keyframes: [0, 1],
      duration: 0,
      delay,
      onComplete: setValue
    }) : setValue();
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  init_define_process();
  init_define_process_env();
  var underDampedSpring = {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
  };
  var criticallyDampedSpring = (target) => ({
    type: "spring",
    stiffness: 550,
    damping: target === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
  });
  var keyframesTransition = {
    type: "keyframes",
    duration: 0.8
  };
  var ease = {
    type: "keyframes",
    ease: [0.25, 0.1, 0.35, 1],
    duration: 0.3
  };
  var getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => {
    if (keyframes2.length > 2) {
      return keyframesTransition;
    } else if (transformProps.has(valueKey)) {
      return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring;
    }
    return ease;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  init_define_process();
  init_define_process_env();
  var isAnimatable = (key, value) => {
    if (key === "zIndex")
      return false;
    if (typeof value === "number" || Array.isArray(value))
      return true;
    if (typeof value === "string" && // It's animatable if we have a string
    complex.test(value) && // And it contains numbers and/or colors
    !value.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
  init_define_process();
  init_define_process_env();
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v5) {
    const [name, value] = v5.slice(0, -1).split("(");
    if (name === "drop-shadow")
      return v5;
    const [number2] = value.match(floatRegex) || [];
    if (!number2)
      return v5;
    const unit = value.replace(number2, "");
    let defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number2 !== value)
      defaultValue *= 100;
    return name + "(" + defaultValue + unit + ")";
  }
  var functionRegex = /([a-z-]*)\(.*?\)/g;
  var filter2 = {
    ...complex,
    getAnimatableNone: (v5) => {
      const functions = v5.match(functionRegex);
      return functions ? functions.map(applyDefaultFilter).join(" ") : v5;
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  init_define_process();
  init_define_process_env();
  var defaultValueTypes = {
    ...numberValueTypes,
    // Color props
    color: color2,
    backgroundColor: color2,
    outlineColor: color2,
    fill: color2,
    stroke: color2,
    // Border props
    borderColor: color2,
    borderTopColor: color2,
    borderRightColor: color2,
    borderBottomColor: color2,
    borderLeftColor: color2,
    filter: filter2,
    WebkitFilter: filter2
  };
  var getDefaultValueType = (key) => defaultValueTypes[key];

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  function getAnimatableNone2(key, value) {
    let defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter2)
      defaultValueType = complex;
    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
  init_define_process();
  init_define_process_env();
  function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from: from2, elapsed, ...transition4 }) {
    return !!Object.keys(transition4).length;
  }
  function isZero(value) {
    return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
  }
  function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
  }
  function getValueTransition(transition4, key) {
    return transition4[key] || transition4["default"] || transition4;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/wildcards.mjs
  init_define_process();
  init_define_process_env();
  function fillWildcardKeyframes(origin, [...keyframes2]) {
    for (let i4 = 0; i4 < keyframes2.length; i4++) {
      if (keyframes2[i4] === null) {
        keyframes2[i4] = i4 === 0 ? origin : keyframes2[i4 - 1];
      }
    }
    return keyframes2;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
  function getKeyframes(value, valueName, target, transition4) {
    const isTargetAnimatable = isAnimatable(valueName, target);
    let origin = transition4.from !== void 0 ? transition4.from : value.get();
    if (origin === "none" && isTargetAnimatable && typeof target === "string") {
      origin = getAnimatableNone2(valueName, target);
    } else if (isZero(origin) && typeof target === "string") {
      origin = getZeroUnit(target);
    } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
      target = getZeroUnit(origin);
    }
    if (Array.isArray(target)) {
      return fillWildcardKeyframes(origin, target);
    } else {
      return [origin, target];
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
  var animateMotionValue = (valueName, value, target, transition4 = {}) => {
    return (onComplete) => {
      const valueTransition = getValueTransition(transition4, valueName) || {};
      const delay = valueTransition.delay || transition4.delay || 0;
      let { elapsed = 0 } = transition4;
      elapsed = elapsed - secondsToMilliseconds(delay);
      const keyframes2 = getKeyframes(value, valueName, target, valueTransition);
      const originKeyframe = keyframes2[0];
      const targetKeyframe = keyframes2[keyframes2.length - 1];
      const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
      const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
      warning2(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
      let options = {
        keyframes: keyframes2,
        velocity: value.getVelocity(),
        ease: "easeOut",
        ...valueTransition,
        delay: -elapsed,
        onUpdate: (v5) => {
          value.set(v5);
          valueTransition.onUpdate && valueTransition.onUpdate(v5);
        },
        onComplete: () => {
          onComplete();
          valueTransition.onComplete && valueTransition.onComplete();
        }
      };
      if (!isTransitionDefined(valueTransition)) {
        options = {
          ...options,
          ...getDefaultTransition(valueName, options)
        };
      }
      if (options.duration) {
        options.duration = secondsToMilliseconds(options.duration);
      }
      if (options.repeatDelay) {
        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
      }
      if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {
        return createInstantAnimation(options);
      }
      if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
        const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
        if (acceleratedAnimation)
          return acceleratedAnimation;
      }
      return animateValue(options);
    };
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
  init_define_process();
  init_define_process_env();
  function isWillChangeMotionValue(value) {
    return Boolean(isMotionValue(value) && value.add);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/setters.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  init_define_process();
  init_define_process_env();
  var isNumericalString = (v5) => /^\-?\d*\.?\d+$/.test(v5);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  init_define_process();
  init_define_process_env();
  var isZeroValueString = (v5) => /^0[^.\s]+$/.test(v5);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/array.mjs
  init_define_process();
  init_define_process_env();
  function addUniqueItem(arr, item) {
    if (arr.indexOf(item) === -1)
      arr.push(item);
  }
  function removeItem(arr, item) {
    const index = arr.indexOf(item);
    if (index > -1)
      arr.splice(index, 1);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  var SubscriptionManager = class {
    constructor() {
      this.subscriptions = [];
    }
    add(handler) {
      addUniqueItem(this.subscriptions, handler);
      return () => removeItem(this.subscriptions, handler);
    }
    notify(a4, b5, c4) {
      const numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a4, b5, c4);
      } else {
        for (let i4 = 0; i4 < numSubscriptions; i4++) {
          const handler = this.subscriptions[i4];
          handler && handler(a4, b5, c4);
        }
      }
    }
    getSize() {
      return this.subscriptions.length;
    }
    clear() {
      this.subscriptions.length = 0;
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/warn-once.mjs
  init_define_process();
  init_define_process_env();
  var warned = /* @__PURE__ */ new Set();
  function warnOnce(condition, message, element) {
    if (condition || warned.has(message))
      return;
    console.warn(message);
    if (element)
      console.warn(element);
    warned.add(message);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/index.mjs
  var isFloat = (value) => {
    return !isNaN(parseFloat(value));
  };
  var MotionValue = class {
    /**
     * @param init - The initiating value
     * @param config - Optional configuration options
     *
     * -  `transformer`: A function to transform incoming values with.
     *
     * @internal
     */
    constructor(init2, options = {}) {
      this.version = "10.12.4";
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.canTrackVelocity = false;
      this.events = {};
      this.updateAndNotify = (v5, render = true) => {
        this.prev = this.current;
        this.current = v5;
        const { delta, timestamp } = frameData;
        if (this.lastUpdated !== timestamp) {
          this.timeDelta = delta;
          this.lastUpdated = timestamp;
          frame2.postRender(this.scheduleVelocityCheck);
        }
        if (this.prev !== this.current && this.events.change) {
          this.events.change.notify(this.current);
        }
        if (this.events.velocityChange) {
          this.events.velocityChange.notify(this.getVelocity());
        }
        if (render && this.events.renderRequest) {
          this.events.renderRequest.notify(this.current);
        }
      };
      this.scheduleVelocityCheck = () => frame2.postRender(this.velocityCheck);
      this.velocityCheck = ({ timestamp }) => {
        if (timestamp !== this.lastUpdated) {
          this.prev = this.current;
          if (this.events.velocityChange) {
            this.events.velocityChange.notify(this.getVelocity());
          }
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init2;
      this.canTrackVelocity = isFloat(this.current);
      this.owner = options.owner;
    }
    /**
     * Adds a function that will be notified when the `MotionValue` is updated.
     *
     * It returns a function that, when called, will cancel the subscription.
     *
     * When calling `onChange` inside a React component, it should be wrapped with the
     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
     * from the `useEffect` function to ensure you don't add duplicate subscribers..
     *
     * ```jsx
     * export const MyComponent = () => {
     *   const x = useMotionValue(0)
     *   const y = useMotionValue(0)
     *   const opacity = useMotionValue(1)
     *
     *   useEffect(() => {
     *     function updateOpacity() {
     *       const maxXY = Math.max(x.get(), y.get())
     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
     *       opacity.set(newOpacity)
     *     }
     *
     *     const unsubscribeX = x.on("change", updateOpacity)
     *     const unsubscribeY = y.on("change", updateOpacity)
     *
     *     return () => {
     *       unsubscribeX()
     *       unsubscribeY()
     *     }
     *   }, [])
     *
     *   return <motion.div style={{ x }} />
     * }
     * ```
     *
     * @param subscriber - A function that receives the latest value.
     * @returns A function that, when called, will cancel this subscription.
     *
     * @deprecated
     */
    onChange(subscription) {
      if (true) {
        warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
      }
      return this.on("change", subscription);
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      const unsubscribe = this.events[eventName].add(callback);
      if (eventName === "change") {
        return () => {
          unsubscribe();
          frame2.read(() => {
            if (!this.events.change.getSize()) {
              this.stop();
            }
          });
        };
      }
      return unsubscribe;
    }
    clearListeners() {
      for (const eventManagers in this.events) {
        this.events[eventManagers].clear();
      }
    }
    /**
     * Attaches a passive effect to the `MotionValue`.
     *
     * @internal
     */
    attach(passiveEffect, stopPassiveEffect) {
      this.passiveEffect = passiveEffect;
      this.stopPassiveEffect = stopPassiveEffect;
    }
    /**
     * Sets the state of the `MotionValue`.
     *
     * @remarks
     *
     * ```jsx
     * const x = useMotionValue(0)
     * x.set(10)
     * ```
     *
     * @param latest - Latest value to set.
     * @param render - Whether to notify render subscribers. Defaults to `true`
     *
     * @public
     */
    set(v5, render = true) {
      if (!render || !this.passiveEffect) {
        this.updateAndNotify(v5, render);
      } else {
        this.passiveEffect(v5, this.updateAndNotify);
      }
    }
    setWithVelocity(prev2, current, delta) {
      this.set(current);
      this.prev = prev2;
      this.timeDelta = delta;
    }
    /**
     * Set the state of the `MotionValue`, stopping any active animations,
     * effects, and resets velocity to `0`.
     */
    jump(v5) {
      this.updateAndNotify(v5);
      this.prev = v5;
      this.stop();
      if (this.stopPassiveEffect)
        this.stopPassiveEffect();
    }
    /**
     * Returns the latest state of `MotionValue`
     *
     * @returns - The latest state of `MotionValue`
     *
     * @public
     */
    get() {
      return this.current;
    }
    /**
     * @public
     */
    getPrevious() {
      return this.prev;
    }
    /**
     * Returns the latest velocity of `MotionValue`
     *
     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
     *
     * @public
     */
    getVelocity() {
      return this.canTrackVelocity ? (
        // These casts could be avoided if parseFloat would be typed better
        velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
      ) : 0;
    }
    /**
     * Registers a new animation to control this `MotionValue`. Only one
     * animation can drive a `MotionValue` at one time.
     *
     * ```jsx
     * value.start()
     * ```
     *
     * @param animation - A function that starts the provided animation
     *
     * @internal
     */
    start(startAnimation) {
      this.stop();
      return new Promise((resolve) => {
        this.hasAnimated = true;
        this.animation = startAnimation(resolve);
        if (this.events.animationStart) {
          this.events.animationStart.notify();
        }
      }).then(() => {
        if (this.events.animationComplete) {
          this.events.animationComplete.notify();
        }
        this.clearAnimation();
      });
    }
    /**
     * Stop the currently active animation.
     *
     * @public
     */
    stop() {
      if (this.animation) {
        this.animation.stop();
        if (this.events.animationCancel) {
          this.events.animationCancel.notify();
        }
      }
      this.clearAnimation();
    }
    /**
     * Returns `true` if this value is currently animating.
     *
     * @public
     */
    isAnimating() {
      return !!this.animation;
    }
    clearAnimation() {
      delete this.animation;
    }
    /**
     * Destroy and clean up subscribers to this `MotionValue`.
     *
     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
     * created a `MotionValue` via the `motionValue` function.
     *
     * @public
     */
    destroy() {
      this.clearListeners();
      this.stop();
      if (this.stopPassiveEffect) {
        this.stopPassiveEffect();
      }
    }
  };
  function motionValue(init2, options) {
    return new MotionValue(init2, options);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  init_define_process();
  init_define_process_env();
  var testValueType = (v5) => (type) => type.test(v5);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  init_define_process();
  init_define_process_env();
  var auto = {
    test: (v5) => v5 === "auto",
    parse: (v5) => v5
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  var dimensionValueTypes = [number, px, percent, degrees2, vw, vh, auto];
  var findDimensionValueType = (v5) => dimensionValueTypes.find(testValueType(v5));

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  var valueTypes = [...dimensionValueTypes, color2, complex];
  var findValueType = (v5) => valueTypes.find(testValueType(v5));

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/setters.mjs
  function setMotionValue(visualElement, key, value) {
    if (visualElement.hasValue(key)) {
      visualElement.getValue(key).set(value);
    } else {
      visualElement.addValue(key, motionValue(value));
    }
  }
  function setTarget(visualElement, definition) {
    const resolved = resolveVariant(visualElement, definition);
    let { transitionEnd = {}, transition: transition4 = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
    target = { ...target, ...transitionEnd };
    for (const key in target) {
      const value = resolveFinalValueInKeyframes(target[key]);
      setMotionValue(visualElement, key, value);
    }
  }
  function checkTargetForNewValues(visualElement, target, origin) {
    var _a, _b;
    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));
    const numNewValues = newValueKeys.length;
    if (!numNewValues)
      return;
    for (let i4 = 0; i4 < numNewValues; i4++) {
      const key = newValueKeys[i4];
      const targetValue = target[key];
      let value = null;
      if (Array.isArray(targetValue)) {
        value = targetValue[0];
      }
      if (value === null) {
        value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
      }
      if (value === void 0 || value === null)
        continue;
      if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(targetValue)) {
        value = getAnimatableNone2(key, targetValue);
      }
      visualElement.addValue(key, motionValue(value, { owner: visualElement }));
      if (origin[key] === void 0) {
        origin[key] = value;
      }
      if (value !== null)
        visualElement.setBaseTarget(key, value);
    }
  }
  function getOriginFromTransition(key, transition4) {
    if (!transition4)
      return;
    const valueTransition = transition4[key] || transition4["default"] || transition4;
    return valueTransition.from;
  }
  function getOrigin(target, transition4, visualElement) {
    const origin = {};
    for (const key in target) {
      const transitionOrigin = getOriginFromTransition(key, transition4);
      if (transitionOrigin !== void 0) {
        origin[key] = transitionOrigin;
      } else {
        const value = visualElement.getValue(key);
        if (value) {
          origin[key] = value.get();
        }
      }
    }
    return origin;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
  function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }
  function animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {
    let { transition: transition4 = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
    const willChange = visualElement.getValue("willChange");
    if (transitionOverride)
      transition4 = transitionOverride;
    const animations2 = [];
    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
    for (const key in target) {
      const value = visualElement.getValue(key);
      const valueTarget = target[key];
      if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      const valueTransition = { delay, elapsed: 0, ...transition4 };
      if (window.HandoffAppearAnimations && !value.hasAnimated) {
        const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
        if (appearId) {
          valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame2);
        }
      }
      value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: false } : valueTransition));
      const animation = value.animation;
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key);
        animation.then(() => willChange.remove(key));
      }
      animations2.push(animation);
    }
    if (transitionEnd) {
      Promise.all(animations2).then(() => {
        transitionEnd && setTarget(visualElement, transitionEnd);
      });
    }
    return animations2;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
  init_define_process();
  init_define_process_env();
  function animateVariant(visualElement, variant, options = {}) {
    const resolved = resolveVariant(visualElement, variant, options.custom);
    let { transition: transition4 = visualElement.getDefaultTransition() || {} } = resolved || {};
    if (options.transitionOverride) {
      transition4 = options.transitionOverride;
    }
    const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
      const { delayChildren = 0, staggerChildren, staggerDirection } = transition4;
      return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : () => Promise.resolve();
    const { when } = transition4;
    if (when) {
      const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
      return first().then(() => last());
    } else {
      return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
    }
  }
  function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
    const animations2 = [];
    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
    const generateStaggerDuration = staggerDirection === 1 ? (i4 = 0) => i4 * staggerChildren : (i4 = 0) => maxStaggerDuration - i4 * staggerChildren;
    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i4) => {
      child.notify("AnimationStart", variant);
      animations2.push(animateVariant(child, variant, {
        ...options,
        delay: delayChildren + generateStaggerDuration(i4)
      }).then(() => child.notify("AnimationComplete", variant)));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a4, b5) {
    return a4.sortNodePosition(b5);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
  function animateVisualElement(visualElement, definition, options = {}) {
    visualElement.notify("AnimationStart", definition);
    let animation;
    if (Array.isArray(definition)) {
      const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
      animation = Promise.all(animations2);
    } else if (typeof definition === "string") {
      animation = animateVariant(visualElement, definition, options);
    } else {
      const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
      animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
    }
    return animation.then(() => visualElement.notify("AnimationComplete", definition));
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  var reversePriorityOrder = [...variantPriorityOrder].reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement) {
    return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
  }
  function createAnimationState(visualElement) {
    let animate = animateList(visualElement);
    const state = createState();
    let isInitialRender = true;
    const buildResolvedTypeValues = (acc, definition) => {
      const resolved = resolveVariant(visualElement, definition);
      if (resolved) {
        const { transition: transition4, transitionEnd, ...target } = resolved;
        acc = { ...acc, ...target, ...transitionEnd };
      }
      return acc;
    };
    function setAnimateFunction(makeAnimator) {
      animate = makeAnimator(visualElement);
    }
    function animateChanges(options, changedActiveType) {
      const props = visualElement.getProps();
      const context = visualElement.getVariantContext(true) || {};
      const animations2 = [];
      const removedKeys = /* @__PURE__ */ new Set();
      let encounteredKeys = {};
      let removedVariantIndex = Infinity;
      for (let i4 = 0; i4 < numAnimationTypes; i4++) {
        const type = reversePriorityOrder[i4];
        const typeState = state[type];
        const prop = props[type] !== void 0 ? props[type] : context[type];
        const propIsVariant = isVariantLabel(prop);
        const activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i4;
        let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = { ...encounteredKeys };
        if (
          // If it isn't active and hasn't *just* been set as inactive
          !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
          !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
          isAnimationControls(prop) || typeof prop === "boolean"
        ) {
          continue;
        }
        const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
        let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
        type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
        i4 > removedVariantIndex && propIsVariant;
        const definitionList = Array.isArray(prop) ? prop : [prop];
        let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
        if (activeDelta === false)
          resolvedValues = {};
        const { prevResolvedValues = {} } = typeState;
        const allKeys = {
          ...prevResolvedValues,
          ...resolvedValues
        };
        const markToAnimate = (key) => {
          shouldAnimateType = true;
          removedKeys.delete(key);
          typeState.needsAnimating[key] = true;
        };
        for (const key in allKeys) {
          const next2 = resolvedValues[key];
          const prev2 = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          if (next2 !== prev2) {
            if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
              if (!shallowCompare(next2, prev2) || variantDidChange) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            } else if (next2 !== void 0) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next2 !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = { ...encounteredKeys, ...resolvedValues };
        }
        if (isInitialRender && visualElement.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        if (shouldAnimateType && !isInherited) {
          animations2.push(...definitionList.map((animation) => ({
            animation,
            options: { type, ...options }
          })));
        }
      }
      if (removedKeys.size) {
        const fallbackAnimation = {};
        removedKeys.forEach((key) => {
          const fallbackTarget = visualElement.getBaseTarget(key);
          if (fallbackTarget !== void 0) {
            fallbackAnimation[key] = fallbackTarget;
          }
        });
        animations2.push({ animation: fallbackAnimation });
      }
      let shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate(animations2) : Promise.resolve();
    }
    function setActive(type, isActive, options) {
      var _a;
      if (state[type].isActive === isActive)
        return Promise.resolve();
      (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {
        var _a2;
        return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
      });
      state[type].isActive = isActive;
      const animations2 = animateChanges(options, type);
      for (const key in state) {
        state[key].protectedKeys = {};
      }
      return animations2;
    }
    return {
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: () => state
    };
  }
  function checkVariantsDidChange(prev2, next2) {
    if (typeof next2 === "string") {
      return next2 !== prev2;
    } else if (Array.isArray(next2)) {
      return !shallowCompare(next2, prev2);
    }
    return false;
  }
  function createTypeState(isActive = false) {
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    return {
      animate: createTypeState(true),
      whileInView: createTypeState(),
      whileHover: createTypeState(),
      whileTap: createTypeState(),
      whileDrag: createTypeState(),
      whileFocus: createTypeState(),
      exit: createTypeState()
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
  var AnimationFeature = class extends Feature {
    /**
     * We dynamically generate the AnimationState manager as it contains a reference
     * to the underlying animation library. We only want to load that if we load this,
     * so people can optionally code split it out using the `m` component.
     */
    constructor(node2) {
      super(node2);
      node2.animationState || (node2.animationState = createAnimationState(node2));
    }
    updateAnimationControlsSubscription() {
      const { animate } = this.node.getProps();
      this.unmount();
      if (isAnimationControls(animate)) {
        this.unmount = animate.subscribe(this.node);
      }
    }
    /**
     * Subscribe any provided AnimationControls to the component's VisualElement
     */
    mount() {
      this.updateAnimationControlsSubscription();
    }
    update() {
      const { animate } = this.node.getProps();
      const { animate: prevAnimate } = this.node.prevProps || {};
      if (animate !== prevAnimate) {
        this.updateAnimationControlsSubscription();
      }
    }
    unmount() {
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
  init_define_process();
  init_define_process_env();
  var id3 = 0;
  var ExitAnimationFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.id = id3++;
    }
    update() {
      if (!this.node.presenceContext)
        return;
      const { isPresent, onExitComplete, custom } = this.node.presenceContext;
      const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
      if (!this.node.animationState || isPresent === prevIsPresent) {
        return;
      }
      const exitAnimation = this.node.animationState.setActive("exit", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
      if (onExitComplete && !isPresent) {
        exitAnimation.then(() => onExitComplete(this.id));
      }
    }
    mount() {
      const { register } = this.node.presenceContext || {};
      if (register) {
        this.unmount = register(this.id);
      }
    }
    unmount() {
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var animations = {
    animation: {
      Feature: AnimationFeature
    },
    exit: {
      Feature: ExitAnimationFeature
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  init_define_process();
  init_define_process_env();
  var createAxis = () => ({ min: 0, max: 0 });
  var createBox = () => ({
    x: createAxis(),
    y: createAxis()
  });

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  init_define_process();
  init_define_process_env();
  function convertBoundingBoxToBox({ top, left, right, bottom }) {
    return {
      x: { min: left, max: right },
      y: { min: top, max: bottom }
    };
  }
  function transformBoxPoints(point, transformPoint) {
    if (!transformPoint)
      return point;
    const topLeft = transformPoint({ x: point.left, y: point.top });
    const bottomRight = transformPoint({ x: point.right, y: point.bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  function measureViewportBox(instance, transformPoint) {
    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  init_define_process();
  init_define_process_env();
  var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
    const match2 = splitCSSVariableRegex.exec(current);
    if (!match2)
      return [,];
    const [, token2, fallback2] = match2;
    return [token2, fallback2];
  }
  var maxDepth = 4;
  function getVariableValue(current, element, depth = 1) {
    invariant2(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
    const [token2, fallback2] = parseCSSVariable(current);
    if (!token2)
      return;
    const resolved = window.getComputedStyle(element).getPropertyValue(token2);
    if (resolved) {
      return resolved.trim();
    } else if (isCSSVariableToken(fallback2)) {
      return getVariableValue(fallback2, element, depth + 1);
    } else {
      return fallback2;
    }
  }
  function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
    const element = visualElement.current;
    if (!(element instanceof Element))
      return { target, transitionEnd };
    if (transitionEnd) {
      transitionEnd = { ...transitionEnd };
    }
    visualElement.values.forEach((value) => {
      const current = value.get();
      if (!isCSSVariableToken(current))
        return;
      const resolved = getVariableValue(current, element);
      if (resolved)
        value.set(resolved);
    });
    for (const key in target) {
      const current = target[key];
      if (!isCSSVariableToken(current))
        continue;
      const resolved = getVariableValue(current, element);
      if (!resolved)
        continue;
      target[key] = resolved;
      if (!transitionEnd)
        transitionEnd = {};
      if (transitionEnd[key] === void 0) {
        transitionEnd[key] = current;
      }
    }
    return { target, transitionEnd };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  init_define_process();
  init_define_process_env();
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y"
  ]);
  var isPositionalKey = (key) => positionalKeys.has(key);
  var hasPositionalKey = (target) => {
    return Object.keys(target).some(isPositionalKey);
  };
  var isNumOrPxType = (v5) => v5 === number || v5 === px;
  var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
  var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform3 }) => {
    if (transform3 === "none" || !transform3)
      return 0;
    const matrix3d = transform3.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      const matrix = transform3.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
  function removeNonTranslationalTransform(visualElement) {
    const removedTransforms = [];
    nonTranslationalTransformKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      if (value !== void 0) {
        removedTransforms.push([key, value.get()]);
        value.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    if (removedTransforms.length)
      visualElement.render();
    return removedTransforms;
  }
  var positionalValues = {
    // Dimensions
    width: ({ x: x3 }, { paddingLeft: paddingLeft2 = "0", paddingRight: paddingRight2 = "0" }) => x3.max - x3.min - parseFloat(paddingLeft2) - parseFloat(paddingRight2),
    height: ({ y: y4 }, { paddingTop = "0", paddingBottom = "0" }) => y4.max - y4.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
    top: (_bbox, { top }) => parseFloat(top),
    left: (_bbox, { left }) => parseFloat(left),
    bottom: ({ y: y4 }, { top }) => parseFloat(top) + (y4.max - y4.min),
    right: ({ x: x3 }, { left }) => parseFloat(left) + (x3.max - x3.min),
    // Transform
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  var convertChangedValueTypes = (target, visualElement, changedKeys) => {
    const originBbox = visualElement.measureViewportBox();
    const element = visualElement.current;
    const elementComputedStyle = getComputedStyle(element);
    const { display } = elementComputedStyle;
    const origin = {};
    if (display === "none") {
      visualElement.setStaticValue("display", target.display || "block");
    }
    changedKeys.forEach((key) => {
      origin[key] = positionalValues[key](originBbox, elementComputedStyle);
    });
    visualElement.render();
    const targetBbox = visualElement.measureViewportBox();
    changedKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      value && value.jump(origin[key]);
      target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
  };
  var checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
    target = { ...target };
    transitionEnd = { ...transitionEnd };
    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    let removedTransformValues = [];
    let hasAttemptedToRemoveTransformValues = false;
    const changedValueTypeKeys = [];
    targetPositionalKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      if (!visualElement.hasValue(key))
        return;
      let from2 = origin[key];
      let fromType = findDimensionValueType(from2);
      const to = target[key];
      let toType;
      if (isKeyframesTarget(to)) {
        const numKeyframes = to.length;
        const fromIndex = to[0] === null ? 1 : 0;
        from2 = to[fromIndex];
        fromType = findDimensionValueType(from2);
        for (let i4 = fromIndex; i4 < numKeyframes; i4++) {
          if (to[i4] === null)
            break;
          if (!toType) {
            toType = findDimensionValueType(to[i4]);
            invariant2(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
          } else {
            invariant2(findDimensionValueType(to[i4]) === toType, "All keyframes must be of the same type");
          }
        }
      } else {
        toType = findDimensionValueType(to);
      }
      if (fromType !== toType) {
        if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
          const current = value.get();
          if (typeof current === "string") {
            value.set(parseFloat(current));
          }
          if (typeof to === "string") {
            target[key] = parseFloat(to);
          } else if (Array.isArray(to) && toType === px) {
            target[key] = to.map(parseFloat);
          }
        } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to === 0)) {
          if (from2 === 0) {
            value.set(toType.transform(from2));
          } else {
            target[key] = fromType.transform(to);
          }
        } else {
          if (!hasAttemptedToRemoveTransformValues) {
            removedTransformValues = removeNonTranslationalTransform(visualElement);
            hasAttemptedToRemoveTransformValues = true;
          }
          changedValueTypeKeys.push(key);
          transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
          value.jump(to);
        }
      }
    });
    if (changedValueTypeKeys.length) {
      const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
      const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
      if (removedTransformValues.length) {
        removedTransformValues.forEach(([key, value]) => {
          visualElement.getValue(key).set(value);
        });
      }
      visualElement.render();
      if (isBrowser3 && scrollY !== null) {
        window.scrollTo({ top: scrollY });
      }
      return { target: convertedTarget, transitionEnd };
    } else {
      return { target, transitionEnd };
    }
  };
  function unitConversion(visualElement, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement, target, origin, transitionEnd);
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/VisualElement.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
  init_define_process();
  init_define_process_env();
  var prefersReducedMotion = { current: null };
  var hasReducedMotionListener = { current: false };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
  function initPrefersReducedMotion() {
    hasReducedMotionListener.current = true;
    if (!isBrowser3)
      return;
    if (window.matchMedia) {
      const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
      const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
      motionMediaQuery.addListener(setReducedMotionPreferences);
      setReducedMotionPreferences();
    } else {
      prefersReducedMotion.current = false;
    }
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  init_define_process();
  init_define_process_env();
  function updateMotionValuesFromProps(element, next2, prev2) {
    const { willChange } = next2;
    for (const key in next2) {
      const nextValue = next2[key];
      const prevValue = prev2[key];
      if (isMotionValue(nextValue)) {
        element.addValue(key, nextValue);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key);
        }
        if (true) {
          warnOnce(nextValue.version === "10.12.4", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.4 may not work as expected.`);
        }
      } else if (isMotionValue(prevValue)) {
        element.addValue(key, motionValue(nextValue, { owner: element }));
        if (isWillChangeMotionValue(willChange)) {
          willChange.remove(key);
        }
      } else if (prevValue !== nextValue) {
        if (element.hasValue(key)) {
          const existingValue = element.getValue(key);
          !existingValue.hasAnimated && existingValue.set(nextValue);
        } else {
          const latestValue = element.getStaticValue(key);
          element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
        }
      }
    }
    for (const key in prev2) {
      if (next2[key] === void 0)
        element.removeValue(key);
    }
    return next2;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/store.mjs
  init_define_process();
  init_define_process_env();
  var visualElementStore = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/VisualElement.mjs
  var featureNames = Object.keys(featureDefinitions);
  var numFeatures = featureNames.length;
  var propEventHandlers = [
    "AnimationStart",
    "AnimationComplete",
    "Update",
    "BeforeLayoutMeasure",
    "LayoutMeasure",
    "LayoutAnimationStart",
    "LayoutAnimationComplete"
  ];
  var numVariantProps = variantProps.length;
  var VisualElement = class {
    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
      this.current = null;
      this.children = /* @__PURE__ */ new Set();
      this.isVariantNode = false;
      this.isControllingVariants = false;
      this.shouldReduceMotion = null;
      this.values = /* @__PURE__ */ new Map();
      this.features = {};
      this.valueSubscriptions = /* @__PURE__ */ new Map();
      this.prevMotionValues = {};
      this.events = {};
      this.propEventSubscriptions = {};
      this.notifyUpdate = () => this.notify("Update", this.latestValues);
      this.render = () => {
        if (!this.current)
          return;
        this.triggerBuild();
        this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
      };
      this.scheduleRender = () => frame2.render(this.render, false, true);
      const { latestValues, renderState } = visualState;
      this.latestValues = latestValues;
      this.baseTarget = { ...latestValues };
      this.initialValues = props.initial ? { ...latestValues } : {};
      this.renderState = renderState;
      this.parent = parent;
      this.props = props;
      this.presenceContext = presenceContext;
      this.depth = parent ? parent.depth + 1 : 0;
      this.reducedMotionConfig = reducedMotionConfig;
      this.options = options;
      this.isControllingVariants = isControllingVariants(props);
      this.isVariantNode = isVariantNode(props);
      if (this.isVariantNode) {
        this.variantChildren = /* @__PURE__ */ new Set();
      }
      this.manuallyAnimateOnMount = Boolean(parent && parent.current);
      const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
      for (const key in initialMotionValues) {
        const value = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value)) {
          value.set(latestValues[key], false);
          if (isWillChangeMotionValue(willChange)) {
            willChange.add(key);
          }
        }
      }
    }
    /**
     * This method takes React props and returns found MotionValues. For example, HTML
     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
     *
     * This isn't an abstract method as it needs calling in the constructor, but it is
     * intended to be one.
     */
    scrapeMotionValuesFromProps(_props6, _prevProps) {
      return {};
    }
    mount(instance) {
      this.current = instance;
      visualElementStore.set(instance, this);
      if (this.projection) {
        this.projection.mount(instance);
      }
      if (this.parent && this.isVariantNode && !this.isControllingVariants) {
        this.removeFromVariantTree = this.parent.addVariantChild(this);
      }
      this.values.forEach((value, key) => this.bindToMotionValue(key, value));
      if (!hasReducedMotionListener.current) {
        initPrefersReducedMotion();
      }
      this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
      if (true) {
        warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
      }
      if (this.parent)
        this.parent.children.add(this);
      this.update(this.props, this.presenceContext);
    }
    unmount() {
      visualElementStore.delete(this.current);
      this.projection && this.projection.unmount();
      cancelFrame(this.notifyUpdate);
      cancelFrame(this.render);
      this.valueSubscriptions.forEach((remove2) => remove2());
      this.removeFromVariantTree && this.removeFromVariantTree();
      this.parent && this.parent.children.delete(this);
      for (const key in this.events) {
        this.events[key].clear();
      }
      for (const key in this.features) {
        this.features[key].unmount();
      }
      this.current = null;
    }
    bindToMotionValue(key, value) {
      const valueIsTransform = transformProps.has(key);
      const removeOnChange = value.on("change", (latestValue) => {
        this.latestValues[key] = latestValue;
        this.props.onUpdate && frame2.update(this.notifyUpdate, false, true);
        if (valueIsTransform && this.projection) {
          this.projection.isTransformDirty = true;
        }
      });
      const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
      this.valueSubscriptions.set(key, () => {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    sortNodePosition(other) {
      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
        return 0;
      }
      return this.sortInstanceNodePosition(this.current, other.current);
    }
    loadFeatures({ children: children2, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {
      let ProjectionNodeConstructor;
      let MeasureLayout;
      if (preloadedFeatures && isStrict) {
        const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
        renderedProps.ignoreStrict ? warning2(false, strictMessage) : invariant2(false, strictMessage);
      }
      for (let i4 = 0; i4 < numFeatures; i4++) {
        const name = featureNames[i4];
        const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
        if (ProjectionNode)
          ProjectionNodeConstructor = ProjectionNode;
        if (isEnabled(renderedProps)) {
          if (!this.features[name] && FeatureConstructor) {
            this.features[name] = new FeatureConstructor(this);
          }
          if (MeasureLayoutComponent) {
            MeasureLayout = MeasureLayoutComponent;
          }
        }
      }
      if (!this.projection && ProjectionNodeConstructor) {
        this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);
        const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
        this.projection.setOptions({
          layoutId,
          layout,
          alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),
          visualElement: this,
          scheduleRender: () => this.scheduleRender(),
          /**
           * TODO: Update options in an effect. This could be tricky as it'll be too late
           * to update by the time layout animations run.
           * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
           * ensuring it gets called if there's no potential layout animations.
           *
           */
          animationType: typeof layout === "string" ? layout : "both",
          initialPromotionConfig: initialLayoutGroupConfig,
          layoutScroll,
          layoutRoot
        });
      }
      return MeasureLayout;
    }
    updateFeatures() {
      for (const key in this.features) {
        const feature = this.features[key];
        if (feature.isMounted) {
          feature.update(this.props, this.prevProps);
        } else {
          feature.mount();
          feature.isMounted = true;
        }
      }
    }
    triggerBuild() {
      this.build(this.renderState, this.latestValues, this.options, this.props);
    }
    /**
     * Measure the current viewport box with or without transforms.
     * Only measures axis-aligned boxes, rotate and skew must be manually
     * removed with a re-render to work.
     */
    measureViewportBox() {
      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
    }
    getStaticValue(key) {
      return this.latestValues[key];
    }
    setStaticValue(key, value) {
      this.latestValues[key] = value;
    }
    /**
     * Make a target animatable by Popmotion. For instance, if we're
     * trying to animate width from 100px to 100vw we need to measure 100vw
     * in pixels to determine what we really need to animate to. This is also
     * pluggable to support Framer's custom value types like Color,
     * and CSS variables.
     */
    makeTargetAnimatable(target, canMutate = true) {
      return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
    }
    /**
     * Update the provided props. Ensure any newly-added motion values are
     * added to our map, old ones removed, and listeners updated.
     */
    update(props, presenceContext) {
      if (props.transformTemplate || this.props.transformTemplate) {
        this.scheduleRender();
      }
      this.prevProps = this.props;
      this.props = props;
      this.prevPresenceContext = this.presenceContext;
      this.presenceContext = presenceContext;
      for (let i4 = 0; i4 < propEventHandlers.length; i4++) {
        const key = propEventHandlers[i4];
        if (this.propEventSubscriptions[key]) {
          this.propEventSubscriptions[key]();
          delete this.propEventSubscriptions[key];
        }
        const listener = props["on" + key];
        if (listener) {
          this.propEventSubscriptions[key] = this.on(key, listener);
        }
      }
      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
      if (this.handleChildMotionValue) {
        this.handleChildMotionValue();
      }
    }
    getProps() {
      return this.props;
    }
    /**
     * Returns the variant definition with a given name.
     */
    getVariant(name) {
      return this.props.variants ? this.props.variants[name] : void 0;
    }
    /**
     * Returns the defined default transition on this component.
     */
    getDefaultTransition() {
      return this.props.transition;
    }
    getTransformPagePoint() {
      return this.props.transformPagePoint;
    }
    getClosestVariantNode() {
      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
    }
    getVariantContext(startAtParent = false) {
      if (startAtParent) {
        return this.parent ? this.parent.getVariantContext() : void 0;
      }
      if (!this.isControllingVariants) {
        const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
        if (this.props.initial !== void 0) {
          context2.initial = this.props.initial;
        }
        return context2;
      }
      const context = {};
      for (let i4 = 0; i4 < numVariantProps; i4++) {
        const name = variantProps[i4];
        const prop = this.props[name];
        if (isVariantLabel(prop) || prop === false) {
          context[name] = prop;
        }
      }
      return context;
    }
    /**
     * Add a child visual element to our set of children.
     */
    addVariantChild(child) {
      const closestVariantNode = this.getClosestVariantNode();
      if (closestVariantNode) {
        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
        return () => closestVariantNode.variantChildren.delete(child);
      }
    }
    /**
     * Add a motion value and bind it to this visual element.
     */
    addValue(key, value) {
      if (value !== this.values.get(key)) {
        this.removeValue(key);
        this.bindToMotionValue(key, value);
      }
      this.values.set(key, value);
      this.latestValues[key] = value.get();
    }
    /**
     * Remove a motion value and unbind any active subscriptions.
     */
    removeValue(key) {
      this.values.delete(key);
      const unsubscribe = this.valueSubscriptions.get(key);
      if (unsubscribe) {
        unsubscribe();
        this.valueSubscriptions.delete(key);
      }
      delete this.latestValues[key];
      this.removeValueFromRenderState(key, this.renderState);
    }
    /**
     * Check whether we have a motion value for this key
     */
    hasValue(key) {
      return this.values.has(key);
    }
    getValue(key, defaultValue) {
      if (this.props.values && this.props.values[key]) {
        return this.props.values[key];
      }
      let value = this.values.get(key);
      if (value === void 0 && defaultValue !== void 0) {
        value = motionValue(defaultValue, { owner: this });
        this.addValue(key, value);
      }
      return value;
    }
    /**
     * If we're trying to animate to a previously unencountered value,
     * we need to check for it in our state and as a last resort read it
     * directly from the instance (which might have performance implications).
     */
    readValue(key) {
      return this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);
    }
    /**
     * Set the base target to later animate back to. This is currently
     * only hydrated on creation and when we first read a value.
     */
    setBaseTarget(key, value) {
      this.baseTarget[key] = value;
    }
    /**
     * Find the base target for a value thats been removed from all animation
     * props.
     */
    getBaseTarget(key) {
      var _a;
      const { initial } = this.props;
      const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : void 0;
      if (initial && valueFromInitial !== void 0) {
        return valueFromInitial;
      }
      const target = this.getBaseTargetFromProps(this.props, key);
      if (target !== void 0 && !isMotionValue(target))
        return target;
      return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      return this.events[eventName].add(callback);
    }
    notify(eventName, ...args) {
      if (this.events[eventName]) {
        this.events[eventName].notify(...args);
      }
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
  var DOMVisualElement = class extends VisualElement {
    sortInstanceNodePosition(a4, b5) {
      return a4.compareDocumentPosition(b5) & 2 ? 1 : -1;
    }
    getBaseTargetFromProps(props, key) {
      return props.style ? props.style[key] : void 0;
    }
    removeValueFromRenderState(key, { vars, style: style2 }) {
      delete vars[key];
      delete style2[key];
    }
    makeTargetAnimatableFromInstance({ transition: transition4, transitionEnd, ...target }, { transformValues }, isMounted) {
      let origin = getOrigin(target, transition4 || {}, this);
      if (transformValues) {
        if (transitionEnd)
          transitionEnd = transformValues(transitionEnd);
        if (target)
          target = transformValues(target);
        if (origin)
          origin = transformValues(origin);
      }
      if (isMounted) {
        checkTargetForNewValues(this, target, origin);
        const parsed = parseDomVariant(this, target, origin, transitionEnd);
        transitionEnd = parsed.transitionEnd;
        target = parsed.target;
      }
      return {
        transition: transition4,
        transitionEnd,
        ...target
      };
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
  function getComputedStyle2(element) {
    return window.getComputedStyle(element);
  }
  var HTMLVisualElement = class extends DOMVisualElement {
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        const computedStyle = getComputedStyle2(instance);
        const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
        return typeof value === "string" ? value.trim() : value;
      }
    }
    measureInstanceViewportBox(instance, { transformPagePoint }) {
      return measureViewportBox(instance, transformPagePoint);
    }
    build(renderState, latestValues, options, props) {
      buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
    }
    scrapeMotionValuesFromProps(props, prevProps) {
      return scrapeMotionValuesFromProps(props, prevProps);
    }
    handleChildMotionValue() {
      if (this.childSubscription) {
        this.childSubscription();
        delete this.childSubscription;
      }
      const { children: children2 } = this.props;
      if (isMotionValue(children2)) {
        this.childSubscription = children2.on("change", (latest) => {
          if (this.current)
            this.current.textContent = `${latest}`;
        });
      }
    }
    renderInstance(instance, renderState, styleProp, projection) {
      renderHTML(instance, renderState, styleProp, projection);
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
  init_define_process();
  init_define_process_env();
  var SVGVisualElement = class extends DOMVisualElement {
    constructor() {
      super(...arguments);
      this.isSVGTag = false;
    }
    getBaseTargetFromProps(props, key) {
      return props[key];
    }
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      }
      key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
      return instance.getAttribute(key);
    }
    measureInstanceViewportBox() {
      return createBox();
    }
    scrapeMotionValuesFromProps(props, prevProps) {
      return scrapeMotionValuesFromProps2(props, prevProps);
    }
    build(renderState, latestValues, options, props) {
      buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
    }
    renderInstance(instance, renderState, styleProp, projection) {
      renderSVG(instance, renderState, styleProp, projection);
    }
    mount(instance) {
      this.isSVGTag = isSVGTag(instance.tagName);
      super.mount(instance);
    }
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var createDomVisualElement = (Component3, options) => {
    return isSVGComponent(Component3) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
  init_define_process();
  init_define_process_env();
  var m4 = createMotionProxy(createDomMotionConfig);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  init_define_process();
  init_define_process_env();
  var React118 = __toESM(require_react(), 1);
  var import_react68 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  init_define_process();
  init_define_process_env();
  var import_react64 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
  init_define_process();
  init_define_process_env();
  var import_react63 = __toESM(require_react(), 1);
  function useIsMounted() {
    const isMounted = (0, import_react63.useRef)(false);
    useIsomorphicLayoutEffect3(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  function useForceUpdate2() {
    const isMounted = useIsMounted();
    const [forcedRenderCount, setForcedRenderCount] = (0, import_react64.useState)(0);
    const forceRender = (0, import_react64.useCallback)(() => {
      isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [forcedRenderCount]);
    const deferredForceRender = (0, import_react64.useCallback)(() => frame2.postRender(forceRender), [forceRender]);
    return [deferredForceRender, forcedRenderCount];
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  init_define_process();
  init_define_process_env();
  var React117 = __toESM(require_react(), 1);
  var import_react66 = __toESM(require_react(), 1);

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
  init_define_process();
  init_define_process_env();
  var React116 = __toESM(require_react(), 1);
  var import_react65 = __toESM(require_react(), 1);
  var PopChildMeasure = class extends React116.Component {
    getSnapshotBeforeUpdate(prevProps) {
      const element = this.props.childRef.current;
      if (element && prevProps.isPresent && !this.props.isPresent) {
        const size = this.props.sizeRef.current;
        size.height = element.offsetHeight || 0;
        size.width = element.offsetWidth || 0;
        size.top = element.offsetTop;
        size.left = element.offsetLeft;
      }
      return null;
    }
    /**
     * Required with getSnapshotBeforeUpdate to stop React complaining.
     */
    componentDidUpdate() {
    }
    render() {
      return this.props.children;
    }
  };
  function PopChild({ children: children2, isPresent }) {
    const id4 = (0, import_react65.useId)();
    const ref = (0, import_react65.useRef)(null);
    const size = (0, import_react65.useRef)({
      width: 0,
      height: 0,
      top: 0,
      left: 0
    });
    (0, import_react65.useInsertionEffect)(() => {
      const { width, height, top, left } = size.current;
      if (isPresent || !ref.current || !width || !height)
        return;
      ref.current.dataset.motionPopId = id4;
      const style2 = document.createElement("style");
      document.head.appendChild(style2);
      if (style2.sheet) {
        style2.sheet.insertRule(`
          [data-motion-pop-id="${id4}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
      }
      return () => {
        document.head.removeChild(style2);
      };
    }, [isPresent]);
    return React116.createElement(PopChildMeasure, { isPresent, childRef: ref, sizeRef: size }, React116.cloneElement(children2, { ref }));
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  var PresenceChild = ({ children: children2, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode }) => {
    const presenceChildren = useConstant(newChildrenMap);
    const id4 = (0, import_react66.useId)();
    const context = (0, import_react66.useMemo)(
      () => ({
        id: id4,
        initial,
        isPresent,
        custom,
        onExitComplete: (childId) => {
          presenceChildren.set(childId, true);
          for (const isComplete of presenceChildren.values()) {
            if (!isComplete)
              return;
          }
          onExitComplete && onExitComplete();
        },
        register: (childId) => {
          presenceChildren.set(childId, false);
          return () => presenceChildren.delete(childId);
        }
      }),
      /**
       * If the presence of a child affects the layout of the components around it,
       * we want to make a new context value to ensure they get re-rendered
       * so they can detect that layout change.
       */
      presenceAffectsLayout ? void 0 : [isPresent]
    );
    (0, import_react66.useMemo)(() => {
      presenceChildren.forEach((_2, key) => presenceChildren.set(key, false));
    }, [isPresent]);
    React117.useEffect(() => {
      !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
    }, [isPresent]);
    if (mode === "popLayout") {
      children2 = React117.createElement(PopChild, { isPresent }, children2);
    }
    return React117.createElement(PresenceContext.Provider, { value: context }, children2);
  };
  function newChildrenMap() {
    return /* @__PURE__ */ new Map();
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
  init_define_process();
  init_define_process_env();
  var import_react67 = __toESM(require_react(), 1);
  function useUnmountEffect(callback) {
    return (0, import_react67.useEffect)(() => () => callback(), []);
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var getChildKey = (child) => child.key || "";
  function updateChildLookup(children2, allChildren) {
    children2.forEach((child) => {
      const key = getChildKey(child);
      allChildren.set(key, child);
    });
  }
  function onlyElements(children2) {
    const filtered = [];
    import_react68.Children.forEach(children2, (child) => {
      if ((0, import_react68.isValidElement)(child))
        filtered.push(child);
    });
    return filtered;
  }
  var AnimatePresence = ({ children: children2, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = "sync" }) => {
    invariant2(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
    let [forceRender] = useForceUpdate2();
    const forceRenderLayoutGroup = (0, import_react68.useContext)(LayoutGroupContext).forceRender;
    if (forceRenderLayoutGroup)
      forceRender = forceRenderLayoutGroup;
    const isMounted = useIsMounted();
    const filteredChildren = onlyElements(children2);
    let childrenToRender = filteredChildren;
    const exiting = /* @__PURE__ */ new Set();
    const presentChildren = (0, import_react68.useRef)(childrenToRender);
    const allChildren = (0, import_react68.useRef)(/* @__PURE__ */ new Map()).current;
    const isInitialRender = (0, import_react68.useRef)(true);
    useIsomorphicLayoutEffect3(() => {
      isInitialRender.current = false;
      updateChildLookup(filteredChildren, allChildren);
      presentChildren.current = childrenToRender;
    });
    useUnmountEffect(() => {
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    });
    if (isInitialRender.current) {
      return React118.createElement(React118.Fragment, null, childrenToRender.map((child) => React118.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode }, child)));
    }
    childrenToRender = [...childrenToRender];
    const presentKeys = presentChildren.current.map(getChildKey);
    const targetKeys = filteredChildren.map(getChildKey);
    const numPresent = presentKeys.length;
    for (let i4 = 0; i4 < numPresent; i4++) {
      const key = presentKeys[i4];
      if (targetKeys.indexOf(key) === -1) {
        exiting.add(key);
      }
    }
    if (mode === "wait" && exiting.size) {
      childrenToRender = [];
    }
    exiting.forEach((key) => {
      if (targetKeys.indexOf(key) !== -1)
        return;
      const child = allChildren.get(key);
      if (!child)
        return;
      const insertionIndex = presentKeys.indexOf(key);
      const onExit = () => {
        allChildren.delete(key);
        exiting.delete(key);
        const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);
        presentChildren.current.splice(removeIndex, 1);
        if (!exiting.size) {
          presentChildren.current = filteredChildren;
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      childrenToRender.splice(insertionIndex, 0, React118.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode }, child));
    });
    childrenToRender = childrenToRender.map((child) => {
      const key = child.key;
      return exiting.has(key) ? child : React118.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode }, child);
    });
    if (mode === "wait" && childrenToRender.length > 1) {
      console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
    }
    return React118.createElement(React118.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map((child) => (0, import_react68.cloneElement)(child)));
  };

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
  init_define_process();
  init_define_process_env();
  var React119 = __toESM(require_react(), 1);
  var import_react69 = __toESM(require_react(), 1);
  function LazyMotion({ children: children2, features, strict = false }) {
    const [, setIsLoaded] = (0, import_react69.useState)(!isLazyBundle(features));
    const loadedRenderer = (0, import_react69.useRef)(void 0);
    if (!isLazyBundle(features)) {
      const { renderer, ...loadedFeatures } = features;
      loadedRenderer.current = renderer;
      loadFeatures(loadedFeatures);
    }
    (0, import_react69.useEffect)(() => {
      if (isLazyBundle(features)) {
        features().then(({ renderer, ...loadedFeatures }) => {
          loadFeatures(loadedFeatures);
          loadedRenderer.current = renderer;
          setIsLoaded(true);
        });
      }
    }, []);
    return React119.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children2);
  }
  function isLazyBundle(features) {
    return typeof features === "function";
  }

  // node_modules/.pnpm/framer-motion@10.12.4_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
  init_define_process();
  init_define_process_env();
  var domAnimation = {
    renderer: createDomVisualElement,
    ...animations,
    ...gestureAnimations
  };

  // src/components/ActionBar.tsx
  var import_react70 = __toESM(require_react(), 1);
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var useOverrides3 = makeStyles2({
    card: {}
  });
  function ActionBar() {
    const { project, output, resetOutput, runWorkflow } = useProjectContext();
    const { selectedNodes } = useSelectedNodes();
    const [loading] = (0, import_react70.useState)(false);
    const overrides = useOverrides3();
    const onRun = async () => {
      if (!project)
        return;
      await runWorkflow(selectedNodes[0]);
    };
    (0, import_react70.useEffect)(() => {
      if (selectedNodes.length !== 1) {
        resetOutput();
      }
    }, [selectedNodes, resetOutput]);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "absolute bottom-8 z-10 left-1/2 -translate-x-1/2", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(LazyMotion, { features: domAnimation, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(AnimatePresence, { children: selectedNodes.length === 1 && /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
      m4.div,
      {
        initial: { opacity: 0, translateY: 10, scale: 0.95 },
        animate: { opacity: 1, translateY: 0, scale: 1 },
        exit: { opacity: 0, translateY: 10, scale: 0.95 },
        transition: { duration: 0.1 },
        className: "flex flex-col gap-4",
        children: [
          output && /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(Card, { className: "max-w-5xl", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(CardHeader, { header: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Text, { weight: "semibold", children: "Output" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("code", { className: "block overflow-auto max-w-3xl max-h-96", children: JSON.stringify(JSON.parse(output), null, 2) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Card, { className: overrides.card, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Button, { onClick: onRun, disabled: loading, children: "Run Workflow" }) })
        ]
      }
    ) }) }) });
  }

  // src/components/ActionPanel.tsx
  init_define_process();
  init_define_process_env();

  // src/components/EditorPanel.tsx
  init_define_process();
  init_define_process_env();
  var import_react73 = __toESM(require_react(), 1);

  // src/components/blockEditors/BucketEditor.tsx
  init_define_process();
  init_define_process_env();

  // node_modules/.pnpm/react-hook-form@7.43.9_react@18.2.0/node_modules/react-hook-form/dist/index.esm.mjs
  init_define_process();
  init_define_process_env();
  var import_react71 = __toESM(require_react(), 1);
  var isCheckBoxInput = (element) => element.type === "checkbox";
  var isDateObject = (value) => value instanceof Date;
  var isNullOrUndefined2 = (value) => value == null;
  var isObjectType = (value) => typeof value === "object";
  var isObject3 = (value) => !isNullOrUndefined2(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
  var getEventValue = (event) => isObject3(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
  var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
  var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
  var isPlainObject = (tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return isObject3(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
  };
  var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
  function cloneObject(data) {
    let copy2;
    const isArray = Array.isArray(data);
    if (data instanceof Date) {
      copy2 = new Date(data);
    } else if (data instanceof Set) {
      copy2 = new Set(data);
    } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray || isObject3(data))) {
      copy2 = isArray ? [] : {};
      if (!Array.isArray(data) && !isPlainObject(data)) {
        copy2 = data;
      } else {
        for (const key in data) {
          copy2[key] = cloneObject(data[key]);
        }
      }
    } else {
      return data;
    }
    return copy2;
  }
  var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
  var isUndefined = (val) => val === void 0;
  var get3 = (obj, path, defaultValue) => {
    if (!path || !isObject3(obj)) {
      return defaultValue;
    }
    const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined2(result2) ? result2 : result2[key], obj);
    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;
  };
  var EVENTS = {
    BLUR: "blur",
    FOCUS_OUT: "focusout",
    CHANGE: "change"
  };
  var VALIDATION_MODE = {
    onBlur: "onBlur",
    onChange: "onChange",
    onSubmit: "onSubmit",
    onTouched: "onTouched",
    all: "all"
  };
  var INPUT_VALIDATION_RULES = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate"
  };
  var HookFormContext = import_react71.default.createContext(null);
  var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
    const result = {
      defaultValues: control._defaultValues
    };
    for (const key in formState) {
      Object.defineProperty(result, key, {
        get: () => {
          const _key = key;
          if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
            control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
          }
          localProxyFormState && (localProxyFormState[_key] = true);
          return formState[_key];
        }
      });
    }
    return result;
  };
  var isEmptyObject = (value) => isObject3(value) && !Object.keys(value).length;
  var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const { name, ...formState } = formStateData;
    return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
  };
  var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
  function useSubscribe(props) {
    const _props6 = import_react71.default.useRef(props);
    _props6.current = props;
    import_react71.default.useEffect(() => {
      const subscription = !props.disabled && _props6.current.subject && _props6.current.subject.subscribe({
        next: _props6.current.next
      });
      return () => {
        subscription && subscription.unsubscribe();
      };
    }, [props.disabled]);
  }
  var isString3 = (value) => typeof value === "string";
  var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
    if (isString3(names)) {
      isGlobal && _names.watch.add(names);
      return get3(formValues, names, defaultValue);
    }
    if (Array.isArray(names)) {
      return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get3(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
  };
  var isKey = (value) => /^\w*$/.test(value);
  var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
  function set3(object, path, value) {
    let index = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length2 = tempPath.length;
    const lastIndex2 = length2 - 1;
    while (++index < length2) {
      const key = tempPath[index];
      let newValue = value;
      if (index !== lastIndex2) {
        const objValue = object[key];
        newValue = isObject3(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};
      }
      object[key] = newValue;
      object = object[key];
    }
    return object;
  }
  var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
    ...errors[name],
    types: {
      ...errors[name] && errors[name].types ? errors[name].types : {},
      [type]: message || true
    }
  } : {};
  var focusFieldBy = (fields, callback, fieldsNames) => {
    for (const key of fieldsNames || Object.keys(fields)) {
      const field = get3(fields, key);
      if (field) {
        const { _f, ...currentField } = field;
        if (_f && callback(_f.name)) {
          if (_f.ref.focus) {
            _f.ref.focus();
            break;
          } else if (_f.refs && _f.refs[0].focus) {
            _f.refs[0].focus();
            break;
          }
        } else if (isObject3(currentField)) {
          focusFieldBy(currentField, callback);
        }
      }
    }
  };
  var getValidationModes = (mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched
  });
  var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
  var updateFieldArrayRootError = (errors, error, name) => {
    const fieldArrayErrors = compact(get3(errors, name));
    set3(fieldArrayErrors, "root", error[name]);
    set3(errors, name, fieldArrayErrors);
    return errors;
  };
  var isBoolean2 = (value) => typeof value === "boolean";
  var isFileInput = (element) => element.type === "file";
  var isFunction2 = (value) => typeof value === "function";
  var isHTMLElement3 = (value) => {
    if (!isWeb) {
      return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
  };
  var isMessage = (value) => isString3(value);
  var isRadioInput = (element) => element.type === "radio";
  var isRegex = (value) => value instanceof RegExp;
  var defaultResult = {
    value: false,
    isValid: false
  };
  var validResult = { value: true, isValid: true };
  var getCheckboxValue = (options) => {
    if (Array.isArray(options)) {
      if (options.length > 1) {
        const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
        return { value: values, isValid: !!values.length };
      }
      return options[0].checked && !options[0].disabled ? (
        // @ts-expect-error expected to work in the browser
        options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
      ) : defaultResult;
    }
    return defaultResult;
  };
  var defaultReturn = {
    isValid: false,
    value: null
  };
  var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
    isValid: true,
    value: option.value
  } : previous, defaultReturn) : defaultReturn;
  function getValidateError(result, ref, type = "validate") {
    if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean2(result) && !result) {
      return {
        type,
        message: isMessage(result) ? result : "",
        ref
      };
    }
  }
  var getValueAndMessage = (validationData) => isObject3(validationData) && !isRegex(validationData) ? validationData : {
    value: validationData,
    message: ""
  };
  var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled } = field._f;
    const inputValue = get3(formValues, name);
    if (!mount || disabled) {
      return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = (message) => {
      if (shouldUseNativeValidation && inputRef.reportValidity) {
        inputRef.setCustomValidity(isBoolean2(message) ? "" : message || "");
        inputRef.reportValidity();
      }
    };
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox2 = isRadio || isCheckBox;
    const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement3(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
      const message = exceedMax ? maxLengthMessage : minLengthMessage;
      error[name] = {
        type: exceedMax ? maxType : minType,
        message,
        ref,
        ...appendErrorsCurry(exceedMax ? maxType : minType, message)
      };
    };
    if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined2(inputValue)) || isBoolean2(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
      const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
      if (value) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.required,
          message,
          ref: inputRef,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (!isEmpty && (!isNullOrUndefined2(min) || !isNullOrUndefined2(max))) {
      let exceedMax;
      let exceedMin;
      const maxOutput = getValueAndMessage(max);
      const minOutput = getValueAndMessage(min);
      if (!isNullOrUndefined2(inputValue) && !isNaN(inputValue)) {
        const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
        if (!isNullOrUndefined2(maxOutput.value)) {
          exceedMax = valueNumber > maxOutput.value;
        }
        if (!isNullOrUndefined2(minOutput.value)) {
          exceedMin = valueNumber < minOutput.value;
        }
      } else {
        const valueDate = ref.valueAsDate || new Date(inputValue);
        const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
        const isTime = ref.type == "time";
        const isWeek = ref.type == "week";
        if (isString3(maxOutput.value) && inputValue) {
          exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
        }
        if (isString3(minOutput.value) && inputValue) {
          exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
        }
      }
      if (exceedMax || exceedMin) {
        getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if ((maxLength || minLength) && !isEmpty && (isString3(inputValue) || isFieldArray && Array.isArray(inputValue))) {
      const maxLengthOutput = getValueAndMessage(maxLength);
      const minLengthOutput = getValueAndMessage(minLength);
      const exceedMax = !isNullOrUndefined2(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
      const exceedMin = !isNullOrUndefined2(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
      if (exceedMax || exceedMin) {
        getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if (pattern && !isEmpty && isString3(inputValue)) {
      const { value: patternValue, message } = getValueAndMessage(pattern);
      if (isRegex(patternValue) && !inputValue.match(patternValue)) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.pattern,
          message,
          ref,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (validate) {
      if (isFunction2(validate)) {
        const result = await validate(inputValue, formValues);
        const validateError = getValidateError(result, inputRef);
        if (validateError) {
          error[name] = {
            ...validateError,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(validateError.message);
            return error;
          }
        }
      } else if (isObject3(validate)) {
        let validationResult = {};
        for (const key in validate) {
          if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
            break;
          }
          const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
          if (validateError) {
            validationResult = {
              ...validateError,
              ...appendErrorsCurry(key, validateError.message)
            };
            setCustomValidity(validateError.message);
            if (validateAllFieldCriteria) {
              error[name] = validationResult;
            }
          }
        }
        if (!isEmptyObject(validationResult)) {
          error[name] = {
            ref: inputRef,
            ...validationResult
          };
          if (!validateAllFieldCriteria) {
            return error;
          }
        }
      }
    }
    setCustomValidity(true);
    return error;
  };
  function baseGet(object, updatePath) {
    const length2 = updatePath.slice(0, -1).length;
    let index = 0;
    while (index < length2) {
      object = isUndefined(object) ? index++ : object[updatePath[index++]];
    }
    return object;
  }
  function isEmptyArray(obj) {
    for (const key in obj) {
      if (!isUndefined(obj[key])) {
        return false;
      }
    }
    return true;
  }
  function unset(object, path) {
    const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index = paths.length - 1;
    const key = paths[index];
    if (childObject) {
      delete childObject[key];
    }
    if (index !== 0 && (isObject3(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
      unset(object, paths.slice(0, -1));
    }
    return object;
  }
  function createSubject() {
    let _observers = [];
    const next2 = (value) => {
      for (const observer of _observers) {
        observer.next && observer.next(value);
      }
    };
    const subscribe = (observer) => {
      _observers.push(observer);
      return {
        unsubscribe: () => {
          _observers = _observers.filter((o4) => o4 !== observer);
        }
      };
    };
    const unsubscribe = () => {
      _observers = [];
    };
    return {
      get observers() {
        return _observers;
      },
      next: next2,
      subscribe,
      unsubscribe
    };
  }
  var isPrimitive = (value) => isNullOrUndefined2(value) || !isObjectType(value);
  function deepEqual3(object1, object2) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
      return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
      return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const key of keys1) {
      const val1 = object1[key];
      if (!keys2.includes(key)) {
        return false;
      }
      if (key !== "ref") {
        const val2 = object2[key];
        if (isDateObject(val1) && isDateObject(val2) || isObject3(val1) && isObject3(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual3(val1, val2) : val1 !== val2) {
          return false;
        }
      }
    }
    return true;
  }
  var isMultipleSelect = (element) => element.type === `select-multiple`;
  var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
  var live = (ref) => isHTMLElement3(ref) && ref.isConnected;
  var objectHasFunction = (data) => {
    for (const key in data) {
      if (isFunction2(data[key])) {
        return true;
      }
    }
    return false;
  };
  function markFieldsDirty(data, fields = {}) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject3(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject3(data[key]) && !objectHasFunction(data[key])) {
          fields[key] = Array.isArray(data[key]) ? [] : {};
          markFieldsDirty(data[key], fields[key]);
        } else if (!isNullOrUndefined2(data[key])) {
          fields[key] = true;
        }
      }
    }
    return fields;
  }
  function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject3(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject3(data[key]) && !objectHasFunction(data[key])) {
          if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
            dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
          } else {
            getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined2(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
          }
        } else {
          dirtyFieldsFromValues[key] = !deepEqual3(data[key], formValues[key]);
        }
      }
    }
    return dirtyFieldsFromValues;
  }
  var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
  var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString3(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
  function getFieldValue(_f) {
    const ref = _f.ref;
    if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
      return;
    }
    if (isFileInput(ref)) {
      return ref.files;
    }
    if (isRadioInput(ref)) {
      return getRadioValue(_f.refs).value;
    }
    if (isMultipleSelect(ref)) {
      return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
      return getCheckboxValue(_f.refs).value;
    }
    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
  }
  var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields = {};
    for (const name of fieldsNames) {
      const field = get3(_fields, name);
      field && set3(fields, name, field._f);
    }
    return {
      criteriaMode,
      names: [...fieldsNames],
      fields,
      shouldUseNativeValidation
    };
  };
  var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject3(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
  var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
  function schemaErrorLookup(errors, _fields, name) {
    const error = get3(errors, name);
    if (error || isKey(name)) {
      return {
        error,
        name
      };
    }
    const names = name.split(".");
    while (names.length) {
      const fieldName = names.join(".");
      const field = get3(_fields, fieldName);
      const foundError = get3(errors, fieldName);
      if (field && !Array.isArray(field) && name !== fieldName) {
        return { name };
      }
      if (foundError && foundError.type) {
        return {
          name: fieldName,
          error: foundError
        };
      }
      names.pop();
    }
    return {
      name
    };
  }
  var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
      return false;
    } else if (!isSubmitted && mode.isOnTouch) {
      return !(isTouched || isBlurEvent);
    } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
      return !isBlurEvent;
    } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
      return isBlurEvent;
    }
    return true;
  };
  var unsetEmptyArray = (ref, name) => !compact(get3(ref, name)).length && unset(ref, name);
  var defaultOptions = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true
  };
  function createFormControl(props = {}, flushRootRender) {
    let _options = {
      ...defaultOptions,
      ...props
    };
    let _formState = {
      submitCount: 0,
      isDirty: false,
      isLoading: isFunction2(_options.defaultValues),
      isValidating: false,
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      touchedFields: {},
      dirtyFields: {},
      errors: {}
    };
    let _fields = {};
    let _defaultValues = isObject3(_options.defaultValues) || isObject3(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
    let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
    let _state2 = {
      action: false,
      mount: false,
      watch: false
    };
    let _names = {
      mount: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    };
    let delayErrorCallback;
    let timer2 = 0;
    const _proxyFormState = {
      isDirty: false,
      dirtyFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    };
    const _subjects = {
      values: createSubject(),
      array: createSubject(),
      state: createSubject()
    };
    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;
    const validationModeBeforeSubmit = getValidationModes(_options.mode);
    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce2 = (callback) => (wait) => {
      clearTimeout(timer2);
      timer2 = setTimeout(callback, wait);
    };
    const _updateValid = async (shouldUpdateValid) => {
      if (_proxyFormState.isValid || shouldUpdateValid) {
        const isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
        if (isValid !== _formState.isValid) {
          _subjects.state.next({
            isValid
          });
        }
      }
    };
    const _updateIsValidating = (value) => _proxyFormState.isValidating && _subjects.state.next({
      isValidating: value
    });
    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
      if (args && method) {
        _state2.action = true;
        if (shouldUpdateFieldsAndState && Array.isArray(get3(_fields, name))) {
          const fieldValues = method(get3(_fields, name), args.argA, args.argB);
          shouldSetValues && set3(_fields, name, fieldValues);
        }
        if (shouldUpdateFieldsAndState && Array.isArray(get3(_formState.errors, name))) {
          const errors = method(get3(_formState.errors, name), args.argA, args.argB);
          shouldSetValues && set3(_formState.errors, name, errors);
          unsetEmptyArray(_formState.errors, name);
        }
        if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get3(_formState.touchedFields, name))) {
          const touchedFields = method(get3(_formState.touchedFields, name), args.argA, args.argB);
          shouldSetValues && set3(_formState.touchedFields, name, touchedFields);
        }
        if (_proxyFormState.dirtyFields) {
          _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
        }
        _subjects.state.next({
          name,
          isDirty: _getDirty(name, values),
          dirtyFields: _formState.dirtyFields,
          errors: _formState.errors,
          isValid: _formState.isValid
        });
      } else {
        set3(_formValues, name, values);
      }
    };
    const updateErrors = (name, error) => {
      set3(_formState.errors, name, error);
      _subjects.state.next({
        errors: _formState.errors
      });
    };
    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
      const field = get3(_fields, name);
      if (field) {
        const defaultValue = get3(_formValues, name, isUndefined(value) ? get3(_defaultValues, name) : value);
        isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set3(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
        _state2.mount && _updateValid();
      }
    };
    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
      let shouldUpdateField = false;
      let isPreviousDirty = false;
      const output = {
        name
      };
      if (!isBlurEvent || shouldDirty) {
        if (_proxyFormState.isDirty) {
          isPreviousDirty = _formState.isDirty;
          _formState.isDirty = output.isDirty = _getDirty();
          shouldUpdateField = isPreviousDirty !== output.isDirty;
        }
        const isCurrentFieldPristine = deepEqual3(get3(_defaultValues, name), fieldValue);
        isPreviousDirty = get3(_formState.dirtyFields, name);
        isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set3(_formState.dirtyFields, name, true);
        output.dirtyFields = _formState.dirtyFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
      }
      if (isBlurEvent) {
        const isPreviousFieldTouched = get3(_formState.touchedFields, name);
        if (!isPreviousFieldTouched) {
          set3(_formState.touchedFields, name, isBlurEvent);
          output.touchedFields = _formState.touchedFields;
          shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
        }
      }
      shouldUpdateField && shouldRender && _subjects.state.next(output);
      return shouldUpdateField ? output : {};
    };
    const shouldRenderByError = (name, isValid, error, fieldState) => {
      const previousFieldError = get3(_formState.errors, name);
      const shouldUpdateValid = _proxyFormState.isValid && isBoolean2(isValid) && _formState.isValid !== isValid;
      if (props.delayError && error) {
        delayErrorCallback = debounce2(() => updateErrors(name, error));
        delayErrorCallback(props.delayError);
      } else {
        clearTimeout(timer2);
        delayErrorCallback = null;
        error ? set3(_formState.errors, name, error) : unset(_formState.errors, name);
      }
      if ((error ? !deepEqual3(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
        const updatedFormState = {
          ...fieldState,
          ...shouldUpdateValid && isBoolean2(isValid) ? { isValid } : {},
          errors: _formState.errors,
          name
        };
        _formState = {
          ..._formState,
          ...updatedFormState
        };
        _subjects.state.next(updatedFormState);
      }
      _updateIsValidating(false);
    };
    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    const executeSchemaAndUpdateState = async (names) => {
      const { errors } = await _executeSchema();
      if (names) {
        for (const name of names) {
          const error = get3(errors, name);
          error ? set3(_formState.errors, name, error) : unset(_formState.errors, name);
        }
      } else {
        _formState.errors = errors;
      }
      return errors;
    };
    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
      valid: true
    }) => {
      for (const name in fields) {
        const field = fields[name];
        if (field) {
          const { _f, ...fieldValue } = field;
          if (_f) {
            const isFieldArrayRoot = _names.array.has(_f.name);
            const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
            if (fieldError[_f.name]) {
              context.valid = false;
              if (shouldOnlyCheckValid) {
                break;
              }
            }
            !shouldOnlyCheckValid && (get3(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set3(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
          }
          fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
        }
      }
      return context.valid;
    };
    const _removeUnmounted = () => {
      for (const name of _names.unMount) {
        const field = get3(_fields, name);
        field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
      }
      _names.unMount = /* @__PURE__ */ new Set();
    };
    const _getDirty = (name, data) => (name && data && set3(_formValues, name, data), !deepEqual3(getValues(), _defaultValues));
    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
      ..._state2.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString3(names) ? { [names]: defaultValue } : defaultValue
    }, isGlobal, defaultValue);
    const _getFieldArray = (name) => compact(get3(_state2.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get3(_defaultValues, name, []) : []));
    const setFieldValue = (name, value, options = {}) => {
      const field = get3(_fields, name);
      let fieldValue = value;
      if (field) {
        const fieldReference = field._f;
        if (fieldReference) {
          !fieldReference.disabled && set3(_formValues, name, getFieldValueAs(value, fieldReference));
          fieldValue = isHTMLElement3(fieldReference.ref) && isNullOrUndefined2(value) ? "" : value;
          if (isMultipleSelect(fieldReference.ref)) {
            [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
          } else if (fieldReference.refs) {
            if (isCheckBoxInput(fieldReference.ref)) {
              fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
            } else {
              fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
            }
          } else if (isFileInput(fieldReference.ref)) {
            fieldReference.ref.value = "";
          } else {
            fieldReference.ref.value = fieldValue;
            if (!fieldReference.ref.type) {
              _subjects.values.next({
                name,
                values: { ..._formValues }
              });
            }
          }
        }
      }
      (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
      options.shouldValidate && trigger(name);
    };
    const setValues = (name, value, options) => {
      for (const fieldKey in value) {
        const fieldValue = value[fieldKey];
        const fieldName = `${name}.${fieldKey}`;
        const field = get3(_fields, fieldName);
        (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
      }
    };
    const setValue = (name, value, options = {}) => {
      const field = get3(_fields, name);
      const isFieldArray = _names.array.has(name);
      const cloneValue = cloneObject(value);
      set3(_formValues, name, cloneValue);
      if (isFieldArray) {
        _subjects.array.next({
          name,
          values: { ..._formValues }
        });
        if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
          _subjects.state.next({
            name,
            dirtyFields: getDirtyFields(_defaultValues, _formValues),
            isDirty: _getDirty(name, cloneValue)
          });
        }
      } else {
        field && !field._f && !isNullOrUndefined2(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
      }
      isWatched(name, _names) && _subjects.state.next({ ..._formState });
      _subjects.values.next({
        name,
        values: { ..._formValues }
      });
      !_state2.mount && flushRootRender();
    };
    const onChange = async (event) => {
      const target = event.target;
      let name = target.name;
      let isFieldValueUpdated = true;
      const field = get3(_fields, name);
      const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
      if (field) {
        let error;
        let isValid;
        const fieldValue = getCurrentFieldValue();
        const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
        const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get3(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get3(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
        const watched = isWatched(name, _names, isBlurEvent);
        set3(_formValues, name, fieldValue);
        if (isBlurEvent) {
          field._f.onBlur && field._f.onBlur(event);
          delayErrorCallback && delayErrorCallback(0);
        } else if (field._f.onChange) {
          field._f.onChange(event);
        }
        const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
        const shouldRender = !isEmptyObject(fieldState) || watched;
        !isBlurEvent && _subjects.values.next({
          name,
          type: event.type,
          values: { ..._formValues }
        });
        if (shouldSkipValidation) {
          _proxyFormState.isValid && _updateValid();
          return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
        }
        !isBlurEvent && watched && _subjects.state.next({ ..._formState });
        _updateIsValidating(true);
        if (_options.resolver) {
          const { errors } = await _executeSchema([name]);
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
          error = errorLookupResult.error;
          name = errorLookupResult.name;
          isValid = isEmptyObject(errors);
        } else {
          error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
          isFieldValueUpdated = isNaN(fieldValue) || fieldValue === get3(_formValues, name, fieldValue);
          if (isFieldValueUpdated) {
            if (error) {
              isValid = false;
            } else if (_proxyFormState.isValid) {
              isValid = await executeBuiltInValidation(_fields, true);
            }
          }
        }
        if (isFieldValueUpdated) {
          field._f.deps && trigger(field._f.deps);
          shouldRenderByError(name, isValid, error, fieldState);
        }
      }
    };
    const trigger = async (name, options = {}) => {
      let isValid;
      let validationResult;
      const fieldNames = convertToArrayPayload(name);
      _updateIsValidating(true);
      if (_options.resolver) {
        const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
        isValid = isEmptyObject(errors);
        validationResult = name ? !fieldNames.some((name2) => get3(errors, name2)) : isValid;
      } else if (name) {
        validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
          const field = get3(_fields, fieldName);
          return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
        }))).every(Boolean);
        !(!validationResult && !_formState.isValid) && _updateValid();
      } else {
        validationResult = isValid = await executeBuiltInValidation(_fields);
      }
      _subjects.state.next({
        ...!isString3(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name },
        ..._options.resolver || !name ? { isValid } : {},
        errors: _formState.errors,
        isValidating: false
      });
      options.shouldFocus && !validationResult && focusFieldBy(_fields, (key) => key && get3(_formState.errors, key), name ? fieldNames : _names.mount);
      return validationResult;
    };
    const getValues = (fieldNames) => {
      const values = {
        ..._defaultValues,
        ..._state2.mount ? _formValues : {}
      };
      return isUndefined(fieldNames) ? values : isString3(fieldNames) ? get3(values, fieldNames) : fieldNames.map((name) => get3(values, name));
    };
    const getFieldState = (name, formState) => ({
      invalid: !!get3((formState || _formState).errors, name),
      isDirty: !!get3((formState || _formState).dirtyFields, name),
      isTouched: !!get3((formState || _formState).touchedFields, name),
      error: get3((formState || _formState).errors, name)
    });
    const clearErrors = (name) => {
      name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
      _subjects.state.next({
        errors: name ? _formState.errors : {}
      });
    };
    const setError = (name, error, options) => {
      const ref = (get3(_fields, name, { _f: {} })._f || {}).ref;
      set3(_formState.errors, name, {
        ...error,
        ref
      });
      _subjects.state.next({
        name,
        errors: _formState.errors,
        isValid: false
      });
      options && options.shouldFocus && ref && ref.focus && ref.focus();
    };
    const watch = (name, defaultValue) => isFunction2(name) ? _subjects.values.subscribe({
      next: (payload) => name(_getWatch(void 0, defaultValue), payload)
    }) : _getWatch(name, defaultValue, true);
    const unregister = (name, options = {}) => {
      for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
        _names.mount.delete(fieldName);
        _names.array.delete(fieldName);
        if (!options.keepValue) {
          unset(_fields, fieldName);
          unset(_formValues, fieldName);
        }
        !options.keepError && unset(_formState.errors, fieldName);
        !options.keepDirty && unset(_formState.dirtyFields, fieldName);
        !options.keepTouched && unset(_formState.touchedFields, fieldName);
        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
      }
      _subjects.values.next({
        values: { ..._formValues }
      });
      _subjects.state.next({
        ..._formState,
        ...!options.keepDirty ? {} : { isDirty: _getDirty() }
      });
      !options.keepIsValid && _updateValid();
    };
    const register = (name, options = {}) => {
      let field = get3(_fields, name);
      const disabledIsDefined = isBoolean2(options.disabled);
      set3(_fields, name, {
        ...field || {},
        _f: {
          ...field && field._f ? field._f : { ref: { name } },
          name,
          mount: true,
          ...options
        }
      });
      _names.mount.add(name);
      field ? disabledIsDefined && set3(_formValues, name, options.disabled ? void 0 : get3(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true, options.value);
      return {
        ...disabledIsDefined ? { disabled: options.disabled } : {},
        ..._options.shouldUseNativeValidation ? {
          required: !!options.required,
          min: getRuleValue(options.min),
          max: getRuleValue(options.max),
          minLength: getRuleValue(options.minLength),
          maxLength: getRuleValue(options.maxLength),
          pattern: getRuleValue(options.pattern)
        } : {},
        name,
        onChange,
        onBlur: onChange,
        ref: (ref) => {
          if (ref) {
            register(name, options);
            field = get3(_fields, name);
            const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
            const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
            const refs = field._f.refs || [];
            if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
              return;
            }
            set3(_fields, name, {
              _f: {
                ...field._f,
                ...radioOrCheckbox ? {
                  refs: [
                    ...refs.filter(live),
                    fieldRef,
                    ...Array.isArray(get3(_defaultValues, name)) ? [{}] : []
                  ],
                  ref: { type: fieldRef.type, name }
                } : { ref: fieldRef }
              }
            });
            updateValidAndValue(name, false, void 0, fieldRef);
          } else {
            field = get3(_fields, name, {});
            if (field._f) {
              field._f.mount = false;
            }
            (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state2.action) && _names.unMount.add(name);
          }
        }
      };
    };
    const _focusError = () => _options.shouldFocusError && focusFieldBy(_fields, (key) => key && get3(_formState.errors, key), _names.mount);
    const handleSubmit = (onValid, onInvalid) => async (e3) => {
      if (e3) {
        e3.preventDefault && e3.preventDefault();
        e3.persist && e3.persist();
      }
      let fieldValues = cloneObject(_formValues);
      _subjects.state.next({
        isSubmitting: true
      });
      if (_options.resolver) {
        const { errors, values } = await _executeSchema();
        _formState.errors = errors;
        fieldValues = values;
      } else {
        await executeBuiltInValidation(_fields);
      }
      unset(_formState.errors, "root");
      if (isEmptyObject(_formState.errors)) {
        _subjects.state.next({
          errors: {}
        });
        await onValid(fieldValues, e3);
      } else {
        if (onInvalid) {
          await onInvalid({ ..._formState.errors }, e3);
        }
        _focusError();
        setTimeout(_focusError);
      }
      _subjects.state.next({
        isSubmitted: true,
        isSubmitting: false,
        isSubmitSuccessful: isEmptyObject(_formState.errors),
        submitCount: _formState.submitCount + 1,
        errors: _formState.errors
      });
    };
    const resetField = (name, options = {}) => {
      if (get3(_fields, name)) {
        if (isUndefined(options.defaultValue)) {
          setValue(name, get3(_defaultValues, name));
        } else {
          setValue(name, options.defaultValue);
          set3(_defaultValues, name, options.defaultValue);
        }
        if (!options.keepTouched) {
          unset(_formState.touchedFields, name);
        }
        if (!options.keepDirty) {
          unset(_formState.dirtyFields, name);
          _formState.isDirty = options.defaultValue ? _getDirty(name, get3(_defaultValues, name)) : _getDirty();
        }
        if (!options.keepError) {
          unset(_formState.errors, name);
          _proxyFormState.isValid && _updateValid();
        }
        _subjects.state.next({ ..._formState });
      }
    };
    const _reset = (formValues, keepStateOptions = {}) => {
      const updatedValues = formValues || _defaultValues;
      const cloneUpdatedValues = cloneObject(updatedValues);
      const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;
      if (!keepStateOptions.keepDefaultValues) {
        _defaultValues = updatedValues;
      }
      if (!keepStateOptions.keepValues) {
        if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {
          for (const fieldName of _names.mount) {
            get3(_formState.dirtyFields, fieldName) ? set3(values, fieldName, get3(_formValues, fieldName)) : setValue(fieldName, get3(values, fieldName));
          }
        } else {
          if (isWeb && isUndefined(formValues)) {
            for (const name of _names.mount) {
              const field = get3(_fields, name);
              if (field && field._f) {
                const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                if (isHTMLElement3(fieldReference)) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.reset();
                    break;
                  }
                }
              }
            }
          }
          _fields = {};
        }
        _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;
        _subjects.array.next({
          values: { ...values }
        });
        _subjects.values.next({
          values: { ...values }
        });
      }
      _names = {
        mount: /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: false,
        focus: ""
      };
      !_state2.mount && flushRootRender();
      _state2.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;
      _state2.watch = !!props.shouldUnregister;
      _subjects.state.next({
        submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
        isDirty: keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual3(formValues, _defaultValues)),
        isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
        dirtyFields: keepStateOptions.keepDirtyValues ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
        touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
        errors: keepStateOptions.keepErrors ? _formState.errors : {},
        isSubmitting: false,
        isSubmitSuccessful: false
      });
    };
    const reset = (formValues, keepStateOptions) => _reset(isFunction2(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
    const setFocus = (name, options = {}) => {
      const field = get3(_fields, name);
      const fieldReference = field && field._f;
      if (fieldReference) {
        const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
        if (fieldRef.focus) {
          fieldRef.focus();
          options.shouldSelect && fieldRef.select();
        }
      }
    };
    const _updateFormState = (updatedFormState) => {
      _formState = {
        ..._formState,
        ...updatedFormState
      };
    };
    const _resetDefaultValues = () => isFunction2(_options.defaultValues) && _options.defaultValues().then((values) => {
      reset(values, _options.resetOptions);
      _subjects.state.next({
        isLoading: false
      });
    });
    return {
      control: {
        register,
        unregister,
        getFieldState,
        _executeSchema,
        _getWatch,
        _getDirty,
        _updateValid,
        _removeUnmounted,
        _updateFieldArray,
        _getFieldArray,
        _reset,
        _resetDefaultValues,
        _updateFormState,
        _subjects,
        _proxyFormState,
        get _fields() {
          return _fields;
        },
        get _formValues() {
          return _formValues;
        },
        get _state() {
          return _state2;
        },
        set _state(value) {
          _state2 = value;
        },
        get _defaultValues() {
          return _defaultValues;
        },
        get _names() {
          return _names;
        },
        set _names(value) {
          _names = value;
        },
        get _formState() {
          return _formState;
        },
        set _formState(value) {
          _formState = value;
        },
        get _options() {
          return _options;
        },
        set _options(value) {
          _options = {
            ..._options,
            ...value
          };
        }
      },
      trigger,
      register,
      handleSubmit,
      watch,
      setValue,
      getValues,
      reset,
      resetField,
      clearErrors,
      unregister,
      setError,
      setFocus,
      getFieldState
    };
  }
  function useForm(props = {}) {
    const _formControl = import_react71.default.useRef();
    const [formState, updateFormState] = import_react71.default.useState({
      isDirty: false,
      isValidating: false,
      isLoading: isFunction2(props.defaultValues),
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      errors: {},
      defaultValues: isFunction2(props.defaultValues) ? void 0 : props.defaultValues
    });
    if (!_formControl.current) {
      _formControl.current = {
        ...createFormControl(props, () => updateFormState((formState2) => ({ ...formState2 }))),
        formState
      };
    }
    const control = _formControl.current.control;
    control._options = props;
    useSubscribe({
      subject: control._subjects.state,
      next: (value) => {
        if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
          updateFormState({ ...control._formState });
        }
      }
    });
    import_react71.default.useEffect(() => {
      if (props.values && !deepEqual3(props.values, control._defaultValues)) {
        control._reset(props.values, control._options.resetOptions);
      } else {
        control._resetDefaultValues();
      }
    }, [props.values, control]);
    import_react71.default.useEffect(() => {
      if (!control._state.mount) {
        control._updateValid();
        control._state.mount = true;
      }
      if (control._state.watch) {
        control._state.watch = false;
        control._subjects.state.next({ ...control._formState });
      }
      control._removeUnmounted();
    });
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
  }

  // src/components/EditorActions.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var selectResetSelectedElements = (state) => state.resetSelectedElements;
  var useUnselect = () => useStore2(selectResetSelectedElements);
  function EditorActions() {
    const onCancel = useUnselect();
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { onClick: onCancel, children: "Cancel" }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { appearance: "primary", type: "submit", children: "Save" })
    ] });
  }

  // src/components/blockEditors/BucketEditor.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  function BucketEditor(props) {
    const onCancel = useUnselect();
    const { register, handleSubmit, watch } = useForm({
      values: {
        name: props.node.data.name,
        path: props.node.data.config.bucket?.path || ""
      }
    });
    const onSubmit = (data) => {
      props.node.data.name = data.name;
      if (!props.node.data.config.bucket) {
        props.node.data.config.bucket = {
          path: ""
        };
      }
      props.node.data.config.bucket.path = data.path;
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Input, { value: values.name, ...register("name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Field, { label: "Path", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Input, { value: values.path, ...register("path") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(EditorActions, {})
    ] }) });
  }

  // src/components/blockEditors/CollectionEditor.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  function CollectionEditor(props) {
    const onCancel = useUnselect();
    const { register, handleSubmit, watch } = useForm({
      values: {
        name: props.node.data.name || "",
        config: {
          name: props.node.data.config.collection?.name || ""
        }
      }
    });
    const onSubmit = (data) => {
      props.node.data.name = data.name;
      if (!props.node.data.config.collection) {
        props.node.data.config.collection = {
          name: ""
        };
      }
      props.node.data.config.collection.name = data.config.name;
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Input, { value: values.name, ...register("name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Field, { label: "Table", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Input, { value: values.config.name, ...register("config.name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Field, { label: "On conflict", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Select2, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("option", { value: "do_nothing", children: "Do nothing" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("option", { value: "do_update", children: "Do update" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(EditorActions, {})
    ] }) });
  }

  // src/components/blockEditors/FunctionEditor.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  function FunctionEditor({ node: node2 }) {
    const onCancel = useUnselect();
    const { watch, register, handleSubmit } = useForm({
      values: {
        name: node2.data.name || "",
        runtime: node2.data.config.function?.runtime || "node"
      }
    });
    const onSubmit = (data) => {
      node2.data.name = data.name;
      if (!node2.data.config.function) {
        node2.data.config.function = {
          runtime: ""
        };
      }
      node2.data.config.function.runtime = data.runtime;
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Input, { value: values.name || "", ...register("name") }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Field, { label: "Language", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(Select2, { value: values.runtime, ...register("runtime"), children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "node", children: "Node" }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "go", children: "Go" }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "python", children: "Python" })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(EditorActions, {})
    ] }) });
  }

  // src/components/blockEditors/InputEditor.tsx
  init_define_process();
  init_define_process_env();
  var import_react72 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var fieldTypeToDisplay = {
    [0 /* STRING */]: "String",
    [1 /* INTEGER */]: "Integer",
    [2 /* BOOLEAN */]: "Boolean"
  };
  var stringToFieldType = {
    "STRING": 0 /* STRING */,
    "INTEGER": 1 /* INTEGER */,
    "BOOLEAN": 2 /* BOOLEAN */
  };
  function InputEditor({ node: node2 }) {
    const [showSampleDataForm, setShowSampleDataForm] = (0, import_react72.useState)(false);
    const onCancel = useUnselect();
    const sampleDataStorageKey = `${node2.data.name}-sampleData`;
    const { watch, setValue, register, handleSubmit } = useForm({
      values: {
        name: node2.data.name || "",
        config: {
          fields: node2.data.config.input?.fields?.map((value) => ({
            ...value,
            // TODO - Really really hacky, but connect seems to serialize enums differently
            // than the typescript expects
            type: stringToFieldType[value.type] || value.type || 0
          })) || [],
          sampleData: JSON.parse(localStorage.getItem(sampleDataStorageKey) || "{}")
        }
      }
    });
    const onSubmit = (data) => {
      node2.data.name = data.name;
      if (!node2.data.config.input) {
        node2.data.config.input = {
          fields: []
        };
      }
      node2.data.config.input.fields = data.config.fields;
      localStorage.setItem(sampleDataStorageKey, JSON.stringify(data.config.sampleData));
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Input, { value: values.name, ...register("name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Field, { label: "Fields", children: values.config.fields?.map((field, index) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            Input,
            {
              value: values.config.fields[index].name,
              ...register(`config.fields.${index}.name`)
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            Dropdown,
            {
              id: "fieldType" + index,
              value: fieldTypeToDisplay[field.type || 0 /* STRING */],
              onOptionSelect: (_2, data) => {
                setValue(
                  `config.fields.${index}.type`,
                  Number(data.optionValue)
                );
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Option, { value: String(0 /* STRING */), children: "String" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Option, { value: String(1 /* INTEGER */), children: "Integer" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Option, { value: String(2 /* BOOLEAN */), children: "Boolean" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            Button,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(HiOutlineTrash, { className: "h-4 w-4" }),
              onClick: () => {
                setValue(
                  "config.fields",
                  values.config.fields.filter((_2, i4) => i4 !== index)
                );
                const newSampleData = { ...values.config.sampleData };
                delete newSampleData[field.name];
                setValue("config.sampleData", newSampleData);
              }
            }
          )
        ] }, index)) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Button,
          {
            icon: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(HiPlus, { className: "w-4 h-4" }),
            onClick: () => {
              setValue("config.fields", [
                ...values.config.fields || [],
                new FieldDefinition({
                  name: "",
                  type: 0 /* STRING */
                })
              ]);
            },
            children: "Add Field"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(TbFileText, { onClick: () => setShowSampleDataForm(!showSampleDataForm) }),
      showSampleDataForm && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { children: values.config.fields.map((field, index) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex items-center gap-2 mb-2", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Field, { label: field.name, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(SampleDataField, { field, values, setValue }) }) }, `${field.name}-${index}`)) }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(EditorActions, {})
    ] }) });
  }
  function SampleDataField({ field, values, setValue }) {
    switch (field.type) {
      case 0 /* STRING */:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Input,
          {
            value: String(values.config.sampleData[field.name] || ""),
            onChange: (_2, data) => setValue(`config.sampleData.${field.name}`, data.value)
          }
        );
      case 1 /* INTEGER */:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Input,
          {
            type: "number",
            value: String(values.config.sampleData[field.name]),
            onChange: (_2, data) => setValue(`config.sampleData.${field.name}`, Number(data.value))
          }
        );
      case 2 /* BOOLEAN */:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Checkbox,
          {
            checked: Boolean(values.config.sampleData[field.name]),
            onChange: (_2, data) => setValue(`config.sampleData.${field.name}`, data.checked)
          }
        );
    }
  }

  // src/components/blockEditors/QueryEditor.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  function QueryEditor(props) {
    const onCancel = useUnselect();
    const { register, handleSubmit, watch } = useForm({
      values: {
        name: props.node.data.name || "",
        config: {
          collection: props.node.data.config.query?.collection || ""
        }
      }
    });
    const onSubmit = (data) => {
      props.node.data.name = data.name;
      if (!props.node.data.config.query) {
        props.node.data.config.query = {
          collection: ""
        };
      }
      props.node.data.config.query.collection = data.config.collection;
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Input, { value: values.name, ...register("name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Field, { label: "Table", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        Input,
        {
          value: values.config.collection,
          ...register("config.collection")
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(EditorActions, {})
    ] }) });
  }

  // src/components/blockEditors/RESTEditor.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  function RESTEditor({ node: node2 }) {
    const onCancel = useUnselect();
    const { watch, setValue, register, handleSubmit } = useForm({
      values: {
        name: node2.data.name || "",
        config: {
          method: node2.data.config.rest?.method || "GET",
          path: node2.data.config.rest?.path || ""
        },
        headers: Object.entries(node2.data.config.rest?.headers || {}).map(
          ([key, value]) => ({ key, value })
        )
      }
    });
    const onSubmit = (data) => {
      node2.data.name = data.name;
      if (!node2.data.config.rest) {
        node2.data.config.rest = {
          method: "",
          path: "",
          headers: {}
        };
      }
      node2.data.config.rest.method = data.config.method;
      node2.data.config.rest.path = data.config.path;
      node2.data.config.rest.headers = data.headers.reduce((obj, acc) => {
        obj[acc.key] = acc.value;
        return obj;
      }, {});
      onCancel();
    };
    const values = watch();
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("form", { onSubmit: handleSubmit(onSubmit), children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex flex-col gap-2 p-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Field, { label: "Name", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Input, { value: values.name, ...register("name") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Field, { label: "Method", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
        Dropdown,
        {
          value: "GET",
          onOptionSelect: (_2, data) => {
            setValue("config.method", data.optionValue || "");
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Option, { children: "GET" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Option, { children: "PATCH" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Option, { children: "POST" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Option, { children: "PUT" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Option, { children: "DELETE" })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Field, { label: "Path", required: true, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Input, { value: values.config.path, ...register("config.path") }) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Field, { label: "Headers", children: values.headers.map((header, index) => {
          return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              Input,
              {
                value: header.key,
                ...register(`headers.${index}.key`)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              Input,
              {
                value: header.value,
                ...register(`headers.${index}.value`)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              Button,
              {
                icon: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HiOutlineTrash, { className: "h-4 w-4" }),
                onClick: () => {
                  setValue(
                    "headers",
                    values.headers.filter((_2, i4) => i4 !== index)
                  );
                }
              }
            )
          ] }, index);
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          Button,
          {
            icon: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HiPlus, { className: "w-4 h-4" }),
            onClick: () => {
              setValue(
                "headers",
                values.headers.concat({ key: "", value: "" })
              );
            },
            children: "Add Header"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(EditorActions, {})
    ] }) });
  }

  // src/components/EditorPanel.tsx
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  function EditorPanel() {
    const [activeNode, setActiveNode] = (0, import_react73.useState)(null);
    useOnSelectionChange({
      onChange: ({ nodes }) => {
        if (nodes.length !== 1) {
          setActiveNode(null);
          return;
        }
        const [node2] = nodes;
        setActiveNode(node2);
      }
    });
    if (!activeNode)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "absolute top-0 right-0 m-4 z-10", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(NodeEditor, { node: activeNode }) }) });
  }
  function NodeEditor(props) {
    if (!props.node || !props.node.type) {
      return null;
    }
    switch (props.node.type) {
      case "protoflow.input":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(InputEditor, { node: props.node });
      case "protoflow.collection":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(CollectionEditor, { node: props.node });
      case "protoflow.query":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(QueryEditor, { node: props.node });
      case "protoflow.function":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(FunctionEditor, { node: props.node });
      case "protoflow.bucket":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(BucketEditor, { node: props.node });
      case "protoflow.rest":
        return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(RESTEditor, { node: props.node });
      default:
        return null;
    }
  }

  // src/components/RunPanel.tsx
  init_define_process();
  init_define_process_env();
  function RunPanel() {
    return null;
  }

  // src/components/ActionPanel.tsx
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  function ActionPanel() {
    const editrMode = useEditorMode();
    switch (editrMode) {
      case "editor":
        return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(EditorPanel, {});
      case "run":
        return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(RunPanel, {});
    }
  }

  // src/components/BlocksList.tsx
  init_define_process();
  init_define_process_env();
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  function BlocksList() {
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "absolute flex flex-col gap-1 m-3 z-10 top-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.input", children: "Input" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.collection", children: "Collection" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.function", children: "Function" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.query", children: "Query" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.queue", children: "Queue" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.bucket", children: "Bucket" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.email", children: "Email" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(NodeButton, { nodeType: "protoflow.rest", children: "REST" })
    ] });
  }
  function NodeButton(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      "div",
      {
        draggable: true,
        onDragStart: (e3) => {
          e3.dataTransfer.setData("application/reactflow", props.nodeType);
          e3.dataTransfer.effectAllowed = "move";
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Button, { size: "small", className: "w-full", children: props.children })
      }
    );
  }

  // node_modules/.pnpm/reactflow@11.7.0_react-dom@18.2.0_react@18.2.0/node_modules/reactflow/dist/style.css
  init_define_process();
  init_define_process_env();
  var css = `/* this gets exported as style.css and can be used for the default theming */
/* these are the necessary styles for React Flow, they get used by base.css and style.css */
.react-flow__container {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}
.react-flow__pane {
  z-index: 1;
  cursor: grab;
}
.react-flow__pane.selection {
    cursor: pointer;
  }
.react-flow__pane.dragging {
    cursor: grabbing;
  }
.react-flow__viewport {
  transform-origin: 0 0;
  z-index: 2;
  pointer-events: none;
}
.react-flow__renderer {
  z-index: 4;
}
.react-flow__selection {
  z-index: 6;
}
.react-flow__nodesselection-rect:focus,
.react-flow__nodesselection-rect:focus-visible {
  outline: none;
}
.react-flow .react-flow__edges {
  pointer-events: none;
  overflow: visible;
}
.react-flow__edge-path,
.react-flow__connection-path {
  stroke: #b1b1b7;
  stroke-width: 1;
  fill: none;
}
.react-flow__edge {
  pointer-events: visibleStroke;
  cursor: pointer;
}
.react-flow__edge.animated path {
    stroke-dasharray: 5;
    animation: dashdraw 0.5s linear infinite;
  }
.react-flow__edge.animated path.react-flow__edge-interaction {
    stroke-dasharray: none;
    animation: none;
  }
.react-flow__edge.inactive {
    pointer-events: none;
  }
.react-flow__edge.selected,
  .react-flow__edge:focus,
  .react-flow__edge:focus-visible {
    outline: none;
  }
.react-flow__edge.selected .react-flow__edge-path,
  .react-flow__edge:focus .react-flow__edge-path,
  .react-flow__edge:focus-visible .react-flow__edge-path {
    stroke: #555;
  }
.react-flow__edge-textwrapper {
    pointer-events: all;
  }
.react-flow__edge-textbg {
    fill: white;
  }
.react-flow__edge .react-flow__edge-text {
    pointer-events: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
  }
.react-flow__connection {
  pointer-events: none;
}
.react-flow__connection .animated {
    stroke-dasharray: 5;
    animation: dashdraw 0.5s linear infinite;
  }
.react-flow__connectionline {
  z-index: 1001;
}
.react-flow__nodes {
  pointer-events: none;
  transform-origin: 0 0;
}
.react-flow__node {
  position: absolute;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  pointer-events: all;
  transform-origin: 0 0;
  box-sizing: border-box;
  cursor: grab;
}
.react-flow__node.dragging {
    cursor: grabbing;
  }
.react-flow__nodesselection {
  z-index: 3;
  transform-origin: left top;
  pointer-events: none;
}
.react-flow__nodesselection-rect {
    position: absolute;
    pointer-events: all;
    cursor: grab;
  }
.react-flow__handle {
  position: absolute;
  pointer-events: none;
  min-width: 5px;
  min-height: 5px;
  width: 6px;
  height: 6px;
  background: #1a192b;
  border: 1px solid white;
  border-radius: 100%;
}
.react-flow__handle.connectionindicator {
    pointer-events: all;
    cursor: crosshair;
  }
.react-flow__handle-bottom {
    top: auto;
    left: 50%;
    bottom: -4px;
    transform: translate(-50%, 0);
  }
.react-flow__handle-top {
    left: 50%;
    top: -4px;
    transform: translate(-50%, 0);
  }
.react-flow__handle-left {
    top: 50%;
    left: -4px;
    transform: translate(0, -50%);
  }
.react-flow__handle-right {
    right: -4px;
    top: 50%;
    transform: translate(0, -50%);
  }
.react-flow__edgeupdater {
  cursor: move;
  pointer-events: all;
}
.react-flow__panel {
  position: absolute;
  z-index: 5;
  margin: 15px;
}
.react-flow__panel.top {
    top: 0;
  }
.react-flow__panel.bottom {
    bottom: 0;
  }
.react-flow__panel.left {
    left: 0;
  }
.react-flow__panel.right {
    right: 0;
  }
.react-flow__panel.center {
    left: 50%;
    transform: translateX(-50%);
  }
.react-flow__attribution {
  font-size: 10px;
  background: rgba(255, 255, 255, 0.5);
  padding: 2px 3px;
  margin: 0;
}
.react-flow__attribution a {
    text-decoration: none;
    color: #999;
  }
@keyframes dashdraw {
  from {
    stroke-dashoffset: 10;
  }
}
.react-flow__edgelabel-renderer {
  position: absolute;
  width: 100%;
  height: 100%;
  pointer-events: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}
.react-flow__edge.updating .react-flow__edge-path {
      stroke: #777;
    }
.react-flow__edge-text {
    font-size: 10px;
  }
.react-flow__node.selectable:focus,
  .react-flow__node.selectable:focus-visible {
    outline: none;
  }
.react-flow__node-default,
.react-flow__node-input,
.react-flow__node-output,
.react-flow__node-group {
  padding: 10px;
  border-radius: 3px;
  width: 150px;
  font-size: 12px;
  color: #222;
  text-align: center;
  border-width: 1px;
  border-style: solid;
  border-color: #1a192b;
  background-color: white;
}
.react-flow__node-default.selectable:hover, .react-flow__node-input.selectable:hover, .react-flow__node-output.selectable:hover, .react-flow__node-group.selectable:hover {
      box-shadow: 0 1px 4px 1px rgba(0, 0, 0, 0.08);
    }
.react-flow__node-default.selectable.selected,
    .react-flow__node-default.selectable:focus,
    .react-flow__node-default.selectable:focus-visible,
    .react-flow__node-input.selectable.selected,
    .react-flow__node-input.selectable:focus,
    .react-flow__node-input.selectable:focus-visible,
    .react-flow__node-output.selectable.selected,
    .react-flow__node-output.selectable:focus,
    .react-flow__node-output.selectable:focus-visible,
    .react-flow__node-group.selectable.selected,
    .react-flow__node-group.selectable:focus,
    .react-flow__node-group.selectable:focus-visible {
      box-shadow: 0 0 0 0.5px #1a192b;
    }
.react-flow__node-group {
  background-color: rgba(240, 240, 240, 0.25);
}
.react-flow__nodesselection-rect,
.react-flow__selection {
  background: rgba(0, 89, 220, 0.08);
  border: 1px dotted rgba(0, 89, 220, 0.8);
}
.react-flow__nodesselection-rect:focus,
  .react-flow__nodesselection-rect:focus-visible,
  .react-flow__selection:focus,
  .react-flow__selection:focus-visible {
    outline: none;
  }
.react-flow__controls {
  box-shadow: 0 0 2px 1px rgba(0, 0, 0, 0.08);
}
.react-flow__controls-button {
    border: none;
    background: #fefefe;
    border-bottom: 1px solid #eee;
    box-sizing: content-box;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 16px;
    height: 16px;
    cursor: pointer;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    padding: 5px;
  }
.react-flow__controls-button:hover {
      background: #f4f4f4;
    }
.react-flow__controls-button svg {
      width: 100%;
      max-width: 12px;
      max-height: 12px;
    }
.react-flow__minimap {
  background-color: #fff;
}
.react-flow__resize-control {
  position: absolute;
}
.react-flow__resize-control.left,
.react-flow__resize-control.right {
  cursor: ew-resize;
}
.react-flow__resize-control.top,
.react-flow__resize-control.bottom {
  cursor: ns-resize;
}
.react-flow__resize-control.top.left,
.react-flow__resize-control.bottom.right {
  cursor: nwse-resize;
}
.react-flow__resize-control.bottom.left,
.react-flow__resize-control.top.right {
  cursor: nesw-resize;
}
/* handle styles */
.react-flow__resize-control.handle {
  width: 4px;
  height: 4px;
  border: 1px solid #fff;
  border-radius: 1px;
  background-color: #3367d9;
  transform: translate(-50%, -50%);
}
.react-flow__resize-control.handle.left {
  left: 0;
  top: 50%;
}
.react-flow__resize-control.handle.right {
  left: 100%;
  top: 50%;
}
.react-flow__resize-control.handle.top {
  left: 50%;
  top: 0;
}
.react-flow__resize-control.handle.bottom {
  left: 50%;
  top: 100%;
}
.react-flow__resize-control.handle.top.left {
  left: 0;
}
.react-flow__resize-control.handle.bottom.left {
  left: 0;
}
.react-flow__resize-control.handle.top.right {
  left: 100%;
}
.react-flow__resize-control.handle.bottom.right {
  left: 100%;
}
/* line styles */
.react-flow__resize-control.line {
  border-color: #3367d9;
  border-width: 0;
  border-style: solid;
}
.react-flow__resize-control.line.left,
.react-flow__resize-control.line.right {
  width: 1px;
  transform: translate(-50%, 0);
  top: 0;
  height: 100%;
}
.react-flow__resize-control.line.left {
  left: 0;
  border-left-width: 1px;
}
.react-flow__resize-control.line.right {
  left: 100%;
  border-right-width: 1px;
}
.react-flow__resize-control.line.top,
.react-flow__resize-control.line.bottom {
  height: 1px;
  transform: translate(0, -50%);
  left: 0;
  width: 100%;
}
.react-flow__resize-control.line.top {
  top: 0;
  border-top-width: 1px;
}
.react-flow__resize-control.line.bottom {
  border-bottom-width: 1px;
  top: 100%;
}
`;
  document.head.appendChild(document.createElement("style")).appendChild(document.createTextNode(css));

  // src/pages/index.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  function Home2() {
    const { project } = useProjectContext();
    const { props, setInstance } = useEditorContext();
    if (!project) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_jsx_runtime26.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("main", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex flex-1", style: { height: 800, width: 800 }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(BlocksList, {}),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ActionPanel, {}),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
        ReactFlow,
        {
          onInit: setInstance,
          proOptions: { hideAttribution: true },
          ...props,
          fitView: true,
          children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Background$1, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ActionBar, {})
    ] }) }) });
  }

  // src/routes.tsx
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var AppRoutes = () => {
    const commonRoutes = [{ path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Home2, {}) }];
    const element = useRoutes([...commonRoutes]);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_jsx_runtime27.Fragment, { children: element });
  };

  // src/App.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(FluentProvider, { theme: webDarkTheme, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ReactFlowProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(HotkeysProvider, { initiallyActiveScopes: ["editor"], children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ProjectProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(EditorProvider, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Toolbar, {}),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(BrowserRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AppRoutes, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Ie, {})
    ] }) }) }) }) });
  }

  // src/index.tsx
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  window.React = import_react74.default;
  new EventSource("/esbuild").addEventListener("change", () => location.reload());
  var root2 = import_client.default.createRoot(document.getElementById("root"));
  root2.render(
    /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react74.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(App, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

scheduler/cjs/scheduler.development.js:
  (** @license React v0.20.0
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.6.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.11.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.11.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=index.js.map
